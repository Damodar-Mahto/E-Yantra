
Final_Success_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800200  00005f5a  00005fee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005f5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000075  00800224  00800224  00006012  2**0
                  ALLOC
  3 .stab         000023f4  00000000  00000000  00006014  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000768  00000000  00000000  00008408  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00008b70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002897  00000000  00000000  00008c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000034a  00000000  00000000  0000b4c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001061  00000000  00000000  0000b811  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b88  00000000  00000000  0000c874  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000834  00000000  00000000  0000d3fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001714  00000000  00000000  0000dc30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 30 10 	jmp	0x2060	; 0x2060 <__vector_4>
      14:	0c 94 00 10 	jmp	0x2000	; 0x2000 <__vector_5>
      18:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea e5       	ldi	r30, 0x5A	; 90
      fc:	ff e5       	ldi	r31, 0x5F	; 95
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 32       	cpi	r26, 0x24	; 36
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a4 e2       	ldi	r26, 0x24	; 36
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a9 39       	cpi	r26, 0x99	; 153
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 39 28 	call	0x5072	; 0x5072 <main>
     122:	0c 94 ab 2f 	jmp	0x5f56	; 0x5f56 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <i2c_init>:
functionality	:	initialise i2c or enabling i2cen bit
arguments		:	none
return value	:	void
*********************************/
void i2c_init()
{
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
	TWSR = 0x00;
     132:	89 eb       	ldi	r24, 0xB9	; 185
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	fc 01       	movw	r30, r24
     138:	10 82       	st	Z, r1
	TWCR = 0x00;
     13a:	8c eb       	ldi	r24, 0xBC	; 188
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	fc 01       	movw	r30, r24
     140:	10 82       	st	Z, r1
	TWCR = i2cen | done | eack;		//enables i2c , ack bit and clears TWINT bit
     142:	8c eb       	ldi	r24, 0xBC	; 188
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	24 ec       	ldi	r18, 0xC4	; 196
     148:	fc 01       	movw	r30, r24
     14a:	20 83       	st	Z, r18
	TWBR = 0X0A;					//400khz speed for TWI in 14745600 hz clock frequency
     14c:	88 eb       	ldi	r24, 0xB8	; 184
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	2a e0       	ldi	r18, 0x0A	; 10
     152:	fc 01       	movw	r30, r24
     154:	20 83       	st	Z, r18
}
     156:	df 91       	pop	r29
     158:	cf 91       	pop	r28
     15a:	08 95       	ret

0000015c <i2c_start>:
functionality	:	starts tranmission or setting start bit high
arguments		:	none
return value	:	void
********************************/
void i2c_start()
{
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	cd b7       	in	r28, 0x3d	; 61
     162:	de b7       	in	r29, 0x3e	; 62
	TWCR |= start | eack;			//starting transmission ie TWSTA bit is made high
     164:	8c eb       	ldi	r24, 0xBC	; 188
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	2c eb       	ldi	r18, 0xBC	; 188
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	f9 01       	movw	r30, r18
     16e:	20 81       	ld	r18, Z
     170:	20 66       	ori	r18, 0x60	; 96
     172:	fc 01       	movw	r30, r24
     174:	20 83       	st	Z, r18
}
     176:	df 91       	pop	r29
     178:	cf 91       	pop	r28
     17a:	08 95       	ret

0000017c <clear_twint>:
functionality	:	clears the interrupt bit
arguments		:	none	
return value	:	void
********************************/
void clear_twint()
{
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	cd b7       	in	r28, 0x3d	; 61
     182:	de b7       	in	r29, 0x3e	; 62
	TWCR |= done;					//clearing TWINT bit
     184:	8c eb       	ldi	r24, 0xBC	; 188
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	2c eb       	ldi	r18, 0xBC	; 188
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	f9 01       	movw	r30, r18
     18e:	20 81       	ld	r18, Z
     190:	20 68       	ori	r18, 0x80	; 128
     192:	fc 01       	movw	r30, r24
     194:	20 83       	st	Z, r18
}
     196:	df 91       	pop	r29
     198:	cf 91       	pop	r28
     19a:	08 95       	ret

0000019c <wait>:
functionality	:	waiting till the data is transmitted or till the interrupt bit gets high
arguments		:	none
return value	:	void
*********************************/
void wait()
{
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	cd b7       	in	r28, 0x3d	; 61
     1a2:	de b7       	in	r29, 0x3e	; 62
	while(!(TWCR & done));			//waiting for TWINT bit to be high ie to complete transmission
     1a4:	00 00       	nop
     1a6:	8c eb       	ldi	r24, 0xBC	; 188
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	fc 01       	movw	r30, r24
     1ac:	80 81       	ld	r24, Z
     1ae:	88 23       	and	r24, r24
     1b0:	d4 f7       	brge	.-12     	; 0x1a6 <wait+0xa>
}
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	08 95       	ret

000001b8 <i2c_stop>:
functionality	:	stops the transmission or sets the stop bit high
arguments		:	none
return value	:	void
********************************/
void i2c_stop()
{
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
	TWCR |= stop;					//TWSTO bit is set high
     1c0:	8c eb       	ldi	r24, 0xBC	; 188
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	2c eb       	ldi	r18, 0xBC	; 188
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	f9 01       	movw	r30, r18
     1ca:	20 81       	ld	r18, Z
     1cc:	20 61       	ori	r18, 0x10	; 16
     1ce:	fc 01       	movw	r30, r24
     1d0:	20 83       	st	Z, r18
}
     1d2:	df 91       	pop	r29
     1d4:	cf 91       	pop	r28
     1d6:	08 95       	ret

000001d8 <i2c_getstatus>:
functionality	:	to find the status of the i2c
arguments		:	none
return value	:	UINT8 (returns the status)
********************************/
UINT8 i2c_getstatus()
{
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	0f 92       	push	r0
     1de:	cd b7       	in	r28, 0x3d	; 61
     1e0:	de b7       	in	r29, 0x3e	; 62
	UINT8 status;
	status = TWSR & 0xF8;			//5 bits of TWSR register gives the status
     1e2:	89 eb       	ldi	r24, 0xB9	; 185
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	fc 01       	movw	r30, r24
     1e8:	80 81       	ld	r24, Z
     1ea:	88 7f       	andi	r24, 0xF8	; 248
     1ec:	89 83       	std	Y+1, r24	; 0x01
	return status;
     1ee:	89 81       	ldd	r24, Y+1	; 0x01
}
     1f0:	0f 90       	pop	r0
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <i2c_write>:
functionality	:	writes a byte of data to TWDR register
arguments		:	UINT8 data(the byte which is to be written)
return value	:	void
*********************************/
void i2c_write(UINT8 data)
{
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	0f 92       	push	r0
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
     202:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data;					//writing data or add to TWDR register
     204:	8b eb       	ldi	r24, 0xBB	; 187
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	29 81       	ldd	r18, Y+1	; 0x01
     20a:	fc 01       	movw	r30, r24
     20c:	20 83       	st	Z, r18
}
     20e:	0f 90       	pop	r0
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28
     214:	08 95       	ret

00000216 <i2c_get>:
functionality	:	reads a byte of data from TWDR register
arguments		:	INT8 *data (points to the byte to which the data needs to be copied)
return value	:	void
*********************************/
void i2c_get(INT8 *data)
{
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
     21a:	0f 92       	push	r0
     21c:	0f 92       	push	r0
     21e:	cd b7       	in	r28, 0x3d	; 61
     220:	de b7       	in	r29, 0x3e	; 62
     222:	9a 83       	std	Y+2, r25	; 0x02
     224:	89 83       	std	Y+1, r24	; 0x01
	*data = TWDR;					//copying data from TWDR register
     226:	8b eb       	ldi	r24, 0xBB	; 187
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	fc 01       	movw	r30, r24
     22c:	80 81       	ld	r24, Z
     22e:	28 2f       	mov	r18, r24
     230:	89 81       	ldd	r24, Y+1	; 0x01
     232:	9a 81       	ldd	r25, Y+2	; 0x02
     234:	fc 01       	movw	r30, r24
     236:	20 83       	st	Z, r18
}
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	08 95       	ret

00000242 <i2c_sendbyte>:
					UINT8 int_add (address of the internal register of the slave),
					UINT8 data(byte of data which needs to be sent)
return value	:	enum (value which tells if the transmission was succesfull or not)
********************************/
STAT i2c_sendbyte(UINT8 dev_add, UINT8 int_add,UINT8 data)
{
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	00 d0       	rcall	.+0      	; 0x248 <i2c_sendbyte+0x6>
     248:	cd b7       	in	r28, 0x3d	; 61
     24a:	de b7       	in	r29, 0x3e	; 62
     24c:	89 83       	std	Y+1, r24	; 0x01
     24e:	6a 83       	std	Y+2, r22	; 0x02
     250:	4b 83       	std	Y+3, r20	; 0x03
	i2c_start();					//starting transmission
     252:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_start>
	wait();							//then wait for succesfull transmission
     256:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus() != 0x08)		//check status
     25a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     25e:	88 30       	cpi	r24, 0x08	; 8
     260:	11 f0       	breq	.+4      	; 0x266 <i2c_sendbyte+0x24>
		return START_ERR;
     262:	88 ef       	ldi	r24, 0xF8	; 248
     264:	33 c0       	rjmp	.+102    	; 0x2cc <i2c_sendbyte+0x8a>

	i2c_write(dev_add | write);		//writing slave + write to TWDR
     266:	89 81       	ldd	r24, Y+1	; 0x01
     268:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_write>
	TWCR &= ~start;
     26c:	8c eb       	ldi	r24, 0xBC	; 188
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	2c eb       	ldi	r18, 0xBC	; 188
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	f9 01       	movw	r30, r18
     276:	20 81       	ld	r18, Z
     278:	2f 7d       	andi	r18, 0xDF	; 223
     27a:	fc 01       	movw	r30, r24
     27c:	20 83       	st	Z, r18
	clear_twint();					//clear TWINT bit starts transmission
     27e:	0e 94 be 00 	call	0x17c	; 0x17c <clear_twint>
	wait();
     282:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus()!=0x18)
     286:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     28a:	88 31       	cpi	r24, 0x18	; 24
     28c:	11 f0       	breq	.+4      	; 0x292 <i2c_sendbyte+0x50>
		return SLAVEW_ERR;
     28e:	89 ef       	ldi	r24, 0xF9	; 249
     290:	1d c0       	rjmp	.+58     	; 0x2cc <i2c_sendbyte+0x8a>

	i2c_write(int_add);				//writing int_add to TWDR
     292:	8a 81       	ldd	r24, Y+2	; 0x02
     294:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_write>
	clear_twint();
     298:	0e 94 be 00 	call	0x17c	; 0x17c <clear_twint>
	wait();
     29c:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus()!=0x28)
     2a0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     2a4:	88 32       	cpi	r24, 0x28	; 40
     2a6:	11 f0       	breq	.+4      	; 0x2ac <i2c_sendbyte+0x6a>
	{	return WRITE_ERR;	}
     2a8:	8b ef       	ldi	r24, 0xFB	; 251
     2aa:	10 c0       	rjmp	.+32     	; 0x2cc <i2c_sendbyte+0x8a>

	i2c_write(data);				//writing one byte of data...to write multi byte | with 0x80
     2ac:	8b 81       	ldd	r24, Y+3	; 0x03
     2ae:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_write>
	clear_twint();
     2b2:	0e 94 be 00 	call	0x17c	; 0x17c <clear_twint>
	wait();
     2b6:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus()!=0x28)
     2ba:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     2be:	88 32       	cpi	r24, 0x28	; 40
     2c0:	11 f0       	breq	.+4      	; 0x2c6 <i2c_sendbyte+0x84>
		return WRITE_ERR;
     2c2:	8b ef       	ldi	r24, 0xFB	; 251
     2c4:	03 c0       	rjmp	.+6      	; 0x2cc <i2c_sendbyte+0x8a>

	i2c_stop();
     2c6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <i2c_stop>

	return OK;
     2ca:	80 e0       	ldi	r24, 0x00	; 0
}
     2cc:	0f 90       	pop	r0
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	08 95       	ret

000002d8 <i2c_getbyte>:
					UINT8 int_add (address of the internal register of the slave),
					INT8 *data(points to the byte to which the data needs to be copied)					
return value	:	enum (value which tells if the transmission was succesfull or not)
********************************/
STAT i2c_getbyte(UINT8 dev_add,UINT8 int_add,INT8 *data)
{
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	00 d0       	rcall	.+0      	; 0x2de <i2c_getbyte+0x6>
     2de:	0f 92       	push	r0
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
     2e4:	89 83       	std	Y+1, r24	; 0x01
     2e6:	6a 83       	std	Y+2, r22	; 0x02
     2e8:	5c 83       	std	Y+4, r21	; 0x04
     2ea:	4b 83       	std	Y+3, r20	; 0x03
	i2c_start();					//starting transmission
     2ec:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_start>
	wait();							//then wait for succesfull transmission
     2f0:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus() != 0x08)		//checking status
     2f4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     2f8:	88 30       	cpi	r24, 0x08	; 8
     2fa:	11 f0       	breq	.+4      	; 0x300 <i2c_getbyte+0x28>
		return START_ERR;
     2fc:	88 ef       	ldi	r24, 0xF8	; 248
     2fe:	5e c0       	rjmp	.+188    	; 0x3bc <i2c_getbyte+0xe4>

	i2c_write(dev_add | write);		//writing slave + write to TWDR
     300:	89 81       	ldd	r24, Y+1	; 0x01
     302:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_write>
	TWCR &= ~start;
     306:	8c eb       	ldi	r24, 0xBC	; 188
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	2c eb       	ldi	r18, 0xBC	; 188
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	f9 01       	movw	r30, r18
     310:	20 81       	ld	r18, Z
     312:	2f 7d       	andi	r18, 0xDF	; 223
     314:	fc 01       	movw	r30, r24
     316:	20 83       	st	Z, r18
	clear_twint();					//clear TWINT bit and starts transmission
     318:	0e 94 be 00 	call	0x17c	; 0x17c <clear_twint>
	wait();
     31c:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus()!=0x18)
     320:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     324:	88 31       	cpi	r24, 0x18	; 24
     326:	11 f0       	breq	.+4      	; 0x32c <i2c_getbyte+0x54>
		return SLAVEW_ERR;	
     328:	89 ef       	ldi	r24, 0xF9	; 249
     32a:	48 c0       	rjmp	.+144    	; 0x3bc <i2c_getbyte+0xe4>

	i2c_write(int_add);				//writing int_add to TWDR
     32c:	8a 81       	ldd	r24, Y+2	; 0x02
     32e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_write>
	clear_twint();
     332:	0e 94 be 00 	call	0x17c	; 0x17c <clear_twint>
	wait();
     336:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus()!=0x28)
     33a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     33e:	88 32       	cpi	r24, 0x28	; 40
     340:	11 f0       	breq	.+4      	; 0x346 <i2c_getbyte+0x6e>
		return WRITE_ERR;
     342:	8b ef       	ldi	r24, 0xFB	; 251
     344:	3b c0       	rjmp	.+118    	; 0x3bc <i2c_getbyte+0xe4>

	i2c_start();					//repeated start
     346:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_start>
	wait();
     34a:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus() != 0x10)
     34e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     352:	80 31       	cpi	r24, 0x10	; 16
     354:	11 f0       	breq	.+4      	; 0x35a <i2c_getbyte+0x82>
		return REPSTART_ERR;
     356:	8d ef       	ldi	r24, 0xFD	; 253
     358:	31 c0       	rjmp	.+98     	; 0x3bc <i2c_getbyte+0xe4>

	i2c_write(dev_add | read);		//writing slave + read to TWDR register
     35a:	89 81       	ldd	r24, Y+1	; 0x01
     35c:	81 60       	ori	r24, 0x01	; 1
     35e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_write>
	TWCR &= ~start;
     362:	8c eb       	ldi	r24, 0xBC	; 188
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	2c eb       	ldi	r18, 0xBC	; 188
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	f9 01       	movw	r30, r18
     36c:	20 81       	ld	r18, Z
     36e:	2f 7d       	andi	r18, 0xDF	; 223
     370:	fc 01       	movw	r30, r24
     372:	20 83       	st	Z, r18
	clear_twint();
     374:	0e 94 be 00 	call	0x17c	; 0x17c <clear_twint>
	wait();
     378:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus()!=0x40)
     37c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     380:	80 34       	cpi	r24, 0x40	; 64
     382:	11 f0       	breq	.+4      	; 0x388 <i2c_getbyte+0xb0>
		return SLAVER_ERR;
     384:	8a ef       	ldi	r24, 0xFA	; 250
     386:	1a c0       	rjmp	.+52     	; 0x3bc <i2c_getbyte+0xe4>

	TWCR &= ~eack;
     388:	8c eb       	ldi	r24, 0xBC	; 188
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	2c eb       	ldi	r18, 0xBC	; 188
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	f9 01       	movw	r30, r18
     392:	20 81       	ld	r18, Z
     394:	2f 7b       	andi	r18, 0xBF	; 191
     396:	fc 01       	movw	r30, r24
     398:	20 83       	st	Z, r18
	clear_twint();
     39a:	0e 94 be 00 	call	0x17c	; 0x17c <clear_twint>
	wait();
     39e:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus()!=0x58)
     3a2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     3a6:	88 35       	cpi	r24, 0x58	; 88
     3a8:	11 f0       	breq	.+4      	; 0x3ae <i2c_getbyte+0xd6>
		return READ_ERR;
     3aa:	8c ef       	ldi	r24, 0xFC	; 252
     3ac:	07 c0       	rjmp	.+14     	; 0x3bc <i2c_getbyte+0xe4>

	i2c_get(data);					//getting data to the char pointer
     3ae:	8b 81       	ldd	r24, Y+3	; 0x03
     3b0:	9c 81       	ldd	r25, Y+4	; 0x04
     3b2:	0e 94 0b 01 	call	0x216	; 0x216 <i2c_get>

	i2c_stop();						//stopping the transmission
     3b6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <i2c_stop>

	return OK;
     3ba:	80 e0       	ldi	r24, 0x00	; 0
}
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	08 95       	ret

000003ca <i2c_read_multi_byte>:
					UINT16 n(no of bytes which needs to be read)
					INT8 *data(points to the byte to which the data needs to be copied)	
return value	:	enum (value which tells if the transmission was succesfull or not)
*********************************/
STAT i2c_read_multi_byte(UINT8 dev_add,UINT8 int_add,UINT16 n,INT8 *data)
{
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	cd b7       	in	r28, 0x3d	; 61
     3d0:	de b7       	in	r29, 0x3e	; 62
     3d2:	28 97       	sbiw	r28, 0x08	; 8
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	f8 94       	cli
     3d8:	de bf       	out	0x3e, r29	; 62
     3da:	0f be       	out	0x3f, r0	; 63
     3dc:	cd bf       	out	0x3d, r28	; 61
     3de:	8b 83       	std	Y+3, r24	; 0x03
     3e0:	6c 83       	std	Y+4, r22	; 0x04
     3e2:	5e 83       	std	Y+6, r21	; 0x06
     3e4:	4d 83       	std	Y+5, r20	; 0x05
     3e6:	38 87       	std	Y+8, r19	; 0x08
     3e8:	2f 83       	std	Y+7, r18	; 0x07
	UINT16 i;
	i2c_start();					//starting transmission
     3ea:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_start>
	wait();							//then wait for succesfull transmission
     3ee:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus() != 0x08)		//check status
     3f2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     3f6:	88 30       	cpi	r24, 0x08	; 8
     3f8:	11 f0       	breq	.+4      	; 0x3fe <i2c_read_multi_byte+0x34>
		return START_ERR;
     3fa:	88 ef       	ldi	r24, 0xF8	; 248
     3fc:	99 c0       	rjmp	.+306    	; 0x530 <i2c_read_multi_byte+0x166>

	i2c_write(dev_add | write);		//writing slave + write to TWDR
     3fe:	8b 81       	ldd	r24, Y+3	; 0x03
     400:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_write>
	TWCR &=~start;					//to avoid transmitting start bit again
     404:	8c eb       	ldi	r24, 0xBC	; 188
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	2c eb       	ldi	r18, 0xBC	; 188
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	f9 01       	movw	r30, r18
     40e:	20 81       	ld	r18, Z
     410:	2f 7d       	andi	r18, 0xDF	; 223
     412:	fc 01       	movw	r30, r24
     414:	20 83       	st	Z, r18
	clear_twint();					//clear TWINT bit and starts transmission
     416:	0e 94 be 00 	call	0x17c	; 0x17c <clear_twint>
	wait();
     41a:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus()!=0x18)
     41e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     422:	88 31       	cpi	r24, 0x18	; 24
     424:	11 f0       	breq	.+4      	; 0x42a <i2c_read_multi_byte+0x60>
		return SLAVEW_ERR;
     426:	89 ef       	ldi	r24, 0xF9	; 249
     428:	83 c0       	rjmp	.+262    	; 0x530 <i2c_read_multi_byte+0x166>

	i2c_write(int_add | 0x80);		//to read multi-byte logical or(|) the register with 0x80
     42a:	8c 81       	ldd	r24, Y+4	; 0x04
     42c:	80 68       	ori	r24, 0x80	; 128
     42e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_write>
	clear_twint();
     432:	0e 94 be 00 	call	0x17c	; 0x17c <clear_twint>
	wait();
     436:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus()!=0x28)
     43a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     43e:	88 32       	cpi	r24, 0x28	; 40
     440:	11 f0       	breq	.+4      	; 0x446 <i2c_read_multi_byte+0x7c>
		return WRITE_ERR;
     442:	8b ef       	ldi	r24, 0xFB	; 251
     444:	75 c0       	rjmp	.+234    	; 0x530 <i2c_read_multi_byte+0x166>

	i2c_start();					//repeated start
     446:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_start>
	wait();
     44a:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus() != 0x10)
     44e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     452:	80 31       	cpi	r24, 0x10	; 16
     454:	11 f0       	breq	.+4      	; 0x45a <i2c_read_multi_byte+0x90>
		return REPSTART_ERR;
     456:	8d ef       	ldi	r24, 0xFD	; 253
     458:	6b c0       	rjmp	.+214    	; 0x530 <i2c_read_multi_byte+0x166>

	i2c_write(dev_add | read);		//writing slave + read to TWDR register
     45a:	8b 81       	ldd	r24, Y+3	; 0x03
     45c:	81 60       	ori	r24, 0x01	; 1
     45e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_write>
	TWCR &= ~start;
     462:	8c eb       	ldi	r24, 0xBC	; 188
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	2c eb       	ldi	r18, 0xBC	; 188
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	f9 01       	movw	r30, r18
     46c:	20 81       	ld	r18, Z
     46e:	2f 7d       	andi	r18, 0xDF	; 223
     470:	fc 01       	movw	r30, r24
     472:	20 83       	st	Z, r18
	clear_twint();
     474:	0e 94 be 00 	call	0x17c	; 0x17c <clear_twint>
	wait();
     478:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus()!=0x40)
     47c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     480:	80 34       	cpi	r24, 0x40	; 64
     482:	11 f0       	breq	.+4      	; 0x488 <i2c_read_multi_byte+0xbe>
		return SLAVER_ERR;
     484:	8a ef       	ldi	r24, 0xFA	; 250
     486:	54 c0       	rjmp	.+168    	; 0x530 <i2c_read_multi_byte+0x166>

	for(i=0;i<n;i++)
     488:	1a 82       	std	Y+2, r1	; 0x02
     48a:	19 82       	std	Y+1, r1	; 0x01
     48c:	46 c0       	rjmp	.+140    	; 0x51a <i2c_read_multi_byte+0x150>
	{
		if(i==(n-1))				//if last byte send nack
     48e:	8d 81       	ldd	r24, Y+5	; 0x05
     490:	9e 81       	ldd	r25, Y+6	; 0x06
     492:	9c 01       	movw	r18, r24
     494:	21 50       	subi	r18, 0x01	; 1
     496:	30 40       	sbci	r19, 0x00	; 0
     498:	89 81       	ldd	r24, Y+1	; 0x01
     49a:	9a 81       	ldd	r25, Y+2	; 0x02
     49c:	28 17       	cp	r18, r24
     49e:	39 07       	cpc	r19, r25
     4a0:	e1 f4       	brne	.+56     	; 0x4da <i2c_read_multi_byte+0x110>
		{
			TWCR &= ~eack;			//sending NACK since it is the last bit
     4a2:	8c eb       	ldi	r24, 0xBC	; 188
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	2c eb       	ldi	r18, 0xBC	; 188
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	f9 01       	movw	r30, r18
     4ac:	20 81       	ld	r18, Z
     4ae:	2f 7b       	andi	r18, 0xBF	; 191
     4b0:	fc 01       	movw	r30, r24
     4b2:	20 83       	st	Z, r18
			clear_twint();
     4b4:	0e 94 be 00 	call	0x17c	; 0x17c <clear_twint>
			wait();
     4b8:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
			if(i2c_getstatus()!=0x58)
     4bc:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     4c0:	88 35       	cpi	r24, 0x58	; 88
     4c2:	11 f0       	breq	.+4      	; 0x4c8 <i2c_read_multi_byte+0xfe>
				return NACK_ERR;	
     4c4:	8f ef       	ldi	r24, 0xFF	; 255
     4c6:	34 c0       	rjmp	.+104    	; 0x530 <i2c_read_multi_byte+0x166>
			i2c_get(&data[i]);		
     4c8:	2f 81       	ldd	r18, Y+7	; 0x07
     4ca:	38 85       	ldd	r19, Y+8	; 0x08
     4cc:	89 81       	ldd	r24, Y+1	; 0x01
     4ce:	9a 81       	ldd	r25, Y+2	; 0x02
     4d0:	82 0f       	add	r24, r18
     4d2:	93 1f       	adc	r25, r19
     4d4:	0e 94 0b 01 	call	0x216	; 0x216 <i2c_get>
     4d8:	1b c0       	rjmp	.+54     	; 0x510 <i2c_read_multi_byte+0x146>
		}
		else
		{
			TWCR |= eack;			//sending ACK
     4da:	8c eb       	ldi	r24, 0xBC	; 188
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	2c eb       	ldi	r18, 0xBC	; 188
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	f9 01       	movw	r30, r18
     4e4:	20 81       	ld	r18, Z
     4e6:	20 64       	ori	r18, 0x40	; 64
     4e8:	fc 01       	movw	r30, r24
     4ea:	20 83       	st	Z, r18
			clear_twint();
     4ec:	0e 94 be 00 	call	0x17c	; 0x17c <clear_twint>
			wait();
     4f0:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
			if(i2c_getstatus()!=0x50)
     4f4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     4f8:	80 35       	cpi	r24, 0x50	; 80
     4fa:	11 f0       	breq	.+4      	; 0x500 <i2c_read_multi_byte+0x136>
				return ACK_ERR;	
     4fc:	8e ef       	ldi	r24, 0xFE	; 254
     4fe:	18 c0       	rjmp	.+48     	; 0x530 <i2c_read_multi_byte+0x166>

			i2c_get(&data[i]);		//getting required data
     500:	2f 81       	ldd	r18, Y+7	; 0x07
     502:	38 85       	ldd	r19, Y+8	; 0x08
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	9a 81       	ldd	r25, Y+2	; 0x02
     508:	82 0f       	add	r24, r18
     50a:	93 1f       	adc	r25, r19
     50c:	0e 94 0b 01 	call	0x216	; 0x216 <i2c_get>
	clear_twint();
	wait();
	if(i2c_getstatus()!=0x40)
		return SLAVER_ERR;

	for(i=0;i<n;i++)
     510:	89 81       	ldd	r24, Y+1	; 0x01
     512:	9a 81       	ldd	r25, Y+2	; 0x02
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	9a 83       	std	Y+2, r25	; 0x02
     518:	89 83       	std	Y+1, r24	; 0x01
     51a:	29 81       	ldd	r18, Y+1	; 0x01
     51c:	3a 81       	ldd	r19, Y+2	; 0x02
     51e:	8d 81       	ldd	r24, Y+5	; 0x05
     520:	9e 81       	ldd	r25, Y+6	; 0x06
     522:	28 17       	cp	r18, r24
     524:	39 07       	cpc	r19, r25
     526:	08 f4       	brcc	.+2      	; 0x52a <i2c_read_multi_byte+0x160>
     528:	b2 cf       	rjmp	.-156    	; 0x48e <i2c_read_multi_byte+0xc4>

			i2c_get(&data[i]);		//getting required data
		}
	}

	i2c_stop();						//stopping the transmission
     52a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <i2c_stop>

	return OK;	
     52e:	80 e0       	ldi	r24, 0x00	; 0
}
     530:	28 96       	adiw	r28, 0x08	; 8
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	f8 94       	cli
     536:	de bf       	out	0x3e, r29	; 62
     538:	0f be       	out	0x3f, r0	; 63
     53a:	cd bf       	out	0x3d, r28	; 61
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <lcd_set_4bit>:



//Function to Reset LCD
void lcd_set_4bit()
{
     542:	0f 93       	push	r16
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
     54e:	c0 57       	subi	r28, 0x70	; 112
     550:	d0 40       	sbci	r29, 0x00	; 0
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	f8 94       	cli
     556:	de bf       	out	0x3e, r29	; 62
     558:	0f be       	out	0x3f, r0	; 63
     55a:	cd bf       	out	0x3d, r28	; 61
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	a0 e8       	ldi	r26, 0x80	; 128
     562:	bf e3       	ldi	r27, 0x3F	; 63
     564:	89 83       	std	Y+1, r24	; 0x01
     566:	9a 83       	std	Y+2, r25	; 0x02
     568:	ab 83       	std	Y+3, r26	; 0x03
     56a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     56c:	69 81       	ldd	r22, Y+1	; 0x01
     56e:	7a 81       	ldd	r23, Y+2	; 0x02
     570:	8b 81       	ldd	r24, Y+3	; 0x03
     572:	9c 81       	ldd	r25, Y+4	; 0x04
     574:	26 e6       	ldi	r18, 0x66	; 102
     576:	36 e6       	ldi	r19, 0x66	; 102
     578:	46 e6       	ldi	r20, 0x66	; 102
     57a:	55 e4       	ldi	r21, 0x45	; 69
     57c:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
     584:	8d 83       	std	Y+5, r24	; 0x05
     586:	9e 83       	std	Y+6, r25	; 0x06
     588:	af 83       	std	Y+7, r26	; 0x07
     58a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     58c:	11 e0       	ldi	r17, 0x01	; 1
     58e:	6d 81       	ldd	r22, Y+5	; 0x05
     590:	7e 81       	ldd	r23, Y+6	; 0x06
     592:	8f 81       	ldd	r24, Y+7	; 0x07
     594:	98 85       	ldd	r25, Y+8	; 0x08
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	40 e8       	ldi	r20, 0x80	; 128
     59c:	5f e3       	ldi	r21, 0x3F	; 63
     59e:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
     5a2:	88 23       	and	r24, r24
     5a4:	0c f0       	brlt	.+2      	; 0x5a8 <lcd_set_4bit+0x66>
     5a6:	10 e0       	ldi	r17, 0x00	; 0
     5a8:	11 23       	and	r17, r17
     5aa:	29 f0       	breq	.+10     	; 0x5b6 <lcd_set_4bit+0x74>
		__ticks = 1;
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	9a 87       	std	Y+10, r25	; 0x0a
     5b2:	89 87       	std	Y+9, r24	; 0x09
     5b4:	46 c0       	rjmp	.+140    	; 0x642 <lcd_set_4bit+0x100>
	else if (__tmp > 65535)
     5b6:	11 e0       	ldi	r17, 0x01	; 1
     5b8:	6d 81       	ldd	r22, Y+5	; 0x05
     5ba:	7e 81       	ldd	r23, Y+6	; 0x06
     5bc:	8f 81       	ldd	r24, Y+7	; 0x07
     5be:	98 85       	ldd	r25, Y+8	; 0x08
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	3f ef       	ldi	r19, 0xFF	; 255
     5c4:	4f e7       	ldi	r20, 0x7F	; 127
     5c6:	57 e4       	ldi	r21, 0x47	; 71
     5c8:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
     5cc:	18 16       	cp	r1, r24
     5ce:	0c f0       	brlt	.+2      	; 0x5d2 <lcd_set_4bit+0x90>
     5d0:	10 e0       	ldi	r17, 0x00	; 0
     5d2:	11 23       	and	r17, r17
     5d4:	61 f1       	breq	.+88     	; 0x62e <lcd_set_4bit+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5d6:	69 81       	ldd	r22, Y+1	; 0x01
     5d8:	7a 81       	ldd	r23, Y+2	; 0x02
     5da:	8b 81       	ldd	r24, Y+3	; 0x03
     5dc:	9c 81       	ldd	r25, Y+4	; 0x04
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	40 e2       	ldi	r20, 0x20	; 32
     5e4:	51 e4       	ldi	r21, 0x41	; 65
     5e6:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
     5ea:	dc 01       	movw	r26, r24
     5ec:	cb 01       	movw	r24, r22
     5ee:	bc 01       	movw	r22, r24
     5f0:	cd 01       	movw	r24, r26
     5f2:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
     5f6:	dc 01       	movw	r26, r24
     5f8:	cb 01       	movw	r24, r22
     5fa:	9a 87       	std	Y+10, r25	; 0x0a
     5fc:	89 87       	std	Y+9, r24	; 0x09
     5fe:	12 c0       	rjmp	.+36     	; 0x624 <lcd_set_4bit+0xe2>
     600:	80 e7       	ldi	r24, 0x70	; 112
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	9c 87       	std	Y+12, r25	; 0x0c
     606:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     608:	8b 85       	ldd	r24, Y+11	; 0x0b
     60a:	9c 85       	ldd	r25, Y+12	; 0x0c
     60c:	8c 01       	movw	r16, r24
     60e:	c8 01       	movw	r24, r16
     610:	01 97       	sbiw	r24, 0x01	; 1
     612:	f1 f7       	brne	.-4      	; 0x610 <lcd_set_4bit+0xce>
     614:	8c 01       	movw	r16, r24
     616:	1c 87       	std	Y+12, r17	; 0x0c
     618:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     61a:	89 85       	ldd	r24, Y+9	; 0x09
     61c:	9a 85       	ldd	r25, Y+10	; 0x0a
     61e:	01 97       	sbiw	r24, 0x01	; 1
     620:	9a 87       	std	Y+10, r25	; 0x0a
     622:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     624:	89 85       	ldd	r24, Y+9	; 0x09
     626:	9a 85       	ldd	r25, Y+10	; 0x0a
     628:	00 97       	sbiw	r24, 0x00	; 0
     62a:	51 f7       	brne	.-44     	; 0x600 <lcd_set_4bit+0xbe>
     62c:	17 c0       	rjmp	.+46     	; 0x65c <lcd_set_4bit+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     62e:	6d 81       	ldd	r22, Y+5	; 0x05
     630:	7e 81       	ldd	r23, Y+6	; 0x06
     632:	8f 81       	ldd	r24, Y+7	; 0x07
     634:	98 85       	ldd	r25, Y+8	; 0x08
     636:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
     63a:	dc 01       	movw	r26, r24
     63c:	cb 01       	movw	r24, r22
     63e:	9a 87       	std	Y+10, r25	; 0x0a
     640:	89 87       	std	Y+9, r24	; 0x09
     642:	89 85       	ldd	r24, Y+9	; 0x09
     644:	9a 85       	ldd	r25, Y+10	; 0x0a
     646:	9e 87       	std	Y+14, r25	; 0x0e
     648:	8d 87       	std	Y+13, r24	; 0x0d
     64a:	8d 85       	ldd	r24, Y+13	; 0x0d
     64c:	9e 85       	ldd	r25, Y+14	; 0x0e
     64e:	8c 01       	movw	r16, r24
     650:	f8 01       	movw	r30, r16
     652:	31 97       	sbiw	r30, 0x01	; 1
     654:	f1 f7       	brne	.-4      	; 0x652 <lcd_set_4bit+0x110>
     656:	8f 01       	movw	r16, r30
     658:	1e 87       	std	Y+14, r17	; 0x0e
     65a:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     65c:	88 e2       	ldi	r24, 0x28	; 40
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	28 e2       	ldi	r18, 0x28	; 40
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	f9 01       	movw	r30, r18
     666:	20 81       	ld	r18, Z
     668:	2e 7f       	andi	r18, 0xFE	; 254
     66a:	fc 01       	movw	r30, r24
     66c:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     66e:	88 e2       	ldi	r24, 0x28	; 40
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	28 e2       	ldi	r18, 0x28	; 40
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	f9 01       	movw	r30, r18
     678:	20 81       	ld	r18, Z
     67a:	2d 7f       	andi	r18, 0xFD	; 253
     67c:	fc 01       	movw	r30, r24
     67e:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3
     680:	88 e2       	ldi	r24, 0x28	; 40
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	20 e3       	ldi	r18, 0x30	; 48
     686:	fc 01       	movw	r30, r24
     688:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     68a:	88 e2       	ldi	r24, 0x28	; 40
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	28 e2       	ldi	r18, 0x28	; 40
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	f9 01       	movw	r30, r18
     694:	20 81       	ld	r18, Z
     696:	24 60       	ori	r18, 0x04	; 4
     698:	fc 01       	movw	r30, r24
     69a:	20 83       	st	Z, r18
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	a0 ea       	ldi	r26, 0xA0	; 160
     6a2:	b0 e4       	ldi	r27, 0x40	; 64
     6a4:	8f 87       	std	Y+15, r24	; 0x0f
     6a6:	98 8b       	std	Y+16, r25	; 0x10
     6a8:	a9 8b       	std	Y+17, r26	; 0x11
     6aa:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     6ac:	6f 85       	ldd	r22, Y+15	; 0x0f
     6ae:	78 89       	ldd	r23, Y+16	; 0x10
     6b0:	89 89       	ldd	r24, Y+17	; 0x11
     6b2:	9a 89       	ldd	r25, Y+18	; 0x12
     6b4:	26 e6       	ldi	r18, 0x66	; 102
     6b6:	36 e6       	ldi	r19, 0x66	; 102
     6b8:	46 e6       	ldi	r20, 0x66	; 102
     6ba:	55 e4       	ldi	r21, 0x45	; 69
     6bc:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
     6c0:	dc 01       	movw	r26, r24
     6c2:	cb 01       	movw	r24, r22
     6c4:	8b 8b       	std	Y+19, r24	; 0x13
     6c6:	9c 8b       	std	Y+20, r25	; 0x14
     6c8:	ad 8b       	std	Y+21, r26	; 0x15
     6ca:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     6cc:	11 e0       	ldi	r17, 0x01	; 1
     6ce:	6b 89       	ldd	r22, Y+19	; 0x13
     6d0:	7c 89       	ldd	r23, Y+20	; 0x14
     6d2:	8d 89       	ldd	r24, Y+21	; 0x15
     6d4:	9e 89       	ldd	r25, Y+22	; 0x16
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	40 e8       	ldi	r20, 0x80	; 128
     6dc:	5f e3       	ldi	r21, 0x3F	; 63
     6de:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
     6e2:	88 23       	and	r24, r24
     6e4:	0c f0       	brlt	.+2      	; 0x6e8 <lcd_set_4bit+0x1a6>
     6e6:	10 e0       	ldi	r17, 0x00	; 0
     6e8:	11 23       	and	r17, r17
     6ea:	29 f0       	breq	.+10     	; 0x6f6 <lcd_set_4bit+0x1b4>
		__ticks = 1;
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	98 8f       	std	Y+24, r25	; 0x18
     6f2:	8f 8b       	std	Y+23, r24	; 0x17
     6f4:	46 c0       	rjmp	.+140    	; 0x782 <lcd_set_4bit+0x240>
	else if (__tmp > 65535)
     6f6:	11 e0       	ldi	r17, 0x01	; 1
     6f8:	6b 89       	ldd	r22, Y+19	; 0x13
     6fa:	7c 89       	ldd	r23, Y+20	; 0x14
     6fc:	8d 89       	ldd	r24, Y+21	; 0x15
     6fe:	9e 89       	ldd	r25, Y+22	; 0x16
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	3f ef       	ldi	r19, 0xFF	; 255
     704:	4f e7       	ldi	r20, 0x7F	; 127
     706:	57 e4       	ldi	r21, 0x47	; 71
     708:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
     70c:	18 16       	cp	r1, r24
     70e:	0c f0       	brlt	.+2      	; 0x712 <lcd_set_4bit+0x1d0>
     710:	10 e0       	ldi	r17, 0x00	; 0
     712:	11 23       	and	r17, r17
     714:	61 f1       	breq	.+88     	; 0x76e <lcd_set_4bit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     716:	6f 85       	ldd	r22, Y+15	; 0x0f
     718:	78 89       	ldd	r23, Y+16	; 0x10
     71a:	89 89       	ldd	r24, Y+17	; 0x11
     71c:	9a 89       	ldd	r25, Y+18	; 0x12
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	40 e2       	ldi	r20, 0x20	; 32
     724:	51 e4       	ldi	r21, 0x41	; 65
     726:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
     72a:	dc 01       	movw	r26, r24
     72c:	cb 01       	movw	r24, r22
     72e:	bc 01       	movw	r22, r24
     730:	cd 01       	movw	r24, r26
     732:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
     736:	dc 01       	movw	r26, r24
     738:	cb 01       	movw	r24, r22
     73a:	98 8f       	std	Y+24, r25	; 0x18
     73c:	8f 8b       	std	Y+23, r24	; 0x17
     73e:	12 c0       	rjmp	.+36     	; 0x764 <lcd_set_4bit+0x222>
     740:	80 e7       	ldi	r24, 0x70	; 112
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	9a 8f       	std	Y+26, r25	; 0x1a
     746:	89 8f       	std	Y+25, r24	; 0x19
     748:	89 8d       	ldd	r24, Y+25	; 0x19
     74a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     74c:	8c 01       	movw	r16, r24
     74e:	c8 01       	movw	r24, r16
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	f1 f7       	brne	.-4      	; 0x750 <lcd_set_4bit+0x20e>
     754:	8c 01       	movw	r16, r24
     756:	1a 8f       	std	Y+26, r17	; 0x1a
     758:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     75a:	8f 89       	ldd	r24, Y+23	; 0x17
     75c:	98 8d       	ldd	r25, Y+24	; 0x18
     75e:	01 97       	sbiw	r24, 0x01	; 1
     760:	98 8f       	std	Y+24, r25	; 0x18
     762:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     764:	8f 89       	ldd	r24, Y+23	; 0x17
     766:	98 8d       	ldd	r25, Y+24	; 0x18
     768:	00 97       	sbiw	r24, 0x00	; 0
     76a:	51 f7       	brne	.-44     	; 0x740 <lcd_set_4bit+0x1fe>
     76c:	17 c0       	rjmp	.+46     	; 0x79c <lcd_set_4bit+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     76e:	6b 89       	ldd	r22, Y+19	; 0x13
     770:	7c 89       	ldd	r23, Y+20	; 0x14
     772:	8d 89       	ldd	r24, Y+21	; 0x15
     774:	9e 89       	ldd	r25, Y+22	; 0x16
     776:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
     77a:	dc 01       	movw	r26, r24
     77c:	cb 01       	movw	r24, r22
     77e:	98 8f       	std	Y+24, r25	; 0x18
     780:	8f 8b       	std	Y+23, r24	; 0x17
     782:	8f 89       	ldd	r24, Y+23	; 0x17
     784:	98 8d       	ldd	r25, Y+24	; 0x18
     786:	9c 8f       	std	Y+28, r25	; 0x1c
     788:	8b 8f       	std	Y+27, r24	; 0x1b
     78a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     78c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     78e:	8c 01       	movw	r16, r24
     790:	f8 01       	movw	r30, r16
     792:	31 97       	sbiw	r30, 0x01	; 1
     794:	f1 f7       	brne	.-4      	; 0x792 <lcd_set_4bit+0x250>
     796:	8f 01       	movw	r16, r30
     798:	1c 8f       	std	Y+28, r17	; 0x1c
     79a:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     79c:	88 e2       	ldi	r24, 0x28	; 40
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	28 e2       	ldi	r18, 0x28	; 40
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	f9 01       	movw	r30, r18
     7a6:	20 81       	ld	r18, Z
     7a8:	2b 7f       	andi	r18, 0xFB	; 251
     7aa:	fc 01       	movw	r30, r24
     7ac:	20 83       	st	Z, r18
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	a0 e8       	ldi	r26, 0x80	; 128
     7b4:	bf e3       	ldi	r27, 0x3F	; 63
     7b6:	8d 8f       	std	Y+29, r24	; 0x1d
     7b8:	9e 8f       	std	Y+30, r25	; 0x1e
     7ba:	af 8f       	std	Y+31, r26	; 0x1f
     7bc:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     7be:	6d 8d       	ldd	r22, Y+29	; 0x1d
     7c0:	7e 8d       	ldd	r23, Y+30	; 0x1e
     7c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7c4:	98 a1       	lds	r25, 0x48
     7c6:	26 e6       	ldi	r18, 0x66	; 102
     7c8:	36 e6       	ldi	r19, 0x66	; 102
     7ca:	46 e6       	ldi	r20, 0x66	; 102
     7cc:	55 e4       	ldi	r21, 0x45	; 69
     7ce:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
     7d2:	dc 01       	movw	r26, r24
     7d4:	cb 01       	movw	r24, r22
     7d6:	89 a3       	lds	r24, 0x59
     7d8:	9a a3       	lds	r25, 0x5a
     7da:	ab a3       	lds	r26, 0x5b
     7dc:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
     7de:	11 e0       	ldi	r17, 0x01	; 1
     7e0:	69 a1       	lds	r22, 0x49
     7e2:	7a a1       	lds	r23, 0x4a
     7e4:	8b a1       	lds	r24, 0x4b
     7e6:	9c a1       	lds	r25, 0x4c
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	40 e8       	ldi	r20, 0x80	; 128
     7ee:	5f e3       	ldi	r21, 0x3F	; 63
     7f0:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
     7f4:	88 23       	and	r24, r24
     7f6:	0c f0       	brlt	.+2      	; 0x7fa <lcd_set_4bit+0x2b8>
     7f8:	10 e0       	ldi	r17, 0x00	; 0
     7fa:	11 23       	and	r17, r17
     7fc:	29 f0       	breq	.+10     	; 0x808 <lcd_set_4bit+0x2c6>
		__ticks = 1;
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	9e a3       	lds	r25, 0x5e
     804:	8d a3       	lds	r24, 0x5d
     806:	46 c0       	rjmp	.+140    	; 0x894 <lcd_set_4bit+0x352>
	else if (__tmp > 65535)
     808:	11 e0       	ldi	r17, 0x01	; 1
     80a:	69 a1       	lds	r22, 0x49
     80c:	7a a1       	lds	r23, 0x4a
     80e:	8b a1       	lds	r24, 0x4b
     810:	9c a1       	lds	r25, 0x4c
     812:	20 e0       	ldi	r18, 0x00	; 0
     814:	3f ef       	ldi	r19, 0xFF	; 255
     816:	4f e7       	ldi	r20, 0x7F	; 127
     818:	57 e4       	ldi	r21, 0x47	; 71
     81a:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
     81e:	18 16       	cp	r1, r24
     820:	0c f0       	brlt	.+2      	; 0x824 <lcd_set_4bit+0x2e2>
     822:	10 e0       	ldi	r17, 0x00	; 0
     824:	11 23       	and	r17, r17
     826:	61 f1       	breq	.+88     	; 0x880 <lcd_set_4bit+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     828:	6d 8d       	ldd	r22, Y+29	; 0x1d
     82a:	7e 8d       	ldd	r23, Y+30	; 0x1e
     82c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     82e:	98 a1       	lds	r25, 0x48
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	40 e2       	ldi	r20, 0x20	; 32
     836:	51 e4       	ldi	r21, 0x41	; 65
     838:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
     83c:	dc 01       	movw	r26, r24
     83e:	cb 01       	movw	r24, r22
     840:	bc 01       	movw	r22, r24
     842:	cd 01       	movw	r24, r26
     844:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
     848:	dc 01       	movw	r26, r24
     84a:	cb 01       	movw	r24, r22
     84c:	9e a3       	lds	r25, 0x5e
     84e:	8d a3       	lds	r24, 0x5d
     850:	12 c0       	rjmp	.+36     	; 0x876 <lcd_set_4bit+0x334>
     852:	80 e7       	ldi	r24, 0x70	; 112
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	98 a7       	lds	r25, 0x78
     858:	8f a3       	lds	r24, 0x5f
     85a:	8f a1       	lds	r24, 0x4f
     85c:	98 a5       	lds	r25, 0x68
     85e:	8c 01       	movw	r16, r24
     860:	c8 01       	movw	r24, r16
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	f1 f7       	brne	.-4      	; 0x862 <lcd_set_4bit+0x320>
     866:	8c 01       	movw	r16, r24
     868:	18 a7       	lds	r17, 0x78
     86a:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     86c:	8d a1       	lds	r24, 0x4d
     86e:	9e a1       	lds	r25, 0x4e
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	9e a3       	lds	r25, 0x5e
     874:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     876:	8d a1       	lds	r24, 0x4d
     878:	9e a1       	lds	r25, 0x4e
     87a:	00 97       	sbiw	r24, 0x00	; 0
     87c:	51 f7       	brne	.-44     	; 0x852 <lcd_set_4bit+0x310>
     87e:	17 c0       	rjmp	.+46     	; 0x8ae <lcd_set_4bit+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     880:	69 a1       	lds	r22, 0x49
     882:	7a a1       	lds	r23, 0x4a
     884:	8b a1       	lds	r24, 0x4b
     886:	9c a1       	lds	r25, 0x4c
     888:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
     88c:	dc 01       	movw	r26, r24
     88e:	cb 01       	movw	r24, r22
     890:	9e a3       	lds	r25, 0x5e
     892:	8d a3       	lds	r24, 0x5d
     894:	8d a1       	lds	r24, 0x4d
     896:	9e a1       	lds	r25, 0x4e
     898:	9a a7       	lds	r25, 0x7a
     89a:	89 a7       	lds	r24, 0x79
     89c:	89 a5       	lds	r24, 0x69
     89e:	9a a5       	lds	r25, 0x6a
     8a0:	8c 01       	movw	r16, r24
     8a2:	f8 01       	movw	r30, r16
     8a4:	31 97       	sbiw	r30, 0x01	; 1
     8a6:	f1 f7       	brne	.-4      	; 0x8a4 <lcd_set_4bit+0x362>
     8a8:	8f 01       	movw	r16, r30
     8aa:	1a a7       	lds	r17, 0x7a
     8ac:	09 a7       	lds	r16, 0x79

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     8ae:	88 e2       	ldi	r24, 0x28	; 40
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	28 e2       	ldi	r18, 0x28	; 40
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	f9 01       	movw	r30, r18
     8b8:	20 81       	ld	r18, Z
     8ba:	2e 7f       	andi	r18, 0xFE	; 254
     8bc:	fc 01       	movw	r30, r24
     8be:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     8c0:	88 e2       	ldi	r24, 0x28	; 40
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	28 e2       	ldi	r18, 0x28	; 40
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	f9 01       	movw	r30, r18
     8ca:	20 81       	ld	r18, Z
     8cc:	2d 7f       	andi	r18, 0xFD	; 253
     8ce:	fc 01       	movw	r30, r24
     8d0:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3
     8d2:	88 e2       	ldi	r24, 0x28	; 40
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	20 e3       	ldi	r18, 0x30	; 48
     8d8:	fc 01       	movw	r30, r24
     8da:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     8dc:	88 e2       	ldi	r24, 0x28	; 40
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	28 e2       	ldi	r18, 0x28	; 40
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	f9 01       	movw	r30, r18
     8e6:	20 81       	ld	r18, Z
     8e8:	24 60       	ori	r18, 0x04	; 4
     8ea:	fc 01       	movw	r30, r24
     8ec:	20 83       	st	Z, r18
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	a0 ea       	ldi	r26, 0xA0	; 160
     8f4:	b0 e4       	ldi	r27, 0x40	; 64
     8f6:	8b a7       	lds	r24, 0x7b
     8f8:	9c a7       	lds	r25, 0x7c
     8fa:	ad a7       	lds	r26, 0x7d
     8fc:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     8fe:	6b a5       	lds	r22, 0x6b
     900:	7c a5       	lds	r23, 0x6c
     902:	8d a5       	lds	r24, 0x6d
     904:	9e a5       	lds	r25, 0x6e
     906:	26 e6       	ldi	r18, 0x66	; 102
     908:	36 e6       	ldi	r19, 0x66	; 102
     90a:	46 e6       	ldi	r20, 0x66	; 102
     90c:	55 e4       	ldi	r21, 0x45	; 69
     90e:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
     912:	dc 01       	movw	r26, r24
     914:	cb 01       	movw	r24, r22
     916:	8f a7       	lds	r24, 0x7f
     918:	98 ab       	sts	0x58, r25
     91a:	a9 ab       	sts	0x59, r26
     91c:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
     91e:	11 e0       	ldi	r17, 0x01	; 1
     920:	6f a5       	lds	r22, 0x6f
     922:	78 a9       	sts	0x48, r23
     924:	89 a9       	sts	0x49, r24
     926:	9a a9       	sts	0x4a, r25
     928:	20 e0       	ldi	r18, 0x00	; 0
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	40 e8       	ldi	r20, 0x80	; 128
     92e:	5f e3       	ldi	r21, 0x3F	; 63
     930:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
     934:	88 23       	and	r24, r24
     936:	0c f0       	brlt	.+2      	; 0x93a <lcd_set_4bit+0x3f8>
     938:	10 e0       	ldi	r17, 0x00	; 0
     93a:	11 23       	and	r17, r17
     93c:	29 f0       	breq	.+10     	; 0x948 <lcd_set_4bit+0x406>
		__ticks = 1;
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	9c ab       	sts	0x5c, r25
     944:	8b ab       	sts	0x5b, r24
     946:	46 c0       	rjmp	.+140    	; 0x9d4 <lcd_set_4bit+0x492>
	else if (__tmp > 65535)
     948:	11 e0       	ldi	r17, 0x01	; 1
     94a:	6f a5       	lds	r22, 0x6f
     94c:	78 a9       	sts	0x48, r23
     94e:	89 a9       	sts	0x49, r24
     950:	9a a9       	sts	0x4a, r25
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	3f ef       	ldi	r19, 0xFF	; 255
     956:	4f e7       	ldi	r20, 0x7F	; 127
     958:	57 e4       	ldi	r21, 0x47	; 71
     95a:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
     95e:	18 16       	cp	r1, r24
     960:	0c f0       	brlt	.+2      	; 0x964 <lcd_set_4bit+0x422>
     962:	10 e0       	ldi	r17, 0x00	; 0
     964:	11 23       	and	r17, r17
     966:	61 f1       	breq	.+88     	; 0x9c0 <lcd_set_4bit+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     968:	6b a5       	lds	r22, 0x6b
     96a:	7c a5       	lds	r23, 0x6c
     96c:	8d a5       	lds	r24, 0x6d
     96e:	9e a5       	lds	r25, 0x6e
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	40 e2       	ldi	r20, 0x20	; 32
     976:	51 e4       	ldi	r21, 0x41	; 65
     978:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
     97c:	dc 01       	movw	r26, r24
     97e:	cb 01       	movw	r24, r22
     980:	bc 01       	movw	r22, r24
     982:	cd 01       	movw	r24, r26
     984:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
     988:	dc 01       	movw	r26, r24
     98a:	cb 01       	movw	r24, r22
     98c:	9c ab       	sts	0x5c, r25
     98e:	8b ab       	sts	0x5b, r24
     990:	12 c0       	rjmp	.+36     	; 0x9b6 <lcd_set_4bit+0x474>
     992:	80 e7       	ldi	r24, 0x70	; 112
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	9e ab       	sts	0x5e, r25
     998:	8d ab       	sts	0x5d, r24
     99a:	8d a9       	sts	0x4d, r24
     99c:	9e a9       	sts	0x4e, r25
     99e:	8c 01       	movw	r16, r24
     9a0:	c8 01       	movw	r24, r16
     9a2:	01 97       	sbiw	r24, 0x01	; 1
     9a4:	f1 f7       	brne	.-4      	; 0x9a2 <lcd_set_4bit+0x460>
     9a6:	8c 01       	movw	r16, r24
     9a8:	1e ab       	sts	0x5e, r17
     9aa:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9ac:	8b a9       	sts	0x4b, r24
     9ae:	9c a9       	sts	0x4c, r25
     9b0:	01 97       	sbiw	r24, 0x01	; 1
     9b2:	9c ab       	sts	0x5c, r25
     9b4:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9b6:	8b a9       	sts	0x4b, r24
     9b8:	9c a9       	sts	0x4c, r25
     9ba:	00 97       	sbiw	r24, 0x00	; 0
     9bc:	51 f7       	brne	.-44     	; 0x992 <lcd_set_4bit+0x450>
     9be:	17 c0       	rjmp	.+46     	; 0x9ee <lcd_set_4bit+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9c0:	6f a5       	lds	r22, 0x6f
     9c2:	78 a9       	sts	0x48, r23
     9c4:	89 a9       	sts	0x49, r24
     9c6:	9a a9       	sts	0x4a, r25
     9c8:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
     9cc:	dc 01       	movw	r26, r24
     9ce:	cb 01       	movw	r24, r22
     9d0:	9c ab       	sts	0x5c, r25
     9d2:	8b ab       	sts	0x5b, r24
     9d4:	8b a9       	sts	0x4b, r24
     9d6:	9c a9       	sts	0x4c, r25
     9d8:	98 af       	sts	0x78, r25
     9da:	8f ab       	sts	0x5f, r24
     9dc:	8f a9       	sts	0x4f, r24
     9de:	98 ad       	sts	0x68, r25
     9e0:	8c 01       	movw	r16, r24
     9e2:	f8 01       	movw	r30, r16
     9e4:	31 97       	sbiw	r30, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <lcd_set_4bit+0x4a2>
     9e8:	8f 01       	movw	r16, r30
     9ea:	18 af       	sts	0x78, r17
     9ec:	0f ab       	sts	0x5f, r16
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     9ee:	88 e2       	ldi	r24, 0x28	; 40
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	28 e2       	ldi	r18, 0x28	; 40
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	f9 01       	movw	r30, r18
     9f8:	20 81       	ld	r18, Z
     9fa:	2b 7f       	andi	r18, 0xFB	; 251
     9fc:	fc 01       	movw	r30, r24
     9fe:	20 83       	st	Z, r18
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	a0 e8       	ldi	r26, 0x80	; 128
     a06:	bf e3       	ldi	r27, 0x3F	; 63
     a08:	89 af       	sts	0x79, r24
     a0a:	9a af       	sts	0x7a, r25
     a0c:	ab af       	sts	0x7b, r26
     a0e:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     a10:	69 ad       	sts	0x69, r22
     a12:	7a ad       	sts	0x6a, r23
     a14:	8b ad       	sts	0x6b, r24
     a16:	9c ad       	sts	0x6c, r25
     a18:	26 e6       	ldi	r18, 0x66	; 102
     a1a:	36 e6       	ldi	r19, 0x66	; 102
     a1c:	46 e6       	ldi	r20, 0x66	; 102
     a1e:	55 e4       	ldi	r21, 0x45	; 69
     a20:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
     a24:	dc 01       	movw	r26, r24
     a26:	cb 01       	movw	r24, r22
     a28:	9e 01       	movw	r18, r28
     a2a:	23 5c       	subi	r18, 0xC3	; 195
     a2c:	3f 4f       	sbci	r19, 0xFF	; 255
     a2e:	f9 01       	movw	r30, r18
     a30:	80 83       	st	Z, r24
     a32:	91 83       	std	Z+1, r25	; 0x01
     a34:	a2 83       	std	Z+2, r26	; 0x02
     a36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a38:	11 e0       	ldi	r17, 0x01	; 1
     a3a:	ce 01       	movw	r24, r28
     a3c:	cd 96       	adiw	r24, 0x3d	; 61
     a3e:	fc 01       	movw	r30, r24
     a40:	60 81       	ld	r22, Z
     a42:	71 81       	ldd	r23, Z+1	; 0x01
     a44:	82 81       	ldd	r24, Z+2	; 0x02
     a46:	93 81       	ldd	r25, Z+3	; 0x03
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 e8       	ldi	r20, 0x80	; 128
     a4e:	5f e3       	ldi	r21, 0x3F	; 63
     a50:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
     a54:	88 23       	and	r24, r24
     a56:	0c f0       	brlt	.+2      	; 0xa5a <lcd_set_4bit+0x518>
     a58:	10 e0       	ldi	r17, 0x00	; 0
     a5a:	11 23       	and	r17, r17
     a5c:	49 f0       	breq	.+18     	; 0xa70 <lcd_set_4bit+0x52e>
		__ticks = 1;
     a5e:	ce 01       	movw	r24, r28
     a60:	8f 5b       	subi	r24, 0xBF	; 191
     a62:	9f 4f       	sbci	r25, 0xFF	; 255
     a64:	21 e0       	ldi	r18, 0x01	; 1
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	fc 01       	movw	r30, r24
     a6a:	31 83       	std	Z+1, r19	; 0x01
     a6c:	20 83       	st	Z, r18
     a6e:	6e c0       	rjmp	.+220    	; 0xb4c <lcd_set_4bit+0x60a>
	else if (__tmp > 65535)
     a70:	11 e0       	ldi	r17, 0x01	; 1
     a72:	ce 01       	movw	r24, r28
     a74:	cd 96       	adiw	r24, 0x3d	; 61
     a76:	fc 01       	movw	r30, r24
     a78:	60 81       	ld	r22, Z
     a7a:	71 81       	ldd	r23, Z+1	; 0x01
     a7c:	82 81       	ldd	r24, Z+2	; 0x02
     a7e:	93 81       	ldd	r25, Z+3	; 0x03
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	4f e7       	ldi	r20, 0x7F	; 127
     a86:	57 e4       	ldi	r21, 0x47	; 71
     a88:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
     a8c:	18 16       	cp	r1, r24
     a8e:	0c f0       	brlt	.+2      	; 0xa92 <lcd_set_4bit+0x550>
     a90:	10 e0       	ldi	r17, 0x00	; 0
     a92:	11 23       	and	r17, r17
     a94:	09 f4       	brne	.+2      	; 0xa98 <lcd_set_4bit+0x556>
     a96:	49 c0       	rjmp	.+146    	; 0xb2a <lcd_set_4bit+0x5e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a98:	69 ad       	sts	0x69, r22
     a9a:	7a ad       	sts	0x6a, r23
     a9c:	8b ad       	sts	0x6b, r24
     a9e:	9c ad       	sts	0x6c, r25
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	40 e2       	ldi	r20, 0x20	; 32
     aa6:	51 e4       	ldi	r21, 0x41	; 65
     aa8:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
     aac:	dc 01       	movw	r26, r24
     aae:	cb 01       	movw	r24, r22
     ab0:	8e 01       	movw	r16, r28
     ab2:	0f 5b       	subi	r16, 0xBF	; 191
     ab4:	1f 4f       	sbci	r17, 0xFF	; 255
     ab6:	bc 01       	movw	r22, r24
     ab8:	cd 01       	movw	r24, r26
     aba:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
     abe:	dc 01       	movw	r26, r24
     ac0:	cb 01       	movw	r24, r22
     ac2:	f8 01       	movw	r30, r16
     ac4:	91 83       	std	Z+1, r25	; 0x01
     ac6:	80 83       	st	Z, r24
     ac8:	27 c0       	rjmp	.+78     	; 0xb18 <lcd_set_4bit+0x5d6>
     aca:	ce 01       	movw	r24, r28
     acc:	8d 5b       	subi	r24, 0xBD	; 189
     ace:	9f 4f       	sbci	r25, 0xFF	; 255
     ad0:	20 e7       	ldi	r18, 0x70	; 112
     ad2:	31 e0       	ldi	r19, 0x01	; 1
     ad4:	fc 01       	movw	r30, r24
     ad6:	31 83       	std	Z+1, r19	; 0x01
     ad8:	20 83       	st	Z, r18
     ada:	ce 01       	movw	r24, r28
     adc:	8d 5b       	subi	r24, 0xBD	; 189
     ade:	9f 4f       	sbci	r25, 0xFF	; 255
     ae0:	fc 01       	movw	r30, r24
     ae2:	80 81       	ld	r24, Z
     ae4:	91 81       	ldd	r25, Z+1	; 0x01
     ae6:	8c 01       	movw	r16, r24
     ae8:	c8 01       	movw	r24, r16
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	f1 f7       	brne	.-4      	; 0xaea <lcd_set_4bit+0x5a8>
     aee:	8c 01       	movw	r16, r24
     af0:	ce 01       	movw	r24, r28
     af2:	8d 5b       	subi	r24, 0xBD	; 189
     af4:	9f 4f       	sbci	r25, 0xFF	; 255
     af6:	fc 01       	movw	r30, r24
     af8:	11 83       	std	Z+1, r17	; 0x01
     afa:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     afc:	ce 01       	movw	r24, r28
     afe:	8f 5b       	subi	r24, 0xBF	; 191
     b00:	9f 4f       	sbci	r25, 0xFF	; 255
     b02:	9e 01       	movw	r18, r28
     b04:	2f 5b       	subi	r18, 0xBF	; 191
     b06:	3f 4f       	sbci	r19, 0xFF	; 255
     b08:	f9 01       	movw	r30, r18
     b0a:	20 81       	ld	r18, Z
     b0c:	31 81       	ldd	r19, Z+1	; 0x01
     b0e:	21 50       	subi	r18, 0x01	; 1
     b10:	30 40       	sbci	r19, 0x00	; 0
     b12:	fc 01       	movw	r30, r24
     b14:	31 83       	std	Z+1, r19	; 0x01
     b16:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b18:	ce 01       	movw	r24, r28
     b1a:	8f 5b       	subi	r24, 0xBF	; 191
     b1c:	9f 4f       	sbci	r25, 0xFF	; 255
     b1e:	fc 01       	movw	r30, r24
     b20:	80 81       	ld	r24, Z
     b22:	91 81       	ldd	r25, Z+1	; 0x01
     b24:	00 97       	sbiw	r24, 0x00	; 0
     b26:	89 f6       	brne	.-94     	; 0xaca <lcd_set_4bit+0x588>
     b28:	2e c0       	rjmp	.+92     	; 0xb86 <lcd_set_4bit+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b2a:	8e 01       	movw	r16, r28
     b2c:	0f 5b       	subi	r16, 0xBF	; 191
     b2e:	1f 4f       	sbci	r17, 0xFF	; 255
     b30:	ce 01       	movw	r24, r28
     b32:	cd 96       	adiw	r24, 0x3d	; 61
     b34:	fc 01       	movw	r30, r24
     b36:	60 81       	ld	r22, Z
     b38:	71 81       	ldd	r23, Z+1	; 0x01
     b3a:	82 81       	ldd	r24, Z+2	; 0x02
     b3c:	93 81       	ldd	r25, Z+3	; 0x03
     b3e:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
     b42:	dc 01       	movw	r26, r24
     b44:	cb 01       	movw	r24, r22
     b46:	f8 01       	movw	r30, r16
     b48:	91 83       	std	Z+1, r25	; 0x01
     b4a:	80 83       	st	Z, r24
     b4c:	ce 01       	movw	r24, r28
     b4e:	8b 5b       	subi	r24, 0xBB	; 187
     b50:	9f 4f       	sbci	r25, 0xFF	; 255
     b52:	9e 01       	movw	r18, r28
     b54:	2f 5b       	subi	r18, 0xBF	; 191
     b56:	3f 4f       	sbci	r19, 0xFF	; 255
     b58:	f9 01       	movw	r30, r18
     b5a:	20 81       	ld	r18, Z
     b5c:	31 81       	ldd	r19, Z+1	; 0x01
     b5e:	fc 01       	movw	r30, r24
     b60:	31 83       	std	Z+1, r19	; 0x01
     b62:	20 83       	st	Z, r18
     b64:	ce 01       	movw	r24, r28
     b66:	8b 5b       	subi	r24, 0xBB	; 187
     b68:	9f 4f       	sbci	r25, 0xFF	; 255
     b6a:	fc 01       	movw	r30, r24
     b6c:	80 81       	ld	r24, Z
     b6e:	91 81       	ldd	r25, Z+1	; 0x01
     b70:	8c 01       	movw	r16, r24
     b72:	c8 01       	movw	r24, r16
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	f1 f7       	brne	.-4      	; 0xb74 <lcd_set_4bit+0x632>
     b78:	8c 01       	movw	r16, r24
     b7a:	ce 01       	movw	r24, r28
     b7c:	8b 5b       	subi	r24, 0xBB	; 187
     b7e:	9f 4f       	sbci	r25, 0xFF	; 255
     b80:	fc 01       	movw	r30, r24
     b82:	11 83       	std	Z+1, r17	; 0x01
     b84:	00 83       	st	Z, r16

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     b86:	88 e2       	ldi	r24, 0x28	; 40
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	28 e2       	ldi	r18, 0x28	; 40
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	f9 01       	movw	r30, r18
     b90:	20 81       	ld	r18, Z
     b92:	2e 7f       	andi	r18, 0xFE	; 254
     b94:	fc 01       	movw	r30, r24
     b96:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     b98:	88 e2       	ldi	r24, 0x28	; 40
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	28 e2       	ldi	r18, 0x28	; 40
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	f9 01       	movw	r30, r18
     ba2:	20 81       	ld	r18, Z
     ba4:	2d 7f       	andi	r18, 0xFD	; 253
     ba6:	fc 01       	movw	r30, r24
     ba8:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3
     baa:	88 e2       	ldi	r24, 0x28	; 40
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	20 e3       	ldi	r18, 0x30	; 48
     bb0:	fc 01       	movw	r30, r24
     bb2:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     bb4:	88 e2       	ldi	r24, 0x28	; 40
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	28 e2       	ldi	r18, 0x28	; 40
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	f9 01       	movw	r30, r18
     bbe:	20 81       	ld	r18, Z
     bc0:	24 60       	ori	r18, 0x04	; 4
     bc2:	fc 01       	movw	r30, r24
     bc4:	20 83       	st	Z, r18
     bc6:	9e 01       	movw	r18, r28
     bc8:	29 5b       	subi	r18, 0xB9	; 185
     bca:	3f 4f       	sbci	r19, 0xFF	; 255
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 ea       	ldi	r26, 0xA0	; 160
     bd2:	b0 e4       	ldi	r27, 0x40	; 64
     bd4:	f9 01       	movw	r30, r18
     bd6:	80 83       	st	Z, r24
     bd8:	91 83       	std	Z+1, r25	; 0x01
     bda:	a2 83       	std	Z+2, r26	; 0x02
     bdc:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     bde:	8e 01       	movw	r16, r28
     be0:	05 5b       	subi	r16, 0xB5	; 181
     be2:	1f 4f       	sbci	r17, 0xFF	; 255
     be4:	ce 01       	movw	r24, r28
     be6:	89 5b       	subi	r24, 0xB9	; 185
     be8:	9f 4f       	sbci	r25, 0xFF	; 255
     bea:	fc 01       	movw	r30, r24
     bec:	60 81       	ld	r22, Z
     bee:	71 81       	ldd	r23, Z+1	; 0x01
     bf0:	82 81       	ldd	r24, Z+2	; 0x02
     bf2:	93 81       	ldd	r25, Z+3	; 0x03
     bf4:	26 e6       	ldi	r18, 0x66	; 102
     bf6:	36 e6       	ldi	r19, 0x66	; 102
     bf8:	46 e6       	ldi	r20, 0x66	; 102
     bfa:	55 e4       	ldi	r21, 0x45	; 69
     bfc:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	f8 01       	movw	r30, r16
     c06:	80 83       	st	Z, r24
     c08:	91 83       	std	Z+1, r25	; 0x01
     c0a:	a2 83       	std	Z+2, r26	; 0x02
     c0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c0e:	ce 01       	movw	r24, r28
     c10:	85 5b       	subi	r24, 0xB5	; 181
     c12:	9f 4f       	sbci	r25, 0xFF	; 255
     c14:	11 e0       	ldi	r17, 0x01	; 1
     c16:	fc 01       	movw	r30, r24
     c18:	60 81       	ld	r22, Z
     c1a:	71 81       	ldd	r23, Z+1	; 0x01
     c1c:	82 81       	ldd	r24, Z+2	; 0x02
     c1e:	93 81       	ldd	r25, Z+3	; 0x03
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	40 e8       	ldi	r20, 0x80	; 128
     c26:	5f e3       	ldi	r21, 0x3F	; 63
     c28:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
     c2c:	88 23       	and	r24, r24
     c2e:	0c f0       	brlt	.+2      	; 0xc32 <lcd_set_4bit+0x6f0>
     c30:	10 e0       	ldi	r17, 0x00	; 0
     c32:	11 23       	and	r17, r17
     c34:	49 f0       	breq	.+18     	; 0xc48 <lcd_set_4bit+0x706>
		__ticks = 1;
     c36:	ce 01       	movw	r24, r28
     c38:	81 5b       	subi	r24, 0xB1	; 177
     c3a:	9f 4f       	sbci	r25, 0xFF	; 255
     c3c:	21 e0       	ldi	r18, 0x01	; 1
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	fc 01       	movw	r30, r24
     c42:	31 83       	std	Z+1, r19	; 0x01
     c44:	20 83       	st	Z, r18
     c46:	74 c0       	rjmp	.+232    	; 0xd30 <lcd_set_4bit+0x7ee>
	else if (__tmp > 65535)
     c48:	ce 01       	movw	r24, r28
     c4a:	85 5b       	subi	r24, 0xB5	; 181
     c4c:	9f 4f       	sbci	r25, 0xFF	; 255
     c4e:	11 e0       	ldi	r17, 0x01	; 1
     c50:	fc 01       	movw	r30, r24
     c52:	60 81       	ld	r22, Z
     c54:	71 81       	ldd	r23, Z+1	; 0x01
     c56:	82 81       	ldd	r24, Z+2	; 0x02
     c58:	93 81       	ldd	r25, Z+3	; 0x03
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	3f ef       	ldi	r19, 0xFF	; 255
     c5e:	4f e7       	ldi	r20, 0x7F	; 127
     c60:	57 e4       	ldi	r21, 0x47	; 71
     c62:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
     c66:	18 16       	cp	r1, r24
     c68:	0c f0       	brlt	.+2      	; 0xc6c <lcd_set_4bit+0x72a>
     c6a:	10 e0       	ldi	r17, 0x00	; 0
     c6c:	11 23       	and	r17, r17
     c6e:	09 f4       	brne	.+2      	; 0xc72 <lcd_set_4bit+0x730>
     c70:	4d c0       	rjmp	.+154    	; 0xd0c <lcd_set_4bit+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c72:	ce 01       	movw	r24, r28
     c74:	89 5b       	subi	r24, 0xB9	; 185
     c76:	9f 4f       	sbci	r25, 0xFF	; 255
     c78:	fc 01       	movw	r30, r24
     c7a:	60 81       	ld	r22, Z
     c7c:	71 81       	ldd	r23, Z+1	; 0x01
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	40 e2       	ldi	r20, 0x20	; 32
     c88:	51 e4       	ldi	r21, 0x41	; 65
     c8a:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
     c8e:	dc 01       	movw	r26, r24
     c90:	cb 01       	movw	r24, r22
     c92:	8e 01       	movw	r16, r28
     c94:	01 5b       	subi	r16, 0xB1	; 177
     c96:	1f 4f       	sbci	r17, 0xFF	; 255
     c98:	bc 01       	movw	r22, r24
     c9a:	cd 01       	movw	r24, r26
     c9c:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
     ca0:	dc 01       	movw	r26, r24
     ca2:	cb 01       	movw	r24, r22
     ca4:	f8 01       	movw	r30, r16
     ca6:	91 83       	std	Z+1, r25	; 0x01
     ca8:	80 83       	st	Z, r24
     caa:	27 c0       	rjmp	.+78     	; 0xcfa <lcd_set_4bit+0x7b8>
     cac:	ce 01       	movw	r24, r28
     cae:	8f 5a       	subi	r24, 0xAF	; 175
     cb0:	9f 4f       	sbci	r25, 0xFF	; 255
     cb2:	20 e7       	ldi	r18, 0x70	; 112
     cb4:	31 e0       	ldi	r19, 0x01	; 1
     cb6:	fc 01       	movw	r30, r24
     cb8:	31 83       	std	Z+1, r19	; 0x01
     cba:	20 83       	st	Z, r18
     cbc:	ce 01       	movw	r24, r28
     cbe:	8f 5a       	subi	r24, 0xAF	; 175
     cc0:	9f 4f       	sbci	r25, 0xFF	; 255
     cc2:	fc 01       	movw	r30, r24
     cc4:	80 81       	ld	r24, Z
     cc6:	91 81       	ldd	r25, Z+1	; 0x01
     cc8:	8c 01       	movw	r16, r24
     cca:	c8 01       	movw	r24, r16
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	f1 f7       	brne	.-4      	; 0xccc <lcd_set_4bit+0x78a>
     cd0:	8c 01       	movw	r16, r24
     cd2:	ce 01       	movw	r24, r28
     cd4:	8f 5a       	subi	r24, 0xAF	; 175
     cd6:	9f 4f       	sbci	r25, 0xFF	; 255
     cd8:	fc 01       	movw	r30, r24
     cda:	11 83       	std	Z+1, r17	; 0x01
     cdc:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cde:	ce 01       	movw	r24, r28
     ce0:	81 5b       	subi	r24, 0xB1	; 177
     ce2:	9f 4f       	sbci	r25, 0xFF	; 255
     ce4:	9e 01       	movw	r18, r28
     ce6:	21 5b       	subi	r18, 0xB1	; 177
     ce8:	3f 4f       	sbci	r19, 0xFF	; 255
     cea:	f9 01       	movw	r30, r18
     cec:	20 81       	ld	r18, Z
     cee:	31 81       	ldd	r19, Z+1	; 0x01
     cf0:	21 50       	subi	r18, 0x01	; 1
     cf2:	30 40       	sbci	r19, 0x00	; 0
     cf4:	fc 01       	movw	r30, r24
     cf6:	31 83       	std	Z+1, r19	; 0x01
     cf8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cfa:	ce 01       	movw	r24, r28
     cfc:	81 5b       	subi	r24, 0xB1	; 177
     cfe:	9f 4f       	sbci	r25, 0xFF	; 255
     d00:	fc 01       	movw	r30, r24
     d02:	80 81       	ld	r24, Z
     d04:	91 81       	ldd	r25, Z+1	; 0x01
     d06:	00 97       	sbiw	r24, 0x00	; 0
     d08:	89 f6       	brne	.-94     	; 0xcac <lcd_set_4bit+0x76a>
     d0a:	2f c0       	rjmp	.+94     	; 0xd6a <lcd_set_4bit+0x828>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d0c:	8e 01       	movw	r16, r28
     d0e:	01 5b       	subi	r16, 0xB1	; 177
     d10:	1f 4f       	sbci	r17, 0xFF	; 255
     d12:	ce 01       	movw	r24, r28
     d14:	85 5b       	subi	r24, 0xB5	; 181
     d16:	9f 4f       	sbci	r25, 0xFF	; 255
     d18:	fc 01       	movw	r30, r24
     d1a:	60 81       	ld	r22, Z
     d1c:	71 81       	ldd	r23, Z+1	; 0x01
     d1e:	82 81       	ldd	r24, Z+2	; 0x02
     d20:	93 81       	ldd	r25, Z+3	; 0x03
     d22:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
     d26:	dc 01       	movw	r26, r24
     d28:	cb 01       	movw	r24, r22
     d2a:	f8 01       	movw	r30, r16
     d2c:	91 83       	std	Z+1, r25	; 0x01
     d2e:	80 83       	st	Z, r24
     d30:	ce 01       	movw	r24, r28
     d32:	8d 5a       	subi	r24, 0xAD	; 173
     d34:	9f 4f       	sbci	r25, 0xFF	; 255
     d36:	9e 01       	movw	r18, r28
     d38:	21 5b       	subi	r18, 0xB1	; 177
     d3a:	3f 4f       	sbci	r19, 0xFF	; 255
     d3c:	f9 01       	movw	r30, r18
     d3e:	20 81       	ld	r18, Z
     d40:	31 81       	ldd	r19, Z+1	; 0x01
     d42:	fc 01       	movw	r30, r24
     d44:	31 83       	std	Z+1, r19	; 0x01
     d46:	20 83       	st	Z, r18
     d48:	ce 01       	movw	r24, r28
     d4a:	8d 5a       	subi	r24, 0xAD	; 173
     d4c:	9f 4f       	sbci	r25, 0xFF	; 255
     d4e:	fc 01       	movw	r30, r24
     d50:	80 81       	ld	r24, Z
     d52:	91 81       	ldd	r25, Z+1	; 0x01
     d54:	8c 01       	movw	r16, r24
     d56:	c8 01       	movw	r24, r16
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <lcd_set_4bit+0x816>
     d5c:	8c 01       	movw	r16, r24
     d5e:	ce 01       	movw	r24, r28
     d60:	8d 5a       	subi	r24, 0xAD	; 173
     d62:	9f 4f       	sbci	r25, 0xFF	; 255
     d64:	fc 01       	movw	r30, r24
     d66:	11 83       	std	Z+1, r17	; 0x01
     d68:	00 83       	st	Z, r16
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     d6a:	88 e2       	ldi	r24, 0x28	; 40
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	28 e2       	ldi	r18, 0x28	; 40
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	f9 01       	movw	r30, r18
     d74:	20 81       	ld	r18, Z
     d76:	2b 7f       	andi	r18, 0xFB	; 251
     d78:	fc 01       	movw	r30, r24
     d7a:	20 83       	st	Z, r18
     d7c:	9e 01       	movw	r18, r28
     d7e:	2b 5a       	subi	r18, 0xAB	; 171
     d80:	3f 4f       	sbci	r19, 0xFF	; 255
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	a0 e8       	ldi	r26, 0x80	; 128
     d88:	bf e3       	ldi	r27, 0x3F	; 63
     d8a:	f9 01       	movw	r30, r18
     d8c:	80 83       	st	Z, r24
     d8e:	91 83       	std	Z+1, r25	; 0x01
     d90:	a2 83       	std	Z+2, r26	; 0x02
     d92:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     d94:	8e 01       	movw	r16, r28
     d96:	07 5a       	subi	r16, 0xA7	; 167
     d98:	1f 4f       	sbci	r17, 0xFF	; 255
     d9a:	ce 01       	movw	r24, r28
     d9c:	8b 5a       	subi	r24, 0xAB	; 171
     d9e:	9f 4f       	sbci	r25, 0xFF	; 255
     da0:	fc 01       	movw	r30, r24
     da2:	60 81       	ld	r22, Z
     da4:	71 81       	ldd	r23, Z+1	; 0x01
     da6:	82 81       	ldd	r24, Z+2	; 0x02
     da8:	93 81       	ldd	r25, Z+3	; 0x03
     daa:	26 e6       	ldi	r18, 0x66	; 102
     dac:	36 e6       	ldi	r19, 0x66	; 102
     dae:	46 e6       	ldi	r20, 0x66	; 102
     db0:	55 e4       	ldi	r21, 0x45	; 69
     db2:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
     db6:	dc 01       	movw	r26, r24
     db8:	cb 01       	movw	r24, r22
     dba:	f8 01       	movw	r30, r16
     dbc:	80 83       	st	Z, r24
     dbe:	91 83       	std	Z+1, r25	; 0x01
     dc0:	a2 83       	std	Z+2, r26	; 0x02
     dc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     dc4:	ce 01       	movw	r24, r28
     dc6:	87 5a       	subi	r24, 0xA7	; 167
     dc8:	9f 4f       	sbci	r25, 0xFF	; 255
     dca:	11 e0       	ldi	r17, 0x01	; 1
     dcc:	fc 01       	movw	r30, r24
     dce:	60 81       	ld	r22, Z
     dd0:	71 81       	ldd	r23, Z+1	; 0x01
     dd2:	82 81       	ldd	r24, Z+2	; 0x02
     dd4:	93 81       	ldd	r25, Z+3	; 0x03
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	40 e8       	ldi	r20, 0x80	; 128
     ddc:	5f e3       	ldi	r21, 0x3F	; 63
     dde:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
     de2:	88 23       	and	r24, r24
     de4:	0c f0       	brlt	.+2      	; 0xde8 <lcd_set_4bit+0x8a6>
     de6:	10 e0       	ldi	r17, 0x00	; 0
     de8:	11 23       	and	r17, r17
     dea:	49 f0       	breq	.+18     	; 0xdfe <lcd_set_4bit+0x8bc>
		__ticks = 1;
     dec:	ce 01       	movw	r24, r28
     dee:	83 5a       	subi	r24, 0xA3	; 163
     df0:	9f 4f       	sbci	r25, 0xFF	; 255
     df2:	21 e0       	ldi	r18, 0x01	; 1
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	fc 01       	movw	r30, r24
     df8:	31 83       	std	Z+1, r19	; 0x01
     dfa:	20 83       	st	Z, r18
     dfc:	74 c0       	rjmp	.+232    	; 0xee6 <lcd_set_4bit+0x9a4>
	else if (__tmp > 65535)
     dfe:	ce 01       	movw	r24, r28
     e00:	87 5a       	subi	r24, 0xA7	; 167
     e02:	9f 4f       	sbci	r25, 0xFF	; 255
     e04:	11 e0       	ldi	r17, 0x01	; 1
     e06:	fc 01       	movw	r30, r24
     e08:	60 81       	ld	r22, Z
     e0a:	71 81       	ldd	r23, Z+1	; 0x01
     e0c:	82 81       	ldd	r24, Z+2	; 0x02
     e0e:	93 81       	ldd	r25, Z+3	; 0x03
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	3f ef       	ldi	r19, 0xFF	; 255
     e14:	4f e7       	ldi	r20, 0x7F	; 127
     e16:	57 e4       	ldi	r21, 0x47	; 71
     e18:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
     e1c:	18 16       	cp	r1, r24
     e1e:	0c f0       	brlt	.+2      	; 0xe22 <lcd_set_4bit+0x8e0>
     e20:	10 e0       	ldi	r17, 0x00	; 0
     e22:	11 23       	and	r17, r17
     e24:	09 f4       	brne	.+2      	; 0xe28 <lcd_set_4bit+0x8e6>
     e26:	4d c0       	rjmp	.+154    	; 0xec2 <lcd_set_4bit+0x980>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e28:	ce 01       	movw	r24, r28
     e2a:	8b 5a       	subi	r24, 0xAB	; 171
     e2c:	9f 4f       	sbci	r25, 0xFF	; 255
     e2e:	fc 01       	movw	r30, r24
     e30:	60 81       	ld	r22, Z
     e32:	71 81       	ldd	r23, Z+1	; 0x01
     e34:	82 81       	ldd	r24, Z+2	; 0x02
     e36:	93 81       	ldd	r25, Z+3	; 0x03
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e2       	ldi	r20, 0x20	; 32
     e3e:	51 e4       	ldi	r21, 0x41	; 65
     e40:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	8e 01       	movw	r16, r28
     e4a:	03 5a       	subi	r16, 0xA3	; 163
     e4c:	1f 4f       	sbci	r17, 0xFF	; 255
     e4e:	bc 01       	movw	r22, r24
     e50:	cd 01       	movw	r24, r26
     e52:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
     e56:	dc 01       	movw	r26, r24
     e58:	cb 01       	movw	r24, r22
     e5a:	f8 01       	movw	r30, r16
     e5c:	91 83       	std	Z+1, r25	; 0x01
     e5e:	80 83       	st	Z, r24
     e60:	27 c0       	rjmp	.+78     	; 0xeb0 <lcd_set_4bit+0x96e>
     e62:	ce 01       	movw	r24, r28
     e64:	81 5a       	subi	r24, 0xA1	; 161
     e66:	9f 4f       	sbci	r25, 0xFF	; 255
     e68:	20 e7       	ldi	r18, 0x70	; 112
     e6a:	31 e0       	ldi	r19, 0x01	; 1
     e6c:	fc 01       	movw	r30, r24
     e6e:	31 83       	std	Z+1, r19	; 0x01
     e70:	20 83       	st	Z, r18
     e72:	ce 01       	movw	r24, r28
     e74:	81 5a       	subi	r24, 0xA1	; 161
     e76:	9f 4f       	sbci	r25, 0xFF	; 255
     e78:	fc 01       	movw	r30, r24
     e7a:	80 81       	ld	r24, Z
     e7c:	91 81       	ldd	r25, Z+1	; 0x01
     e7e:	8c 01       	movw	r16, r24
     e80:	c8 01       	movw	r24, r16
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	f1 f7       	brne	.-4      	; 0xe82 <lcd_set_4bit+0x940>
     e86:	8c 01       	movw	r16, r24
     e88:	ce 01       	movw	r24, r28
     e8a:	81 5a       	subi	r24, 0xA1	; 161
     e8c:	9f 4f       	sbci	r25, 0xFF	; 255
     e8e:	fc 01       	movw	r30, r24
     e90:	11 83       	std	Z+1, r17	; 0x01
     e92:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e94:	ce 01       	movw	r24, r28
     e96:	83 5a       	subi	r24, 0xA3	; 163
     e98:	9f 4f       	sbci	r25, 0xFF	; 255
     e9a:	9e 01       	movw	r18, r28
     e9c:	23 5a       	subi	r18, 0xA3	; 163
     e9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ea0:	f9 01       	movw	r30, r18
     ea2:	20 81       	ld	r18, Z
     ea4:	31 81       	ldd	r19, Z+1	; 0x01
     ea6:	21 50       	subi	r18, 0x01	; 1
     ea8:	30 40       	sbci	r19, 0x00	; 0
     eaa:	fc 01       	movw	r30, r24
     eac:	31 83       	std	Z+1, r19	; 0x01
     eae:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb0:	ce 01       	movw	r24, r28
     eb2:	83 5a       	subi	r24, 0xA3	; 163
     eb4:	9f 4f       	sbci	r25, 0xFF	; 255
     eb6:	fc 01       	movw	r30, r24
     eb8:	80 81       	ld	r24, Z
     eba:	91 81       	ldd	r25, Z+1	; 0x01
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	89 f6       	brne	.-94     	; 0xe62 <lcd_set_4bit+0x920>
     ec0:	2f c0       	rjmp	.+94     	; 0xf20 <lcd_set_4bit+0x9de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec2:	8e 01       	movw	r16, r28
     ec4:	03 5a       	subi	r16, 0xA3	; 163
     ec6:	1f 4f       	sbci	r17, 0xFF	; 255
     ec8:	ce 01       	movw	r24, r28
     eca:	87 5a       	subi	r24, 0xA7	; 167
     ecc:	9f 4f       	sbci	r25, 0xFF	; 255
     ece:	fc 01       	movw	r30, r24
     ed0:	60 81       	ld	r22, Z
     ed2:	71 81       	ldd	r23, Z+1	; 0x01
     ed4:	82 81       	ldd	r24, Z+2	; 0x02
     ed6:	93 81       	ldd	r25, Z+3	; 0x03
     ed8:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	f8 01       	movw	r30, r16
     ee2:	91 83       	std	Z+1, r25	; 0x01
     ee4:	80 83       	st	Z, r24
     ee6:	ce 01       	movw	r24, r28
     ee8:	8f 59       	subi	r24, 0x9F	; 159
     eea:	9f 4f       	sbci	r25, 0xFF	; 255
     eec:	9e 01       	movw	r18, r28
     eee:	23 5a       	subi	r18, 0xA3	; 163
     ef0:	3f 4f       	sbci	r19, 0xFF	; 255
     ef2:	f9 01       	movw	r30, r18
     ef4:	20 81       	ld	r18, Z
     ef6:	31 81       	ldd	r19, Z+1	; 0x01
     ef8:	fc 01       	movw	r30, r24
     efa:	31 83       	std	Z+1, r19	; 0x01
     efc:	20 83       	st	Z, r18
     efe:	ce 01       	movw	r24, r28
     f00:	8f 59       	subi	r24, 0x9F	; 159
     f02:	9f 4f       	sbci	r25, 0xFF	; 255
     f04:	fc 01       	movw	r30, r24
     f06:	80 81       	ld	r24, Z
     f08:	91 81       	ldd	r25, Z+1	; 0x01
     f0a:	8c 01       	movw	r16, r24
     f0c:	c8 01       	movw	r24, r16
     f0e:	01 97       	sbiw	r24, 0x01	; 1
     f10:	f1 f7       	brne	.-4      	; 0xf0e <lcd_set_4bit+0x9cc>
     f12:	8c 01       	movw	r16, r24
     f14:	ce 01       	movw	r24, r28
     f16:	8f 59       	subi	r24, 0x9F	; 159
     f18:	9f 4f       	sbci	r25, 0xFF	; 255
     f1a:	fc 01       	movw	r30, r24
     f1c:	11 83       	std	Z+1, r17	; 0x01
     f1e:	00 83       	st	Z, r16

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     f20:	88 e2       	ldi	r24, 0x28	; 40
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	28 e2       	ldi	r18, 0x28	; 40
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	f9 01       	movw	r30, r18
     f2a:	20 81       	ld	r18, Z
     f2c:	2e 7f       	andi	r18, 0xFE	; 254
     f2e:	fc 01       	movw	r30, r24
     f30:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     f32:	88 e2       	ldi	r24, 0x28	; 40
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	28 e2       	ldi	r18, 0x28	; 40
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	f9 01       	movw	r30, r18
     f3c:	20 81       	ld	r18, Z
     f3e:	2d 7f       	andi	r18, 0xFD	; 253
     f40:	fc 01       	movw	r30, r24
     f42:	20 83       	st	Z, r18
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     f44:	88 e2       	ldi	r24, 0x28	; 40
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	20 e2       	ldi	r18, 0x20	; 32
     f4a:	fc 01       	movw	r30, r24
     f4c:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     f4e:	88 e2       	ldi	r24, 0x28	; 40
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	28 e2       	ldi	r18, 0x28	; 40
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	f9 01       	movw	r30, r18
     f58:	20 81       	ld	r18, Z
     f5a:	24 60       	ori	r18, 0x04	; 4
     f5c:	fc 01       	movw	r30, r24
     f5e:	20 83       	st	Z, r18
     f60:	9e 01       	movw	r18, r28
     f62:	2d 59       	subi	r18, 0x9D	; 157
     f64:	3f 4f       	sbci	r19, 0xFF	; 255
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	a0 ea       	ldi	r26, 0xA0	; 160
     f6c:	b0 e4       	ldi	r27, 0x40	; 64
     f6e:	f9 01       	movw	r30, r18
     f70:	80 83       	st	Z, r24
     f72:	91 83       	std	Z+1, r25	; 0x01
     f74:	a2 83       	std	Z+2, r26	; 0x02
     f76:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     f78:	8e 01       	movw	r16, r28
     f7a:	09 59       	subi	r16, 0x99	; 153
     f7c:	1f 4f       	sbci	r17, 0xFF	; 255
     f7e:	ce 01       	movw	r24, r28
     f80:	8d 59       	subi	r24, 0x9D	; 157
     f82:	9f 4f       	sbci	r25, 0xFF	; 255
     f84:	fc 01       	movw	r30, r24
     f86:	60 81       	ld	r22, Z
     f88:	71 81       	ldd	r23, Z+1	; 0x01
     f8a:	82 81       	ldd	r24, Z+2	; 0x02
     f8c:	93 81       	ldd	r25, Z+3	; 0x03
     f8e:	26 e6       	ldi	r18, 0x66	; 102
     f90:	36 e6       	ldi	r19, 0x66	; 102
     f92:	46 e6       	ldi	r20, 0x66	; 102
     f94:	55 e4       	ldi	r21, 0x45	; 69
     f96:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	f8 01       	movw	r30, r16
     fa0:	80 83       	st	Z, r24
     fa2:	91 83       	std	Z+1, r25	; 0x01
     fa4:	a2 83       	std	Z+2, r26	; 0x02
     fa6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fa8:	ce 01       	movw	r24, r28
     faa:	89 59       	subi	r24, 0x99	; 153
     fac:	9f 4f       	sbci	r25, 0xFF	; 255
     fae:	11 e0       	ldi	r17, 0x01	; 1
     fb0:	fc 01       	movw	r30, r24
     fb2:	60 81       	ld	r22, Z
     fb4:	71 81       	ldd	r23, Z+1	; 0x01
     fb6:	82 81       	ldd	r24, Z+2	; 0x02
     fb8:	93 81       	ldd	r25, Z+3	; 0x03
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	40 e8       	ldi	r20, 0x80	; 128
     fc0:	5f e3       	ldi	r21, 0x3F	; 63
     fc2:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
     fc6:	88 23       	and	r24, r24
     fc8:	0c f0       	brlt	.+2      	; 0xfcc <lcd_set_4bit+0xa8a>
     fca:	10 e0       	ldi	r17, 0x00	; 0
     fcc:	11 23       	and	r17, r17
     fce:	49 f0       	breq	.+18     	; 0xfe2 <lcd_set_4bit+0xaa0>
		__ticks = 1;
     fd0:	ce 01       	movw	r24, r28
     fd2:	85 59       	subi	r24, 0x95	; 149
     fd4:	9f 4f       	sbci	r25, 0xFF	; 255
     fd6:	21 e0       	ldi	r18, 0x01	; 1
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	fc 01       	movw	r30, r24
     fdc:	31 83       	std	Z+1, r19	; 0x01
     fde:	20 83       	st	Z, r18
     fe0:	74 c0       	rjmp	.+232    	; 0x10ca <lcd_set_4bit+0xb88>
	else if (__tmp > 65535)
     fe2:	ce 01       	movw	r24, r28
     fe4:	89 59       	subi	r24, 0x99	; 153
     fe6:	9f 4f       	sbci	r25, 0xFF	; 255
     fe8:	11 e0       	ldi	r17, 0x01	; 1
     fea:	fc 01       	movw	r30, r24
     fec:	60 81       	ld	r22, Z
     fee:	71 81       	ldd	r23, Z+1	; 0x01
     ff0:	82 81       	ldd	r24, Z+2	; 0x02
     ff2:	93 81       	ldd	r25, Z+3	; 0x03
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	3f ef       	ldi	r19, 0xFF	; 255
     ff8:	4f e7       	ldi	r20, 0x7F	; 127
     ffa:	57 e4       	ldi	r21, 0x47	; 71
     ffc:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    1000:	18 16       	cp	r1, r24
    1002:	0c f0       	brlt	.+2      	; 0x1006 <lcd_set_4bit+0xac4>
    1004:	10 e0       	ldi	r17, 0x00	; 0
    1006:	11 23       	and	r17, r17
    1008:	09 f4       	brne	.+2      	; 0x100c <lcd_set_4bit+0xaca>
    100a:	4d c0       	rjmp	.+154    	; 0x10a6 <lcd_set_4bit+0xb64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    100c:	ce 01       	movw	r24, r28
    100e:	8d 59       	subi	r24, 0x9D	; 157
    1010:	9f 4f       	sbci	r25, 0xFF	; 255
    1012:	fc 01       	movw	r30, r24
    1014:	60 81       	ld	r22, Z
    1016:	71 81       	ldd	r23, Z+1	; 0x01
    1018:	82 81       	ldd	r24, Z+2	; 0x02
    101a:	93 81       	ldd	r25, Z+3	; 0x03
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	40 e2       	ldi	r20, 0x20	; 32
    1022:	51 e4       	ldi	r21, 0x41	; 65
    1024:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	8e 01       	movw	r16, r28
    102e:	05 59       	subi	r16, 0x95	; 149
    1030:	1f 4f       	sbci	r17, 0xFF	; 255
    1032:	bc 01       	movw	r22, r24
    1034:	cd 01       	movw	r24, r26
    1036:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    103a:	dc 01       	movw	r26, r24
    103c:	cb 01       	movw	r24, r22
    103e:	f8 01       	movw	r30, r16
    1040:	91 83       	std	Z+1, r25	; 0x01
    1042:	80 83       	st	Z, r24
    1044:	27 c0       	rjmp	.+78     	; 0x1094 <lcd_set_4bit+0xb52>
    1046:	ce 01       	movw	r24, r28
    1048:	83 59       	subi	r24, 0x93	; 147
    104a:	9f 4f       	sbci	r25, 0xFF	; 255
    104c:	20 e7       	ldi	r18, 0x70	; 112
    104e:	31 e0       	ldi	r19, 0x01	; 1
    1050:	fc 01       	movw	r30, r24
    1052:	31 83       	std	Z+1, r19	; 0x01
    1054:	20 83       	st	Z, r18
    1056:	ce 01       	movw	r24, r28
    1058:	83 59       	subi	r24, 0x93	; 147
    105a:	9f 4f       	sbci	r25, 0xFF	; 255
    105c:	fc 01       	movw	r30, r24
    105e:	80 81       	ld	r24, Z
    1060:	91 81       	ldd	r25, Z+1	; 0x01
    1062:	8c 01       	movw	r16, r24
    1064:	c8 01       	movw	r24, r16
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	f1 f7       	brne	.-4      	; 0x1066 <lcd_set_4bit+0xb24>
    106a:	8c 01       	movw	r16, r24
    106c:	ce 01       	movw	r24, r28
    106e:	83 59       	subi	r24, 0x93	; 147
    1070:	9f 4f       	sbci	r25, 0xFF	; 255
    1072:	fc 01       	movw	r30, r24
    1074:	11 83       	std	Z+1, r17	; 0x01
    1076:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1078:	ce 01       	movw	r24, r28
    107a:	85 59       	subi	r24, 0x95	; 149
    107c:	9f 4f       	sbci	r25, 0xFF	; 255
    107e:	9e 01       	movw	r18, r28
    1080:	25 59       	subi	r18, 0x95	; 149
    1082:	3f 4f       	sbci	r19, 0xFF	; 255
    1084:	f9 01       	movw	r30, r18
    1086:	20 81       	ld	r18, Z
    1088:	31 81       	ldd	r19, Z+1	; 0x01
    108a:	21 50       	subi	r18, 0x01	; 1
    108c:	30 40       	sbci	r19, 0x00	; 0
    108e:	fc 01       	movw	r30, r24
    1090:	31 83       	std	Z+1, r19	; 0x01
    1092:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1094:	ce 01       	movw	r24, r28
    1096:	85 59       	subi	r24, 0x95	; 149
    1098:	9f 4f       	sbci	r25, 0xFF	; 255
    109a:	fc 01       	movw	r30, r24
    109c:	80 81       	ld	r24, Z
    109e:	91 81       	ldd	r25, Z+1	; 0x01
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	89 f6       	brne	.-94     	; 0x1046 <lcd_set_4bit+0xb04>
    10a4:	2f c0       	rjmp	.+94     	; 0x1104 <lcd_set_4bit+0xbc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a6:	8e 01       	movw	r16, r28
    10a8:	05 59       	subi	r16, 0x95	; 149
    10aa:	1f 4f       	sbci	r17, 0xFF	; 255
    10ac:	ce 01       	movw	r24, r28
    10ae:	89 59       	subi	r24, 0x99	; 153
    10b0:	9f 4f       	sbci	r25, 0xFF	; 255
    10b2:	fc 01       	movw	r30, r24
    10b4:	60 81       	ld	r22, Z
    10b6:	71 81       	ldd	r23, Z+1	; 0x01
    10b8:	82 81       	ldd	r24, Z+2	; 0x02
    10ba:	93 81       	ldd	r25, Z+3	; 0x03
    10bc:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    10c0:	dc 01       	movw	r26, r24
    10c2:	cb 01       	movw	r24, r22
    10c4:	f8 01       	movw	r30, r16
    10c6:	91 83       	std	Z+1, r25	; 0x01
    10c8:	80 83       	st	Z, r24
    10ca:	ce 01       	movw	r24, r28
    10cc:	81 59       	subi	r24, 0x91	; 145
    10ce:	9f 4f       	sbci	r25, 0xFF	; 255
    10d0:	9e 01       	movw	r18, r28
    10d2:	25 59       	subi	r18, 0x95	; 149
    10d4:	3f 4f       	sbci	r19, 0xFF	; 255
    10d6:	f9 01       	movw	r30, r18
    10d8:	20 81       	ld	r18, Z
    10da:	31 81       	ldd	r19, Z+1	; 0x01
    10dc:	fc 01       	movw	r30, r24
    10de:	31 83       	std	Z+1, r19	; 0x01
    10e0:	20 83       	st	Z, r18
    10e2:	ce 01       	movw	r24, r28
    10e4:	81 59       	subi	r24, 0x91	; 145
    10e6:	9f 4f       	sbci	r25, 0xFF	; 255
    10e8:	fc 01       	movw	r30, r24
    10ea:	80 81       	ld	r24, Z
    10ec:	91 81       	ldd	r25, Z+1	; 0x01
    10ee:	8c 01       	movw	r16, r24
    10f0:	c8 01       	movw	r24, r16
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	f1 f7       	brne	.-4      	; 0x10f2 <lcd_set_4bit+0xbb0>
    10f6:	8c 01       	movw	r16, r24
    10f8:	ce 01       	movw	r24, r28
    10fa:	81 59       	subi	r24, 0x91	; 145
    10fc:	9f 4f       	sbci	r25, 0xFF	; 255
    10fe:	fc 01       	movw	r30, r24
    1100:	11 83       	std	Z+1, r17	; 0x01
    1102:	00 83       	st	Z, r16
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    1104:	88 e2       	ldi	r24, 0x28	; 40
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	28 e2       	ldi	r18, 0x28	; 40
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	f9 01       	movw	r30, r18
    110e:	20 81       	ld	r18, Z
    1110:	2b 7f       	andi	r18, 0xFB	; 251
    1112:	fc 01       	movw	r30, r24
    1114:	20 83       	st	Z, r18

	
}
    1116:	c0 59       	subi	r28, 0x90	; 144
    1118:	df 4f       	sbci	r29, 0xFF	; 255
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	08 95       	ret

0000112e <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
    112e:	0f 93       	push	r16
    1130:	1f 93       	push	r17
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	2e 97       	sbiw	r28, 0x0e	; 14
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
	lcd_set_4bit();
    1146:	0e 94 a1 02 	call	0x542	; 0x542 <lcd_set_4bit>
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	a0 e8       	ldi	r26, 0x80	; 128
    1150:	bf e3       	ldi	r27, 0x3F	; 63
    1152:	89 83       	std	Y+1, r24	; 0x01
    1154:	9a 83       	std	Y+2, r25	; 0x02
    1156:	ab 83       	std	Y+3, r26	; 0x03
    1158:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    115a:	69 81       	ldd	r22, Y+1	; 0x01
    115c:	7a 81       	ldd	r23, Y+2	; 0x02
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	9c 81       	ldd	r25, Y+4	; 0x04
    1162:	26 e6       	ldi	r18, 0x66	; 102
    1164:	36 e6       	ldi	r19, 0x66	; 102
    1166:	46 e6       	ldi	r20, 0x66	; 102
    1168:	55 e4       	ldi	r21, 0x45	; 69
    116a:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	8d 83       	std	Y+5, r24	; 0x05
    1174:	9e 83       	std	Y+6, r25	; 0x06
    1176:	af 83       	std	Y+7, r26	; 0x07
    1178:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    117a:	11 e0       	ldi	r17, 0x01	; 1
    117c:	6d 81       	ldd	r22, Y+5	; 0x05
    117e:	7e 81       	ldd	r23, Y+6	; 0x06
    1180:	8f 81       	ldd	r24, Y+7	; 0x07
    1182:	98 85       	ldd	r25, Y+8	; 0x08
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	40 e8       	ldi	r20, 0x80	; 128
    118a:	5f e3       	ldi	r21, 0x3F	; 63
    118c:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    1190:	88 23       	and	r24, r24
    1192:	0c f0       	brlt	.+2      	; 0x1196 <lcd_init+0x68>
    1194:	10 e0       	ldi	r17, 0x00	; 0
    1196:	11 23       	and	r17, r17
    1198:	29 f0       	breq	.+10     	; 0x11a4 <lcd_init+0x76>
		__ticks = 1;
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	9a 87       	std	Y+10, r25	; 0x0a
    11a0:	89 87       	std	Y+9, r24	; 0x09
    11a2:	46 c0       	rjmp	.+140    	; 0x1230 <lcd_init+0x102>
	else if (__tmp > 65535)
    11a4:	11 e0       	ldi	r17, 0x01	; 1
    11a6:	6d 81       	ldd	r22, Y+5	; 0x05
    11a8:	7e 81       	ldd	r23, Y+6	; 0x06
    11aa:	8f 81       	ldd	r24, Y+7	; 0x07
    11ac:	98 85       	ldd	r25, Y+8	; 0x08
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	3f ef       	ldi	r19, 0xFF	; 255
    11b2:	4f e7       	ldi	r20, 0x7F	; 127
    11b4:	57 e4       	ldi	r21, 0x47	; 71
    11b6:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    11ba:	18 16       	cp	r1, r24
    11bc:	0c f0       	brlt	.+2      	; 0x11c0 <lcd_init+0x92>
    11be:	10 e0       	ldi	r17, 0x00	; 0
    11c0:	11 23       	and	r17, r17
    11c2:	61 f1       	breq	.+88     	; 0x121c <lcd_init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c4:	69 81       	ldd	r22, Y+1	; 0x01
    11c6:	7a 81       	ldd	r23, Y+2	; 0x02
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	40 e2       	ldi	r20, 0x20	; 32
    11d2:	51 e4       	ldi	r21, 0x41	; 65
    11d4:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    11d8:	dc 01       	movw	r26, r24
    11da:	cb 01       	movw	r24, r22
    11dc:	bc 01       	movw	r22, r24
    11de:	cd 01       	movw	r24, r26
    11e0:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	9a 87       	std	Y+10, r25	; 0x0a
    11ea:	89 87       	std	Y+9, r24	; 0x09
    11ec:	12 c0       	rjmp	.+36     	; 0x1212 <lcd_init+0xe4>
    11ee:	80 e7       	ldi	r24, 0x70	; 112
    11f0:	91 e0       	ldi	r25, 0x01	; 1
    11f2:	9c 87       	std	Y+12, r25	; 0x0c
    11f4:	8b 87       	std	Y+11, r24	; 0x0b
    11f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    11f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    11fa:	8c 01       	movw	r16, r24
    11fc:	c8 01       	movw	r24, r16
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	f1 f7       	brne	.-4      	; 0x11fe <lcd_init+0xd0>
    1202:	8c 01       	movw	r16, r24
    1204:	1c 87       	std	Y+12, r17	; 0x0c
    1206:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1208:	89 85       	ldd	r24, Y+9	; 0x09
    120a:	9a 85       	ldd	r25, Y+10	; 0x0a
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	9a 87       	std	Y+10, r25	; 0x0a
    1210:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1212:	89 85       	ldd	r24, Y+9	; 0x09
    1214:	9a 85       	ldd	r25, Y+10	; 0x0a
    1216:	00 97       	sbiw	r24, 0x00	; 0
    1218:	51 f7       	brne	.-44     	; 0x11ee <lcd_init+0xc0>
    121a:	17 c0       	rjmp	.+46     	; 0x124a <lcd_init+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    121c:	6d 81       	ldd	r22, Y+5	; 0x05
    121e:	7e 81       	ldd	r23, Y+6	; 0x06
    1220:	8f 81       	ldd	r24, Y+7	; 0x07
    1222:	98 85       	ldd	r25, Y+8	; 0x08
    1224:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	9a 87       	std	Y+10, r25	; 0x0a
    122e:	89 87       	std	Y+9, r24	; 0x09
    1230:	89 85       	ldd	r24, Y+9	; 0x09
    1232:	9a 85       	ldd	r25, Y+10	; 0x0a
    1234:	9e 87       	std	Y+14, r25	; 0x0e
    1236:	8d 87       	std	Y+13, r24	; 0x0d
    1238:	8d 85       	ldd	r24, Y+13	; 0x0d
    123a:	9e 85       	ldd	r25, Y+14	; 0x0e
    123c:	8c 01       	movw	r16, r24
    123e:	c8 01       	movw	r24, r16
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	f1 f7       	brne	.-4      	; 0x1240 <lcd_init+0x112>
    1244:	8c 01       	movw	r16, r24
    1246:	1e 87       	std	Y+14, r17	; 0x0e
    1248:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
    124a:	88 e2       	ldi	r24, 0x28	; 40
    124c:	0e 94 3f 09 	call	0x127e	; 0x127e <lcd_wr_command>
	lcd_wr_command(0x01);
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	0e 94 3f 09 	call	0x127e	; 0x127e <lcd_wr_command>
	lcd_wr_command(0x06);
    1256:	86 e0       	ldi	r24, 0x06	; 6
    1258:	0e 94 3f 09 	call	0x127e	; 0x127e <lcd_wr_command>
	lcd_wr_command(0x0E);
    125c:	8e e0       	ldi	r24, 0x0E	; 14
    125e:	0e 94 3f 09 	call	0x127e	; 0x127e <lcd_wr_command>
	lcd_wr_command(0x80);
    1262:	80 e8       	ldi	r24, 0x80	; 128
    1264:	0e 94 3f 09 	call	0x127e	; 0x127e <lcd_wr_command>
		
}
    1268:	2e 96       	adiw	r28, 0x0e	; 14
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	08 95       	ret

0000127e <lcd_wr_command>:

	 
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	6e 97       	sbiw	r28, 0x1e	; 30
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	f8 94       	cli
    1290:	de bf       	out	0x3e, r29	; 62
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	cd bf       	out	0x3d, r28	; 61
    1296:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
    1298:	8e 8d       	ldd	r24, Y+30	; 0x1e
    129a:	89 83       	std	Y+1, r24	; 0x01
	temp = temp & 0xF0;
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	80 7f       	andi	r24, 0xF0	; 240
    12a0:	89 83       	std	Y+1, r24	; 0x01
	lcd_port &= 0x0F;
    12a2:	88 e2       	ldi	r24, 0x28	; 40
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	28 e2       	ldi	r18, 0x28	; 40
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	f9 01       	movw	r30, r18
    12ac:	20 81       	ld	r18, Z
    12ae:	2f 70       	andi	r18, 0x0F	; 15
    12b0:	fc 01       	movw	r30, r24
    12b2:	20 83       	st	Z, r18
	lcd_port |= temp;
    12b4:	88 e2       	ldi	r24, 0x28	; 40
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	28 e2       	ldi	r18, 0x28	; 40
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	f9 01       	movw	r30, r18
    12be:	30 81       	ld	r19, Z
    12c0:	29 81       	ldd	r18, Y+1	; 0x01
    12c2:	23 2b       	or	r18, r19
    12c4:	fc 01       	movw	r30, r24
    12c6:	20 83       	st	Z, r18
	cbit(lcd_port,RS);
    12c8:	88 e2       	ldi	r24, 0x28	; 40
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	28 e2       	ldi	r18, 0x28	; 40
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	f9 01       	movw	r30, r18
    12d2:	20 81       	ld	r18, Z
    12d4:	2e 7f       	andi	r18, 0xFE	; 254
    12d6:	fc 01       	movw	r30, r24
    12d8:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    12da:	88 e2       	ldi	r24, 0x28	; 40
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	28 e2       	ldi	r18, 0x28	; 40
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	f9 01       	movw	r30, r18
    12e4:	20 81       	ld	r18, Z
    12e6:	2d 7f       	andi	r18, 0xFD	; 253
    12e8:	fc 01       	movw	r30, r24
    12ea:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    12ec:	88 e2       	ldi	r24, 0x28	; 40
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	28 e2       	ldi	r18, 0x28	; 40
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	f9 01       	movw	r30, r18
    12f6:	20 81       	ld	r18, Z
    12f8:	24 60       	ori	r18, 0x04	; 4
    12fa:	fc 01       	movw	r30, r24
    12fc:	20 83       	st	Z, r18
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	a0 ea       	ldi	r26, 0xA0	; 160
    1304:	b0 e4       	ldi	r27, 0x40	; 64
    1306:	8a 83       	std	Y+2, r24	; 0x02
    1308:	9b 83       	std	Y+3, r25	; 0x03
    130a:	ac 83       	std	Y+4, r26	; 0x04
    130c:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    130e:	6a 81       	ldd	r22, Y+2	; 0x02
    1310:	7b 81       	ldd	r23, Y+3	; 0x03
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	9d 81       	ldd	r25, Y+5	; 0x05
    1316:	26 e6       	ldi	r18, 0x66	; 102
    1318:	36 e6       	ldi	r19, 0x66	; 102
    131a:	46 e6       	ldi	r20, 0x66	; 102
    131c:	55 e4       	ldi	r21, 0x45	; 69
    131e:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	8e 83       	std	Y+6, r24	; 0x06
    1328:	9f 83       	std	Y+7, r25	; 0x07
    132a:	a8 87       	std	Y+8, r26	; 0x08
    132c:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    132e:	11 e0       	ldi	r17, 0x01	; 1
    1330:	6e 81       	ldd	r22, Y+6	; 0x06
    1332:	7f 81       	ldd	r23, Y+7	; 0x07
    1334:	88 85       	ldd	r24, Y+8	; 0x08
    1336:	99 85       	ldd	r25, Y+9	; 0x09
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	40 e8       	ldi	r20, 0x80	; 128
    133e:	5f e3       	ldi	r21, 0x3F	; 63
    1340:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    1344:	88 23       	and	r24, r24
    1346:	0c f0       	brlt	.+2      	; 0x134a <lcd_wr_command+0xcc>
    1348:	10 e0       	ldi	r17, 0x00	; 0
    134a:	11 23       	and	r17, r17
    134c:	29 f0       	breq	.+10     	; 0x1358 <lcd_wr_command+0xda>
		__ticks = 1;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	9b 87       	std	Y+11, r25	; 0x0b
    1354:	8a 87       	std	Y+10, r24	; 0x0a
    1356:	46 c0       	rjmp	.+140    	; 0x13e4 <lcd_wr_command+0x166>
	else if (__tmp > 65535)
    1358:	11 e0       	ldi	r17, 0x01	; 1
    135a:	6e 81       	ldd	r22, Y+6	; 0x06
    135c:	7f 81       	ldd	r23, Y+7	; 0x07
    135e:	88 85       	ldd	r24, Y+8	; 0x08
    1360:	99 85       	ldd	r25, Y+9	; 0x09
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	3f ef       	ldi	r19, 0xFF	; 255
    1366:	4f e7       	ldi	r20, 0x7F	; 127
    1368:	57 e4       	ldi	r21, 0x47	; 71
    136a:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    136e:	18 16       	cp	r1, r24
    1370:	0c f0       	brlt	.+2      	; 0x1374 <lcd_wr_command+0xf6>
    1372:	10 e0       	ldi	r17, 0x00	; 0
    1374:	11 23       	and	r17, r17
    1376:	61 f1       	breq	.+88     	; 0x13d0 <lcd_wr_command+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1378:	6a 81       	ldd	r22, Y+2	; 0x02
    137a:	7b 81       	ldd	r23, Y+3	; 0x03
    137c:	8c 81       	ldd	r24, Y+4	; 0x04
    137e:	9d 81       	ldd	r25, Y+5	; 0x05
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	40 e2       	ldi	r20, 0x20	; 32
    1386:	51 e4       	ldi	r21, 0x41	; 65
    1388:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	bc 01       	movw	r22, r24
    1392:	cd 01       	movw	r24, r26
    1394:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
    139c:	9b 87       	std	Y+11, r25	; 0x0b
    139e:	8a 87       	std	Y+10, r24	; 0x0a
    13a0:	12 c0       	rjmp	.+36     	; 0x13c6 <lcd_wr_command+0x148>
    13a2:	80 e7       	ldi	r24, 0x70	; 112
    13a4:	91 e0       	ldi	r25, 0x01	; 1
    13a6:	9d 87       	std	Y+13, r25	; 0x0d
    13a8:	8c 87       	std	Y+12, r24	; 0x0c
    13aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    13ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    13ae:	8c 01       	movw	r16, r24
    13b0:	c8 01       	movw	r24, r16
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	f1 f7       	brne	.-4      	; 0x13b2 <lcd_wr_command+0x134>
    13b6:	8c 01       	movw	r16, r24
    13b8:	1d 87       	std	Y+13, r17	; 0x0d
    13ba:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    13be:	9b 85       	ldd	r25, Y+11	; 0x0b
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	9b 87       	std	Y+11, r25	; 0x0b
    13c4:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    13c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	51 f7       	brne	.-44     	; 0x13a2 <lcd_wr_command+0x124>
    13ce:	17 c0       	rjmp	.+46     	; 0x13fe <lcd_wr_command+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d0:	6e 81       	ldd	r22, Y+6	; 0x06
    13d2:	7f 81       	ldd	r23, Y+7	; 0x07
    13d4:	88 85       	ldd	r24, Y+8	; 0x08
    13d6:	99 85       	ldd	r25, Y+9	; 0x09
    13d8:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	9b 87       	std	Y+11, r25	; 0x0b
    13e2:	8a 87       	std	Y+10, r24	; 0x0a
    13e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    13e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    13e8:	9f 87       	std	Y+15, r25	; 0x0f
    13ea:	8e 87       	std	Y+14, r24	; 0x0e
    13ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    13ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    13f0:	8c 01       	movw	r16, r24
    13f2:	f8 01       	movw	r30, r16
    13f4:	31 97       	sbiw	r30, 0x01	; 1
    13f6:	f1 f7       	brne	.-4      	; 0x13f4 <lcd_wr_command+0x176>
    13f8:	8f 01       	movw	r16, r30
    13fa:	1f 87       	std	Y+15, r17	; 0x0f
    13fc:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(5);
	cbit(lcd_port,EN);
    13fe:	88 e2       	ldi	r24, 0x28	; 40
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	28 e2       	ldi	r18, 0x28	; 40
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	f9 01       	movw	r30, r18
    1408:	20 81       	ld	r18, Z
    140a:	2b 7f       	andi	r18, 0xFB	; 251
    140c:	fc 01       	movw	r30, r24
    140e:	20 83       	st	Z, r18
	
	cmd = cmd & 0x0F;
    1410:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1412:	8f 70       	andi	r24, 0x0F	; 15
    1414:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
    1416:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1418:	82 95       	swap	r24
    141a:	80 7f       	andi	r24, 0xF0	; 240
    141c:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    141e:	88 e2       	ldi	r24, 0x28	; 40
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	28 e2       	ldi	r18, 0x28	; 40
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	f9 01       	movw	r30, r18
    1428:	20 81       	ld	r18, Z
    142a:	2f 70       	andi	r18, 0x0F	; 15
    142c:	fc 01       	movw	r30, r24
    142e:	20 83       	st	Z, r18
	lcd_port |= cmd;
    1430:	88 e2       	ldi	r24, 0x28	; 40
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	28 e2       	ldi	r18, 0x28	; 40
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	f9 01       	movw	r30, r18
    143a:	30 81       	ld	r19, Z
    143c:	2e 8d       	ldd	r18, Y+30	; 0x1e
    143e:	23 2b       	or	r18, r19
    1440:	fc 01       	movw	r30, r24
    1442:	20 83       	st	Z, r18
	cbit(lcd_port,RS);
    1444:	88 e2       	ldi	r24, 0x28	; 40
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	28 e2       	ldi	r18, 0x28	; 40
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	f9 01       	movw	r30, r18
    144e:	20 81       	ld	r18, Z
    1450:	2e 7f       	andi	r18, 0xFE	; 254
    1452:	fc 01       	movw	r30, r24
    1454:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    1456:	88 e2       	ldi	r24, 0x28	; 40
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	28 e2       	ldi	r18, 0x28	; 40
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	f9 01       	movw	r30, r18
    1460:	20 81       	ld	r18, Z
    1462:	2d 7f       	andi	r18, 0xFD	; 253
    1464:	fc 01       	movw	r30, r24
    1466:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    1468:	88 e2       	ldi	r24, 0x28	; 40
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	28 e2       	ldi	r18, 0x28	; 40
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	f9 01       	movw	r30, r18
    1472:	20 81       	ld	r18, Z
    1474:	24 60       	ori	r18, 0x04	; 4
    1476:	fc 01       	movw	r30, r24
    1478:	20 83       	st	Z, r18
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	a0 ea       	ldi	r26, 0xA0	; 160
    1480:	b0 e4       	ldi	r27, 0x40	; 64
    1482:	88 8b       	std	Y+16, r24	; 0x10
    1484:	99 8b       	std	Y+17, r25	; 0x11
    1486:	aa 8b       	std	Y+18, r26	; 0x12
    1488:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    148a:	68 89       	ldd	r22, Y+16	; 0x10
    148c:	79 89       	ldd	r23, Y+17	; 0x11
    148e:	8a 89       	ldd	r24, Y+18	; 0x12
    1490:	9b 89       	ldd	r25, Y+19	; 0x13
    1492:	26 e6       	ldi	r18, 0x66	; 102
    1494:	36 e6       	ldi	r19, 0x66	; 102
    1496:	46 e6       	ldi	r20, 0x66	; 102
    1498:	55 e4       	ldi	r21, 0x45	; 69
    149a:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	8c 8b       	std	Y+20, r24	; 0x14
    14a4:	9d 8b       	std	Y+21, r25	; 0x15
    14a6:	ae 8b       	std	Y+22, r26	; 0x16
    14a8:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    14aa:	11 e0       	ldi	r17, 0x01	; 1
    14ac:	6c 89       	ldd	r22, Y+20	; 0x14
    14ae:	7d 89       	ldd	r23, Y+21	; 0x15
    14b0:	8e 89       	ldd	r24, Y+22	; 0x16
    14b2:	9f 89       	ldd	r25, Y+23	; 0x17
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e8       	ldi	r20, 0x80	; 128
    14ba:	5f e3       	ldi	r21, 0x3F	; 63
    14bc:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    14c0:	88 23       	and	r24, r24
    14c2:	0c f0       	brlt	.+2      	; 0x14c6 <lcd_wr_command+0x248>
    14c4:	10 e0       	ldi	r17, 0x00	; 0
    14c6:	11 23       	and	r17, r17
    14c8:	29 f0       	breq	.+10     	; 0x14d4 <lcd_wr_command+0x256>
		__ticks = 1;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	99 8f       	std	Y+25, r25	; 0x19
    14d0:	88 8f       	std	Y+24, r24	; 0x18
    14d2:	46 c0       	rjmp	.+140    	; 0x1560 <lcd_wr_command+0x2e2>
	else if (__tmp > 65535)
    14d4:	11 e0       	ldi	r17, 0x01	; 1
    14d6:	6c 89       	ldd	r22, Y+20	; 0x14
    14d8:	7d 89       	ldd	r23, Y+21	; 0x15
    14da:	8e 89       	ldd	r24, Y+22	; 0x16
    14dc:	9f 89       	ldd	r25, Y+23	; 0x17
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	3f ef       	ldi	r19, 0xFF	; 255
    14e2:	4f e7       	ldi	r20, 0x7F	; 127
    14e4:	57 e4       	ldi	r21, 0x47	; 71
    14e6:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    14ea:	18 16       	cp	r1, r24
    14ec:	0c f0       	brlt	.+2      	; 0x14f0 <lcd_wr_command+0x272>
    14ee:	10 e0       	ldi	r17, 0x00	; 0
    14f0:	11 23       	and	r17, r17
    14f2:	61 f1       	breq	.+88     	; 0x154c <lcd_wr_command+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f4:	68 89       	ldd	r22, Y+16	; 0x10
    14f6:	79 89       	ldd	r23, Y+17	; 0x11
    14f8:	8a 89       	ldd	r24, Y+18	; 0x12
    14fa:	9b 89       	ldd	r25, Y+19	; 0x13
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e2       	ldi	r20, 0x20	; 32
    1502:	51 e4       	ldi	r21, 0x41	; 65
    1504:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    1508:	dc 01       	movw	r26, r24
    150a:	cb 01       	movw	r24, r22
    150c:	bc 01       	movw	r22, r24
    150e:	cd 01       	movw	r24, r26
    1510:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	99 8f       	std	Y+25, r25	; 0x19
    151a:	88 8f       	std	Y+24, r24	; 0x18
    151c:	12 c0       	rjmp	.+36     	; 0x1542 <lcd_wr_command+0x2c4>
    151e:	80 e7       	ldi	r24, 0x70	; 112
    1520:	91 e0       	ldi	r25, 0x01	; 1
    1522:	9b 8f       	std	Y+27, r25	; 0x1b
    1524:	8a 8f       	std	Y+26, r24	; 0x1a
    1526:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1528:	9b 8d       	ldd	r25, Y+27	; 0x1b
    152a:	8c 01       	movw	r16, r24
    152c:	c8 01       	movw	r24, r16
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	f1 f7       	brne	.-4      	; 0x152e <lcd_wr_command+0x2b0>
    1532:	8c 01       	movw	r16, r24
    1534:	1b 8f       	std	Y+27, r17	; 0x1b
    1536:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1538:	88 8d       	ldd	r24, Y+24	; 0x18
    153a:	99 8d       	ldd	r25, Y+25	; 0x19
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	99 8f       	std	Y+25, r25	; 0x19
    1540:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1542:	88 8d       	ldd	r24, Y+24	; 0x18
    1544:	99 8d       	ldd	r25, Y+25	; 0x19
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	51 f7       	brne	.-44     	; 0x151e <lcd_wr_command+0x2a0>
    154a:	17 c0       	rjmp	.+46     	; 0x157a <lcd_wr_command+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    154c:	6c 89       	ldd	r22, Y+20	; 0x14
    154e:	7d 89       	ldd	r23, Y+21	; 0x15
    1550:	8e 89       	ldd	r24, Y+22	; 0x16
    1552:	9f 89       	ldd	r25, Y+23	; 0x17
    1554:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	99 8f       	std	Y+25, r25	; 0x19
    155e:	88 8f       	std	Y+24, r24	; 0x18
    1560:	88 8d       	ldd	r24, Y+24	; 0x18
    1562:	99 8d       	ldd	r25, Y+25	; 0x19
    1564:	9d 8f       	std	Y+29, r25	; 0x1d
    1566:	8c 8f       	std	Y+28, r24	; 0x1c
    1568:	8c 8d       	ldd	r24, Y+28	; 0x1c
    156a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    156c:	8c 01       	movw	r16, r24
    156e:	f8 01       	movw	r30, r16
    1570:	31 97       	sbiw	r30, 0x01	; 1
    1572:	f1 f7       	brne	.-4      	; 0x1570 <lcd_wr_command+0x2f2>
    1574:	8f 01       	movw	r16, r30
    1576:	1d 8f       	std	Y+29, r17	; 0x1d
    1578:	0c 8f       	std	Y+28, r16	; 0x1c
	_delay_ms(5);
	cbit(lcd_port,EN);
    157a:	88 e2       	ldi	r24, 0x28	; 40
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	28 e2       	ldi	r18, 0x28	; 40
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	f9 01       	movw	r30, r18
    1584:	20 81       	ld	r18, Z
    1586:	2b 7f       	andi	r18, 0xFB	; 251
    1588:	fc 01       	movw	r30, r24
    158a:	20 83       	st	Z, r18
}
    158c:	6e 96       	adiw	r28, 0x1e	; 30
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	1f 91       	pop	r17
    159e:	0f 91       	pop	r16
    15a0:	08 95       	ret

000015a2 <lcd_wr_char>:

//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
    15a2:	0f 93       	push	r16
    15a4:	1f 93       	push	r17
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	6e 97       	sbiw	r28, 0x1e	; 30
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	de bf       	out	0x3e, r29	; 62
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	cd bf       	out	0x3d, r28	; 61
    15ba:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    15bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15be:	89 83       	std	Y+1, r24	; 0x01
	temp = (temp & 0xF0);
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	80 7f       	andi	r24, 0xF0	; 240
    15c4:	89 83       	std	Y+1, r24	; 0x01
	lcd_port &= 0x0F;
    15c6:	88 e2       	ldi	r24, 0x28	; 40
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	28 e2       	ldi	r18, 0x28	; 40
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	f9 01       	movw	r30, r18
    15d0:	20 81       	ld	r18, Z
    15d2:	2f 70       	andi	r18, 0x0F	; 15
    15d4:	fc 01       	movw	r30, r24
    15d6:	20 83       	st	Z, r18
	lcd_port |= temp;
    15d8:	88 e2       	ldi	r24, 0x28	; 40
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	28 e2       	ldi	r18, 0x28	; 40
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	f9 01       	movw	r30, r18
    15e2:	30 81       	ld	r19, Z
    15e4:	29 81       	ldd	r18, Y+1	; 0x01
    15e6:	23 2b       	or	r18, r19
    15e8:	fc 01       	movw	r30, r24
    15ea:	20 83       	st	Z, r18
	sbit(lcd_port,RS);
    15ec:	88 e2       	ldi	r24, 0x28	; 40
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	28 e2       	ldi	r18, 0x28	; 40
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	f9 01       	movw	r30, r18
    15f6:	20 81       	ld	r18, Z
    15f8:	21 60       	ori	r18, 0x01	; 1
    15fa:	fc 01       	movw	r30, r24
    15fc:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    15fe:	88 e2       	ldi	r24, 0x28	; 40
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	28 e2       	ldi	r18, 0x28	; 40
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	f9 01       	movw	r30, r18
    1608:	20 81       	ld	r18, Z
    160a:	2d 7f       	andi	r18, 0xFD	; 253
    160c:	fc 01       	movw	r30, r24
    160e:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    1610:	88 e2       	ldi	r24, 0x28	; 40
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	28 e2       	ldi	r18, 0x28	; 40
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	f9 01       	movw	r30, r18
    161a:	20 81       	ld	r18, Z
    161c:	24 60       	ori	r18, 0x04	; 4
    161e:	fc 01       	movw	r30, r24
    1620:	20 83       	st	Z, r18
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	a0 ea       	ldi	r26, 0xA0	; 160
    1628:	b0 e4       	ldi	r27, 0x40	; 64
    162a:	8a 83       	std	Y+2, r24	; 0x02
    162c:	9b 83       	std	Y+3, r25	; 0x03
    162e:	ac 83       	std	Y+4, r26	; 0x04
    1630:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1632:	6a 81       	ldd	r22, Y+2	; 0x02
    1634:	7b 81       	ldd	r23, Y+3	; 0x03
    1636:	8c 81       	ldd	r24, Y+4	; 0x04
    1638:	9d 81       	ldd	r25, Y+5	; 0x05
    163a:	26 e6       	ldi	r18, 0x66	; 102
    163c:	36 e6       	ldi	r19, 0x66	; 102
    163e:	46 e6       	ldi	r20, 0x66	; 102
    1640:	55 e4       	ldi	r21, 0x45	; 69
    1642:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	8e 83       	std	Y+6, r24	; 0x06
    164c:	9f 83       	std	Y+7, r25	; 0x07
    164e:	a8 87       	std	Y+8, r26	; 0x08
    1650:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1652:	11 e0       	ldi	r17, 0x01	; 1
    1654:	6e 81       	ldd	r22, Y+6	; 0x06
    1656:	7f 81       	ldd	r23, Y+7	; 0x07
    1658:	88 85       	ldd	r24, Y+8	; 0x08
    165a:	99 85       	ldd	r25, Y+9	; 0x09
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 e8       	ldi	r20, 0x80	; 128
    1662:	5f e3       	ldi	r21, 0x3F	; 63
    1664:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    1668:	88 23       	and	r24, r24
    166a:	0c f0       	brlt	.+2      	; 0x166e <lcd_wr_char+0xcc>
    166c:	10 e0       	ldi	r17, 0x00	; 0
    166e:	11 23       	and	r17, r17
    1670:	29 f0       	breq	.+10     	; 0x167c <lcd_wr_char+0xda>
		__ticks = 1;
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	9b 87       	std	Y+11, r25	; 0x0b
    1678:	8a 87       	std	Y+10, r24	; 0x0a
    167a:	46 c0       	rjmp	.+140    	; 0x1708 <lcd_wr_char+0x166>
	else if (__tmp > 65535)
    167c:	11 e0       	ldi	r17, 0x01	; 1
    167e:	6e 81       	ldd	r22, Y+6	; 0x06
    1680:	7f 81       	ldd	r23, Y+7	; 0x07
    1682:	88 85       	ldd	r24, Y+8	; 0x08
    1684:	99 85       	ldd	r25, Y+9	; 0x09
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	3f ef       	ldi	r19, 0xFF	; 255
    168a:	4f e7       	ldi	r20, 0x7F	; 127
    168c:	57 e4       	ldi	r21, 0x47	; 71
    168e:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    1692:	18 16       	cp	r1, r24
    1694:	0c f0       	brlt	.+2      	; 0x1698 <lcd_wr_char+0xf6>
    1696:	10 e0       	ldi	r17, 0x00	; 0
    1698:	11 23       	and	r17, r17
    169a:	61 f1       	breq	.+88     	; 0x16f4 <lcd_wr_char+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169c:	6a 81       	ldd	r22, Y+2	; 0x02
    169e:	7b 81       	ldd	r23, Y+3	; 0x03
    16a0:	8c 81       	ldd	r24, Y+4	; 0x04
    16a2:	9d 81       	ldd	r25, Y+5	; 0x05
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e2       	ldi	r20, 0x20	; 32
    16aa:	51 e4       	ldi	r21, 0x41	; 65
    16ac:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	bc 01       	movw	r22, r24
    16b6:	cd 01       	movw	r24, r26
    16b8:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	9b 87       	std	Y+11, r25	; 0x0b
    16c2:	8a 87       	std	Y+10, r24	; 0x0a
    16c4:	12 c0       	rjmp	.+36     	; 0x16ea <lcd_wr_char+0x148>
    16c6:	80 e7       	ldi	r24, 0x70	; 112
    16c8:	91 e0       	ldi	r25, 0x01	; 1
    16ca:	9d 87       	std	Y+13, r25	; 0x0d
    16cc:	8c 87       	std	Y+12, r24	; 0x0c
    16ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    16d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    16d2:	8c 01       	movw	r16, r24
    16d4:	c8 01       	movw	r24, r16
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	f1 f7       	brne	.-4      	; 0x16d6 <lcd_wr_char+0x134>
    16da:	8c 01       	movw	r16, r24
    16dc:	1d 87       	std	Y+13, r17	; 0x0d
    16de:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    16e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	9b 87       	std	Y+11, r25	; 0x0b
    16e8:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    16ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	51 f7       	brne	.-44     	; 0x16c6 <lcd_wr_char+0x124>
    16f2:	17 c0       	rjmp	.+46     	; 0x1722 <lcd_wr_char+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f4:	6e 81       	ldd	r22, Y+6	; 0x06
    16f6:	7f 81       	ldd	r23, Y+7	; 0x07
    16f8:	88 85       	ldd	r24, Y+8	; 0x08
    16fa:	99 85       	ldd	r25, Y+9	; 0x09
    16fc:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	9b 87       	std	Y+11, r25	; 0x0b
    1706:	8a 87       	std	Y+10, r24	; 0x0a
    1708:	8a 85       	ldd	r24, Y+10	; 0x0a
    170a:	9b 85       	ldd	r25, Y+11	; 0x0b
    170c:	9f 87       	std	Y+15, r25	; 0x0f
    170e:	8e 87       	std	Y+14, r24	; 0x0e
    1710:	8e 85       	ldd	r24, Y+14	; 0x0e
    1712:	9f 85       	ldd	r25, Y+15	; 0x0f
    1714:	8c 01       	movw	r16, r24
    1716:	f8 01       	movw	r30, r16
    1718:	31 97       	sbiw	r30, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <lcd_wr_char+0x176>
    171c:	8f 01       	movw	r16, r30
    171e:	1f 87       	std	Y+15, r17	; 0x0f
    1720:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(5);
	cbit(lcd_port,EN);
    1722:	88 e2       	ldi	r24, 0x28	; 40
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	28 e2       	ldi	r18, 0x28	; 40
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	f9 01       	movw	r30, r18
    172c:	20 81       	ld	r18, Z
    172e:	2b 7f       	andi	r18, 0xFB	; 251
    1730:	fc 01       	movw	r30, r24
    1732:	20 83       	st	Z, r18

	letter = letter & 0x0F;
    1734:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1736:	8f 70       	andi	r24, 0x0F	; 15
    1738:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    173a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    173c:	82 95       	swap	r24
    173e:	80 7f       	andi	r24, 0xF0	; 240
    1740:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1742:	88 e2       	ldi	r24, 0x28	; 40
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	28 e2       	ldi	r18, 0x28	; 40
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	f9 01       	movw	r30, r18
    174c:	20 81       	ld	r18, Z
    174e:	2f 70       	andi	r18, 0x0F	; 15
    1750:	fc 01       	movw	r30, r24
    1752:	20 83       	st	Z, r18
	lcd_port |= letter;
    1754:	88 e2       	ldi	r24, 0x28	; 40
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	28 e2       	ldi	r18, 0x28	; 40
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	f9 01       	movw	r30, r18
    175e:	30 81       	ld	r19, Z
    1760:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1762:	23 2b       	or	r18, r19
    1764:	fc 01       	movw	r30, r24
    1766:	20 83       	st	Z, r18
	sbit(lcd_port,RS);
    1768:	88 e2       	ldi	r24, 0x28	; 40
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	28 e2       	ldi	r18, 0x28	; 40
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	f9 01       	movw	r30, r18
    1772:	20 81       	ld	r18, Z
    1774:	21 60       	ori	r18, 0x01	; 1
    1776:	fc 01       	movw	r30, r24
    1778:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    177a:	88 e2       	ldi	r24, 0x28	; 40
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	28 e2       	ldi	r18, 0x28	; 40
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	f9 01       	movw	r30, r18
    1784:	20 81       	ld	r18, Z
    1786:	2d 7f       	andi	r18, 0xFD	; 253
    1788:	fc 01       	movw	r30, r24
    178a:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    178c:	88 e2       	ldi	r24, 0x28	; 40
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	28 e2       	ldi	r18, 0x28	; 40
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	f9 01       	movw	r30, r18
    1796:	20 81       	ld	r18, Z
    1798:	24 60       	ori	r18, 0x04	; 4
    179a:	fc 01       	movw	r30, r24
    179c:	20 83       	st	Z, r18
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	a0 ea       	ldi	r26, 0xA0	; 160
    17a4:	b0 e4       	ldi	r27, 0x40	; 64
    17a6:	88 8b       	std	Y+16, r24	; 0x10
    17a8:	99 8b       	std	Y+17, r25	; 0x11
    17aa:	aa 8b       	std	Y+18, r26	; 0x12
    17ac:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    17ae:	68 89       	ldd	r22, Y+16	; 0x10
    17b0:	79 89       	ldd	r23, Y+17	; 0x11
    17b2:	8a 89       	ldd	r24, Y+18	; 0x12
    17b4:	9b 89       	ldd	r25, Y+19	; 0x13
    17b6:	26 e6       	ldi	r18, 0x66	; 102
    17b8:	36 e6       	ldi	r19, 0x66	; 102
    17ba:	46 e6       	ldi	r20, 0x66	; 102
    17bc:	55 e4       	ldi	r21, 0x45	; 69
    17be:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	8c 8b       	std	Y+20, r24	; 0x14
    17c8:	9d 8b       	std	Y+21, r25	; 0x15
    17ca:	ae 8b       	std	Y+22, r26	; 0x16
    17cc:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    17ce:	11 e0       	ldi	r17, 0x01	; 1
    17d0:	6c 89       	ldd	r22, Y+20	; 0x14
    17d2:	7d 89       	ldd	r23, Y+21	; 0x15
    17d4:	8e 89       	ldd	r24, Y+22	; 0x16
    17d6:	9f 89       	ldd	r25, Y+23	; 0x17
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	40 e8       	ldi	r20, 0x80	; 128
    17de:	5f e3       	ldi	r21, 0x3F	; 63
    17e0:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    17e4:	88 23       	and	r24, r24
    17e6:	0c f0       	brlt	.+2      	; 0x17ea <lcd_wr_char+0x248>
    17e8:	10 e0       	ldi	r17, 0x00	; 0
    17ea:	11 23       	and	r17, r17
    17ec:	29 f0       	breq	.+10     	; 0x17f8 <lcd_wr_char+0x256>
		__ticks = 1;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	99 8f       	std	Y+25, r25	; 0x19
    17f4:	88 8f       	std	Y+24, r24	; 0x18
    17f6:	46 c0       	rjmp	.+140    	; 0x1884 <lcd_wr_char+0x2e2>
	else if (__tmp > 65535)
    17f8:	11 e0       	ldi	r17, 0x01	; 1
    17fa:	6c 89       	ldd	r22, Y+20	; 0x14
    17fc:	7d 89       	ldd	r23, Y+21	; 0x15
    17fe:	8e 89       	ldd	r24, Y+22	; 0x16
    1800:	9f 89       	ldd	r25, Y+23	; 0x17
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	3f ef       	ldi	r19, 0xFF	; 255
    1806:	4f e7       	ldi	r20, 0x7F	; 127
    1808:	57 e4       	ldi	r21, 0x47	; 71
    180a:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    180e:	18 16       	cp	r1, r24
    1810:	0c f0       	brlt	.+2      	; 0x1814 <lcd_wr_char+0x272>
    1812:	10 e0       	ldi	r17, 0x00	; 0
    1814:	11 23       	and	r17, r17
    1816:	61 f1       	breq	.+88     	; 0x1870 <lcd_wr_char+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1818:	68 89       	ldd	r22, Y+16	; 0x10
    181a:	79 89       	ldd	r23, Y+17	; 0x11
    181c:	8a 89       	ldd	r24, Y+18	; 0x12
    181e:	9b 89       	ldd	r25, Y+19	; 0x13
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e2       	ldi	r20, 0x20	; 32
    1826:	51 e4       	ldi	r21, 0x41	; 65
    1828:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	bc 01       	movw	r22, r24
    1832:	cd 01       	movw	r24, r26
    1834:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	99 8f       	std	Y+25, r25	; 0x19
    183e:	88 8f       	std	Y+24, r24	; 0x18
    1840:	12 c0       	rjmp	.+36     	; 0x1866 <lcd_wr_char+0x2c4>
    1842:	80 e7       	ldi	r24, 0x70	; 112
    1844:	91 e0       	ldi	r25, 0x01	; 1
    1846:	9b 8f       	std	Y+27, r25	; 0x1b
    1848:	8a 8f       	std	Y+26, r24	; 0x1a
    184a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    184c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    184e:	8c 01       	movw	r16, r24
    1850:	c8 01       	movw	r24, r16
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	f1 f7       	brne	.-4      	; 0x1852 <lcd_wr_char+0x2b0>
    1856:	8c 01       	movw	r16, r24
    1858:	1b 8f       	std	Y+27, r17	; 0x1b
    185a:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    185c:	88 8d       	ldd	r24, Y+24	; 0x18
    185e:	99 8d       	ldd	r25, Y+25	; 0x19
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	99 8f       	std	Y+25, r25	; 0x19
    1864:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1866:	88 8d       	ldd	r24, Y+24	; 0x18
    1868:	99 8d       	ldd	r25, Y+25	; 0x19
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	51 f7       	brne	.-44     	; 0x1842 <lcd_wr_char+0x2a0>
    186e:	17 c0       	rjmp	.+46     	; 0x189e <lcd_wr_char+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1870:	6c 89       	ldd	r22, Y+20	; 0x14
    1872:	7d 89       	ldd	r23, Y+21	; 0x15
    1874:	8e 89       	ldd	r24, Y+22	; 0x16
    1876:	9f 89       	ldd	r25, Y+23	; 0x17
    1878:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	99 8f       	std	Y+25, r25	; 0x19
    1882:	88 8f       	std	Y+24, r24	; 0x18
    1884:	88 8d       	ldd	r24, Y+24	; 0x18
    1886:	99 8d       	ldd	r25, Y+25	; 0x19
    1888:	9d 8f       	std	Y+29, r25	; 0x1d
    188a:	8c 8f       	std	Y+28, r24	; 0x1c
    188c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    188e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1890:	8c 01       	movw	r16, r24
    1892:	f8 01       	movw	r30, r16
    1894:	31 97       	sbiw	r30, 0x01	; 1
    1896:	f1 f7       	brne	.-4      	; 0x1894 <lcd_wr_char+0x2f2>
    1898:	8f 01       	movw	r16, r30
    189a:	1d 8f       	std	Y+29, r17	; 0x1d
    189c:	0c 8f       	std	Y+28, r16	; 0x1c
	_delay_ms(5);
	cbit(lcd_port,EN);
    189e:	88 e2       	ldi	r24, 0x28	; 40
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	28 e2       	ldi	r18, 0x28	; 40
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	f9 01       	movw	r30, r18
    18a8:	20 81       	ld	r18, Z
    18aa:	2b 7f       	andi	r18, 0xFB	; 251
    18ac:	fc 01       	movw	r30, r24
    18ae:	20 83       	st	Z, r18
}
    18b0:	6e 96       	adiw	r28, 0x1e	; 30
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	1f 91       	pop	r17
    18c2:	0f 91       	pop	r16
    18c4:	08 95       	ret

000018c6 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
    18c6:	cf 93       	push	r28
    18c8:	df 93       	push	r29
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    18ce:	80 e8       	ldi	r24, 0x80	; 128
    18d0:	0e 94 3f 09 	call	0x127e	; 0x127e <lcd_wr_command>
}
    18d4:	df 91       	pop	r29
    18d6:	cf 91       	pop	r28
    18d8:	08 95       	ret

000018da <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	0f 92       	push	r0
    18e0:	0f 92       	push	r0
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	9a 83       	std	Y+2, r25	; 0x02
    18e8:	89 83       	std	Y+1, r24	; 0x01
	while(*str != '\0')
    18ea:	0b c0       	rjmp	.+22     	; 0x1902 <lcd_string+0x28>
	{
		lcd_wr_char(*str);
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	9a 81       	ldd	r25, Y+2	; 0x02
    18f0:	fc 01       	movw	r30, r24
    18f2:	80 81       	ld	r24, Z
    18f4:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <lcd_wr_char>
		str++;
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	9a 81       	ldd	r25, Y+2	; 0x02
    18fc:	01 96       	adiw	r24, 0x01	; 1
    18fe:	9a 83       	std	Y+2, r25	; 0x02
    1900:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	9a 81       	ldd	r25, Y+2	; 0x02
    1906:	fc 01       	movw	r30, r24
    1908:	80 81       	ld	r24, Z
    190a:	88 23       	and	r24, r24
    190c:	79 f7       	brne	.-34     	; 0x18ec <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	08 95       	ret

00001918 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	0f 92       	push	r0
    191e:	0f 92       	push	r0
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	88 2f       	mov	r24, r24
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	82 30       	cpi	r24, 0x02	; 2
    1930:	91 05       	cpc	r25, r1
    1932:	99 f0       	breq	.+38     	; 0x195a <lcd_cursor+0x42>
    1934:	83 30       	cpi	r24, 0x03	; 3
    1936:	91 05       	cpc	r25, r1
    1938:	24 f4       	brge	.+8      	; 0x1942 <lcd_cursor+0x2a>
    193a:	81 30       	cpi	r24, 0x01	; 1
    193c:	91 05       	cpc	r25, r1
    193e:	41 f0       	breq	.+16     	; 0x1950 <lcd_cursor+0x38>
    1940:	1b c0       	rjmp	.+54     	; 0x1978 <lcd_cursor+0x60>
    1942:	83 30       	cpi	r24, 0x03	; 3
    1944:	91 05       	cpc	r25, r1
    1946:	71 f0       	breq	.+28     	; 0x1964 <lcd_cursor+0x4c>
    1948:	84 30       	cpi	r24, 0x04	; 4
    194a:	91 05       	cpc	r25, r1
    194c:	81 f0       	breq	.+32     	; 0x196e <lcd_cursor+0x56>
    194e:	14 c0       	rjmp	.+40     	; 0x1978 <lcd_cursor+0x60>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	81 58       	subi	r24, 0x81	; 129
    1954:	0e 94 3f 09 	call	0x127e	; 0x127e <lcd_wr_command>
    1958:	10 c0       	rjmp	.+32     	; 0x197a <lcd_cursor+0x62>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	81 54       	subi	r24, 0x41	; 65
    195e:	0e 94 3f 09 	call	0x127e	; 0x127e <lcd_wr_command>
    1962:	0b c0       	rjmp	.+22     	; 0x197a <lcd_cursor+0x62>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	8d 56       	subi	r24, 0x6D	; 109
    1968:	0e 94 3f 09 	call	0x127e	; 0x127e <lcd_wr_command>
    196c:	06 c0       	rjmp	.+12     	; 0x197a <lcd_cursor+0x62>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	8d 52       	subi	r24, 0x2D	; 45
    1972:	0e 94 3f 09 	call	0x127e	; 0x127e <lcd_wr_command>
    1976:	01 c0       	rjmp	.+2      	; 0x197a <lcd_cursor+0x62>
		default: break;
    1978:	00 00       	nop
	}
}
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	08 95       	ret

00001984 <lcd_print>:

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	27 97       	sbiw	r28, 0x07	; 7
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	f8 94       	cli
    1992:	de bf       	out	0x3e, r29	; 62
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	cd bf       	out	0x3d, r28	; 61
    1998:	8a 83       	std	Y+2, r24	; 0x02
    199a:	6b 83       	std	Y+3, r22	; 0x03
    199c:	5d 83       	std	Y+5, r21	; 0x05
    199e:	4c 83       	std	Y+4, r20	; 0x04
    19a0:	3f 83       	std	Y+7, r19	; 0x07
    19a2:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    19a4:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	88 23       	and	r24, r24
    19aa:	19 f0       	breq	.+6      	; 0x19b2 <lcd_print+0x2e>
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	88 23       	and	r24, r24
    19b0:	19 f4       	brne	.+6      	; 0x19b8 <lcd_print+0x34>
	{
		lcd_home();
    19b2:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <lcd_home>
    19b6:	04 c0       	rjmp	.+8      	; 0x19c0 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	6b 81       	ldd	r22, Y+3	; 0x03
    19bc:	0e 94 8c 0c 	call	0x1918	; 0x1918 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    19c0:	8e 81       	ldd	r24, Y+6	; 0x06
    19c2:	9f 81       	ldd	r25, Y+7	; 0x07
    19c4:	85 30       	cpi	r24, 0x05	; 5
    19c6:	91 05       	cpc	r25, r1
    19c8:	19 f0       	breq	.+6      	; 0x19d0 <lcd_print+0x4c>
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	81 30       	cpi	r24, 0x01	; 1
    19ce:	b1 f4       	brne	.+44     	; 0x19fc <lcd_print+0x78>
	{
		million=value/10000+48;
    19d0:	8c 81       	ldd	r24, Y+4	; 0x04
    19d2:	9d 81       	ldd	r25, Y+5	; 0x05
    19d4:	20 e1       	ldi	r18, 0x10	; 16
    19d6:	37 e2       	ldi	r19, 0x27	; 39
    19d8:	b9 01       	movw	r22, r18
    19da:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <__udivmodhi4>
    19de:	9b 01       	movw	r18, r22
    19e0:	c9 01       	movw	r24, r18
    19e2:	c0 96       	adiw	r24, 0x30	; 48
    19e4:	90 93 80 02 	sts	0x0280, r25
    19e8:	80 93 7f 02 	sts	0x027F, r24
		lcd_wr_char(million);
    19ec:	80 91 7f 02 	lds	r24, 0x027F
    19f0:	90 91 80 02 	lds	r25, 0x0280
    19f4:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <lcd_wr_char>
		flag=1;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    19fc:	8e 81       	ldd	r24, Y+6	; 0x06
    19fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1a00:	84 30       	cpi	r24, 0x04	; 4
    1a02:	91 05       	cpc	r25, r1
    1a04:	19 f0       	breq	.+6      	; 0x1a0c <lcd_print+0x88>
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	81 30       	cpi	r24, 0x01	; 1
    1a0a:	19 f5       	brne	.+70     	; 0x1a52 <lcd_print+0xce>
	{
		temp = value/1000;
    1a0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a10:	28 ee       	ldi	r18, 0xE8	; 232
    1a12:	33 e0       	ldi	r19, 0x03	; 3
    1a14:	b9 01       	movw	r22, r18
    1a16:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <__udivmodhi4>
    1a1a:	9b 01       	movw	r18, r22
    1a1c:	c9 01       	movw	r24, r18
    1a1e:	90 93 82 02 	sts	0x0282, r25
    1a22:	80 93 81 02 	sts	0x0281, r24
		thousand = temp%10 + 48;
    1a26:	80 91 81 02 	lds	r24, 0x0281
    1a2a:	90 91 82 02 	lds	r25, 0x0282
    1a2e:	2a e0       	ldi	r18, 0x0A	; 10
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	b9 01       	movw	r22, r18
    1a34:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <__udivmodhi4>
    1a38:	c0 96       	adiw	r24, 0x30	; 48
    1a3a:	90 93 98 02 	sts	0x0298, r25
    1a3e:	80 93 97 02 	sts	0x0297, r24
		lcd_wr_char(thousand);
    1a42:	80 91 97 02 	lds	r24, 0x0297
    1a46:	90 91 98 02 	lds	r25, 0x0298
    1a4a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <lcd_wr_char>
		flag=1;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1a52:	8e 81       	ldd	r24, Y+6	; 0x06
    1a54:	9f 81       	ldd	r25, Y+7	; 0x07
    1a56:	83 30       	cpi	r24, 0x03	; 3
    1a58:	91 05       	cpc	r25, r1
    1a5a:	19 f0       	breq	.+6      	; 0x1a62 <lcd_print+0xde>
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	19 f5       	brne	.+70     	; 0x1aa8 <lcd_print+0x124>
	{
		temp = value/100;
    1a62:	8c 81       	ldd	r24, Y+4	; 0x04
    1a64:	9d 81       	ldd	r25, Y+5	; 0x05
    1a66:	24 e6       	ldi	r18, 0x64	; 100
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	b9 01       	movw	r22, r18
    1a6c:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <__udivmodhi4>
    1a70:	9b 01       	movw	r18, r22
    1a72:	c9 01       	movw	r24, r18
    1a74:	90 93 82 02 	sts	0x0282, r25
    1a78:	80 93 81 02 	sts	0x0281, r24
		hundred = temp%10 + 48;
    1a7c:	80 91 81 02 	lds	r24, 0x0281
    1a80:	90 91 82 02 	lds	r25, 0x0282
    1a84:	2a e0       	ldi	r18, 0x0A	; 10
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	b9 01       	movw	r22, r18
    1a8a:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <__udivmodhi4>
    1a8e:	c0 96       	adiw	r24, 0x30	; 48
    1a90:	90 93 94 02 	sts	0x0294, r25
    1a94:	80 93 93 02 	sts	0x0293, r24
		lcd_wr_char(hundred);
    1a98:	80 91 93 02 	lds	r24, 0x0293
    1a9c:	90 91 94 02 	lds	r25, 0x0294
    1aa0:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <lcd_wr_char>
		flag=1;
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    1aa8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aaa:	9f 81       	ldd	r25, Y+7	; 0x07
    1aac:	82 30       	cpi	r24, 0x02	; 2
    1aae:	91 05       	cpc	r25, r1
    1ab0:	19 f0       	breq	.+6      	; 0x1ab8 <lcd_print+0x134>
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	81 30       	cpi	r24, 0x01	; 1
    1ab6:	19 f5       	brne	.+70     	; 0x1afe <lcd_print+0x17a>
	{
		temp = value/10;
    1ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aba:	9d 81       	ldd	r25, Y+5	; 0x05
    1abc:	2a e0       	ldi	r18, 0x0A	; 10
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	b9 01       	movw	r22, r18
    1ac2:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <__udivmodhi4>
    1ac6:	9b 01       	movw	r18, r22
    1ac8:	c9 01       	movw	r24, r18
    1aca:	90 93 82 02 	sts	0x0282, r25
    1ace:	80 93 81 02 	sts	0x0281, r24
		tens = temp%10 + 48;
    1ad2:	80 91 81 02 	lds	r24, 0x0281
    1ad6:	90 91 82 02 	lds	r25, 0x0282
    1ada:	2a e0       	ldi	r18, 0x0A	; 10
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	b9 01       	movw	r22, r18
    1ae0:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <__udivmodhi4>
    1ae4:	c0 96       	adiw	r24, 0x30	; 48
    1ae6:	90 93 8f 02 	sts	0x028F, r25
    1aea:	80 93 8e 02 	sts	0x028E, r24
		lcd_wr_char(tens);
    1aee:	80 91 8e 02 	lds	r24, 0x028E
    1af2:	90 91 8f 02 	lds	r25, 0x028F
    1af6:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <lcd_wr_char>
		flag=1;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    1afe:	8e 81       	ldd	r24, Y+6	; 0x06
    1b00:	9f 81       	ldd	r25, Y+7	; 0x07
    1b02:	81 30       	cpi	r24, 0x01	; 1
    1b04:	91 05       	cpc	r25, r1
    1b06:	19 f0       	breq	.+6      	; 0x1b0e <lcd_print+0x18a>
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	81 30       	cpi	r24, 0x01	; 1
    1b0c:	91 f4       	brne	.+36     	; 0x1b32 <lcd_print+0x1ae>
	{
		unit = value%10 + 48;
    1b0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b10:	9d 81       	ldd	r25, Y+5	; 0x05
    1b12:	2a e0       	ldi	r18, 0x0A	; 10
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	b9 01       	movw	r22, r18
    1b18:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <__udivmodhi4>
    1b1c:	c0 96       	adiw	r24, 0x30	; 48
    1b1e:	90 93 96 02 	sts	0x0296, r25
    1b22:	80 93 95 02 	sts	0x0295, r24
		lcd_wr_char(unit);
    1b26:	80 91 95 02 	lds	r24, 0x0295
    1b2a:	90 91 96 02 	lds	r25, 0x0296
    1b2e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <lcd_wr_char>
	}
	if(digits>5)
    1b32:	8e 81       	ldd	r24, Y+6	; 0x06
    1b34:	9f 81       	ldd	r25, Y+7	; 0x07
    1b36:	86 30       	cpi	r24, 0x06	; 6
    1b38:	91 05       	cpc	r25, r1
    1b3a:	1c f0       	brlt	.+6      	; 0x1b42 <lcd_print+0x1be>
	{
		lcd_wr_char('E');
    1b3c:	85 e4       	ldi	r24, 0x45	; 69
    1b3e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <lcd_wr_char>
	}
	
}
    1b42:	27 96       	adiw	r28, 0x07	; 7
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	08 95       	ret

00001b54 <buzzer_pin_config>:
float rotation_z=0;         //rotation in z dir

/************************************************************************** PORT Initialization **********************************************************************/
//Function to initialize Buzzer
void buzzer_pin_config (void)
{
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
    1b5c:	87 e2       	ldi	r24, 0x27	; 39
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	27 e2       	ldi	r18, 0x27	; 39
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	f9 01       	movw	r30, r18
    1b66:	20 81       	ld	r18, Z
    1b68:	28 60       	ori	r18, 0x08	; 8
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	20 83       	st	Z, r18
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    1b6e:	88 e2       	ldi	r24, 0x28	; 40
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	28 e2       	ldi	r18, 0x28	; 40
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	f9 01       	movw	r30, r18
    1b78:	20 81       	ld	r18, Z
    1b7a:	27 7f       	andi	r18, 0xF7	; 247
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	20 83       	st	Z, r18
}
    1b80:	df 91       	pop	r29
    1b82:	cf 91       	pop	r28
    1b84:	08 95       	ret

00001b86 <left_encoder_pin_config>:

void left_encoder_pin_config (void)
{
    1b86:	cf 93       	push	r28
    1b88:	df 93       	push	r29
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    1b8e:	8d e2       	ldi	r24, 0x2D	; 45
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	2d e2       	ldi	r18, 0x2D	; 45
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	f9 01       	movw	r30, r18
    1b98:	20 81       	ld	r18, Z
    1b9a:	2f 7e       	andi	r18, 0xEF	; 239
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	20 83       	st	Z, r18
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    1ba0:	8e e2       	ldi	r24, 0x2E	; 46
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	2e e2       	ldi	r18, 0x2E	; 46
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	f9 01       	movw	r30, r18
    1baa:	20 81       	ld	r18, Z
    1bac:	20 61       	ori	r18, 0x10	; 16
    1bae:	fc 01       	movw	r30, r24
    1bb0:	20 83       	st	Z, r18
}
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	08 95       	ret

00001bb8 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 5 pin as input
    1bc0:	8d e2       	ldi	r24, 0x2D	; 45
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	2d e2       	ldi	r18, 0x2D	; 45
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	f9 01       	movw	r30, r18
    1bca:	20 81       	ld	r18, Z
    1bcc:	2f 7d       	andi	r18, 0xDF	; 223
    1bce:	fc 01       	movw	r30, r24
    1bd0:	20 83       	st	Z, r18
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    1bd2:	8e e2       	ldi	r24, 0x2E	; 46
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	2e e2       	ldi	r18, 0x2E	; 46
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	f9 01       	movw	r30, r18
    1bdc:	20 81       	ld	r18, Z
    1bde:	20 62       	ori	r18, 0x20	; 32
    1be0:	fc 01       	movw	r30, r24
    1be2:	20 83       	st	Z, r18
}
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	08 95       	ret

00001bea <lcd_port_config>:

//Function to configure LCD port
void lcd_port_config (void)
{
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    1bf2:	87 e2       	ldi	r24, 0x27	; 39
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	27 e2       	ldi	r18, 0x27	; 39
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	f9 01       	movw	r30, r18
    1bfc:	20 81       	ld	r18, Z
    1bfe:	27 6f       	ori	r18, 0xF7	; 247
    1c00:	fc 01       	movw	r30, r24
    1c02:	20 83       	st	Z, r18
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    1c04:	88 e2       	ldi	r24, 0x28	; 40
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	28 e2       	ldi	r18, 0x28	; 40
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	f9 01       	movw	r30, r18
    1c0e:	20 81       	ld	r18, Z
    1c10:	20 78       	andi	r18, 0x80	; 128
    1c12:	fc 01       	movw	r30, r24
    1c14:	20 83       	st	Z, r18
}
    1c16:	df 91       	pop	r29
    1c18:	cf 91       	pop	r28
    1c1a:	08 95       	ret

00001c1c <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00; 
    1c24:	80 e3       	ldi	r24, 0x30	; 48
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	fc 01       	movw	r30, r24
    1c2a:	10 82       	st	Z, r1
 PORTF = 0x00;
    1c2c:	81 e3       	ldi	r24, 0x31	; 49
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	fc 01       	movw	r30, r24
    1c32:	10 82       	st	Z, r1
 DDRK = 0x00;
    1c34:	87 e0       	ldi	r24, 0x07	; 7
    1c36:	91 e0       	ldi	r25, 0x01	; 1
    1c38:	fc 01       	movw	r30, r24
    1c3a:	10 82       	st	Z, r1
 PORTK = 0x00;
    1c3c:	88 e0       	ldi	r24, 0x08	; 8
    1c3e:	91 e0       	ldi	r25, 0x01	; 1
    1c40:	fc 01       	movw	r30, r24
    1c42:	10 82       	st	Z, r1
}
    1c44:	df 91       	pop	r29
    1c46:	cf 91       	pop	r28
    1c48:	08 95       	ret

00001c4a <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
    1c4a:	cf 93       	push	r28
    1c4c:	df 93       	push	r29
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
    1c52:	81 e2       	ldi	r24, 0x21	; 33
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	21 e2       	ldi	r18, 0x21	; 33
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	f9 01       	movw	r30, r18
    1c5c:	20 81       	ld	r18, Z
    1c5e:	2f 60       	ori	r18, 0x0F	; 15
    1c60:	fc 01       	movw	r30, r24
    1c62:	20 83       	st	Z, r18
 PORTA = PORTA & 0xF0;
    1c64:	82 e2       	ldi	r24, 0x22	; 34
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	22 e2       	ldi	r18, 0x22	; 34
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	f9 01       	movw	r30, r18
    1c6e:	20 81       	ld	r18, Z
    1c70:	20 7f       	andi	r18, 0xF0	; 240
    1c72:	fc 01       	movw	r30, r24
    1c74:	20 83       	st	Z, r18
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    1c76:	8a e0       	ldi	r24, 0x0A	; 10
    1c78:	91 e0       	ldi	r25, 0x01	; 1
    1c7a:	2a e0       	ldi	r18, 0x0A	; 10
    1c7c:	31 e0       	ldi	r19, 0x01	; 1
    1c7e:	f9 01       	movw	r30, r18
    1c80:	20 81       	ld	r18, Z
    1c82:	28 61       	ori	r18, 0x18	; 24
    1c84:	fc 01       	movw	r30, r24
    1c86:	20 83       	st	Z, r18
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    1c88:	8b e0       	ldi	r24, 0x0B	; 11
    1c8a:	91 e0       	ldi	r25, 0x01	; 1
    1c8c:	2b e0       	ldi	r18, 0x0B	; 11
    1c8e:	31 e0       	ldi	r19, 0x01	; 1
    1c90:	f9 01       	movw	r30, r18
    1c92:	20 81       	ld	r18, Z
    1c94:	28 61       	ori	r18, 0x18	; 24
    1c96:	fc 01       	movw	r30, r24
    1c98:	20 83       	st	Z, r18
}
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	08 95       	ret

00001ca0 <color_sensor_pin_config>:

void color_sensor_pin_config(void)
{
    1ca0:	cf 93       	push	r28
    1ca2:	df 93       	push	r29
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
	DDRD  = DDRD | 0xF7;   //set PD3 as input for color sensor output
    1ca8:	8a e2       	ldi	r24, 0x2A	; 42
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	2a e2       	ldi	r18, 0x2A	; 42
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	f9 01       	movw	r30, r18
    1cb2:	20 81       	ld	r18, Z
    1cb4:	27 6f       	ori	r18, 0xF7	; 247
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	20 83       	st	Z, r18
	PORTD = PORTD | 0x08;  //Enable internal pull-up for PD3 pin
    1cba:	8b e2       	ldi	r24, 0x2B	; 43
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	2b e2       	ldi	r18, 0x2B	; 43
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	f9 01       	movw	r30, r18
    1cc4:	20 81       	ld	r18, Z
    1cc6:	28 60       	ori	r18, 0x08	; 8
    1cc8:	fc 01       	movw	r30, r24
    1cca:	20 83       	st	Z, r18
}
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
    1cd0:	08 95       	ret

00001cd2 <servo1_pin_config>:

//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
	DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
    1cda:	84 e2       	ldi	r24, 0x24	; 36
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	24 e2       	ldi	r18, 0x24	; 36
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	f9 01       	movw	r30, r18
    1ce4:	20 81       	ld	r18, Z
    1ce6:	20 62       	ori	r18, 0x20	; 32
    1ce8:	fc 01       	movw	r30, r24
    1cea:	20 83       	st	Z, r18
	PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    1cec:	85 e2       	ldi	r24, 0x25	; 37
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	25 e2       	ldi	r18, 0x25	; 37
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	f9 01       	movw	r30, r18
    1cf6:	20 81       	ld	r18, Z
    1cf8:	20 62       	ori	r18, 0x20	; 32
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	20 83       	st	Z, r18
}
    1cfe:	df 91       	pop	r29
    1d00:	cf 91       	pop	r28
    1d02:	08 95       	ret

00001d04 <port_init>:

//Function to Initialize PORTS
void port_init()
{
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
	buzzer_pin_config ();
    1d0c:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <buzzer_pin_config>
	lcd_port_config();
    1d10:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <lcd_port_config>
	adc_pin_config();
    1d14:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <adc_pin_config>
	motion_pin_config();	
    1d18:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <motion_pin_config>
	left_encoder_pin_config();   //left encoder pin config
    1d1c:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <left_encoder_pin_config>
	right_encoder_pin_config();  //right encoder pin config
    1d20:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <right_encoder_pin_config>
    color_sensor_pin_config(); //color sensor pin configuration
    1d24:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <color_sensor_pin_config>
	servo1_pin_config();       //Configure PORTB 5 pin for servo motor 1 operation 
    1d28:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <servo1_pin_config>
}
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	08 95       	ret

00001d32 <uart0_init>:

/****************************************************** Other Initializations ***************************************************************************/
void uart0_init(void)
{
    1d32:	cf 93       	push	r28
    1d34:	df 93       	push	r29
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
	UCSR0B = 0x00; //disable while setting baud rate
    1d3a:	81 ec       	ldi	r24, 0xC1	; 193
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	fc 01       	movw	r30, r24
    1d40:	10 82       	st	Z, r1
	UCSR0A = 0x00;
    1d42:	80 ec       	ldi	r24, 0xC0	; 192
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	fc 01       	movw	r30, r24
    1d48:	10 82       	st	Z, r1
	UCSR0C = 0x06;
    1d4a:	82 ec       	ldi	r24, 0xC2	; 194
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	26 e0       	ldi	r18, 0x06	; 6
    1d50:	fc 01       	movw	r30, r24
    1d52:	20 83       	st	Z, r18
	// UBRR0L = 0x47; //11059200 Hz
	UBRR0L = 0x5F; // 14745600 Hzset baud rate lo
    1d54:	84 ec       	ldi	r24, 0xC4	; 196
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	2f e5       	ldi	r18, 0x5F	; 95
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	20 83       	st	Z, r18
	UBRR0H = 0x00;       //set baud rate hi
    1d5e:	85 ec       	ldi	r24, 0xC5	; 197
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	fc 01       	movw	r30, r24
    1d64:	10 82       	st	Z, r1
	UCSR0B = 0x18;
    1d66:	81 ec       	ldi	r24, 0xC1	; 193
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	28 e1       	ldi	r18, 0x18	; 24
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	20 83       	st	Z, r18
}
    1d70:	df 91       	pop	r29
    1d72:	cf 91       	pop	r28
    1d74:	08 95       	ret

00001d76 <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
    1d7e:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    1d80:	8a e6       	ldi	r24, 0x6A	; 106
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	2a e6       	ldi	r18, 0x6A	; 106
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	f9 01       	movw	r30, r18
    1d8a:	20 81       	ld	r18, Z
    1d8c:	22 60       	ori	r18, 0x02	; 2
    1d8e:	fc 01       	movw	r30, r24
    1d90:	20 83       	st	Z, r18
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    1d92:	8d e3       	ldi	r24, 0x3D	; 61
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	2d e3       	ldi	r18, 0x3D	; 61
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	f9 01       	movw	r30, r18
    1d9c:	20 81       	ld	r18, Z
    1d9e:	20 61       	ori	r18, 0x10	; 16
    1da0:	fc 01       	movw	r30, r24
    1da2:	20 83       	st	Z, r18
	sei();   // Enables the global interrupt
    1da4:	78 94       	sei
}
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	08 95       	ret

00001dac <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
    1dac:	cf 93       	push	r28
    1dae:	df 93       	push	r29
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
    1db4:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    1db6:	8a e6       	ldi	r24, 0x6A	; 106
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	2a e6       	ldi	r18, 0x6A	; 106
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	f9 01       	movw	r30, r18
    1dc0:	20 81       	ld	r18, Z
    1dc2:	28 60       	ori	r18, 0x08	; 8
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	20 83       	st	Z, r18
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    1dc8:	8d e3       	ldi	r24, 0x3D	; 61
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	2d e3       	ldi	r18, 0x3D	; 61
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	f9 01       	movw	r30, r18
    1dd2:	20 81       	ld	r18, Z
    1dd4:	20 62       	ori	r18, 0x20	; 32
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	20 83       	st	Z, r18
	sei();   // Enables the global interrupt
    1dda:	78 94       	sei
}
    1ddc:	df 91       	pop	r29
    1dde:	cf 91       	pop	r28
    1de0:	08 95       	ret

00001de2 <timer5_init>:
// Timer 5 initialized in PWM mode for velocity control
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
    1de2:	cf 93       	push	r28
    1de4:	df 93       	push	r29
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
    1dea:	81 e2       	ldi	r24, 0x21	; 33
    1dec:	91 e0       	ldi	r25, 0x01	; 1
    1dee:	fc 01       	movw	r30, r24
    1df0:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
    1df2:	85 e2       	ldi	r24, 0x25	; 37
    1df4:	91 e0       	ldi	r25, 0x01	; 1
    1df6:	2f ef       	ldi	r18, 0xFF	; 255
    1df8:	fc 01       	movw	r30, r24
    1dfa:	20 83       	st	Z, r18
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
    1dfc:	84 e2       	ldi	r24, 0x24	; 36
    1dfe:	91 e0       	ldi	r25, 0x01	; 1
    1e00:	21 e0       	ldi	r18, 0x01	; 1
    1e02:	fc 01       	movw	r30, r24
    1e04:	20 83       	st	Z, r18
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
    1e06:	89 e2       	ldi	r24, 0x29	; 41
    1e08:	91 e0       	ldi	r25, 0x01	; 1
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
    1e0e:	88 e2       	ldi	r24, 0x28	; 40
    1e10:	91 e0       	ldi	r25, 0x01	; 1
    1e12:	2f ef       	ldi	r18, 0xFF	; 255
    1e14:	fc 01       	movw	r30, r24
    1e16:	20 83       	st	Z, r18
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
    1e18:	8b e2       	ldi	r24, 0x2B	; 43
    1e1a:	91 e0       	ldi	r25, 0x01	; 1
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
    1e20:	8a e2       	ldi	r24, 0x2A	; 42
    1e22:	91 e0       	ldi	r25, 0x01	; 1
    1e24:	2f ef       	ldi	r18, 0xFF	; 255
    1e26:	fc 01       	movw	r30, r24
    1e28:	20 83       	st	Z, r18
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
    1e2a:	8d e2       	ldi	r24, 0x2D	; 45
    1e2c:	91 e0       	ldi	r25, 0x01	; 1
    1e2e:	fc 01       	movw	r30, r24
    1e30:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
    1e32:	8c e2       	ldi	r24, 0x2C	; 44
    1e34:	91 e0       	ldi	r25, 0x01	; 1
    1e36:	2f ef       	ldi	r18, 0xFF	; 255
    1e38:	fc 01       	movw	r30, r24
    1e3a:	20 83       	st	Z, r18
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    1e3c:	80 e2       	ldi	r24, 0x20	; 32
    1e3e:	91 e0       	ldi	r25, 0x01	; 1
    1e40:	29 ea       	ldi	r18, 0xA9	; 169
    1e42:	fc 01       	movw	r30, r24
    1e44:	20 83       	st	Z, r18
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    1e46:	81 e2       	ldi	r24, 0x21	; 33
    1e48:	91 e0       	ldi	r25, 0x01	; 1
    1e4a:	2b e0       	ldi	r18, 0x0B	; 11
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	20 83       	st	Z, r18
}
    1e50:	df 91       	pop	r29
    1e52:	cf 91       	pop	r28
    1e54:	08 95       	ret

00001e56 <timer1_init>:

void timer1_init(void)
{
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
    1e5e:	81 e8       	ldi	r24, 0x81	; 129
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	fc 01       	movw	r30, r24
    1e64:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
    1e66:	85 e8       	ldi	r24, 0x85	; 133
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	2c ef       	ldi	r18, 0xFC	; 252
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	20 83       	st	Z, r18
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
    1e70:	84 e8       	ldi	r24, 0x84	; 132
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	21 e0       	ldi	r18, 0x01	; 1
    1e76:	fc 01       	movw	r30, r24
    1e78:	20 83       	st	Z, r18
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
    1e7a:	89 e8       	ldi	r24, 0x89	; 137
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	23 e0       	ldi	r18, 0x03	; 3
    1e80:	fc 01       	movw	r30, r24
    1e82:	20 83       	st	Z, r18
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
    1e84:	88 e8       	ldi	r24, 0x88	; 136
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	2f ef       	ldi	r18, 0xFF	; 255
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	20 83       	st	Z, r18
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
    1e8e:	8b e8       	ldi	r24, 0x8B	; 139
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	23 e0       	ldi	r18, 0x03	; 3
    1e94:	fc 01       	movw	r30, r24
    1e96:	20 83       	st	Z, r18
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
    1e98:	8a e8       	ldi	r24, 0x8A	; 138
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	2f ef       	ldi	r18, 0xFF	; 255
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	20 83       	st	Z, r18
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
    1ea2:	8d e8       	ldi	r24, 0x8D	; 141
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	23 e0       	ldi	r18, 0x03	; 3
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	20 83       	st	Z, r18
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
    1eac:	8c e8       	ldi	r24, 0x8C	; 140
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	2f ef       	ldi	r18, 0xFF	; 255
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	20 83       	st	Z, r18
 ICR1H  = 0x03;	
    1eb6:	87 e8       	ldi	r24, 0x87	; 135
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	23 e0       	ldi	r18, 0x03	; 3
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	20 83       	st	Z, r18
 ICR1L  = 0xFF;
    1ec0:	86 e8       	ldi	r24, 0x86	; 134
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	2f ef       	ldi	r18, 0xFF	; 255
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	20 83       	st	Z, r18
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
    1eca:	80 e8       	ldi	r24, 0x80	; 128
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	2b ea       	ldi	r18, 0xAB	; 171
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	20 83       	st	Z, r18
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
    1ed4:	82 e8       	ldi	r24, 0x82	; 130
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	fc 01       	movw	r30, r24
    1eda:	10 82       	st	Z, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
    1edc:	81 e8       	ldi	r24, 0x81	; 129
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	2c e0       	ldi	r18, 0x0C	; 12
    1ee2:	fc 01       	movw	r30, r24
    1ee4:	20 83       	st	Z, r18
}
    1ee6:	df 91       	pop	r29
    1ee8:	cf 91       	pop	r28
    1eea:	08 95       	ret

00001eec <adc_init>:

void adc_init()
{
    1eec:	cf 93       	push	r28
    1eee:	df 93       	push	r29
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    1ef4:	8a e7       	ldi	r24, 0x7A	; 122
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	fc 01       	movw	r30, r24
    1efa:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    1efc:	8b e7       	ldi	r24, 0x7B	; 123
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	fc 01       	movw	r30, r24
    1f02:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    1f04:	8c e7       	ldi	r24, 0x7C	; 124
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	20 e2       	ldi	r18, 0x20	; 32
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	20 83       	st	Z, r18
	ACSR = 0x80;
    1f0e:	80 e5       	ldi	r24, 0x50	; 80
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	20 e8       	ldi	r18, 0x80	; 128
    1f14:	fc 01       	movw	r30, r24
    1f16:	20 83       	st	Z, r18
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    1f18:	8a e7       	ldi	r24, 0x7A	; 122
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	26 e8       	ldi	r18, 0x86	; 134
    1f1e:	fc 01       	movw	r30, r24
    1f20:	20 83       	st	Z, r18
}
    1f22:	df 91       	pop	r29
    1f24:	cf 91       	pop	r28
    1f26:	08 95       	ret

00001f28 <color_sensor_pin_interrupt_init>:

void color_sensor_pin_interrupt_init(void) //Interrupt 3 enable
{
    1f28:	cf 93       	push	r28
    1f2a:	df 93       	push	r29
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
    1f30:	f8 94       	cli
	EICRA = EICRA | 0x80; // INT3 is set to trigger with falling edge
    1f32:	89 e6       	ldi	r24, 0x69	; 105
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	29 e6       	ldi	r18, 0x69	; 105
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	f9 01       	movw	r30, r18
    1f3c:	20 81       	ld	r18, Z
    1f3e:	20 68       	ori	r18, 0x80	; 128
    1f40:	fc 01       	movw	r30, r24
    1f42:	20 83       	st	Z, r18
	EICRB = EICRB | 0x00;
    1f44:	8a e6       	ldi	r24, 0x6A	; 106
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	2a e6       	ldi	r18, 0x6A	; 106
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	f9 01       	movw	r30, r18
    1f4e:	20 81       	ld	r18, Z
    1f50:	fc 01       	movw	r30, r24
    1f52:	20 83       	st	Z, r18
	EIMSK = EIMSK | 0x08; // Unmask Interrupt INT3 for color sensor
    1f54:	8d e3       	ldi	r24, 0x3D	; 61
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	2d e3       	ldi	r18, 0x3D	; 61
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	f9 01       	movw	r30, r18
    1f5e:	20 81       	ld	r18, Z
    1f60:	28 60       	ori	r18, 0x08	; 8
    1f62:	fc 01       	movw	r30, r24
    1f64:	20 83       	st	Z, r18
	sei(); // Enables the global interrupt
    1f66:	78 94       	sei
}
    1f68:	df 91       	pop	r29
    1f6a:	cf 91       	pop	r28
    1f6c:	08 95       	ret

00001f6e <init_devices>:

void init_devices (void)
{
    1f6e:	cf 93       	push	r28
    1f70:	df 93       	push	r29
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
	cli();                  //Clears the global interrupts
    1f76:	f8 94       	cli
	port_init();
    1f78:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <port_init>
	uart0_init();
    1f7c:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <uart0_init>
	left_position_encoder_interrupt_init();
    1f80:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
    1f84:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <right_position_encoder_interrupt_init>
	timer5_init();
    1f88:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <timer5_init>
	timer1_init();
    1f8c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <timer1_init>
	adc_init();
    1f90:	0e 94 76 0f 	call	0x1eec	; 0x1eec <adc_init>
	color_sensor_pin_interrupt_init();
    1f94:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <color_sensor_pin_interrupt_init>
	sei();                  //Enables the global interrupts
    1f98:	78 94       	sei
}
    1f9a:	df 91       	pop	r29
    1f9c:	cf 91       	pop	r28
    1f9e:	08 95       	ret

00001fa0 <__vector_6>:

/******************************* ISR *****************************************/

//ISR for right position encoder
ISR(INT5_vect)
{
    1fa0:	1f 92       	push	r1
    1fa2:	0f 92       	push	r0
    1fa4:	0f b6       	in	r0, 0x3f	; 63
    1fa6:	0f 92       	push	r0
    1fa8:	11 24       	eor	r1, r1
    1faa:	8f 93       	push	r24
    1fac:	9f 93       	push	r25
    1fae:	af 93       	push	r26
    1fb0:	bf 93       	push	r27
    1fb2:	cf 93       	push	r28
    1fb4:	df 93       	push	r29
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
	ShaftCountRight++;  //increment right shaft position count
    1fba:	80 91 44 02 	lds	r24, 0x0244
    1fbe:	90 91 45 02 	lds	r25, 0x0245
    1fc2:	a0 91 46 02 	lds	r26, 0x0246
    1fc6:	b0 91 47 02 	lds	r27, 0x0247
    1fca:	01 96       	adiw	r24, 0x01	; 1
    1fcc:	a1 1d       	adc	r26, r1
    1fce:	b1 1d       	adc	r27, r1
    1fd0:	80 93 44 02 	sts	0x0244, r24
    1fd4:	90 93 45 02 	sts	0x0245, r25
    1fd8:	a0 93 46 02 	sts	0x0246, r26
    1fdc:	b0 93 47 02 	sts	0x0247, r27
	pathR++;
    1fe0:	80 91 35 02 	lds	r24, 0x0235
    1fe4:	8f 5f       	subi	r24, 0xFF	; 255
    1fe6:	80 93 35 02 	sts	0x0235, r24
}
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	bf 91       	pop	r27
    1ff0:	af 91       	pop	r26
    1ff2:	9f 91       	pop	r25
    1ff4:	8f 91       	pop	r24
    1ff6:	0f 90       	pop	r0
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	0f 90       	pop	r0
    1ffc:	1f 90       	pop	r1
    1ffe:	18 95       	reti

00002000 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
    2000:	1f 92       	push	r1
    2002:	0f 92       	push	r0
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	0f 92       	push	r0
    2008:	11 24       	eor	r1, r1
    200a:	8f 93       	push	r24
    200c:	9f 93       	push	r25
    200e:	af 93       	push	r26
    2010:	bf 93       	push	r27
    2012:	cf 93       	push	r28
    2014:	df 93       	push	r29
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
	ShaftCountLeft++;  //increment left shaft position count
    201a:	80 91 40 02 	lds	r24, 0x0240
    201e:	90 91 41 02 	lds	r25, 0x0241
    2022:	a0 91 42 02 	lds	r26, 0x0242
    2026:	b0 91 43 02 	lds	r27, 0x0243
    202a:	01 96       	adiw	r24, 0x01	; 1
    202c:	a1 1d       	adc	r26, r1
    202e:	b1 1d       	adc	r27, r1
    2030:	80 93 40 02 	sts	0x0240, r24
    2034:	90 93 41 02 	sts	0x0241, r25
    2038:	a0 93 42 02 	sts	0x0242, r26
    203c:	b0 93 43 02 	sts	0x0243, r27
	pathL++;
    2040:	80 91 34 02 	lds	r24, 0x0234
    2044:	8f 5f       	subi	r24, 0xFF	; 255
    2046:	80 93 34 02 	sts	0x0234, r24
}
    204a:	df 91       	pop	r29
    204c:	cf 91       	pop	r28
    204e:	bf 91       	pop	r27
    2050:	af 91       	pop	r26
    2052:	9f 91       	pop	r25
    2054:	8f 91       	pop	r24
    2056:	0f 90       	pop	r0
    2058:	0f be       	out	0x3f, r0	; 63
    205a:	0f 90       	pop	r0
    205c:	1f 90       	pop	r1
    205e:	18 95       	reti

00002060 <__vector_4>:

//ISR for color sensor
ISR(INT3_vect)
{
    2060:	1f 92       	push	r1
    2062:	0f 92       	push	r0
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	0f 92       	push	r0
    2068:	11 24       	eor	r1, r1
    206a:	8f 93       	push	r24
    206c:	9f 93       	push	r25
    206e:	af 93       	push	r26
    2070:	bf 93       	push	r27
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
	pulse++; //increment on receiving pulse from the color sensor
    207a:	80 91 4a 02 	lds	r24, 0x024A
    207e:	90 91 4b 02 	lds	r25, 0x024B
    2082:	a0 91 4c 02 	lds	r26, 0x024C
    2086:	b0 91 4d 02 	lds	r27, 0x024D
    208a:	01 96       	adiw	r24, 0x01	; 1
    208c:	a1 1d       	adc	r26, r1
    208e:	b1 1d       	adc	r27, r1
    2090:	80 93 4a 02 	sts	0x024A, r24
    2094:	90 93 4b 02 	sts	0x024B, r25
    2098:	a0 93 4c 02 	sts	0x024C, r26
    209c:	b0 93 4d 02 	sts	0x024D, r27
}
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	bf 91       	pop	r27
    20a6:	af 91       	pop	r26
    20a8:	9f 91       	pop	r25
    20aa:	8f 91       	pop	r24
    20ac:	0f 90       	pop	r0
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	0f 90       	pop	r0
    20b2:	1f 90       	pop	r1
    20b4:	18 95       	reti

000020b6 <buzzer_beep>:

/******************************* ********************************** Functions *********************************************************/
// Function to beep buzzer for short time.
void buzzer_beep (void) 
{
    20b6:	0f 93       	push	r16
    20b8:	1f 93       	push	r17
    20ba:	cf 93       	push	r28
    20bc:	df 93       	push	r29
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	2e 97       	sbiw	r28, 0x0e	; 14
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
	PORTC =PORTC | 0x08;    //turns on the buzzer PC3=1
    20ce:	88 e2       	ldi	r24, 0x28	; 40
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	28 e2       	ldi	r18, 0x28	; 40
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	f9 01       	movw	r30, r18
    20d8:	20 81       	ld	r18, Z
    20da:	28 60       	ori	r18, 0x08	; 8
    20dc:	fc 01       	movw	r30, r24
    20de:	20 83       	st	Z, r18
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	a8 e4       	ldi	r26, 0x48	; 72
    20e6:	b2 e4       	ldi	r27, 0x42	; 66
    20e8:	89 83       	std	Y+1, r24	; 0x01
    20ea:	9a 83       	std	Y+2, r25	; 0x02
    20ec:	ab 83       	std	Y+3, r26	; 0x03
    20ee:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    20f0:	69 81       	ldd	r22, Y+1	; 0x01
    20f2:	7a 81       	ldd	r23, Y+2	; 0x02
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	9c 81       	ldd	r25, Y+4	; 0x04
    20f8:	26 e6       	ldi	r18, 0x66	; 102
    20fa:	36 e6       	ldi	r19, 0x66	; 102
    20fc:	46 e6       	ldi	r20, 0x66	; 102
    20fe:	55 e4       	ldi	r21, 0x45	; 69
    2100:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	8d 83       	std	Y+5, r24	; 0x05
    210a:	9e 83       	std	Y+6, r25	; 0x06
    210c:	af 83       	std	Y+7, r26	; 0x07
    210e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2110:	11 e0       	ldi	r17, 0x01	; 1
    2112:	6d 81       	ldd	r22, Y+5	; 0x05
    2114:	7e 81       	ldd	r23, Y+6	; 0x06
    2116:	8f 81       	ldd	r24, Y+7	; 0x07
    2118:	98 85       	ldd	r25, Y+8	; 0x08
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e8       	ldi	r20, 0x80	; 128
    2120:	5f e3       	ldi	r21, 0x3F	; 63
    2122:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    2126:	88 23       	and	r24, r24
    2128:	0c f0       	brlt	.+2      	; 0x212c <buzzer_beep+0x76>
    212a:	10 e0       	ldi	r17, 0x00	; 0
    212c:	11 23       	and	r17, r17
    212e:	29 f0       	breq	.+10     	; 0x213a <buzzer_beep+0x84>
		__ticks = 1;
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	9a 87       	std	Y+10, r25	; 0x0a
    2136:	89 87       	std	Y+9, r24	; 0x09
    2138:	46 c0       	rjmp	.+140    	; 0x21c6 <buzzer_beep+0x110>
	else if (__tmp > 65535)
    213a:	11 e0       	ldi	r17, 0x01	; 1
    213c:	6d 81       	ldd	r22, Y+5	; 0x05
    213e:	7e 81       	ldd	r23, Y+6	; 0x06
    2140:	8f 81       	ldd	r24, Y+7	; 0x07
    2142:	98 85       	ldd	r25, Y+8	; 0x08
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	3f ef       	ldi	r19, 0xFF	; 255
    2148:	4f e7       	ldi	r20, 0x7F	; 127
    214a:	57 e4       	ldi	r21, 0x47	; 71
    214c:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    2150:	18 16       	cp	r1, r24
    2152:	0c f0       	brlt	.+2      	; 0x2156 <buzzer_beep+0xa0>
    2154:	10 e0       	ldi	r17, 0x00	; 0
    2156:	11 23       	and	r17, r17
    2158:	61 f1       	breq	.+88     	; 0x21b2 <buzzer_beep+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215a:	69 81       	ldd	r22, Y+1	; 0x01
    215c:	7a 81       	ldd	r23, Y+2	; 0x02
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	9c 81       	ldd	r25, Y+4	; 0x04
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e2       	ldi	r20, 0x20	; 32
    2168:	51 e4       	ldi	r21, 0x41	; 65
    216a:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	bc 01       	movw	r22, r24
    2174:	cd 01       	movw	r24, r26
    2176:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	9a 87       	std	Y+10, r25	; 0x0a
    2180:	89 87       	std	Y+9, r24	; 0x09
    2182:	12 c0       	rjmp	.+36     	; 0x21a8 <buzzer_beep+0xf2>
    2184:	80 e7       	ldi	r24, 0x70	; 112
    2186:	91 e0       	ldi	r25, 0x01	; 1
    2188:	9c 87       	std	Y+12, r25	; 0x0c
    218a:	8b 87       	std	Y+11, r24	; 0x0b
    218c:	8b 85       	ldd	r24, Y+11	; 0x0b
    218e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2190:	8c 01       	movw	r16, r24
    2192:	c8 01       	movw	r24, r16
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <buzzer_beep+0xde>
    2198:	8c 01       	movw	r16, r24
    219a:	1c 87       	std	Y+12, r17	; 0x0c
    219c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219e:	89 85       	ldd	r24, Y+9	; 0x09
    21a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	9a 87       	std	Y+10, r25	; 0x0a
    21a6:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a8:	89 85       	ldd	r24, Y+9	; 0x09
    21aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ac:	00 97       	sbiw	r24, 0x00	; 0
    21ae:	51 f7       	brne	.-44     	; 0x2184 <buzzer_beep+0xce>
    21b0:	17 c0       	rjmp	.+46     	; 0x21e0 <buzzer_beep+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b2:	6d 81       	ldd	r22, Y+5	; 0x05
    21b4:	7e 81       	ldd	r23, Y+6	; 0x06
    21b6:	8f 81       	ldd	r24, Y+7	; 0x07
    21b8:	98 85       	ldd	r25, Y+8	; 0x08
    21ba:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	9a 87       	std	Y+10, r25	; 0x0a
    21c4:	89 87       	std	Y+9, r24	; 0x09
    21c6:	89 85       	ldd	r24, Y+9	; 0x09
    21c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ca:	9e 87       	std	Y+14, r25	; 0x0e
    21cc:	8d 87       	std	Y+13, r24	; 0x0d
    21ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d2:	8c 01       	movw	r16, r24
    21d4:	f8 01       	movw	r30, r16
    21d6:	31 97       	sbiw	r30, 0x01	; 1
    21d8:	f1 f7       	brne	.-4      	; 0x21d6 <buzzer_beep+0x120>
    21da:	8f 01       	movw	r16, r30
    21dc:	1e 87       	std	Y+14, r17	; 0x0e
    21de:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(50);
	PORTC =PORTC & 0xF7;    //turns off the buzzer PC3=0
    21e0:	88 e2       	ldi	r24, 0x28	; 40
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	28 e2       	ldi	r18, 0x28	; 40
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	f9 01       	movw	r30, r18
    21ea:	20 81       	ld	r18, Z
    21ec:	27 7f       	andi	r18, 0xF7	; 247
    21ee:	fc 01       	movw	r30, r24
    21f0:	20 83       	st	Z, r18
}
    21f2:	2e 96       	adiw	r28, 0x0e	; 14
    21f4:	0f b6       	in	r0, 0x3f	; 63
    21f6:	f8 94       	cli
    21f8:	de bf       	out	0x3e, r29	; 62
    21fa:	0f be       	out	0x3f, r0	; 63
    21fc:	cd bf       	out	0x3d, r28	; 61
    21fe:	df 91       	pop	r29
    2200:	cf 91       	pop	r28
    2202:	1f 91       	pop	r17
    2204:	0f 91       	pop	r16
    2206:	08 95       	ret

00002208 <buzzer_beep_long>:

//Function to beep buzzer for 10s and mar the end of scanning.
void buzzer_beep_long(void)
{
    2208:	0f 93       	push	r16
    220a:	1f 93       	push	r17
    220c:	cf 93       	push	r28
    220e:	df 93       	push	r29
    2210:	0f 92       	push	r0
    2212:	0f 92       	push	r0
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
	PORTC =PORTC | 0x08;    //turns on the buzzer PC3=1
    2218:	88 e2       	ldi	r24, 0x28	; 40
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	28 e2       	ldi	r18, 0x28	; 40
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	f9 01       	movw	r30, r18
    2222:	20 81       	ld	r18, Z
    2224:	28 60       	ori	r18, 0x08	; 8
    2226:	fc 01       	movw	r30, r24
    2228:	20 83       	st	Z, r18
    222a:	8a e0       	ldi	r24, 0x0A	; 10
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	9a 83       	std	Y+2, r25	; 0x02
    2230:	89 83       	std	Y+1, r24	; 0x01
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	9a 81       	ldd	r25, Y+2	; 0x02
    2236:	8c 01       	movw	r16, r24
    2238:	c8 01       	movw	r24, r16
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	f1 f7       	brne	.-4      	; 0x223a <buzzer_beep_long+0x32>
    223e:	8c 01       	movw	r16, r24
    2240:	1a 83       	std	Y+2, r17	; 0x02
    2242:	09 83       	std	Y+1, r16	; 0x01
	_delay_loop_2(10);
}
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	df 91       	pop	r29
    224a:	cf 91       	pop	r28
    224c:	1f 91       	pop	r17
    224e:	0f 91       	pop	r16
    2250:	08 95       	ret

00002252 <servo_1>:

//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
    2252:	0f 93       	push	r16
    2254:	1f 93       	push	r17
    2256:	cf 93       	push	r28
    2258:	df 93       	push	r29
    225a:	00 d0       	rcall	.+0      	; 0x225c <servo_1+0xa>
    225c:	0f 92       	push	r0
    225e:	0f 92       	push	r0
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
    2264:	8d 83       	std	Y+5, r24	; 0x05
	float PositionPanServo = 0;
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	dc 01       	movw	r26, r24
    226c:	89 83       	std	Y+1, r24	; 0x01
    226e:	9a 83       	std	Y+2, r25	; 0x02
    2270:	ab 83       	std	Y+3, r26	; 0x03
    2272:	bc 83       	std	Y+4, r27	; 0x04
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
    2274:	8d 81       	ldd	r24, Y+5	; 0x05
    2276:	88 2f       	mov	r24, r24
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	a0 e0       	ldi	r26, 0x00	; 0
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	bc 01       	movw	r22, r24
    2280:	cd 01       	movw	r24, r26
    2282:	0e 94 6b 2e 	call	0x5cd6	; 0x5cd6 <__floatunsisf>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	bc 01       	movw	r22, r24
    228c:	cd 01       	movw	r24, r26
    228e:	2b e7       	ldi	r18, 0x7B	; 123
    2290:	34 e1       	ldi	r19, 0x14	; 20
    2292:	4e ee       	ldi	r20, 0xEE	; 238
    2294:	5f e3       	ldi	r21, 0x3F	; 63
    2296:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <__divsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	bc 01       	movw	r22, r24
    22a0:	cd 01       	movw	r24, r26
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	4c e0       	ldi	r20, 0x0C	; 12
    22a8:	52 e4       	ldi	r21, 0x42	; 66
    22aa:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <__addsf3>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	9a 83       	std	Y+2, r25	; 0x02
    22b6:	ab 83       	std	Y+3, r26	; 0x03
    22b8:	bc 83       	std	Y+4, r27	; 0x04
	OCR1AH = 0x00;
    22ba:	89 e8       	ldi	r24, 0x89	; 137
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	fc 01       	movw	r30, r24
    22c0:	10 82       	st	Z, r1
	OCR1AL = (unsigned char) PositionPanServo;
    22c2:	08 e8       	ldi	r16, 0x88	; 136
    22c4:	10 e0       	ldi	r17, 0x00	; 0
    22c6:	69 81       	ldd	r22, Y+1	; 0x01
    22c8:	7a 81       	ldd	r23, Y+2	; 0x02
    22ca:	8b 81       	ldd	r24, Y+3	; 0x03
    22cc:	9c 81       	ldd	r25, Y+4	; 0x04
    22ce:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	f8 01       	movw	r30, r16
    22d8:	80 83       	st	Z, r24
}
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	1f 91       	pop	r17
    22ea:	0f 91       	pop	r16
    22ec:	08 95       	ret

000022ee <servo_1_free>:

void servo_1_free (void) //makes servo 1 free rotating for saving power
{
    22ee:	cf 93       	push	r28
    22f0:	df 93       	push	r29
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
	OCR1AH = 0x03;
    22f6:	89 e8       	ldi	r24, 0x89	; 137
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	23 e0       	ldi	r18, 0x03	; 3
    22fc:	fc 01       	movw	r30, r24
    22fe:	20 83       	st	Z, r18
	OCR1AL = 0xFF; //Servo 1 off
    2300:	88 e8       	ldi	r24, 0x88	; 136
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	2f ef       	ldi	r18, 0xFF	; 255
    2306:	fc 01       	movw	r30, r24
    2308:	20 83       	st	Z, r18
}
    230a:	df 91       	pop	r29
    230c:	cf 91       	pop	r28
    230e:	08 95       	ret

00002310 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
    2310:	cf 93       	push	r28
    2312:	df 93       	push	r29
    2314:	0f 92       	push	r0
    2316:	0f 92       	push	r0
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    231e:	8a 81       	ldd	r24, Y+2	; 0x02
    2320:	88 30       	cpi	r24, 0x08	; 8
    2322:	28 f0       	brcs	.+10     	; 0x232e <ADC_Conversion+0x1e>
	{
		ADCSRB = 0x08;
    2324:	8b e7       	ldi	r24, 0x7B	; 123
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	28 e0       	ldi	r18, 0x08	; 8
    232a:	fc 01       	movw	r30, r24
    232c:	20 83       	st	Z, r18
	}
	Ch = Ch & 0x07;  			
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	87 70       	andi	r24, 0x07	; 7
    2332:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
    2334:	8c e7       	ldi	r24, 0x7C	; 124
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	2a 81       	ldd	r18, Y+2	; 0x02
    233a:	20 62       	ori	r18, 0x20	; 32
    233c:	fc 01       	movw	r30, r24
    233e:	20 83       	st	Z, r18
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    2340:	8a e7       	ldi	r24, 0x7A	; 122
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	2a e7       	ldi	r18, 0x7A	; 122
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	f9 01       	movw	r30, r18
    234a:	20 81       	ld	r18, Z
    234c:	20 64       	ori	r18, 0x40	; 64
    234e:	fc 01       	movw	r30, r24
    2350:	20 83       	st	Z, r18
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    2352:	00 00       	nop
    2354:	8a e7       	ldi	r24, 0x7A	; 122
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	fc 01       	movw	r30, r24
    235a:	80 81       	ld	r24, Z
    235c:	88 2f       	mov	r24, r24
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	80 71       	andi	r24, 0x10	; 16
    2362:	90 70       	andi	r25, 0x00	; 0
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	b1 f3       	breq	.-20     	; 0x2354 <ADC_Conversion+0x44>
	a=ADCH;
    2368:	89 e7       	ldi	r24, 0x79	; 121
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	fc 01       	movw	r30, r24
    236e:	80 81       	ld	r24, Z
    2370:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    2372:	8a e7       	ldi	r24, 0x7A	; 122
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	2a e7       	ldi	r18, 0x7A	; 122
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	f9 01       	movw	r30, r18
    237c:	20 81       	ld	r18, Z
    237e:	20 61       	ori	r18, 0x10	; 16
    2380:	fc 01       	movw	r30, r24
    2382:	20 83       	st	Z, r18
	ADCSRB = 0x00;
    2384:	8b e7       	ldi	r24, 0x7B	; 123
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	fc 01       	movw	r30, r24
    238a:	10 82       	st	Z, r1
	return a;
    238c:	89 81       	ldd	r24, Y+1	; 0x01
}
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	df 91       	pop	r29
    2394:	cf 91       	pop	r28
    2396:	08 95       	ret

00002398 <print_sensor>:

//Function To Print Sensor Values At Desired Row And Column Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
    2398:	cf 93       	push	r28
    239a:	df 93       	push	r29
    239c:	00 d0       	rcall	.+0      	; 0x239e <print_sensor+0x6>
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	6a 83       	std	Y+2, r22	; 0x02
    23a6:	4b 83       	std	Y+3, r20	; 0x03
	ADC_Value = ADC_Conversion(channel);
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	0e 94 88 11 	call	0x2310	; 0x2310 <ADC_Conversion>
    23ae:	80 93 8b 02 	sts	0x028B, r24
	lcd_print(row, coloumn, ADC_Value, 3);
    23b2:	80 91 8b 02 	lds	r24, 0x028B
    23b6:	28 2f       	mov	r18, r24
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
    23bc:	6a 81       	ldd	r22, Y+2	; 0x02
    23be:	a9 01       	movw	r20, r18
    23c0:	23 e0       	ldi	r18, 0x03	; 3
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_print>
}
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	df 91       	pop	r29
    23d0:	cf 91       	pop	r28
    23d2:	08 95       	ret

000023d4 <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
    23d8:	0f 92       	push	r0
    23da:	0f 92       	push	r0
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    23e0:	89 83       	std	Y+1, r24	; 0x01
    23e2:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
    23e4:	88 e2       	ldi	r24, 0x28	; 40
    23e6:	91 e0       	ldi	r25, 0x01	; 1
    23e8:	29 81       	ldd	r18, Y+1	; 0x01
    23ea:	fc 01       	movw	r30, r24
    23ec:	20 83       	st	Z, r18
	OCR5BL = (unsigned char)right_motor;
    23ee:	8a e2       	ldi	r24, 0x2A	; 42
    23f0:	91 e0       	ldi	r25, 0x01	; 1
    23f2:	2a 81       	ldd	r18, Y+2	; 0x02
    23f4:	fc 01       	movw	r30, r24
    23f6:	20 83       	st	Z, r18
}
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	df 91       	pop	r29
    23fe:	cf 91       	pop	r28
    2400:	08 95       	ret

00002402 <motion_set>:

//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
    2402:	cf 93       	push	r28
    2404:	df 93       	push	r29
    2406:	0f 92       	push	r0
    2408:	0f 92       	push	r0
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
    2410:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 		// removing upper nibbel for the protection
    2412:	8a 81       	ldd	r24, Y+2	; 0x02
    2414:	8f 70       	andi	r24, 0x0F	; 15
    2416:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 		// reading the PORTA original status
    2418:	82 e2       	ldi	r24, 0x22	; 34
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	fc 01       	movw	r30, r24
    241e:	80 81       	ld	r24, Z
    2420:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	80 7f       	andi	r24, 0xF0	; 240
    2426:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    2428:	99 81       	ldd	r25, Y+1	; 0x01
    242a:	8a 81       	ldd	r24, Y+2	; 0x02
    242c:	89 2b       	or	r24, r25
    242e:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 		// executing the command
    2430:	82 e2       	ldi	r24, 0x22	; 34
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	29 81       	ldd	r18, Y+1	; 0x01
    2436:	fc 01       	movw	r30, r24
    2438:	20 83       	st	Z, r18
}
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
    243e:	df 91       	pop	r29
    2440:	cf 91       	pop	r28
    2442:	08 95       	ret

00002444 <forward>:

void forward (void)
{
    2444:	cf 93       	push	r28
    2446:	df 93       	push	r29
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
	motion_set (0x06);
    244c:	86 e0       	ldi	r24, 0x06	; 6
    244e:	0e 94 01 12 	call	0x2402	; 0x2402 <motion_set>
}
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	08 95       	ret

00002458 <left>:

void left (void) //Left wheel backward, Right wheel forward
{
    2458:	cf 93       	push	r28
    245a:	df 93       	push	r29
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x05);
    2460:	85 e0       	ldi	r24, 0x05	; 5
    2462:	0e 94 01 12 	call	0x2402	; 0x2402 <motion_set>
}
    2466:	df 91       	pop	r29
    2468:	cf 91       	pop	r28
    246a:	08 95       	ret

0000246c <right>:

void right (void) //Left wheel forward, Right wheel backward
{
    246c:	cf 93       	push	r28
    246e:	df 93       	push	r29
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x0A);
    2474:	8a e0       	ldi	r24, 0x0A	; 10
    2476:	0e 94 01 12 	call	0x2402	; 0x2402 <motion_set>
}
    247a:	df 91       	pop	r29
    247c:	cf 91       	pop	r28
    247e:	08 95       	ret

00002480 <back>:

void back (void)
{
    2480:	cf 93       	push	r28
    2482:	df 93       	push	r29
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62
	motion_set (0x09);
    2488:	89 e0       	ldi	r24, 0x09	; 9
    248a:	0e 94 01 12 	call	0x2402	; 0x2402 <motion_set>
}
    248e:	df 91       	pop	r29
    2490:	cf 91       	pop	r28
    2492:	08 95       	ret

00002494 <stop_bot>:

void stop_bot(void)
{
    2494:	cf 93       	push	r28
    2496:	df 93       	push	r29
    2498:	cd b7       	in	r28, 0x3d	; 61
    249a:	de b7       	in	r29, 0x3e	; 62
  motion_set (0x00);
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	0e 94 01 12 	call	0x2402	; 0x2402 <motion_set>
}
    24a2:	df 91       	pop	r29
    24a4:	cf 91       	pop	r28
    24a6:	08 95       	ret

000024a8 <angle_rotate>:

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    24a8:	cf 93       	push	r28
    24aa:	df 93       	push	r29
    24ac:	cd b7       	in	r28, 0x3d	; 61
    24ae:	de b7       	in	r29, 0x3e	; 62
    24b0:	2a 97       	sbiw	r28, 0x0a	; 10
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	f8 94       	cli
    24b6:	de bf       	out	0x3e, r29	; 62
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	cd bf       	out	0x3d, r28	; 61
    24bc:	9a 87       	std	Y+10, r25	; 0x0a
    24be:	89 87       	std	Y+9, r24	; 0x09
	float ReqdShaftCount = 0;
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	dc 01       	movw	r26, r24
    24c6:	89 83       	std	Y+1, r24	; 0x01
    24c8:	9a 83       	std	Y+2, r25	; 0x02
    24ca:	ab 83       	std	Y+3, r26	; 0x03
    24cc:	bc 83       	std	Y+4, r27	; 0x04
	unsigned long int ReqdShaftCountInt = 0;
    24ce:	1d 82       	std	Y+5, r1	; 0x05
    24d0:	1e 82       	std	Y+6, r1	; 0x06
    24d2:	1f 82       	std	Y+7, r1	; 0x07
    24d4:	18 86       	std	Y+8, r1	; 0x08

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    24d6:	89 85       	ldd	r24, Y+9	; 0x09
    24d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24da:	cc 01       	movw	r24, r24
    24dc:	a0 e0       	ldi	r26, 0x00	; 0
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	bc 01       	movw	r22, r24
    24e2:	cd 01       	movw	r24, r26
    24e4:	0e 94 6b 2e 	call	0x5cd6	; 0x5cd6 <__floatunsisf>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	bc 01       	movw	r22, r24
    24ee:	cd 01       	movw	r24, r26
    24f0:	28 e4       	ldi	r18, 0x48	; 72
    24f2:	31 ee       	ldi	r19, 0xE1	; 225
    24f4:	42 e8       	ldi	r20, 0x82	; 130
    24f6:	50 e4       	ldi	r21, 0x40	; 64
    24f8:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <__divsf3>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	89 83       	std	Y+1, r24	; 0x01
    2502:	9a 83       	std	Y+2, r25	; 0x02
    2504:	ab 83       	std	Y+3, r26	; 0x03
    2506:	bc 83       	std	Y+4, r27	; 0x04
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    2508:	69 81       	ldd	r22, Y+1	; 0x01
    250a:	7a 81       	ldd	r23, Y+2	; 0x02
    250c:	8b 81       	ldd	r24, Y+3	; 0x03
    250e:	9c 81       	ldd	r25, Y+4	; 0x04
    2510:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	cc 01       	movw	r24, r24
    251a:	a0 e0       	ldi	r26, 0x00	; 0
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	8d 83       	std	Y+5, r24	; 0x05
    2520:	9e 83       	std	Y+6, r25	; 0x06
    2522:	af 83       	std	Y+7, r26	; 0x07
    2524:	b8 87       	std	Y+8, r27	; 0x08
	ShaftCountRight = 0;
    2526:	10 92 44 02 	sts	0x0244, r1
    252a:	10 92 45 02 	sts	0x0245, r1
    252e:	10 92 46 02 	sts	0x0246, r1
    2532:	10 92 47 02 	sts	0x0247, r1
	ShaftCountLeft = 0;
    2536:	10 92 40 02 	sts	0x0240, r1
    253a:	10 92 41 02 	sts	0x0241, r1
    253e:	10 92 42 02 	sts	0x0242, r1
    2542:	10 92 43 02 	sts	0x0243, r1
    2546:	01 c0       	rjmp	.+2      	; 0x254a <angle_rotate+0xa2>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) || (ShaftCountLeft >= ReqdShaftCountInt))
		break;
	}
    2548:	00 00       	nop
	ShaftCountRight = 0;
	ShaftCountLeft = 0;

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) || (ShaftCountLeft >= ReqdShaftCountInt))
    254a:	20 91 44 02 	lds	r18, 0x0244
    254e:	30 91 45 02 	lds	r19, 0x0245
    2552:	40 91 46 02 	lds	r20, 0x0246
    2556:	50 91 47 02 	lds	r21, 0x0247
    255a:	8d 81       	ldd	r24, Y+5	; 0x05
    255c:	9e 81       	ldd	r25, Y+6	; 0x06
    255e:	af 81       	ldd	r26, Y+7	; 0x07
    2560:	b8 85       	ldd	r27, Y+8	; 0x08
    2562:	28 17       	cp	r18, r24
    2564:	39 07       	cpc	r19, r25
    2566:	4a 07       	cpc	r20, r26
    2568:	5b 07       	cpc	r21, r27
    256a:	88 f4       	brcc	.+34     	; 0x258e <angle_rotate+0xe6>
    256c:	20 91 40 02 	lds	r18, 0x0240
    2570:	30 91 41 02 	lds	r19, 0x0241
    2574:	40 91 42 02 	lds	r20, 0x0242
    2578:	50 91 43 02 	lds	r21, 0x0243
    257c:	8d 81       	ldd	r24, Y+5	; 0x05
    257e:	9e 81       	ldd	r25, Y+6	; 0x06
    2580:	af 81       	ldd	r26, Y+7	; 0x07
    2582:	b8 85       	ldd	r27, Y+8	; 0x08
    2584:	28 17       	cp	r18, r24
    2586:	39 07       	cpc	r19, r25
    2588:	4a 07       	cpc	r20, r26
    258a:	5b 07       	cpc	r21, r27
    258c:	e8 f2       	brcs	.-70     	; 0x2548 <angle_rotate+0xa0>
		break;
	}
	stop_bot(); //Stop robot
    258e:	0e 94 4a 12 	call	0x2494	; 0x2494 <stop_bot>
}
    2592:	2a 96       	adiw	r28, 0x0a	; 10
    2594:	0f b6       	in	r0, 0x3f	; 63
    2596:	f8 94       	cli
    2598:	de bf       	out	0x3e, r29	; 62
    259a:	0f be       	out	0x3f, r0	; 63
    259c:	cd bf       	out	0x3d, r28	; 61
    259e:	df 91       	pop	r29
    25a0:	cf 91       	pop	r28
    25a2:	08 95       	ret

000025a4 <left_degrees>:

void left_degrees(unsigned int Degrees)
{
    25a4:	cf 93       	push	r28
    25a6:	df 93       	push	r29
    25a8:	0f 92       	push	r0
    25aa:	0f 92       	push	r0
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
    25b0:	9a 83       	std	Y+2, r25	; 0x02
    25b2:	89 83       	std	Y+1, r24	; 0x01
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
    25b4:	0e 94 2c 12 	call	0x2458	; 0x2458 <left>
	angle_rotate(Degrees);
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	9a 81       	ldd	r25, Y+2	; 0x02
    25bc:	0e 94 54 12 	call	0x24a8	; 0x24a8 <angle_rotate>
}
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	df 91       	pop	r29
    25c6:	cf 91       	pop	r28
    25c8:	08 95       	ret

000025ca <right_degrees>:

void right_degrees(unsigned int Degrees)
{
    25ca:	cf 93       	push	r28
    25cc:	df 93       	push	r29
    25ce:	0f 92       	push	r0
    25d0:	0f 92       	push	r0
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
    25d6:	9a 83       	std	Y+2, r25	; 0x02
    25d8:	89 83       	std	Y+1, r24	; 0x01
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
    25da:	0e 94 36 12 	call	0x246c	; 0x246c <right>
	angle_rotate(Degrees);
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	9a 81       	ldd	r25, Y+2	; 0x02
    25e2:	0e 94 54 12 	call	0x24a8	; 0x24a8 <angle_rotate>
}
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	df 91       	pop	r29
    25ec:	cf 91       	pop	r28
    25ee:	08 95       	ret

000025f0 <linear_distance_mm>:

//Function used for moving robot forward by specified length
void linear_distance_mm(unsigned int DistanceInMM)
{
    25f0:	cf 93       	push	r28
    25f2:	df 93       	push	r29
    25f4:	cd b7       	in	r28, 0x3d	; 61
    25f6:	de b7       	in	r29, 0x3e	; 62
    25f8:	2a 97       	sbiw	r28, 0x0a	; 10
    25fa:	0f b6       	in	r0, 0x3f	; 63
    25fc:	f8 94       	cli
    25fe:	de bf       	out	0x3e, r29	; 62
    2600:	0f be       	out	0x3f, r0	; 63
    2602:	cd bf       	out	0x3d, r28	; 61
    2604:	9a 87       	std	Y+10, r25	; 0x0a
    2606:	89 87       	std	Y+9, r24	; 0x09
	float ReqdShaftCount = 0;
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	dc 01       	movw	r26, r24
    260e:	89 83       	std	Y+1, r24	; 0x01
    2610:	9a 83       	std	Y+2, r25	; 0x02
    2612:	ab 83       	std	Y+3, r26	; 0x03
    2614:	bc 83       	std	Y+4, r27	; 0x04
	unsigned long int ReqdShaftCountInt = 0;
    2616:	1d 82       	std	Y+5, r1	; 0x05
    2618:	1e 82       	std	Y+6, r1	; 0x06
    261a:	1f 82       	std	Y+7, r1	; 0x07
    261c:	18 86       	std	Y+8, r1	; 0x08

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    261e:	89 85       	ldd	r24, Y+9	; 0x09
    2620:	9a 85       	ldd	r25, Y+10	; 0x0a
    2622:	cc 01       	movw	r24, r24
    2624:	a0 e0       	ldi	r26, 0x00	; 0
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	bc 01       	movw	r22, r24
    262a:	cd 01       	movw	r24, r26
    262c:	0e 94 6b 2e 	call	0x5cd6	; 0x5cd6 <__floatunsisf>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	bc 01       	movw	r22, r24
    2636:	cd 01       	movw	r24, r26
    2638:	25 ee       	ldi	r18, 0xE5	; 229
    263a:	30 ed       	ldi	r19, 0xD0	; 208
    263c:	4a ea       	ldi	r20, 0xAA	; 170
    263e:	50 e4       	ldi	r21, 0x40	; 64
    2640:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <__divsf3>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	89 83       	std	Y+1, r24	; 0x01
    264a:	9a 83       	std	Y+2, r25	; 0x02
    264c:	ab 83       	std	Y+3, r26	; 0x03
    264e:	bc 83       	std	Y+4, r27	; 0x04
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    2650:	69 81       	ldd	r22, Y+1	; 0x01
    2652:	7a 81       	ldd	r23, Y+2	; 0x02
    2654:	8b 81       	ldd	r24, Y+3	; 0x03
    2656:	9c 81       	ldd	r25, Y+4	; 0x04
    2658:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	8d 83       	std	Y+5, r24	; 0x05
    2662:	9e 83       	std	Y+6, r25	; 0x06
    2664:	af 83       	std	Y+7, r26	; 0x07
    2666:	b8 87       	std	Y+8, r27	; 0x08
	
	ShaftCountRight = 0;
    2668:	10 92 44 02 	sts	0x0244, r1
    266c:	10 92 45 02 	sts	0x0245, r1
    2670:	10 92 46 02 	sts	0x0246, r1
    2674:	10 92 47 02 	sts	0x0247, r1
	ShaftCountLeft = 0;
    2678:	10 92 40 02 	sts	0x0240, r1
    267c:	10 92 41 02 	sts	0x0241, r1
    2680:	10 92 42 02 	sts	0x0242, r1
    2684:	10 92 43 02 	sts	0x0243, r1
    2688:	01 c0       	rjmp	.+2      	; 0x268c <linear_distance_mm+0x9c>
	{
		if((ShaftCountRight > ReqdShaftCountInt)||(ShaftCountLeft > ReqdShaftCountInt))
		{
			break;
		}
	}
    268a:	00 00       	nop
	
	ShaftCountRight = 0;
	ShaftCountLeft = 0;
	while(1)
	{
		if((ShaftCountRight > ReqdShaftCountInt)||(ShaftCountLeft > ReqdShaftCountInt))
    268c:	20 91 44 02 	lds	r18, 0x0244
    2690:	30 91 45 02 	lds	r19, 0x0245
    2694:	40 91 46 02 	lds	r20, 0x0246
    2698:	50 91 47 02 	lds	r21, 0x0247
    269c:	8d 81       	ldd	r24, Y+5	; 0x05
    269e:	9e 81       	ldd	r25, Y+6	; 0x06
    26a0:	af 81       	ldd	r26, Y+7	; 0x07
    26a2:	b8 85       	ldd	r27, Y+8	; 0x08
    26a4:	82 17       	cp	r24, r18
    26a6:	93 07       	cpc	r25, r19
    26a8:	a4 07       	cpc	r26, r20
    26aa:	b5 07       	cpc	r27, r21
    26ac:	88 f0       	brcs	.+34     	; 0x26d0 <linear_distance_mm+0xe0>
    26ae:	20 91 40 02 	lds	r18, 0x0240
    26b2:	30 91 41 02 	lds	r19, 0x0241
    26b6:	40 91 42 02 	lds	r20, 0x0242
    26ba:	50 91 43 02 	lds	r21, 0x0243
    26be:	8d 81       	ldd	r24, Y+5	; 0x05
    26c0:	9e 81       	ldd	r25, Y+6	; 0x06
    26c2:	af 81       	ldd	r26, Y+7	; 0x07
    26c4:	b8 85       	ldd	r27, Y+8	; 0x08
    26c6:	82 17       	cp	r24, r18
    26c8:	93 07       	cpc	r25, r19
    26ca:	a4 07       	cpc	r26, r20
    26cc:	b5 07       	cpc	r27, r21
    26ce:	e8 f6       	brcc	.-70     	; 0x268a <linear_distance_mm+0x9a>
		{
			break;
		}
	}
	//stop(); //Stop robot
}
    26d0:	2a 96       	adiw	r28, 0x0a	; 10
    26d2:	0f b6       	in	r0, 0x3f	; 63
    26d4:	f8 94       	cli
    26d6:	de bf       	out	0x3e, r29	; 62
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	cd bf       	out	0x3d, r28	; 61
    26dc:	df 91       	pop	r29
    26de:	cf 91       	pop	r28
    26e0:	08 95       	ret

000026e2 <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
    26e2:	cf 93       	push	r28
    26e4:	df 93       	push	r29
    26e6:	0f 92       	push	r0
    26e8:	0f 92       	push	r0
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
    26ee:	9a 83       	std	Y+2, r25	; 0x02
    26f0:	89 83       	std	Y+1, r24	; 0x01
	forward();
    26f2:	0e 94 22 12 	call	0x2444	; 0x2444 <forward>
	linear_distance_mm(DistanceInMM);
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	9a 81       	ldd	r25, Y+2	; 0x02
    26fa:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <linear_distance_mm>
}
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	df 91       	pop	r29
    2704:	cf 91       	pop	r28
    2706:	08 95       	ret

00002708 <back_mm>:

void back_mm(unsigned int DistanceInMM)
{
    2708:	cf 93       	push	r28
    270a:	df 93       	push	r29
    270c:	0f 92       	push	r0
    270e:	0f 92       	push	r0
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
    2714:	9a 83       	std	Y+2, r25	; 0x02
    2716:	89 83       	std	Y+1, r24	; 0x01
	back();
    2718:	0e 94 40 12 	call	0x2480	; 0x2480 <back>
	linear_distance_mm(DistanceInMM);
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	9a 81       	ldd	r25, Y+2	; 0x02
    2720:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <linear_distance_mm>
}
    2724:	0f 90       	pop	r0
    2726:	0f 90       	pop	r0
    2728:	df 91       	pop	r29
    272a:	cf 91       	pop	r28
    272c:	08 95       	ret

0000272e <filter_red>:

//Filter Selection
void filter_red(void)    //Used to select red filter
{
    272e:	cf 93       	push	r28
    2730:	df 93       	push	r29
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
	//Filter Select - red filter
	PORTD = PORTD & 0xBF; //set S2 low
    2736:	8b e2       	ldi	r24, 0x2B	; 43
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	2b e2       	ldi	r18, 0x2B	; 43
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	f9 01       	movw	r30, r18
    2740:	20 81       	ld	r18, Z
    2742:	2f 7b       	andi	r18, 0xBF	; 191
    2744:	fc 01       	movw	r30, r24
    2746:	20 83       	st	Z, r18
	PORTD = PORTD & 0x7F; //set S3 low
    2748:	8b e2       	ldi	r24, 0x2B	; 43
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	2b e2       	ldi	r18, 0x2B	; 43
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	f9 01       	movw	r30, r18
    2752:	20 81       	ld	r18, Z
    2754:	2f 77       	andi	r18, 0x7F	; 127
    2756:	fc 01       	movw	r30, r24
    2758:	20 83       	st	Z, r18
}
    275a:	df 91       	pop	r29
    275c:	cf 91       	pop	r28
    275e:	08 95       	ret

00002760 <filter_green>:

void filter_green(void)	//Used to select green filter
{
    2760:	cf 93       	push	r28
    2762:	df 93       	push	r29
    2764:	cd b7       	in	r28, 0x3d	; 61
    2766:	de b7       	in	r29, 0x3e	; 62
	//Filter Select - green filter
	PORTD = PORTD | 0x40; //set S2 High
    2768:	8b e2       	ldi	r24, 0x2B	; 43
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	2b e2       	ldi	r18, 0x2B	; 43
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	f9 01       	movw	r30, r18
    2772:	20 81       	ld	r18, Z
    2774:	20 64       	ori	r18, 0x40	; 64
    2776:	fc 01       	movw	r30, r24
    2778:	20 83       	st	Z, r18
	PORTD = PORTD | 0x80; //set S3 High
    277a:	8b e2       	ldi	r24, 0x2B	; 43
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	2b e2       	ldi	r18, 0x2B	; 43
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	f9 01       	movw	r30, r18
    2784:	20 81       	ld	r18, Z
    2786:	20 68       	ori	r18, 0x80	; 128
    2788:	fc 01       	movw	r30, r24
    278a:	20 83       	st	Z, r18
}
    278c:	df 91       	pop	r29
    278e:	cf 91       	pop	r28
    2790:	08 95       	ret

00002792 <filter_blue>:

void filter_blue(void)	//Used to select blue filter
{
    2792:	cf 93       	push	r28
    2794:	df 93       	push	r29
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62
	//Filter Select - blue filter
	PORTD = PORTD & 0xBF; //set S2 low
    279a:	8b e2       	ldi	r24, 0x2B	; 43
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	2b e2       	ldi	r18, 0x2B	; 43
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	f9 01       	movw	r30, r18
    27a4:	20 81       	ld	r18, Z
    27a6:	2f 7b       	andi	r18, 0xBF	; 191
    27a8:	fc 01       	movw	r30, r24
    27aa:	20 83       	st	Z, r18
	PORTD = PORTD | 0x80; //set S3 High
    27ac:	8b e2       	ldi	r24, 0x2B	; 43
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	2b e2       	ldi	r18, 0x2B	; 43
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	f9 01       	movw	r30, r18
    27b6:	20 81       	ld	r18, Z
    27b8:	20 68       	ori	r18, 0x80	; 128
    27ba:	fc 01       	movw	r30, r24
    27bc:	20 83       	st	Z, r18
}
    27be:	df 91       	pop	r29
    27c0:	cf 91       	pop	r28
    27c2:	08 95       	ret

000027c4 <filter_clear>:

void filter_clear(void)	//select no filter
{
    27c4:	cf 93       	push	r28
    27c6:	df 93       	push	r29
    27c8:	cd b7       	in	r28, 0x3d	; 61
    27ca:	de b7       	in	r29, 0x3e	; 62
	//Filter Select - no filter
	PORTD = PORTD | 0x40; //set S2 High
    27cc:	8b e2       	ldi	r24, 0x2B	; 43
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	2b e2       	ldi	r18, 0x2B	; 43
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	f9 01       	movw	r30, r18
    27d6:	20 81       	ld	r18, Z
    27d8:	20 64       	ori	r18, 0x40	; 64
    27da:	fc 01       	movw	r30, r24
    27dc:	20 83       	st	Z, r18
	PORTD = PORTD & 0x7F; //set S3 Low
    27de:	8b e2       	ldi	r24, 0x2B	; 43
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	2b e2       	ldi	r18, 0x2B	; 43
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	f9 01       	movw	r30, r18
    27e8:	20 81       	ld	r18, Z
    27ea:	2f 77       	andi	r18, 0x7F	; 127
    27ec:	fc 01       	movw	r30, r24
    27ee:	20 83       	st	Z, r18
}
    27f0:	df 91       	pop	r29
    27f2:	cf 91       	pop	r28
    27f4:	08 95       	ret

000027f6 <color_sensor_scaling>:

//Color Sensing Scaling - 20% 
void color_sensor_scaling()		
{
    27f6:	cf 93       	push	r28
    27f8:	df 93       	push	r29
    27fa:	cd b7       	in	r28, 0x3d	; 61
    27fc:	de b7       	in	r29, 0x3e	; 62
	//PORTD = PORTD & 0xEF;
	PORTD = PORTD | 0x10; //set S0 high
    27fe:	8b e2       	ldi	r24, 0x2B	; 43
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	2b e2       	ldi	r18, 0x2B	; 43
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	f9 01       	movw	r30, r18
    2808:	20 81       	ld	r18, Z
    280a:	20 61       	ori	r18, 0x10	; 16
    280c:	fc 01       	movw	r30, r24
    280e:	20 83       	st	Z, r18
	//PORTD = PORTD & 0xDF; //set S1 low
	PORTD = PORTD | 0x20; //set S1 high
    2810:	8b e2       	ldi	r24, 0x2B	; 43
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	2b e2       	ldi	r18, 0x2B	; 43
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	f9 01       	movw	r30, r18
    281a:	20 81       	ld	r18, Z
    281c:	20 62       	ori	r18, 0x20	; 32
    281e:	fc 01       	movw	r30, r24
    2820:	20 83       	st	Z, r18
}
    2822:	df 91       	pop	r29
    2824:	cf 91       	pop	r28
    2826:	08 95       	ret

00002828 <red_read>:

void red_read(void) // function to select red filter 
{
    2828:	0f 93       	push	r16
    282a:	1f 93       	push	r17
    282c:	cf 93       	push	r28
    282e:	df 93       	push	r29
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
    2834:	2e 97       	sbiw	r28, 0x0e	; 14
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	f8 94       	cli
    283a:	de bf       	out	0x3e, r29	; 62
    283c:	0f be       	out	0x3f, r0	; 63
    283e:	cd bf       	out	0x3d, r28	; 61
	filter_red(); //select red filter
    2840:	0e 94 97 13 	call	0x272e	; 0x272e <filter_red>
	pulse=0;
    2844:	10 92 4a 02 	sts	0x024A, r1
    2848:	10 92 4b 02 	sts	0x024B, r1
    284c:	10 92 4c 02 	sts	0x024C, r1
    2850:	10 92 4d 02 	sts	0x024D, r1
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	a8 ec       	ldi	r26, 0xC8	; 200
    285a:	b2 e4       	ldi	r27, 0x42	; 66
    285c:	89 83       	std	Y+1, r24	; 0x01
    285e:	9a 83       	std	Y+2, r25	; 0x02
    2860:	ab 83       	std	Y+3, r26	; 0x03
    2862:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2864:	69 81       	ldd	r22, Y+1	; 0x01
    2866:	7a 81       	ldd	r23, Y+2	; 0x02
    2868:	8b 81       	ldd	r24, Y+3	; 0x03
    286a:	9c 81       	ldd	r25, Y+4	; 0x04
    286c:	26 e6       	ldi	r18, 0x66	; 102
    286e:	36 e6       	ldi	r19, 0x66	; 102
    2870:	46 e6       	ldi	r20, 0x66	; 102
    2872:	55 e4       	ldi	r21, 0x45	; 69
    2874:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	8d 83       	std	Y+5, r24	; 0x05
    287e:	9e 83       	std	Y+6, r25	; 0x06
    2880:	af 83       	std	Y+7, r26	; 0x07
    2882:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2884:	11 e0       	ldi	r17, 0x01	; 1
    2886:	6d 81       	ldd	r22, Y+5	; 0x05
    2888:	7e 81       	ldd	r23, Y+6	; 0x06
    288a:	8f 81       	ldd	r24, Y+7	; 0x07
    288c:	98 85       	ldd	r25, Y+8	; 0x08
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e8       	ldi	r20, 0x80	; 128
    2894:	5f e3       	ldi	r21, 0x3F	; 63
    2896:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    289a:	88 23       	and	r24, r24
    289c:	0c f0       	brlt	.+2      	; 0x28a0 <red_read+0x78>
    289e:	10 e0       	ldi	r17, 0x00	; 0
    28a0:	11 23       	and	r17, r17
    28a2:	29 f0       	breq	.+10     	; 0x28ae <red_read+0x86>
		__ticks = 1;
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	9a 87       	std	Y+10, r25	; 0x0a
    28aa:	89 87       	std	Y+9, r24	; 0x09
    28ac:	46 c0       	rjmp	.+140    	; 0x293a <red_read+0x112>
	else if (__tmp > 65535)
    28ae:	11 e0       	ldi	r17, 0x01	; 1
    28b0:	6d 81       	ldd	r22, Y+5	; 0x05
    28b2:	7e 81       	ldd	r23, Y+6	; 0x06
    28b4:	8f 81       	ldd	r24, Y+7	; 0x07
    28b6:	98 85       	ldd	r25, Y+8	; 0x08
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	3f ef       	ldi	r19, 0xFF	; 255
    28bc:	4f e7       	ldi	r20, 0x7F	; 127
    28be:	57 e4       	ldi	r21, 0x47	; 71
    28c0:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    28c4:	18 16       	cp	r1, r24
    28c6:	0c f0       	brlt	.+2      	; 0x28ca <red_read+0xa2>
    28c8:	10 e0       	ldi	r17, 0x00	; 0
    28ca:	11 23       	and	r17, r17
    28cc:	61 f1       	breq	.+88     	; 0x2926 <red_read+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ce:	69 81       	ldd	r22, Y+1	; 0x01
    28d0:	7a 81       	ldd	r23, Y+2	; 0x02
    28d2:	8b 81       	ldd	r24, Y+3	; 0x03
    28d4:	9c 81       	ldd	r25, Y+4	; 0x04
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	40 e2       	ldi	r20, 0x20	; 32
    28dc:	51 e4       	ldi	r21, 0x41	; 65
    28de:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	bc 01       	movw	r22, r24
    28e8:	cd 01       	movw	r24, r26
    28ea:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	9a 87       	std	Y+10, r25	; 0x0a
    28f4:	89 87       	std	Y+9, r24	; 0x09
    28f6:	12 c0       	rjmp	.+36     	; 0x291c <red_read+0xf4>
    28f8:	80 e7       	ldi	r24, 0x70	; 112
    28fa:	91 e0       	ldi	r25, 0x01	; 1
    28fc:	9c 87       	std	Y+12, r25	; 0x0c
    28fe:	8b 87       	std	Y+11, r24	; 0x0b
    2900:	8b 85       	ldd	r24, Y+11	; 0x0b
    2902:	9c 85       	ldd	r25, Y+12	; 0x0c
    2904:	8c 01       	movw	r16, r24
    2906:	c8 01       	movw	r24, r16
    2908:	01 97       	sbiw	r24, 0x01	; 1
    290a:	f1 f7       	brne	.-4      	; 0x2908 <red_read+0xe0>
    290c:	8c 01       	movw	r16, r24
    290e:	1c 87       	std	Y+12, r17	; 0x0c
    2910:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2912:	89 85       	ldd	r24, Y+9	; 0x09
    2914:	9a 85       	ldd	r25, Y+10	; 0x0a
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	9a 87       	std	Y+10, r25	; 0x0a
    291a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    291c:	89 85       	ldd	r24, Y+9	; 0x09
    291e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2920:	00 97       	sbiw	r24, 0x00	; 0
    2922:	51 f7       	brne	.-44     	; 0x28f8 <red_read+0xd0>
    2924:	17 c0       	rjmp	.+46     	; 0x2954 <red_read+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2926:	6d 81       	ldd	r22, Y+5	; 0x05
    2928:	7e 81       	ldd	r23, Y+6	; 0x06
    292a:	8f 81       	ldd	r24, Y+7	; 0x07
    292c:	98 85       	ldd	r25, Y+8	; 0x08
    292e:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	9a 87       	std	Y+10, r25	; 0x0a
    2938:	89 87       	std	Y+9, r24	; 0x09
    293a:	89 85       	ldd	r24, Y+9	; 0x09
    293c:	9a 85       	ldd	r25, Y+10	; 0x0a
    293e:	9e 87       	std	Y+14, r25	; 0x0e
    2940:	8d 87       	std	Y+13, r24	; 0x0d
    2942:	8d 85       	ldd	r24, Y+13	; 0x0d
    2944:	9e 85       	ldd	r25, Y+14	; 0x0e
    2946:	8c 01       	movw	r16, r24
    2948:	c8 01       	movw	r24, r16
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	f1 f7       	brne	.-4      	; 0x294a <red_read+0x122>
    294e:	8c 01       	movw	r16, r24
    2950:	1e 87       	std	Y+14, r17	; 0x0e
    2952:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	red = pulse;  
    2954:	80 91 4a 02 	lds	r24, 0x024A
    2958:	90 91 4b 02 	lds	r25, 0x024B
    295c:	a0 91 4c 02 	lds	r26, 0x024C
    2960:	b0 91 4d 02 	lds	r27, 0x024D
    2964:	80 93 87 02 	sts	0x0287, r24
    2968:	90 93 88 02 	sts	0x0288, r25
    296c:	a0 93 89 02 	sts	0x0289, r26
    2970:	b0 93 8a 02 	sts	0x028A, r27
}
    2974:	2e 96       	adiw	r28, 0x0e	; 14
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	f8 94       	cli
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	cd bf       	out	0x3d, r28	; 61
    2980:	df 91       	pop	r29
    2982:	cf 91       	pop	r28
    2984:	1f 91       	pop	r17
    2986:	0f 91       	pop	r16
    2988:	08 95       	ret

0000298a <green_read>:

void green_read(void) // function to select green filter 
{
    298a:	0f 93       	push	r16
    298c:	1f 93       	push	r17
    298e:	cf 93       	push	r28
    2990:	df 93       	push	r29
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
    2996:	2e 97       	sbiw	r28, 0x0e	; 14
    2998:	0f b6       	in	r0, 0x3f	; 63
    299a:	f8 94       	cli
    299c:	de bf       	out	0x3e, r29	; 62
    299e:	0f be       	out	0x3f, r0	; 63
    29a0:	cd bf       	out	0x3d, r28	; 61
	filter_green(); //select green filter
    29a2:	0e 94 b0 13 	call	0x2760	; 0x2760 <filter_green>
	pulse=0; 
    29a6:	10 92 4a 02 	sts	0x024A, r1
    29aa:	10 92 4b 02 	sts	0x024B, r1
    29ae:	10 92 4c 02 	sts	0x024C, r1
    29b2:	10 92 4d 02 	sts	0x024D, r1
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	a8 ec       	ldi	r26, 0xC8	; 200
    29bc:	b2 e4       	ldi	r27, 0x42	; 66
    29be:	89 83       	std	Y+1, r24	; 0x01
    29c0:	9a 83       	std	Y+2, r25	; 0x02
    29c2:	ab 83       	std	Y+3, r26	; 0x03
    29c4:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    29c6:	69 81       	ldd	r22, Y+1	; 0x01
    29c8:	7a 81       	ldd	r23, Y+2	; 0x02
    29ca:	8b 81       	ldd	r24, Y+3	; 0x03
    29cc:	9c 81       	ldd	r25, Y+4	; 0x04
    29ce:	26 e6       	ldi	r18, 0x66	; 102
    29d0:	36 e6       	ldi	r19, 0x66	; 102
    29d2:	46 e6       	ldi	r20, 0x66	; 102
    29d4:	55 e4       	ldi	r21, 0x45	; 69
    29d6:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	8d 83       	std	Y+5, r24	; 0x05
    29e0:	9e 83       	std	Y+6, r25	; 0x06
    29e2:	af 83       	std	Y+7, r26	; 0x07
    29e4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    29e6:	11 e0       	ldi	r17, 0x01	; 1
    29e8:	6d 81       	ldd	r22, Y+5	; 0x05
    29ea:	7e 81       	ldd	r23, Y+6	; 0x06
    29ec:	8f 81       	ldd	r24, Y+7	; 0x07
    29ee:	98 85       	ldd	r25, Y+8	; 0x08
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	40 e8       	ldi	r20, 0x80	; 128
    29f6:	5f e3       	ldi	r21, 0x3F	; 63
    29f8:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    29fc:	88 23       	and	r24, r24
    29fe:	0c f0       	brlt	.+2      	; 0x2a02 <green_read+0x78>
    2a00:	10 e0       	ldi	r17, 0x00	; 0
    2a02:	11 23       	and	r17, r17
    2a04:	29 f0       	breq	.+10     	; 0x2a10 <green_read+0x86>
		__ticks = 1;
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	9a 87       	std	Y+10, r25	; 0x0a
    2a0c:	89 87       	std	Y+9, r24	; 0x09
    2a0e:	46 c0       	rjmp	.+140    	; 0x2a9c <green_read+0x112>
	else if (__tmp > 65535)
    2a10:	11 e0       	ldi	r17, 0x01	; 1
    2a12:	6d 81       	ldd	r22, Y+5	; 0x05
    2a14:	7e 81       	ldd	r23, Y+6	; 0x06
    2a16:	8f 81       	ldd	r24, Y+7	; 0x07
    2a18:	98 85       	ldd	r25, Y+8	; 0x08
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	3f ef       	ldi	r19, 0xFF	; 255
    2a1e:	4f e7       	ldi	r20, 0x7F	; 127
    2a20:	57 e4       	ldi	r21, 0x47	; 71
    2a22:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    2a26:	18 16       	cp	r1, r24
    2a28:	0c f0       	brlt	.+2      	; 0x2a2c <green_read+0xa2>
    2a2a:	10 e0       	ldi	r17, 0x00	; 0
    2a2c:	11 23       	and	r17, r17
    2a2e:	61 f1       	breq	.+88     	; 0x2a88 <green_read+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a30:	69 81       	ldd	r22, Y+1	; 0x01
    2a32:	7a 81       	ldd	r23, Y+2	; 0x02
    2a34:	8b 81       	ldd	r24, Y+3	; 0x03
    2a36:	9c 81       	ldd	r25, Y+4	; 0x04
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e2       	ldi	r20, 0x20	; 32
    2a3e:	51 e4       	ldi	r21, 0x41	; 65
    2a40:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	bc 01       	movw	r22, r24
    2a4a:	cd 01       	movw	r24, r26
    2a4c:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	9a 87       	std	Y+10, r25	; 0x0a
    2a56:	89 87       	std	Y+9, r24	; 0x09
    2a58:	12 c0       	rjmp	.+36     	; 0x2a7e <green_read+0xf4>
    2a5a:	80 e7       	ldi	r24, 0x70	; 112
    2a5c:	91 e0       	ldi	r25, 0x01	; 1
    2a5e:	9c 87       	std	Y+12, r25	; 0x0c
    2a60:	8b 87       	std	Y+11, r24	; 0x0b
    2a62:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a64:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a66:	8c 01       	movw	r16, r24
    2a68:	c8 01       	movw	r24, r16
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	f1 f7       	brne	.-4      	; 0x2a6a <green_read+0xe0>
    2a6e:	8c 01       	movw	r16, r24
    2a70:	1c 87       	std	Y+12, r17	; 0x0c
    2a72:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a74:	89 85       	ldd	r24, Y+9	; 0x09
    2a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a78:	01 97       	sbiw	r24, 0x01	; 1
    2a7a:	9a 87       	std	Y+10, r25	; 0x0a
    2a7c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a7e:	89 85       	ldd	r24, Y+9	; 0x09
    2a80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a82:	00 97       	sbiw	r24, 0x00	; 0
    2a84:	51 f7       	brne	.-44     	; 0x2a5a <green_read+0xd0>
    2a86:	17 c0       	rjmp	.+46     	; 0x2ab6 <green_read+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a88:	6d 81       	ldd	r22, Y+5	; 0x05
    2a8a:	7e 81       	ldd	r23, Y+6	; 0x06
    2a8c:	8f 81       	ldd	r24, Y+7	; 0x07
    2a8e:	98 85       	ldd	r25, Y+8	; 0x08
    2a90:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	9a 87       	std	Y+10, r25	; 0x0a
    2a9a:	89 87       	std	Y+9, r24	; 0x09
    2a9c:	89 85       	ldd	r24, Y+9	; 0x09
    2a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa0:	9e 87       	std	Y+14, r25	; 0x0e
    2aa2:	8d 87       	std	Y+13, r24	; 0x0d
    2aa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa8:	8c 01       	movw	r16, r24
    2aaa:	c8 01       	movw	r24, r16
    2aac:	01 97       	sbiw	r24, 0x01	; 1
    2aae:	f1 f7       	brne	.-4      	; 0x2aac <green_read+0x122>
    2ab0:	8c 01       	movw	r16, r24
    2ab2:	1e 87       	std	Y+14, r17	; 0x0e
    2ab4:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	green = pulse; 
    2ab6:	80 91 4a 02 	lds	r24, 0x024A
    2aba:	90 91 4b 02 	lds	r25, 0x024B
    2abe:	a0 91 4c 02 	lds	r26, 0x024C
    2ac2:	b0 91 4d 02 	lds	r27, 0x024D
    2ac6:	80 93 83 02 	sts	0x0283, r24
    2aca:	90 93 84 02 	sts	0x0284, r25
    2ace:	a0 93 85 02 	sts	0x0285, r26
    2ad2:	b0 93 86 02 	sts	0x0286, r27
}
    2ad6:	2e 96       	adiw	r28, 0x0e	; 14
    2ad8:	0f b6       	in	r0, 0x3f	; 63
    2ada:	f8 94       	cli
    2adc:	de bf       	out	0x3e, r29	; 62
    2ade:	0f be       	out	0x3f, r0	; 63
    2ae0:	cd bf       	out	0x3d, r28	; 61
    2ae2:	df 91       	pop	r29
    2ae4:	cf 91       	pop	r28
    2ae6:	1f 91       	pop	r17
    2ae8:	0f 91       	pop	r16
    2aea:	08 95       	ret

00002aec <blue_read>:

void blue_read(void) // function to select blue filter 
{
    2aec:	0f 93       	push	r16
    2aee:	1f 93       	push	r17
    2af0:	cf 93       	push	r28
    2af2:	df 93       	push	r29
    2af4:	cd b7       	in	r28, 0x3d	; 61
    2af6:	de b7       	in	r29, 0x3e	; 62
    2af8:	2e 97       	sbiw	r28, 0x0e	; 14
    2afa:	0f b6       	in	r0, 0x3f	; 63
    2afc:	f8 94       	cli
    2afe:	de bf       	out	0x3e, r29	; 62
    2b00:	0f be       	out	0x3f, r0	; 63
    2b02:	cd bf       	out	0x3d, r28	; 61
	filter_blue(); //select blue filter
    2b04:	0e 94 c9 13 	call	0x2792	; 0x2792 <filter_blue>
	pulse=0; 
    2b08:	10 92 4a 02 	sts	0x024A, r1
    2b0c:	10 92 4b 02 	sts	0x024B, r1
    2b10:	10 92 4c 02 	sts	0x024C, r1
    2b14:	10 92 4d 02 	sts	0x024D, r1
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	a8 ec       	ldi	r26, 0xC8	; 200
    2b1e:	b2 e4       	ldi	r27, 0x42	; 66
    2b20:	89 83       	std	Y+1, r24	; 0x01
    2b22:	9a 83       	std	Y+2, r25	; 0x02
    2b24:	ab 83       	std	Y+3, r26	; 0x03
    2b26:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2b28:	69 81       	ldd	r22, Y+1	; 0x01
    2b2a:	7a 81       	ldd	r23, Y+2	; 0x02
    2b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b30:	26 e6       	ldi	r18, 0x66	; 102
    2b32:	36 e6       	ldi	r19, 0x66	; 102
    2b34:	46 e6       	ldi	r20, 0x66	; 102
    2b36:	55 e4       	ldi	r21, 0x45	; 69
    2b38:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	8d 83       	std	Y+5, r24	; 0x05
    2b42:	9e 83       	std	Y+6, r25	; 0x06
    2b44:	af 83       	std	Y+7, r26	; 0x07
    2b46:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2b48:	11 e0       	ldi	r17, 0x01	; 1
    2b4a:	6d 81       	ldd	r22, Y+5	; 0x05
    2b4c:	7e 81       	ldd	r23, Y+6	; 0x06
    2b4e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b50:	98 85       	ldd	r25, Y+8	; 0x08
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	40 e8       	ldi	r20, 0x80	; 128
    2b58:	5f e3       	ldi	r21, 0x3F	; 63
    2b5a:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    2b5e:	88 23       	and	r24, r24
    2b60:	0c f0       	brlt	.+2      	; 0x2b64 <blue_read+0x78>
    2b62:	10 e0       	ldi	r17, 0x00	; 0
    2b64:	11 23       	and	r17, r17
    2b66:	29 f0       	breq	.+10     	; 0x2b72 <blue_read+0x86>
		__ticks = 1;
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	9a 87       	std	Y+10, r25	; 0x0a
    2b6e:	89 87       	std	Y+9, r24	; 0x09
    2b70:	46 c0       	rjmp	.+140    	; 0x2bfe <blue_read+0x112>
	else if (__tmp > 65535)
    2b72:	11 e0       	ldi	r17, 0x01	; 1
    2b74:	6d 81       	ldd	r22, Y+5	; 0x05
    2b76:	7e 81       	ldd	r23, Y+6	; 0x06
    2b78:	8f 81       	ldd	r24, Y+7	; 0x07
    2b7a:	98 85       	ldd	r25, Y+8	; 0x08
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	3f ef       	ldi	r19, 0xFF	; 255
    2b80:	4f e7       	ldi	r20, 0x7F	; 127
    2b82:	57 e4       	ldi	r21, 0x47	; 71
    2b84:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    2b88:	18 16       	cp	r1, r24
    2b8a:	0c f0       	brlt	.+2      	; 0x2b8e <blue_read+0xa2>
    2b8c:	10 e0       	ldi	r17, 0x00	; 0
    2b8e:	11 23       	and	r17, r17
    2b90:	61 f1       	breq	.+88     	; 0x2bea <blue_read+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b92:	69 81       	ldd	r22, Y+1	; 0x01
    2b94:	7a 81       	ldd	r23, Y+2	; 0x02
    2b96:	8b 81       	ldd	r24, Y+3	; 0x03
    2b98:	9c 81       	ldd	r25, Y+4	; 0x04
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	40 e2       	ldi	r20, 0x20	; 32
    2ba0:	51 e4       	ldi	r21, 0x41	; 65
    2ba2:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	bc 01       	movw	r22, r24
    2bac:	cd 01       	movw	r24, r26
    2bae:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	9a 87       	std	Y+10, r25	; 0x0a
    2bb8:	89 87       	std	Y+9, r24	; 0x09
    2bba:	12 c0       	rjmp	.+36     	; 0x2be0 <blue_read+0xf4>
    2bbc:	80 e7       	ldi	r24, 0x70	; 112
    2bbe:	91 e0       	ldi	r25, 0x01	; 1
    2bc0:	9c 87       	std	Y+12, r25	; 0x0c
    2bc2:	8b 87       	std	Y+11, r24	; 0x0b
    2bc4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bc6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bc8:	8c 01       	movw	r16, r24
    2bca:	c8 01       	movw	r24, r16
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	f1 f7       	brne	.-4      	; 0x2bcc <blue_read+0xe0>
    2bd0:	8c 01       	movw	r16, r24
    2bd2:	1c 87       	std	Y+12, r17	; 0x0c
    2bd4:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd6:	89 85       	ldd	r24, Y+9	; 0x09
    2bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bda:	01 97       	sbiw	r24, 0x01	; 1
    2bdc:	9a 87       	std	Y+10, r25	; 0x0a
    2bde:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be0:	89 85       	ldd	r24, Y+9	; 0x09
    2be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be4:	00 97       	sbiw	r24, 0x00	; 0
    2be6:	51 f7       	brne	.-44     	; 0x2bbc <blue_read+0xd0>
    2be8:	17 c0       	rjmp	.+46     	; 0x2c18 <blue_read+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bea:	6d 81       	ldd	r22, Y+5	; 0x05
    2bec:	7e 81       	ldd	r23, Y+6	; 0x06
    2bee:	8f 81       	ldd	r24, Y+7	; 0x07
    2bf0:	98 85       	ldd	r25, Y+8	; 0x08
    2bf2:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	9a 87       	std	Y+10, r25	; 0x0a
    2bfc:	89 87       	std	Y+9, r24	; 0x09
    2bfe:	89 85       	ldd	r24, Y+9	; 0x09
    2c00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c02:	9e 87       	std	Y+14, r25	; 0x0e
    2c04:	8d 87       	std	Y+13, r24	; 0x0d
    2c06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c0a:	8c 01       	movw	r16, r24
    2c0c:	c8 01       	movw	r24, r16
    2c0e:	01 97       	sbiw	r24, 0x01	; 1
    2c10:	f1 f7       	brne	.-4      	; 0x2c0e <blue_read+0x122>
    2c12:	8c 01       	movw	r16, r24
    2c14:	1e 87       	std	Y+14, r17	; 0x0e
    2c16:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	blue = pulse;  
    2c18:	80 91 4a 02 	lds	r24, 0x024A
    2c1c:	90 91 4b 02 	lds	r25, 0x024B
    2c20:	a0 91 4c 02 	lds	r26, 0x024C
    2c24:	b0 91 4d 02 	lds	r27, 0x024D
    2c28:	80 93 60 02 	sts	0x0260, r24
    2c2c:	90 93 61 02 	sts	0x0261, r25
    2c30:	a0 93 62 02 	sts	0x0262, r26
    2c34:	b0 93 63 02 	sts	0x0263, r27
}
    2c38:	2e 96       	adiw	r28, 0x0e	; 14
    2c3a:	0f b6       	in	r0, 0x3f	; 63
    2c3c:	f8 94       	cli
    2c3e:	de bf       	out	0x3e, r29	; 62
    2c40:	0f be       	out	0x3f, r0	; 63
    2c42:	cd bf       	out	0x3d, r28	; 61
    2c44:	df 91       	pop	r29
    2c46:	cf 91       	pop	r28
    2c48:	1f 91       	pop	r17
    2c4a:	0f 91       	pop	r16
    2c4c:	08 95       	ret

00002c4e <sensor_refresh>:


void sensor_refresh()
{
    2c4e:	cf 93       	push	r28
    2c50:	df 93       	push	r29
    2c52:	cd b7       	in	r28, 0x3d	; 61
    2c54:	de b7       	in	r29, 0x3e	; 62
	L= ADC_Conversion(3);	//Getting data of White Line Sensors
    2c56:	83 e0       	ldi	r24, 0x03	; 3
    2c58:	0e 94 88 11 	call	0x2310	; 0x2310 <ADC_Conversion>
    2c5c:	80 93 36 02 	sts	0x0236, r24
	C= ADC_Conversion(2);	
    2c60:	82 e0       	ldi	r24, 0x02	; 2
    2c62:	0e 94 88 11 	call	0x2310	; 0x2310 <ADC_Conversion>
    2c66:	80 93 37 02 	sts	0x0237, r24
	
	R= ADC_Conversion(1);	
    2c6a:	81 e0       	ldi	r24, 0x01	; 1
    2c6c:	0e 94 88 11 	call	0x2310	; 0x2310 <ADC_Conversion>
    2c70:	80 93 38 02 	sts	0x0238, r24
	
	IR1=ADC_Conversion(4);
    2c74:	84 e0       	ldi	r24, 0x04	; 4
    2c76:	0e 94 88 11 	call	0x2310	; 0x2310 <ADC_Conversion>
    2c7a:	80 93 39 02 	sts	0x0239, r24
	IR3=ADC_Conversion(6);  //Getting data of IR proximity Sensors
    2c7e:	86 e0       	ldi	r24, 0x06	; 6
    2c80:	0e 94 88 11 	call	0x2310	; 0x2310 <ADC_Conversion>
    2c84:	80 93 3b 02 	sts	0x023B, r24
	IR5=ADC_Conversion(8);
    2c88:	88 e0       	ldi	r24, 0x08	; 8
    2c8a:	0e 94 88 11 	call	0x2310	; 0x2310 <ADC_Conversion>
    2c8e:	80 93 3d 02 	sts	0x023D, r24
	
	SHARP1=ADC_Conversion(9); //Getting data of Sharp Sensors
    2c92:	89 e0       	ldi	r24, 0x09	; 9
    2c94:	0e 94 88 11 	call	0x2310	; 0x2310 <ADC_Conversion>
    2c98:	80 93 3e 02 	sts	0x023E, r24
	SHARP5=ADC_Conversion(13); 
    2c9c:	8d e0       	ldi	r24, 0x0D	; 13
    2c9e:	0e 94 88 11 	call	0x2310	; 0x2310 <ADC_Conversion>
    2ca2:	80 93 3f 02 	sts	0x023F, r24
}
    2ca6:	df 91       	pop	r29
    2ca8:	cf 91       	pop	r28
    2caa:	08 95       	ret

00002cac <I2C_read>:

//function to read the sensor values from GY-87 module
void I2C_read()
{
    2cac:	cf 93       	push	r28
    2cae:	df 93       	push	r29
    2cb0:	cd b7       	in	r28, 0x3d	; 61
    2cb2:	de b7       	in	r29, 0x3e	; 62
	i2c_read_multi_byte(DEV_ADD, X_ACC,2,acc_data_x);   //reading 2 data bytes and storing it into acc_data[2] array
    2cb4:	2c e8       	ldi	r18, 0x8C	; 140
    2cb6:	32 e0       	ldi	r19, 0x02	; 2
    2cb8:	80 ed       	ldi	r24, 0xD0	; 208
    2cba:	6b e3       	ldi	r22, 0x3B	; 59
    2cbc:	42 e0       	ldi	r20, 0x02	; 2
    2cbe:	50 e0       	ldi	r21, 0x00	; 0
    2cc0:	0e 94 e5 01 	call	0x3ca	; 0x3ca <i2c_read_multi_byte>
	//i2c_read_multi_byte(DEV_ADD, Y_GYRO,2,gyro_data_Y);   //reading 4 data bytes and storing it into gyro_data[2] array
	i2c_read_multi_byte(DEV_ADD, Z_GYRO,2,gyro_data_z);   //reading 4 data bytes and storing it into gyro_data[2] array
    2cc4:	20 e9       	ldi	r18, 0x90	; 144
    2cc6:	32 e0       	ldi	r19, 0x02	; 2
    2cc8:	80 ed       	ldi	r24, 0xD0	; 208
    2cca:	67 e4       	ldi	r22, 0x47	; 71
    2ccc:	42 e0       	ldi	r20, 0x02	; 2
    2cce:	50 e0       	ldi	r21, 0x00	; 0
    2cd0:	0e 94 e5 01 	call	0x3ca	; 0x3ca <i2c_read_multi_byte>
    
	acc_x = acc_data_x[0];
    2cd4:	80 91 8c 02 	lds	r24, 0x028C
    2cd8:	99 27       	eor	r25, r25
    2cda:	87 fd       	sbrc	r24, 7
    2cdc:	90 95       	com	r25
    2cde:	90 93 4f 02 	sts	0x024F, r25
    2ce2:	80 93 4e 02 	sts	0x024E, r24
    acc_x = (acc_x << 8);
    2ce6:	80 91 4e 02 	lds	r24, 0x024E
    2cea:	90 91 4f 02 	lds	r25, 0x024F
    2cee:	98 2f       	mov	r25, r24
    2cf0:	88 27       	eor	r24, r24
    2cf2:	90 93 4f 02 	sts	0x024F, r25
    2cf6:	80 93 4e 02 	sts	0x024E, r24
    acc_x += acc_data_x[1];
    2cfa:	80 91 8d 02 	lds	r24, 0x028D
    2cfe:	28 2f       	mov	r18, r24
    2d00:	33 27       	eor	r19, r19
    2d02:	27 fd       	sbrc	r18, 7
    2d04:	30 95       	com	r19
    2d06:	80 91 4e 02 	lds	r24, 0x024E
    2d0a:	90 91 4f 02 	lds	r25, 0x024F
    2d0e:	82 0f       	add	r24, r18
    2d10:	93 1f       	adc	r25, r19
    2d12:	90 93 4f 02 	sts	0x024F, r25
    2d16:	80 93 4e 02 	sts	0x024E, r24
    force_x = acc_x;
    2d1a:	80 91 4e 02 	lds	r24, 0x024E
    2d1e:	90 91 4f 02 	lds	r25, 0x024F
    2d22:	aa 27       	eor	r26, r26
    2d24:	97 fd       	sbrc	r25, 7
    2d26:	a0 95       	com	r26
    2d28:	ba 2f       	mov	r27, r26
    2d2a:	bc 01       	movw	r22, r24
    2d2c:	cd 01       	movw	r24, r26
    2d2e:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <__floatsisf>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	80 93 54 02 	sts	0x0254, r24
    2d3a:	90 93 55 02 	sts	0x0255, r25
    2d3e:	a0 93 56 02 	sts	0x0256, r26
    2d42:	b0 93 57 02 	sts	0x0257, r27
    gyro_z = (gyro_z << 8);
    gyro_z += gyro_data_z[1];
    rotation_z = gyro_z/131;*/
	
	
    gyro_z = gyro_data_z[0];
    2d46:	80 91 90 02 	lds	r24, 0x0290
    2d4a:	99 27       	eor	r25, r25
    2d4c:	87 fd       	sbrc	r24, 7
    2d4e:	90 95       	com	r25
    2d50:	90 93 53 02 	sts	0x0253, r25
    2d54:	80 93 52 02 	sts	0x0252, r24
    gyro_z = (gyro_z << 8);
    2d58:	80 91 52 02 	lds	r24, 0x0252
    2d5c:	90 91 53 02 	lds	r25, 0x0253
    2d60:	98 2f       	mov	r25, r24
    2d62:	88 27       	eor	r24, r24
    2d64:	90 93 53 02 	sts	0x0253, r25
    2d68:	80 93 52 02 	sts	0x0252, r24
    gyro_z += gyro_data_z[1];
    2d6c:	80 91 91 02 	lds	r24, 0x0291
    2d70:	28 2f       	mov	r18, r24
    2d72:	33 27       	eor	r19, r19
    2d74:	27 fd       	sbrc	r18, 7
    2d76:	30 95       	com	r19
    2d78:	80 91 52 02 	lds	r24, 0x0252
    2d7c:	90 91 53 02 	lds	r25, 0x0253
    2d80:	82 0f       	add	r24, r18
    2d82:	93 1f       	adc	r25, r19
    2d84:	90 93 53 02 	sts	0x0253, r25
    2d88:	80 93 52 02 	sts	0x0252, r24
    rotation_z = gyro_z/131;
    2d8c:	80 91 52 02 	lds	r24, 0x0252
    2d90:	90 91 53 02 	lds	r25, 0x0253
    2d94:	23 e8       	ldi	r18, 0x83	; 131
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	b9 01       	movw	r22, r18
    2d9a:	0e 94 98 2f 	call	0x5f30	; 0x5f30 <__divmodhi4>
    2d9e:	9b 01       	movw	r18, r22
    2da0:	c9 01       	movw	r24, r18
    2da2:	aa 27       	eor	r26, r26
    2da4:	97 fd       	sbrc	r25, 7
    2da6:	a0 95       	com	r26
    2da8:	ba 2f       	mov	r27, r26
    2daa:	bc 01       	movw	r22, r24
    2dac:	cd 01       	movw	r24, r26
    2dae:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <__floatsisf>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	80 93 5c 02 	sts	0x025C, r24
    2dba:	90 93 5d 02 	sts	0x025D, r25
    2dbe:	a0 93 5e 02 	sts	0x025E, r26
    2dc2:	b0 93 5f 02 	sts	0x025F, r27
}
    2dc6:	df 91       	pop	r29
    2dc8:	cf 91       	pop	r28
    2dca:	08 95       	ret

00002dcc <colour_detector>:

//function to identify the colour of the object
unsigned char colour_detector()
{
    2dcc:	cf 93       	push	r28
    2dce:	df 93       	push	r29
    2dd0:	cd b7       	in	r28, 0x3d	; 61
    2dd2:	de b7       	in	r29, 0x3e	; 62
	red_read(); //read the pulse count when red filter is selected
    2dd4:	0e 94 14 14 	call	0x2828	; 0x2828 <red_read>
	green_read(); //read the pulse count when green filter is selected
    2dd8:	0e 94 c5 14 	call	0x298a	; 0x298a <green_read>
	blue_read(); //read the pulse count when blue filter is selected
    2ddc:	0e 94 76 15 	call	0x2aec	; 0x2aec <blue_read>
	
	if(red>450 && green>450 && blue>450)
    2de0:	80 91 87 02 	lds	r24, 0x0287
    2de4:	90 91 88 02 	lds	r25, 0x0288
    2de8:	a0 91 89 02 	lds	r26, 0x0289
    2dec:	b0 91 8a 02 	lds	r27, 0x028A
    2df0:	83 3c       	cpi	r24, 0xC3	; 195
    2df2:	21 e0       	ldi	r18, 0x01	; 1
    2df4:	92 07       	cpc	r25, r18
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	a2 07       	cpc	r26, r18
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	b2 07       	cpc	r27, r18
    2dfe:	08 f4       	brcc	.+2      	; 0x2e02 <colour_detector+0x36>
    2e00:	a6 c0       	rjmp	.+332    	; 0x2f4e <colour_detector+0x182>
    2e02:	80 91 83 02 	lds	r24, 0x0283
    2e06:	90 91 84 02 	lds	r25, 0x0284
    2e0a:	a0 91 85 02 	lds	r26, 0x0285
    2e0e:	b0 91 86 02 	lds	r27, 0x0286
    2e12:	83 3c       	cpi	r24, 0xC3	; 195
    2e14:	21 e0       	ldi	r18, 0x01	; 1
    2e16:	92 07       	cpc	r25, r18
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	a2 07       	cpc	r26, r18
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	b2 07       	cpc	r27, r18
    2e20:	08 f4       	brcc	.+2      	; 0x2e24 <colour_detector+0x58>
    2e22:	95 c0       	rjmp	.+298    	; 0x2f4e <colour_detector+0x182>
    2e24:	80 91 60 02 	lds	r24, 0x0260
    2e28:	90 91 61 02 	lds	r25, 0x0261
    2e2c:	a0 91 62 02 	lds	r26, 0x0262
    2e30:	b0 91 63 02 	lds	r27, 0x0263
    2e34:	83 3c       	cpi	r24, 0xC3	; 195
    2e36:	21 e0       	ldi	r18, 0x01	; 1
    2e38:	92 07       	cpc	r25, r18
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	a2 07       	cpc	r26, r18
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	b2 07       	cpc	r27, r18
    2e42:	08 f4       	brcc	.+2      	; 0x2e46 <colour_detector+0x7a>
    2e44:	84 c0       	rjmp	.+264    	; 0x2f4e <colour_detector+0x182>
	{
		if(red>green && red>blue)
    2e46:	20 91 87 02 	lds	r18, 0x0287
    2e4a:	30 91 88 02 	lds	r19, 0x0288
    2e4e:	40 91 89 02 	lds	r20, 0x0289
    2e52:	50 91 8a 02 	lds	r21, 0x028A
    2e56:	80 91 83 02 	lds	r24, 0x0283
    2e5a:	90 91 84 02 	lds	r25, 0x0284
    2e5e:	a0 91 85 02 	lds	r26, 0x0285
    2e62:	b0 91 86 02 	lds	r27, 0x0286
    2e66:	82 17       	cp	r24, r18
    2e68:	93 07       	cpc	r25, r19
    2e6a:	a4 07       	cpc	r26, r20
    2e6c:	b5 07       	cpc	r27, r21
    2e6e:	b8 f4       	brcc	.+46     	; 0x2e9e <colour_detector+0xd2>
    2e70:	20 91 87 02 	lds	r18, 0x0287
    2e74:	30 91 88 02 	lds	r19, 0x0288
    2e78:	40 91 89 02 	lds	r20, 0x0289
    2e7c:	50 91 8a 02 	lds	r21, 0x028A
    2e80:	80 91 60 02 	lds	r24, 0x0260
    2e84:	90 91 61 02 	lds	r25, 0x0261
    2e88:	a0 91 62 02 	lds	r26, 0x0262
    2e8c:	b0 91 63 02 	lds	r27, 0x0263
    2e90:	82 17       	cp	r24, r18
    2e92:	93 07       	cpc	r25, r19
    2e94:	a4 07       	cpc	r26, r20
    2e96:	b5 07       	cpc	r27, r21
    2e98:	10 f4       	brcc	.+4      	; 0x2e9e <colour_detector+0xd2>
		{
			return 'R';
    2e9a:	82 e5       	ldi	r24, 0x52	; 82
    2e9c:	5c c0       	rjmp	.+184    	; 0x2f56 <colour_detector+0x18a>
		}
		else if(green>red && green>blue)
    2e9e:	20 91 83 02 	lds	r18, 0x0283
    2ea2:	30 91 84 02 	lds	r19, 0x0284
    2ea6:	40 91 85 02 	lds	r20, 0x0285
    2eaa:	50 91 86 02 	lds	r21, 0x0286
    2eae:	80 91 87 02 	lds	r24, 0x0287
    2eb2:	90 91 88 02 	lds	r25, 0x0288
    2eb6:	a0 91 89 02 	lds	r26, 0x0289
    2eba:	b0 91 8a 02 	lds	r27, 0x028A
    2ebe:	82 17       	cp	r24, r18
    2ec0:	93 07       	cpc	r25, r19
    2ec2:	a4 07       	cpc	r26, r20
    2ec4:	b5 07       	cpc	r27, r21
    2ec6:	b8 f4       	brcc	.+46     	; 0x2ef6 <colour_detector+0x12a>
    2ec8:	20 91 83 02 	lds	r18, 0x0283
    2ecc:	30 91 84 02 	lds	r19, 0x0284
    2ed0:	40 91 85 02 	lds	r20, 0x0285
    2ed4:	50 91 86 02 	lds	r21, 0x0286
    2ed8:	80 91 60 02 	lds	r24, 0x0260
    2edc:	90 91 61 02 	lds	r25, 0x0261
    2ee0:	a0 91 62 02 	lds	r26, 0x0262
    2ee4:	b0 91 63 02 	lds	r27, 0x0263
    2ee8:	82 17       	cp	r24, r18
    2eea:	93 07       	cpc	r25, r19
    2eec:	a4 07       	cpc	r26, r20
    2eee:	b5 07       	cpc	r27, r21
    2ef0:	10 f4       	brcc	.+4      	; 0x2ef6 <colour_detector+0x12a>
		{
			return 'G';
    2ef2:	87 e4       	ldi	r24, 0x47	; 71
    2ef4:	30 c0       	rjmp	.+96     	; 0x2f56 <colour_detector+0x18a>
		}
		else if(blue>green && blue>red)
    2ef6:	20 91 60 02 	lds	r18, 0x0260
    2efa:	30 91 61 02 	lds	r19, 0x0261
    2efe:	40 91 62 02 	lds	r20, 0x0262
    2f02:	50 91 63 02 	lds	r21, 0x0263
    2f06:	80 91 83 02 	lds	r24, 0x0283
    2f0a:	90 91 84 02 	lds	r25, 0x0284
    2f0e:	a0 91 85 02 	lds	r26, 0x0285
    2f12:	b0 91 86 02 	lds	r27, 0x0286
    2f16:	82 17       	cp	r24, r18
    2f18:	93 07       	cpc	r25, r19
    2f1a:	a4 07       	cpc	r26, r20
    2f1c:	b5 07       	cpc	r27, r21
    2f1e:	c8 f4       	brcc	.+50     	; 0x2f52 <colour_detector+0x186>
    2f20:	20 91 60 02 	lds	r18, 0x0260
    2f24:	30 91 61 02 	lds	r19, 0x0261
    2f28:	40 91 62 02 	lds	r20, 0x0262
    2f2c:	50 91 63 02 	lds	r21, 0x0263
    2f30:	80 91 87 02 	lds	r24, 0x0287
    2f34:	90 91 88 02 	lds	r25, 0x0288
    2f38:	a0 91 89 02 	lds	r26, 0x0289
    2f3c:	b0 91 8a 02 	lds	r27, 0x028A
    2f40:	82 17       	cp	r24, r18
    2f42:	93 07       	cpc	r25, r19
    2f44:	a4 07       	cpc	r26, r20
    2f46:	b5 07       	cpc	r27, r21
    2f48:	20 f4       	brcc	.+8      	; 0x2f52 <colour_detector+0x186>
		{
			return 'B';
    2f4a:	82 e4       	ldi	r24, 0x42	; 66
    2f4c:	04 c0       	rjmp	.+8      	; 0x2f56 <colour_detector+0x18a>
		}
	}
	else
	{
		return '0';
    2f4e:	80 e3       	ldi	r24, 0x30	; 48
    2f50:	02 c0       	rjmp	.+4      	; 0x2f56 <colour_detector+0x18a>
	green_read(); //read the pulse count when green filter is selected
	blue_read(); //read the pulse count when blue filter is selected
	
	if(red>450 && green>450 && blue>450)
	{
		if(red>green && red>blue)
    2f52:	00 00       	nop
    2f54:	00 c0       	rjmp	.+0      	; 0x2f56 <colour_detector+0x18a>
	}
	else
	{
		return '0';
	}
}
    2f56:	df 91       	pop	r29
    2f58:	cf 91       	pop	r28
    2f5a:	08 95       	ret

00002f5c <object_detector>:

//function to detect the type of object
void object_detector()  
{
    2f5c:	0f 93       	push	r16
    2f5e:	1f 93       	push	r17
    2f60:	cf 93       	push	r28
    2f62:	df 93       	push	r29
    2f64:	cd b7       	in	r28, 0x3d	; 61
    2f66:	de b7       	in	r29, 0x3e	; 62
    2f68:	e8 97       	sbiw	r28, 0x38	; 56
    2f6a:	0f b6       	in	r0, 0x3f	; 63
    2f6c:	f8 94       	cli
    2f6e:	de bf       	out	0x3e, r29	; 62
    2f70:	0f be       	out	0x3f, r0	; 63
    2f72:	cd bf       	out	0x3d, r28	; 61
	if(flag_left_object==1)                     //when object is present only in left
    2f74:	80 91 32 02 	lds	r24, 0x0232
    2f78:	81 30       	cpi	r24, 0x01	; 1
    2f7a:	09 f0       	breq	.+2      	; 0x2f7e <object_detector+0x22>
    2f7c:	11 c1       	rjmp	.+546    	; 0x31a0 <object_detector+0x244>
	{
		servo_1(20);
    2f7e:	84 e1       	ldi	r24, 0x14	; 20
    2f80:	0e 94 29 11 	call	0x2252	; 0x2252 <servo_1>
    2f84:	80 e0       	ldi	r24, 0x00	; 0
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	aa e7       	ldi	r26, 0x7A	; 122
    2f8a:	b4 e4       	ldi	r27, 0x44	; 68
    2f8c:	89 83       	std	Y+1, r24	; 0x01
    2f8e:	9a 83       	std	Y+2, r25	; 0x02
    2f90:	ab 83       	std	Y+3, r26	; 0x03
    2f92:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2f94:	69 81       	ldd	r22, Y+1	; 0x01
    2f96:	7a 81       	ldd	r23, Y+2	; 0x02
    2f98:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f9c:	26 e6       	ldi	r18, 0x66	; 102
    2f9e:	36 e6       	ldi	r19, 0x66	; 102
    2fa0:	46 e6       	ldi	r20, 0x66	; 102
    2fa2:	55 e4       	ldi	r21, 0x45	; 69
    2fa4:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    2fa8:	dc 01       	movw	r26, r24
    2faa:	cb 01       	movw	r24, r22
    2fac:	8d 83       	std	Y+5, r24	; 0x05
    2fae:	9e 83       	std	Y+6, r25	; 0x06
    2fb0:	af 83       	std	Y+7, r26	; 0x07
    2fb2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2fb4:	11 e0       	ldi	r17, 0x01	; 1
    2fb6:	6d 81       	ldd	r22, Y+5	; 0x05
    2fb8:	7e 81       	ldd	r23, Y+6	; 0x06
    2fba:	8f 81       	ldd	r24, Y+7	; 0x07
    2fbc:	98 85       	ldd	r25, Y+8	; 0x08
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	40 e8       	ldi	r20, 0x80	; 128
    2fc4:	5f e3       	ldi	r21, 0x3F	; 63
    2fc6:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    2fca:	88 23       	and	r24, r24
    2fcc:	0c f0       	brlt	.+2      	; 0x2fd0 <object_detector+0x74>
    2fce:	10 e0       	ldi	r17, 0x00	; 0
    2fd0:	11 23       	and	r17, r17
    2fd2:	29 f0       	breq	.+10     	; 0x2fde <object_detector+0x82>
		__ticks = 1;
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	9a 87       	std	Y+10, r25	; 0x0a
    2fda:	89 87       	std	Y+9, r24	; 0x09
    2fdc:	46 c0       	rjmp	.+140    	; 0x306a <object_detector+0x10e>
	else if (__tmp > 65535)
    2fde:	11 e0       	ldi	r17, 0x01	; 1
    2fe0:	6d 81       	ldd	r22, Y+5	; 0x05
    2fe2:	7e 81       	ldd	r23, Y+6	; 0x06
    2fe4:	8f 81       	ldd	r24, Y+7	; 0x07
    2fe6:	98 85       	ldd	r25, Y+8	; 0x08
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	3f ef       	ldi	r19, 0xFF	; 255
    2fec:	4f e7       	ldi	r20, 0x7F	; 127
    2fee:	57 e4       	ldi	r21, 0x47	; 71
    2ff0:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    2ff4:	18 16       	cp	r1, r24
    2ff6:	0c f0       	brlt	.+2      	; 0x2ffa <object_detector+0x9e>
    2ff8:	10 e0       	ldi	r17, 0x00	; 0
    2ffa:	11 23       	and	r17, r17
    2ffc:	61 f1       	breq	.+88     	; 0x3056 <object_detector+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ffe:	69 81       	ldd	r22, Y+1	; 0x01
    3000:	7a 81       	ldd	r23, Y+2	; 0x02
    3002:	8b 81       	ldd	r24, Y+3	; 0x03
    3004:	9c 81       	ldd	r25, Y+4	; 0x04
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	40 e2       	ldi	r20, 0x20	; 32
    300c:	51 e4       	ldi	r21, 0x41	; 65
    300e:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	bc 01       	movw	r22, r24
    3018:	cd 01       	movw	r24, r26
    301a:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	9a 87       	std	Y+10, r25	; 0x0a
    3024:	89 87       	std	Y+9, r24	; 0x09
    3026:	12 c0       	rjmp	.+36     	; 0x304c <object_detector+0xf0>
    3028:	80 e7       	ldi	r24, 0x70	; 112
    302a:	91 e0       	ldi	r25, 0x01	; 1
    302c:	9c 87       	std	Y+12, r25	; 0x0c
    302e:	8b 87       	std	Y+11, r24	; 0x0b
    3030:	8b 85       	ldd	r24, Y+11	; 0x0b
    3032:	9c 85       	ldd	r25, Y+12	; 0x0c
    3034:	8c 01       	movw	r16, r24
    3036:	c8 01       	movw	r24, r16
    3038:	01 97       	sbiw	r24, 0x01	; 1
    303a:	f1 f7       	brne	.-4      	; 0x3038 <object_detector+0xdc>
    303c:	8c 01       	movw	r16, r24
    303e:	1c 87       	std	Y+12, r17	; 0x0c
    3040:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3042:	89 85       	ldd	r24, Y+9	; 0x09
    3044:	9a 85       	ldd	r25, Y+10	; 0x0a
    3046:	01 97       	sbiw	r24, 0x01	; 1
    3048:	9a 87       	std	Y+10, r25	; 0x0a
    304a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    304c:	89 85       	ldd	r24, Y+9	; 0x09
    304e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3050:	00 97       	sbiw	r24, 0x00	; 0
    3052:	51 f7       	brne	.-44     	; 0x3028 <object_detector+0xcc>
    3054:	17 c0       	rjmp	.+46     	; 0x3084 <object_detector+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3056:	6d 81       	ldd	r22, Y+5	; 0x05
    3058:	7e 81       	ldd	r23, Y+6	; 0x06
    305a:	8f 81       	ldd	r24, Y+7	; 0x07
    305c:	98 85       	ldd	r25, Y+8	; 0x08
    305e:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	9a 87       	std	Y+10, r25	; 0x0a
    3068:	89 87       	std	Y+9, r24	; 0x09
    306a:	89 85       	ldd	r24, Y+9	; 0x09
    306c:	9a 85       	ldd	r25, Y+10	; 0x0a
    306e:	9e 87       	std	Y+14, r25	; 0x0e
    3070:	8d 87       	std	Y+13, r24	; 0x0d
    3072:	8d 85       	ldd	r24, Y+13	; 0x0d
    3074:	9e 85       	ldd	r25, Y+14	; 0x0e
    3076:	8c 01       	movw	r16, r24
    3078:	c8 01       	movw	r24, r16
    307a:	01 97       	sbiw	r24, 0x01	; 1
    307c:	f1 f7       	brne	.-4      	; 0x307a <object_detector+0x11e>
    307e:	8c 01       	movw	r16, r24
    3080:	1e 87       	std	Y+14, r17	; 0x0e
    3082:	0d 87       	std	Y+13, r16	; 0x0d
		_delay_ms(1000);
		left_object_type=colour_detector();                     //scanning left side
    3084:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <colour_detector>
    3088:	88 2f       	mov	r24, r24
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	90 93 05 02 	sts	0x0205, r25
    3090:	80 93 04 02 	sts	0x0204, r24
		
		servo_1(80);
    3094:	80 e5       	ldi	r24, 0x50	; 80
    3096:	0e 94 29 11 	call	0x2252	; 0x2252 <servo_1>
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	aa ef       	ldi	r26, 0xFA	; 250
    30a0:	b3 e4       	ldi	r27, 0x43	; 67
    30a2:	8f 87       	std	Y+15, r24	; 0x0f
    30a4:	98 8b       	std	Y+16, r25	; 0x10
    30a6:	a9 8b       	std	Y+17, r26	; 0x11
    30a8:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    30aa:	6f 85       	ldd	r22, Y+15	; 0x0f
    30ac:	78 89       	ldd	r23, Y+16	; 0x10
    30ae:	89 89       	ldd	r24, Y+17	; 0x11
    30b0:	9a 89       	ldd	r25, Y+18	; 0x12
    30b2:	26 e6       	ldi	r18, 0x66	; 102
    30b4:	36 e6       	ldi	r19, 0x66	; 102
    30b6:	46 e6       	ldi	r20, 0x66	; 102
    30b8:	55 e4       	ldi	r21, 0x45	; 69
    30ba:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	8b 8b       	std	Y+19, r24	; 0x13
    30c4:	9c 8b       	std	Y+20, r25	; 0x14
    30c6:	ad 8b       	std	Y+21, r26	; 0x15
    30c8:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    30ca:	11 e0       	ldi	r17, 0x01	; 1
    30cc:	6b 89       	ldd	r22, Y+19	; 0x13
    30ce:	7c 89       	ldd	r23, Y+20	; 0x14
    30d0:	8d 89       	ldd	r24, Y+21	; 0x15
    30d2:	9e 89       	ldd	r25, Y+22	; 0x16
    30d4:	20 e0       	ldi	r18, 0x00	; 0
    30d6:	30 e0       	ldi	r19, 0x00	; 0
    30d8:	40 e8       	ldi	r20, 0x80	; 128
    30da:	5f e3       	ldi	r21, 0x3F	; 63
    30dc:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    30e0:	88 23       	and	r24, r24
    30e2:	0c f0       	brlt	.+2      	; 0x30e6 <object_detector+0x18a>
    30e4:	10 e0       	ldi	r17, 0x00	; 0
    30e6:	11 23       	and	r17, r17
    30e8:	29 f0       	breq	.+10     	; 0x30f4 <object_detector+0x198>
		__ticks = 1;
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	98 8f       	std	Y+24, r25	; 0x18
    30f0:	8f 8b       	std	Y+23, r24	; 0x17
    30f2:	46 c0       	rjmp	.+140    	; 0x3180 <object_detector+0x224>
	else if (__tmp > 65535)
    30f4:	11 e0       	ldi	r17, 0x01	; 1
    30f6:	6b 89       	ldd	r22, Y+19	; 0x13
    30f8:	7c 89       	ldd	r23, Y+20	; 0x14
    30fa:	8d 89       	ldd	r24, Y+21	; 0x15
    30fc:	9e 89       	ldd	r25, Y+22	; 0x16
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	3f ef       	ldi	r19, 0xFF	; 255
    3102:	4f e7       	ldi	r20, 0x7F	; 127
    3104:	57 e4       	ldi	r21, 0x47	; 71
    3106:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    310a:	18 16       	cp	r1, r24
    310c:	0c f0       	brlt	.+2      	; 0x3110 <object_detector+0x1b4>
    310e:	10 e0       	ldi	r17, 0x00	; 0
    3110:	11 23       	and	r17, r17
    3112:	61 f1       	breq	.+88     	; 0x316c <object_detector+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3114:	6f 85       	ldd	r22, Y+15	; 0x0f
    3116:	78 89       	ldd	r23, Y+16	; 0x10
    3118:	89 89       	ldd	r24, Y+17	; 0x11
    311a:	9a 89       	ldd	r25, Y+18	; 0x12
    311c:	20 e0       	ldi	r18, 0x00	; 0
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	40 e2       	ldi	r20, 0x20	; 32
    3122:	51 e4       	ldi	r21, 0x41	; 65
    3124:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    3128:	dc 01       	movw	r26, r24
    312a:	cb 01       	movw	r24, r22
    312c:	bc 01       	movw	r22, r24
    312e:	cd 01       	movw	r24, r26
    3130:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    3134:	dc 01       	movw	r26, r24
    3136:	cb 01       	movw	r24, r22
    3138:	98 8f       	std	Y+24, r25	; 0x18
    313a:	8f 8b       	std	Y+23, r24	; 0x17
    313c:	12 c0       	rjmp	.+36     	; 0x3162 <object_detector+0x206>
    313e:	80 e7       	ldi	r24, 0x70	; 112
    3140:	91 e0       	ldi	r25, 0x01	; 1
    3142:	9a 8f       	std	Y+26, r25	; 0x1a
    3144:	89 8f       	std	Y+25, r24	; 0x19
    3146:	89 8d       	ldd	r24, Y+25	; 0x19
    3148:	9a 8d       	ldd	r25, Y+26	; 0x1a
    314a:	8c 01       	movw	r16, r24
    314c:	c8 01       	movw	r24, r16
    314e:	01 97       	sbiw	r24, 0x01	; 1
    3150:	f1 f7       	brne	.-4      	; 0x314e <object_detector+0x1f2>
    3152:	8c 01       	movw	r16, r24
    3154:	1a 8f       	std	Y+26, r17	; 0x1a
    3156:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3158:	8f 89       	ldd	r24, Y+23	; 0x17
    315a:	98 8d       	ldd	r25, Y+24	; 0x18
    315c:	01 97       	sbiw	r24, 0x01	; 1
    315e:	98 8f       	std	Y+24, r25	; 0x18
    3160:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3162:	8f 89       	ldd	r24, Y+23	; 0x17
    3164:	98 8d       	ldd	r25, Y+24	; 0x18
    3166:	00 97       	sbiw	r24, 0x00	; 0
    3168:	51 f7       	brne	.-44     	; 0x313e <object_detector+0x1e2>
    316a:	17 c0       	rjmp	.+46     	; 0x319a <object_detector+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    316c:	6b 89       	ldd	r22, Y+19	; 0x13
    316e:	7c 89       	ldd	r23, Y+20	; 0x14
    3170:	8d 89       	ldd	r24, Y+21	; 0x15
    3172:	9e 89       	ldd	r25, Y+22	; 0x16
    3174:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    3178:	dc 01       	movw	r26, r24
    317a:	cb 01       	movw	r24, r22
    317c:	98 8f       	std	Y+24, r25	; 0x18
    317e:	8f 8b       	std	Y+23, r24	; 0x17
    3180:	8f 89       	ldd	r24, Y+23	; 0x17
    3182:	98 8d       	ldd	r25, Y+24	; 0x18
    3184:	9c 8f       	std	Y+28, r25	; 0x1c
    3186:	8b 8f       	std	Y+27, r24	; 0x1b
    3188:	8b 8d       	ldd	r24, Y+27	; 0x1b
    318a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    318c:	8c 01       	movw	r16, r24
    318e:	c8 01       	movw	r24, r16
    3190:	01 97       	sbiw	r24, 0x01	; 1
    3192:	f1 f7       	brne	.-4      	; 0x3190 <object_detector+0x234>
    3194:	8c 01       	movw	r16, r24
    3196:	1c 8f       	std	Y+28, r17	; 0x1c
    3198:	0b 8f       	std	Y+27, r16	; 0x1b
		_delay_ms(500);                        //repositioning the servo at default angle
		servo_1_free();
    319a:	0e 94 77 11 	call	0x22ee	; 0x22ee <servo_1_free>
    319e:	15 c1       	rjmp	.+554    	; 0x33ca <object_detector+0x46e>
	}
	else if(flag_right_object==1)                     //when object is present only in right
    31a0:	80 91 33 02 	lds	r24, 0x0233
    31a4:	81 30       	cpi	r24, 0x01	; 1
    31a6:	09 f0       	breq	.+2      	; 0x31aa <object_detector+0x24e>
    31a8:	10 c1       	rjmp	.+544    	; 0x33ca <object_detector+0x46e>
	{
		servo_1(190);
    31aa:	8e eb       	ldi	r24, 0xBE	; 190
    31ac:	0e 94 29 11 	call	0x2252	; 0x2252 <servo_1>
    31b0:	80 e0       	ldi	r24, 0x00	; 0
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	a6 e9       	ldi	r26, 0x96	; 150
    31b6:	b4 e4       	ldi	r27, 0x44	; 68
    31b8:	8d 8f       	std	Y+29, r24	; 0x1d
    31ba:	9e 8f       	std	Y+30, r25	; 0x1e
    31bc:	af 8f       	std	Y+31, r26	; 0x1f
    31be:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    31c0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    31c2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    31c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31c6:	98 a1       	lds	r25, 0x48
    31c8:	26 e6       	ldi	r18, 0x66	; 102
    31ca:	36 e6       	ldi	r19, 0x66	; 102
    31cc:	46 e6       	ldi	r20, 0x66	; 102
    31ce:	55 e4       	ldi	r21, 0x45	; 69
    31d0:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	89 a3       	lds	r24, 0x59
    31da:	9a a3       	lds	r25, 0x5a
    31dc:	ab a3       	lds	r26, 0x5b
    31de:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    31e0:	11 e0       	ldi	r17, 0x01	; 1
    31e2:	69 a1       	lds	r22, 0x49
    31e4:	7a a1       	lds	r23, 0x4a
    31e6:	8b a1       	lds	r24, 0x4b
    31e8:	9c a1       	lds	r25, 0x4c
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	40 e8       	ldi	r20, 0x80	; 128
    31f0:	5f e3       	ldi	r21, 0x3F	; 63
    31f2:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    31f6:	88 23       	and	r24, r24
    31f8:	0c f0       	brlt	.+2      	; 0x31fc <object_detector+0x2a0>
    31fa:	10 e0       	ldi	r17, 0x00	; 0
    31fc:	11 23       	and	r17, r17
    31fe:	29 f0       	breq	.+10     	; 0x320a <object_detector+0x2ae>
		__ticks = 1;
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	9e a3       	lds	r25, 0x5e
    3206:	8d a3       	lds	r24, 0x5d
    3208:	46 c0       	rjmp	.+140    	; 0x3296 <object_detector+0x33a>
	else if (__tmp > 65535)
    320a:	11 e0       	ldi	r17, 0x01	; 1
    320c:	69 a1       	lds	r22, 0x49
    320e:	7a a1       	lds	r23, 0x4a
    3210:	8b a1       	lds	r24, 0x4b
    3212:	9c a1       	lds	r25, 0x4c
    3214:	20 e0       	ldi	r18, 0x00	; 0
    3216:	3f ef       	ldi	r19, 0xFF	; 255
    3218:	4f e7       	ldi	r20, 0x7F	; 127
    321a:	57 e4       	ldi	r21, 0x47	; 71
    321c:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    3220:	18 16       	cp	r1, r24
    3222:	0c f0       	brlt	.+2      	; 0x3226 <object_detector+0x2ca>
    3224:	10 e0       	ldi	r17, 0x00	; 0
    3226:	11 23       	and	r17, r17
    3228:	61 f1       	breq	.+88     	; 0x3282 <object_detector+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    322a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    322c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    322e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3230:	98 a1       	lds	r25, 0x48
    3232:	20 e0       	ldi	r18, 0x00	; 0
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	40 e2       	ldi	r20, 0x20	; 32
    3238:	51 e4       	ldi	r21, 0x41	; 65
    323a:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    323e:	dc 01       	movw	r26, r24
    3240:	cb 01       	movw	r24, r22
    3242:	bc 01       	movw	r22, r24
    3244:	cd 01       	movw	r24, r26
    3246:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    324a:	dc 01       	movw	r26, r24
    324c:	cb 01       	movw	r24, r22
    324e:	9e a3       	lds	r25, 0x5e
    3250:	8d a3       	lds	r24, 0x5d
    3252:	12 c0       	rjmp	.+36     	; 0x3278 <object_detector+0x31c>
    3254:	80 e7       	ldi	r24, 0x70	; 112
    3256:	91 e0       	ldi	r25, 0x01	; 1
    3258:	98 a7       	lds	r25, 0x78
    325a:	8f a3       	lds	r24, 0x5f
    325c:	8f a1       	lds	r24, 0x4f
    325e:	98 a5       	lds	r25, 0x68
    3260:	8c 01       	movw	r16, r24
    3262:	c8 01       	movw	r24, r16
    3264:	01 97       	sbiw	r24, 0x01	; 1
    3266:	f1 f7       	brne	.-4      	; 0x3264 <object_detector+0x308>
    3268:	8c 01       	movw	r16, r24
    326a:	18 a7       	lds	r17, 0x78
    326c:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    326e:	8d a1       	lds	r24, 0x4d
    3270:	9e a1       	lds	r25, 0x4e
    3272:	01 97       	sbiw	r24, 0x01	; 1
    3274:	9e a3       	lds	r25, 0x5e
    3276:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3278:	8d a1       	lds	r24, 0x4d
    327a:	9e a1       	lds	r25, 0x4e
    327c:	00 97       	sbiw	r24, 0x00	; 0
    327e:	51 f7       	brne	.-44     	; 0x3254 <object_detector+0x2f8>
    3280:	17 c0       	rjmp	.+46     	; 0x32b0 <object_detector+0x354>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3282:	69 a1       	lds	r22, 0x49
    3284:	7a a1       	lds	r23, 0x4a
    3286:	8b a1       	lds	r24, 0x4b
    3288:	9c a1       	lds	r25, 0x4c
    328a:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    328e:	dc 01       	movw	r26, r24
    3290:	cb 01       	movw	r24, r22
    3292:	9e a3       	lds	r25, 0x5e
    3294:	8d a3       	lds	r24, 0x5d
    3296:	8d a1       	lds	r24, 0x4d
    3298:	9e a1       	lds	r25, 0x4e
    329a:	9a a7       	lds	r25, 0x7a
    329c:	89 a7       	lds	r24, 0x79
    329e:	89 a5       	lds	r24, 0x69
    32a0:	9a a5       	lds	r25, 0x6a
    32a2:	8c 01       	movw	r16, r24
    32a4:	c8 01       	movw	r24, r16
    32a6:	01 97       	sbiw	r24, 0x01	; 1
    32a8:	f1 f7       	brne	.-4      	; 0x32a6 <object_detector+0x34a>
    32aa:	8c 01       	movw	r16, r24
    32ac:	1a a7       	lds	r17, 0x7a
    32ae:	09 a7       	lds	r16, 0x79
		_delay_ms(1200);
		right_object_type=colour_detector();                     //scanning right side
    32b0:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <colour_detector>
    32b4:	88 2f       	mov	r24, r24
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	90 93 07 02 	sts	0x0207, r25
    32bc:	80 93 06 02 	sts	0x0206, r24
		
		servo_1(80);
    32c0:	80 e5       	ldi	r24, 0x50	; 80
    32c2:	0e 94 29 11 	call	0x2252	; 0x2252 <servo_1>
    32c6:	80 e0       	ldi	r24, 0x00	; 0
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	af e2       	ldi	r26, 0x2F	; 47
    32cc:	b4 e4       	ldi	r27, 0x44	; 68
    32ce:	8b a7       	lds	r24, 0x7b
    32d0:	9c a7       	lds	r25, 0x7c
    32d2:	ad a7       	lds	r26, 0x7d
    32d4:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    32d6:	6b a5       	lds	r22, 0x6b
    32d8:	7c a5       	lds	r23, 0x6c
    32da:	8d a5       	lds	r24, 0x6d
    32dc:	9e a5       	lds	r25, 0x6e
    32de:	26 e6       	ldi	r18, 0x66	; 102
    32e0:	36 e6       	ldi	r19, 0x66	; 102
    32e2:	46 e6       	ldi	r20, 0x66	; 102
    32e4:	55 e4       	ldi	r21, 0x45	; 69
    32e6:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    32ea:	dc 01       	movw	r26, r24
    32ec:	cb 01       	movw	r24, r22
    32ee:	8f a7       	lds	r24, 0x7f
    32f0:	98 ab       	sts	0x58, r25
    32f2:	a9 ab       	sts	0x59, r26
    32f4:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    32f6:	11 e0       	ldi	r17, 0x01	; 1
    32f8:	6f a5       	lds	r22, 0x6f
    32fa:	78 a9       	sts	0x48, r23
    32fc:	89 a9       	sts	0x49, r24
    32fe:	9a a9       	sts	0x4a, r25
    3300:	20 e0       	ldi	r18, 0x00	; 0
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	40 e8       	ldi	r20, 0x80	; 128
    3306:	5f e3       	ldi	r21, 0x3F	; 63
    3308:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    330c:	88 23       	and	r24, r24
    330e:	0c f0       	brlt	.+2      	; 0x3312 <object_detector+0x3b6>
    3310:	10 e0       	ldi	r17, 0x00	; 0
    3312:	11 23       	and	r17, r17
    3314:	29 f0       	breq	.+10     	; 0x3320 <object_detector+0x3c4>
		__ticks = 1;
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	9c ab       	sts	0x5c, r25
    331c:	8b ab       	sts	0x5b, r24
    331e:	46 c0       	rjmp	.+140    	; 0x33ac <object_detector+0x450>
	else if (__tmp > 65535)
    3320:	11 e0       	ldi	r17, 0x01	; 1
    3322:	6f a5       	lds	r22, 0x6f
    3324:	78 a9       	sts	0x48, r23
    3326:	89 a9       	sts	0x49, r24
    3328:	9a a9       	sts	0x4a, r25
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	3f ef       	ldi	r19, 0xFF	; 255
    332e:	4f e7       	ldi	r20, 0x7F	; 127
    3330:	57 e4       	ldi	r21, 0x47	; 71
    3332:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    3336:	18 16       	cp	r1, r24
    3338:	0c f0       	brlt	.+2      	; 0x333c <object_detector+0x3e0>
    333a:	10 e0       	ldi	r17, 0x00	; 0
    333c:	11 23       	and	r17, r17
    333e:	61 f1       	breq	.+88     	; 0x3398 <object_detector+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3340:	6b a5       	lds	r22, 0x6b
    3342:	7c a5       	lds	r23, 0x6c
    3344:	8d a5       	lds	r24, 0x6d
    3346:	9e a5       	lds	r25, 0x6e
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	40 e2       	ldi	r20, 0x20	; 32
    334e:	51 e4       	ldi	r21, 0x41	; 65
    3350:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	bc 01       	movw	r22, r24
    335a:	cd 01       	movw	r24, r26
    335c:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    3360:	dc 01       	movw	r26, r24
    3362:	cb 01       	movw	r24, r22
    3364:	9c ab       	sts	0x5c, r25
    3366:	8b ab       	sts	0x5b, r24
    3368:	12 c0       	rjmp	.+36     	; 0x338e <object_detector+0x432>
    336a:	80 e7       	ldi	r24, 0x70	; 112
    336c:	91 e0       	ldi	r25, 0x01	; 1
    336e:	9e ab       	sts	0x5e, r25
    3370:	8d ab       	sts	0x5d, r24
    3372:	8d a9       	sts	0x4d, r24
    3374:	9e a9       	sts	0x4e, r25
    3376:	8c 01       	movw	r16, r24
    3378:	c8 01       	movw	r24, r16
    337a:	01 97       	sbiw	r24, 0x01	; 1
    337c:	f1 f7       	brne	.-4      	; 0x337a <object_detector+0x41e>
    337e:	8c 01       	movw	r16, r24
    3380:	1e ab       	sts	0x5e, r17
    3382:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3384:	8b a9       	sts	0x4b, r24
    3386:	9c a9       	sts	0x4c, r25
    3388:	01 97       	sbiw	r24, 0x01	; 1
    338a:	9c ab       	sts	0x5c, r25
    338c:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    338e:	8b a9       	sts	0x4b, r24
    3390:	9c a9       	sts	0x4c, r25
    3392:	00 97       	sbiw	r24, 0x00	; 0
    3394:	51 f7       	brne	.-44     	; 0x336a <object_detector+0x40e>
    3396:	17 c0       	rjmp	.+46     	; 0x33c6 <object_detector+0x46a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3398:	6f a5       	lds	r22, 0x6f
    339a:	78 a9       	sts	0x48, r23
    339c:	89 a9       	sts	0x49, r24
    339e:	9a a9       	sts	0x4a, r25
    33a0:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    33a4:	dc 01       	movw	r26, r24
    33a6:	cb 01       	movw	r24, r22
    33a8:	9c ab       	sts	0x5c, r25
    33aa:	8b ab       	sts	0x5b, r24
    33ac:	8b a9       	sts	0x4b, r24
    33ae:	9c a9       	sts	0x4c, r25
    33b0:	98 af       	sts	0x78, r25
    33b2:	8f ab       	sts	0x5f, r24
    33b4:	8f a9       	sts	0x4f, r24
    33b6:	98 ad       	sts	0x68, r25
    33b8:	8c 01       	movw	r16, r24
    33ba:	c8 01       	movw	r24, r16
    33bc:	01 97       	sbiw	r24, 0x01	; 1
    33be:	f1 f7       	brne	.-4      	; 0x33bc <object_detector+0x460>
    33c0:	8c 01       	movw	r16, r24
    33c2:	18 af       	sts	0x78, r17
    33c4:	0f ab       	sts	0x5f, r16
		_delay_ms(700);                        //repositioning the servo at default angle
		servo_1_free();
    33c6:	0e 94 77 11 	call	0x22ee	; 0x22ee <servo_1_free>
	}
}
    33ca:	e8 96       	adiw	r28, 0x38	; 56
    33cc:	0f b6       	in	r0, 0x3f	; 63
    33ce:	f8 94       	cli
    33d0:	de bf       	out	0x3e, r29	; 62
    33d2:	0f be       	out	0x3f, r0	; 63
    33d4:	cd bf       	out	0x3d, r28	; 61
    33d6:	df 91       	pop	r29
    33d8:	cf 91       	pop	r28
    33da:	1f 91       	pop	r17
    33dc:	0f 91       	pop	r16
    33de:	08 95       	ret

000033e0 <tunnel_traveller>:

void tunnel_traveller()             //this function is used to navigate through, when tunnel is detected.
{
    33e0:	0f 93       	push	r16
    33e2:	1f 93       	push	r17
    33e4:	cf 93       	push	r28
    33e6:	df 93       	push	r29
    33e8:	cd b7       	in	r28, 0x3d	; 61
    33ea:	de b7       	in	r29, 0x3e	; 62
    33ec:	2e 97       	sbiw	r28, 0x0e	; 14
    33ee:	0f b6       	in	r0, 0x3f	; 63
    33f0:	f8 94       	cli
    33f2:	de bf       	out	0x3e, r29	; 62
    33f4:	0f be       	out	0x3f, r0	; 63
    33f6:	cd bf       	out	0x3d, r28	; 61
	sensor_refresh();
    33f8:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <sensor_refresh>
	while((L < 0x17) && (C < 0x17) && (R < 0x17))
    33fc:	32 c0       	rjmp	.+100    	; 0x3462 <tunnel_traveller+0x82>
	{
		if(IR1>30 && IR5>30)
    33fe:	80 91 39 02 	lds	r24, 0x0239
    3402:	8f 31       	cpi	r24, 0x1F	; 31
    3404:	60 f0       	brcs	.+24     	; 0x341e <tunnel_traveller+0x3e>
    3406:	80 91 3d 02 	lds	r24, 0x023D
    340a:	8f 31       	cpi	r24, 0x1F	; 31
    340c:	40 f0       	brcs	.+16     	; 0x341e <tunnel_traveller+0x3e>
		{
			velocity(140,140);
    340e:	8c e8       	ldi	r24, 0x8C	; 140
    3410:	6c e8       	ldi	r22, 0x8C	; 140
    3412:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <velocity>
			forward_mm(6);
    3416:	86 e0       	ldi	r24, 0x06	; 6
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	0e 94 71 13 	call	0x26e2	; 0x26e2 <forward_mm>
		}
		if(IR1<30)
    341e:	80 91 39 02 	lds	r24, 0x0239
    3422:	8e 31       	cpi	r24, 0x1E	; 30
    3424:	60 f4       	brcc	.+24     	; 0x343e <tunnel_traveller+0x5e>
		{
			right_degrees(6);  //soft right
    3426:	86 e0       	ldi	r24, 0x06	; 6
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	0e 94 e5 12 	call	0x25ca	; 0x25ca <right_degrees>
			velocity(140,140);
    342e:	8c e8       	ldi	r24, 0x8C	; 140
    3430:	6c e8       	ldi	r22, 0x8C	; 140
    3432:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <velocity>
			forward_mm(10);
    3436:	8a e0       	ldi	r24, 0x0A	; 10
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	0e 94 71 13 	call	0x26e2	; 0x26e2 <forward_mm>
		}
		if(IR5<30)
    343e:	80 91 3d 02 	lds	r24, 0x023D
    3442:	8e 31       	cpi	r24, 0x1E	; 30
    3444:	60 f4       	brcc	.+24     	; 0x345e <tunnel_traveller+0x7e>
		{
			left_degrees(6);  //soft left
    3446:	86 e0       	ldi	r24, 0x06	; 6
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <left_degrees>
			velocity(140,140);
    344e:	8c e8       	ldi	r24, 0x8C	; 140
    3450:	6c e8       	ldi	r22, 0x8C	; 140
    3452:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <velocity>
			forward_mm(10);
    3456:	8a e0       	ldi	r24, 0x0A	; 10
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	0e 94 71 13 	call	0x26e2	; 0x26e2 <forward_mm>
		}
		sensor_refresh();
    345e:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <sensor_refresh>
}

void tunnel_traveller()             //this function is used to navigate through, when tunnel is detected.
{
	sensor_refresh();
	while((L < 0x17) && (C < 0x17) && (R < 0x17))
    3462:	80 91 36 02 	lds	r24, 0x0236
    3466:	87 31       	cpi	r24, 0x17	; 23
    3468:	40 f4       	brcc	.+16     	; 0x347a <tunnel_traveller+0x9a>
    346a:	80 91 37 02 	lds	r24, 0x0237
    346e:	87 31       	cpi	r24, 0x17	; 23
    3470:	20 f4       	brcc	.+8      	; 0x347a <tunnel_traveller+0x9a>
    3472:	80 91 38 02 	lds	r24, 0x0238
    3476:	87 31       	cpi	r24, 0x17	; 23
    3478:	10 f2       	brcs	.-124    	; 0x33fe <tunnel_traveller+0x1e>
			velocity(140,140);
			forward_mm(10);
		}
		sensor_refresh();
	}
	servo_1(70);
    347a:	86 e4       	ldi	r24, 0x46	; 70
    347c:	0e 94 29 11 	call	0x2252	; 0x2252 <servo_1>
    3480:	80 e0       	ldi	r24, 0x00	; 0
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	a8 ec       	ldi	r26, 0xC8	; 200
    3486:	b2 e4       	ldi	r27, 0x42	; 66
    3488:	89 83       	std	Y+1, r24	; 0x01
    348a:	9a 83       	std	Y+2, r25	; 0x02
    348c:	ab 83       	std	Y+3, r26	; 0x03
    348e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3490:	69 81       	ldd	r22, Y+1	; 0x01
    3492:	7a 81       	ldd	r23, Y+2	; 0x02
    3494:	8b 81       	ldd	r24, Y+3	; 0x03
    3496:	9c 81       	ldd	r25, Y+4	; 0x04
    3498:	26 e6       	ldi	r18, 0x66	; 102
    349a:	36 e6       	ldi	r19, 0x66	; 102
    349c:	46 e6       	ldi	r20, 0x66	; 102
    349e:	55 e4       	ldi	r21, 0x45	; 69
    34a0:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	8d 83       	std	Y+5, r24	; 0x05
    34aa:	9e 83       	std	Y+6, r25	; 0x06
    34ac:	af 83       	std	Y+7, r26	; 0x07
    34ae:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    34b0:	11 e0       	ldi	r17, 0x01	; 1
    34b2:	6d 81       	ldd	r22, Y+5	; 0x05
    34b4:	7e 81       	ldd	r23, Y+6	; 0x06
    34b6:	8f 81       	ldd	r24, Y+7	; 0x07
    34b8:	98 85       	ldd	r25, Y+8	; 0x08
    34ba:	20 e0       	ldi	r18, 0x00	; 0
    34bc:	30 e0       	ldi	r19, 0x00	; 0
    34be:	40 e8       	ldi	r20, 0x80	; 128
    34c0:	5f e3       	ldi	r21, 0x3F	; 63
    34c2:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    34c6:	88 23       	and	r24, r24
    34c8:	0c f0       	brlt	.+2      	; 0x34cc <tunnel_traveller+0xec>
    34ca:	10 e0       	ldi	r17, 0x00	; 0
    34cc:	11 23       	and	r17, r17
    34ce:	29 f0       	breq	.+10     	; 0x34da <tunnel_traveller+0xfa>
		__ticks = 1;
    34d0:	81 e0       	ldi	r24, 0x01	; 1
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	9a 87       	std	Y+10, r25	; 0x0a
    34d6:	89 87       	std	Y+9, r24	; 0x09
    34d8:	46 c0       	rjmp	.+140    	; 0x3566 <tunnel_traveller+0x186>
	else if (__tmp > 65535)
    34da:	11 e0       	ldi	r17, 0x01	; 1
    34dc:	6d 81       	ldd	r22, Y+5	; 0x05
    34de:	7e 81       	ldd	r23, Y+6	; 0x06
    34e0:	8f 81       	ldd	r24, Y+7	; 0x07
    34e2:	98 85       	ldd	r25, Y+8	; 0x08
    34e4:	20 e0       	ldi	r18, 0x00	; 0
    34e6:	3f ef       	ldi	r19, 0xFF	; 255
    34e8:	4f e7       	ldi	r20, 0x7F	; 127
    34ea:	57 e4       	ldi	r21, 0x47	; 71
    34ec:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    34f0:	18 16       	cp	r1, r24
    34f2:	0c f0       	brlt	.+2      	; 0x34f6 <tunnel_traveller+0x116>
    34f4:	10 e0       	ldi	r17, 0x00	; 0
    34f6:	11 23       	and	r17, r17
    34f8:	61 f1       	breq	.+88     	; 0x3552 <tunnel_traveller+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34fa:	69 81       	ldd	r22, Y+1	; 0x01
    34fc:	7a 81       	ldd	r23, Y+2	; 0x02
    34fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3500:	9c 81       	ldd	r25, Y+4	; 0x04
    3502:	20 e0       	ldi	r18, 0x00	; 0
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	40 e2       	ldi	r20, 0x20	; 32
    3508:	51 e4       	ldi	r21, 0x41	; 65
    350a:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    350e:	dc 01       	movw	r26, r24
    3510:	cb 01       	movw	r24, r22
    3512:	bc 01       	movw	r22, r24
    3514:	cd 01       	movw	r24, r26
    3516:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    351a:	dc 01       	movw	r26, r24
    351c:	cb 01       	movw	r24, r22
    351e:	9a 87       	std	Y+10, r25	; 0x0a
    3520:	89 87       	std	Y+9, r24	; 0x09
    3522:	12 c0       	rjmp	.+36     	; 0x3548 <tunnel_traveller+0x168>
    3524:	80 e7       	ldi	r24, 0x70	; 112
    3526:	91 e0       	ldi	r25, 0x01	; 1
    3528:	9c 87       	std	Y+12, r25	; 0x0c
    352a:	8b 87       	std	Y+11, r24	; 0x0b
    352c:	8b 85       	ldd	r24, Y+11	; 0x0b
    352e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3530:	8c 01       	movw	r16, r24
    3532:	c8 01       	movw	r24, r16
    3534:	01 97       	sbiw	r24, 0x01	; 1
    3536:	f1 f7       	brne	.-4      	; 0x3534 <tunnel_traveller+0x154>
    3538:	8c 01       	movw	r16, r24
    353a:	1c 87       	std	Y+12, r17	; 0x0c
    353c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    353e:	89 85       	ldd	r24, Y+9	; 0x09
    3540:	9a 85       	ldd	r25, Y+10	; 0x0a
    3542:	01 97       	sbiw	r24, 0x01	; 1
    3544:	9a 87       	std	Y+10, r25	; 0x0a
    3546:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3548:	89 85       	ldd	r24, Y+9	; 0x09
    354a:	9a 85       	ldd	r25, Y+10	; 0x0a
    354c:	00 97       	sbiw	r24, 0x00	; 0
    354e:	51 f7       	brne	.-44     	; 0x3524 <tunnel_traveller+0x144>
    3550:	17 c0       	rjmp	.+46     	; 0x3580 <tunnel_traveller+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3552:	6d 81       	ldd	r22, Y+5	; 0x05
    3554:	7e 81       	ldd	r23, Y+6	; 0x06
    3556:	8f 81       	ldd	r24, Y+7	; 0x07
    3558:	98 85       	ldd	r25, Y+8	; 0x08
    355a:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    355e:	dc 01       	movw	r26, r24
    3560:	cb 01       	movw	r24, r22
    3562:	9a 87       	std	Y+10, r25	; 0x0a
    3564:	89 87       	std	Y+9, r24	; 0x09
    3566:	89 85       	ldd	r24, Y+9	; 0x09
    3568:	9a 85       	ldd	r25, Y+10	; 0x0a
    356a:	9e 87       	std	Y+14, r25	; 0x0e
    356c:	8d 87       	std	Y+13, r24	; 0x0d
    356e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3570:	9e 85       	ldd	r25, Y+14	; 0x0e
    3572:	8c 01       	movw	r16, r24
    3574:	c8 01       	movw	r24, r16
    3576:	01 97       	sbiw	r24, 0x01	; 1
    3578:	f1 f7       	brne	.-4      	; 0x3576 <tunnel_traveller+0x196>
    357a:	8c 01       	movw	r16, r24
    357c:	1e 87       	std	Y+14, r17	; 0x0e
    357e:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(100);
	servo_1_free();
    3580:	0e 94 77 11 	call	0x22ee	; 0x22ee <servo_1_free>
	node_detector();
    3584:	0e 94 f8 21 	call	0x43f0	; 0x43f0 <node_detector>
}
    3588:	2e 96       	adiw	r28, 0x0e	; 14
    358a:	0f b6       	in	r0, 0x3f	; 63
    358c:	f8 94       	cli
    358e:	de bf       	out	0x3e, r29	; 62
    3590:	0f be       	out	0x3f, r0	; 63
    3592:	cd bf       	out	0x3d, r28	; 61
    3594:	df 91       	pop	r29
    3596:	cf 91       	pop	r28
    3598:	1f 91       	pop	r17
    359a:	0f 91       	pop	r16
    359c:	08 95       	ret

0000359e <check_status>:

//to check the status of the I2C communication
void check_status(STAT status)
{
    359e:	0f 93       	push	r16
    35a0:	1f 93       	push	r17
    35a2:	cf 93       	push	r28
    35a4:	df 93       	push	r29
    35a6:	cd b7       	in	r28, 0x3d	; 61
    35a8:	de b7       	in	r29, 0x3e	; 62
    35aa:	6d 97       	sbiw	r28, 0x1d	; 29
    35ac:	0f b6       	in	r0, 0x3f	; 63
    35ae:	f8 94       	cli
    35b0:	de bf       	out	0x3e, r29	; 62
    35b2:	0f be       	out	0x3f, r0	; 63
    35b4:	cd bf       	out	0x3d, r28	; 61
    35b6:	8d 8f       	std	Y+29, r24	; 0x1d
	if(status != OK)
    35b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35ba:	88 23       	and	r24, r24
    35bc:	09 f4       	brne	.+2      	; 0x35c0 <check_status+0x22>
    35be:	09 c1       	rjmp	.+530    	; 0x37d2 <check_status+0x234>
	{
		lcd_cursor(1,2);
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	62 e0       	ldi	r22, 0x02	; 2
    35c4:	0e 94 8c 0c 	call	0x1918	; 0x1918 <lcd_cursor>
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	a8 e4       	ldi	r26, 0x48	; 72
    35ce:	b2 e4       	ldi	r27, 0x42	; 66
    35d0:	89 83       	std	Y+1, r24	; 0x01
    35d2:	9a 83       	std	Y+2, r25	; 0x02
    35d4:	ab 83       	std	Y+3, r26	; 0x03
    35d6:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    35d8:	69 81       	ldd	r22, Y+1	; 0x01
    35da:	7a 81       	ldd	r23, Y+2	; 0x02
    35dc:	8b 81       	ldd	r24, Y+3	; 0x03
    35de:	9c 81       	ldd	r25, Y+4	; 0x04
    35e0:	26 e6       	ldi	r18, 0x66	; 102
    35e2:	36 e6       	ldi	r19, 0x66	; 102
    35e4:	46 e6       	ldi	r20, 0x66	; 102
    35e6:	55 e4       	ldi	r21, 0x45	; 69
    35e8:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	8d 83       	std	Y+5, r24	; 0x05
    35f2:	9e 83       	std	Y+6, r25	; 0x06
    35f4:	af 83       	std	Y+7, r26	; 0x07
    35f6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    35f8:	11 e0       	ldi	r17, 0x01	; 1
    35fa:	6d 81       	ldd	r22, Y+5	; 0x05
    35fc:	7e 81       	ldd	r23, Y+6	; 0x06
    35fe:	8f 81       	ldd	r24, Y+7	; 0x07
    3600:	98 85       	ldd	r25, Y+8	; 0x08
    3602:	20 e0       	ldi	r18, 0x00	; 0
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	40 e8       	ldi	r20, 0x80	; 128
    3608:	5f e3       	ldi	r21, 0x3F	; 63
    360a:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    360e:	88 23       	and	r24, r24
    3610:	0c f0       	brlt	.+2      	; 0x3614 <check_status+0x76>
    3612:	10 e0       	ldi	r17, 0x00	; 0
    3614:	11 23       	and	r17, r17
    3616:	29 f0       	breq	.+10     	; 0x3622 <check_status+0x84>
		__ticks = 1;
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	9a 87       	std	Y+10, r25	; 0x0a
    361e:	89 87       	std	Y+9, r24	; 0x09
    3620:	46 c0       	rjmp	.+140    	; 0x36ae <check_status+0x110>
	else if (__tmp > 65535)
    3622:	11 e0       	ldi	r17, 0x01	; 1
    3624:	6d 81       	ldd	r22, Y+5	; 0x05
    3626:	7e 81       	ldd	r23, Y+6	; 0x06
    3628:	8f 81       	ldd	r24, Y+7	; 0x07
    362a:	98 85       	ldd	r25, Y+8	; 0x08
    362c:	20 e0       	ldi	r18, 0x00	; 0
    362e:	3f ef       	ldi	r19, 0xFF	; 255
    3630:	4f e7       	ldi	r20, 0x7F	; 127
    3632:	57 e4       	ldi	r21, 0x47	; 71
    3634:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    3638:	18 16       	cp	r1, r24
    363a:	0c f0       	brlt	.+2      	; 0x363e <check_status+0xa0>
    363c:	10 e0       	ldi	r17, 0x00	; 0
    363e:	11 23       	and	r17, r17
    3640:	61 f1       	breq	.+88     	; 0x369a <check_status+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3642:	69 81       	ldd	r22, Y+1	; 0x01
    3644:	7a 81       	ldd	r23, Y+2	; 0x02
    3646:	8b 81       	ldd	r24, Y+3	; 0x03
    3648:	9c 81       	ldd	r25, Y+4	; 0x04
    364a:	20 e0       	ldi	r18, 0x00	; 0
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	40 e2       	ldi	r20, 0x20	; 32
    3650:	51 e4       	ldi	r21, 0x41	; 65
    3652:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    3656:	dc 01       	movw	r26, r24
    3658:	cb 01       	movw	r24, r22
    365a:	bc 01       	movw	r22, r24
    365c:	cd 01       	movw	r24, r26
    365e:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    3662:	dc 01       	movw	r26, r24
    3664:	cb 01       	movw	r24, r22
    3666:	9a 87       	std	Y+10, r25	; 0x0a
    3668:	89 87       	std	Y+9, r24	; 0x09
    366a:	12 c0       	rjmp	.+36     	; 0x3690 <check_status+0xf2>
    366c:	80 e7       	ldi	r24, 0x70	; 112
    366e:	91 e0       	ldi	r25, 0x01	; 1
    3670:	9c 87       	std	Y+12, r25	; 0x0c
    3672:	8b 87       	std	Y+11, r24	; 0x0b
    3674:	8b 85       	ldd	r24, Y+11	; 0x0b
    3676:	9c 85       	ldd	r25, Y+12	; 0x0c
    3678:	8c 01       	movw	r16, r24
    367a:	c8 01       	movw	r24, r16
    367c:	01 97       	sbiw	r24, 0x01	; 1
    367e:	f1 f7       	brne	.-4      	; 0x367c <check_status+0xde>
    3680:	8c 01       	movw	r16, r24
    3682:	1c 87       	std	Y+12, r17	; 0x0c
    3684:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3686:	89 85       	ldd	r24, Y+9	; 0x09
    3688:	9a 85       	ldd	r25, Y+10	; 0x0a
    368a:	01 97       	sbiw	r24, 0x01	; 1
    368c:	9a 87       	std	Y+10, r25	; 0x0a
    368e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3690:	89 85       	ldd	r24, Y+9	; 0x09
    3692:	9a 85       	ldd	r25, Y+10	; 0x0a
    3694:	00 97       	sbiw	r24, 0x00	; 0
    3696:	51 f7       	brne	.-44     	; 0x366c <check_status+0xce>
    3698:	17 c0       	rjmp	.+46     	; 0x36c8 <check_status+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    369a:	6d 81       	ldd	r22, Y+5	; 0x05
    369c:	7e 81       	ldd	r23, Y+6	; 0x06
    369e:	8f 81       	ldd	r24, Y+7	; 0x07
    36a0:	98 85       	ldd	r25, Y+8	; 0x08
    36a2:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    36a6:	dc 01       	movw	r26, r24
    36a8:	cb 01       	movw	r24, r22
    36aa:	9a 87       	std	Y+10, r25	; 0x0a
    36ac:	89 87       	std	Y+9, r24	; 0x09
    36ae:	89 85       	ldd	r24, Y+9	; 0x09
    36b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    36b2:	9e 87       	std	Y+14, r25	; 0x0e
    36b4:	8d 87       	std	Y+13, r24	; 0x0d
    36b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    36b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    36ba:	8c 01       	movw	r16, r24
    36bc:	c8 01       	movw	r24, r16
    36be:	01 97       	sbiw	r24, 0x01	; 1
    36c0:	f1 f7       	brne	.-4      	; 0x36be <check_status+0x120>
    36c2:	8c 01       	movw	r16, r24
    36c4:	1e 87       	std	Y+14, r17	; 0x0e
    36c6:	0d 87       	std	Y+13, r16	; 0x0d
		_delay_ms(50);
		lcd_string("Status Not OK");
    36c8:	8a e0       	ldi	r24, 0x0A	; 10
    36ca:	92 e0       	ldi	r25, 0x02	; 2
    36cc:	0e 94 6d 0c 	call	0x18da	; 0x18da <lcd_string>
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	a8 e4       	ldi	r26, 0x48	; 72
    36d6:	b2 e4       	ldi	r27, 0x42	; 66
    36d8:	8f 87       	std	Y+15, r24	; 0x0f
    36da:	98 8b       	std	Y+16, r25	; 0x10
    36dc:	a9 8b       	std	Y+17, r26	; 0x11
    36de:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    36e0:	6f 85       	ldd	r22, Y+15	; 0x0f
    36e2:	78 89       	ldd	r23, Y+16	; 0x10
    36e4:	89 89       	ldd	r24, Y+17	; 0x11
    36e6:	9a 89       	ldd	r25, Y+18	; 0x12
    36e8:	26 e6       	ldi	r18, 0x66	; 102
    36ea:	36 e6       	ldi	r19, 0x66	; 102
    36ec:	46 e6       	ldi	r20, 0x66	; 102
    36ee:	55 e4       	ldi	r21, 0x45	; 69
    36f0:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    36f4:	dc 01       	movw	r26, r24
    36f6:	cb 01       	movw	r24, r22
    36f8:	8b 8b       	std	Y+19, r24	; 0x13
    36fa:	9c 8b       	std	Y+20, r25	; 0x14
    36fc:	ad 8b       	std	Y+21, r26	; 0x15
    36fe:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3700:	11 e0       	ldi	r17, 0x01	; 1
    3702:	6b 89       	ldd	r22, Y+19	; 0x13
    3704:	7c 89       	ldd	r23, Y+20	; 0x14
    3706:	8d 89       	ldd	r24, Y+21	; 0x15
    3708:	9e 89       	ldd	r25, Y+22	; 0x16
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	40 e8       	ldi	r20, 0x80	; 128
    3710:	5f e3       	ldi	r21, 0x3F	; 63
    3712:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    3716:	88 23       	and	r24, r24
    3718:	0c f0       	brlt	.+2      	; 0x371c <check_status+0x17e>
    371a:	10 e0       	ldi	r17, 0x00	; 0
    371c:	11 23       	and	r17, r17
    371e:	29 f0       	breq	.+10     	; 0x372a <check_status+0x18c>
		__ticks = 1;
    3720:	81 e0       	ldi	r24, 0x01	; 1
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	98 8f       	std	Y+24, r25	; 0x18
    3726:	8f 8b       	std	Y+23, r24	; 0x17
    3728:	46 c0       	rjmp	.+140    	; 0x37b6 <check_status+0x218>
	else if (__tmp > 65535)
    372a:	11 e0       	ldi	r17, 0x01	; 1
    372c:	6b 89       	ldd	r22, Y+19	; 0x13
    372e:	7c 89       	ldd	r23, Y+20	; 0x14
    3730:	8d 89       	ldd	r24, Y+21	; 0x15
    3732:	9e 89       	ldd	r25, Y+22	; 0x16
    3734:	20 e0       	ldi	r18, 0x00	; 0
    3736:	3f ef       	ldi	r19, 0xFF	; 255
    3738:	4f e7       	ldi	r20, 0x7F	; 127
    373a:	57 e4       	ldi	r21, 0x47	; 71
    373c:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    3740:	18 16       	cp	r1, r24
    3742:	0c f0       	brlt	.+2      	; 0x3746 <check_status+0x1a8>
    3744:	10 e0       	ldi	r17, 0x00	; 0
    3746:	11 23       	and	r17, r17
    3748:	61 f1       	breq	.+88     	; 0x37a2 <check_status+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    374a:	6f 85       	ldd	r22, Y+15	; 0x0f
    374c:	78 89       	ldd	r23, Y+16	; 0x10
    374e:	89 89       	ldd	r24, Y+17	; 0x11
    3750:	9a 89       	ldd	r25, Y+18	; 0x12
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	40 e2       	ldi	r20, 0x20	; 32
    3758:	51 e4       	ldi	r21, 0x41	; 65
    375a:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    375e:	dc 01       	movw	r26, r24
    3760:	cb 01       	movw	r24, r22
    3762:	bc 01       	movw	r22, r24
    3764:	cd 01       	movw	r24, r26
    3766:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    376a:	dc 01       	movw	r26, r24
    376c:	cb 01       	movw	r24, r22
    376e:	98 8f       	std	Y+24, r25	; 0x18
    3770:	8f 8b       	std	Y+23, r24	; 0x17
    3772:	12 c0       	rjmp	.+36     	; 0x3798 <check_status+0x1fa>
    3774:	80 e7       	ldi	r24, 0x70	; 112
    3776:	91 e0       	ldi	r25, 0x01	; 1
    3778:	9a 8f       	std	Y+26, r25	; 0x1a
    377a:	89 8f       	std	Y+25, r24	; 0x19
    377c:	89 8d       	ldd	r24, Y+25	; 0x19
    377e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3780:	8c 01       	movw	r16, r24
    3782:	c8 01       	movw	r24, r16
    3784:	01 97       	sbiw	r24, 0x01	; 1
    3786:	f1 f7       	brne	.-4      	; 0x3784 <check_status+0x1e6>
    3788:	8c 01       	movw	r16, r24
    378a:	1a 8f       	std	Y+26, r17	; 0x1a
    378c:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    378e:	8f 89       	ldd	r24, Y+23	; 0x17
    3790:	98 8d       	ldd	r25, Y+24	; 0x18
    3792:	01 97       	sbiw	r24, 0x01	; 1
    3794:	98 8f       	std	Y+24, r25	; 0x18
    3796:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3798:	8f 89       	ldd	r24, Y+23	; 0x17
    379a:	98 8d       	ldd	r25, Y+24	; 0x18
    379c:	00 97       	sbiw	r24, 0x00	; 0
    379e:	51 f7       	brne	.-44     	; 0x3774 <check_status+0x1d6>
    37a0:	17 c0       	rjmp	.+46     	; 0x37d0 <check_status+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a2:	6b 89       	ldd	r22, Y+19	; 0x13
    37a4:	7c 89       	ldd	r23, Y+20	; 0x14
    37a6:	8d 89       	ldd	r24, Y+21	; 0x15
    37a8:	9e 89       	ldd	r25, Y+22	; 0x16
    37aa:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    37ae:	dc 01       	movw	r26, r24
    37b0:	cb 01       	movw	r24, r22
    37b2:	98 8f       	std	Y+24, r25	; 0x18
    37b4:	8f 8b       	std	Y+23, r24	; 0x17
    37b6:	8f 89       	ldd	r24, Y+23	; 0x17
    37b8:	98 8d       	ldd	r25, Y+24	; 0x18
    37ba:	9c 8f       	std	Y+28, r25	; 0x1c
    37bc:	8b 8f       	std	Y+27, r24	; 0x1b
    37be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37c2:	8c 01       	movw	r16, r24
    37c4:	c8 01       	movw	r24, r16
    37c6:	01 97       	sbiw	r24, 0x01	; 1
    37c8:	f1 f7       	brne	.-4      	; 0x37c6 <check_status+0x228>
    37ca:	8c 01       	movw	r16, r24
    37cc:	1c 8f       	std	Y+28, r17	; 0x1c
    37ce:	0b 8f       	std	Y+27, r16	; 0x1b
		_delay_ms(50);
		while(1);		//error in transmission using i2c
    37d0:	ff cf       	rjmp	.-2      	; 0x37d0 <check_status+0x232>
	}
}
    37d2:	6d 96       	adiw	r28, 0x1d	; 29
    37d4:	0f b6       	in	r0, 0x3f	; 63
    37d6:	f8 94       	cli
    37d8:	de bf       	out	0x3e, r29	; 62
    37da:	0f be       	out	0x3f, r0	; 63
    37dc:	cd bf       	out	0x3d, r28	; 61
    37de:	df 91       	pop	r29
    37e0:	cf 91       	pop	r28
    37e2:	1f 91       	pop	r17
    37e4:	0f 91       	pop	r16
    37e6:	08 95       	ret

000037e8 <right_turn>:
/*************************************************************** Algorithm ********************************************************/

void right_turn()   //to turn 90 degree right
{
    37e8:	cf 93       	push	r28
    37ea:	df 93       	push	r29
    37ec:	cd b7       	in	r28, 0x3d	; 61
    37ee:	de b7       	in	r29, 0x3e	; 62
	velocity(200,200);
    37f0:	88 ec       	ldi	r24, 0xC8	; 200
    37f2:	68 ec       	ldi	r22, 0xC8	; 200
    37f4:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <velocity>
	forward_mm(30);
    37f8:	8e e1       	ldi	r24, 0x1E	; 30
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	0e 94 71 13 	call	0x26e2	; 0x26e2 <forward_mm>
	right_degrees(95);
    3800:	8f e5       	ldi	r24, 0x5F	; 95
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	0e 94 e5 12 	call	0x25ca	; 0x25ca <right_degrees>
	//forward_mm(10);
	velocity(170,170);
    3808:	8a ea       	ldi	r24, 0xAA	; 170
    380a:	6a ea       	ldi	r22, 0xAA	; 170
    380c:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <velocity>
}
    3810:	df 91       	pop	r29
    3812:	cf 91       	pop	r28
    3814:	08 95       	ret

00003816 <left_turn>:

void left_turn()   //to turn 90 degree left
{
    3816:	cf 93       	push	r28
    3818:	df 93       	push	r29
    381a:	cd b7       	in	r28, 0x3d	; 61
    381c:	de b7       	in	r29, 0x3e	; 62
	velocity(200,200);
    381e:	88 ec       	ldi	r24, 0xC8	; 200
    3820:	68 ec       	ldi	r22, 0xC8	; 200
    3822:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <velocity>
	forward_mm(30);
    3826:	8e e1       	ldi	r24, 0x1E	; 30
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	0e 94 71 13 	call	0x26e2	; 0x26e2 <forward_mm>
	left_degrees(95);
    382e:	8f e5       	ldi	r24, 0x5F	; 95
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <left_degrees>
	//forward_mm(10);
	velocity(170,170);
    3836:	8a ea       	ldi	r24, 0xAA	; 170
    3838:	6a ea       	ldi	r22, 0xAA	; 170
    383a:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <velocity>
}
    383e:	df 91       	pop	r29
    3840:	cf 91       	pop	r28
    3842:	08 95       	ret

00003844 <move_forward>:

void move_forward()       //to move forward until node is detected.
{
    3844:	cf 93       	push	r28
    3846:	df 93       	push	r29
    3848:	cd b7       	in	r28, 0x3d	; 61
    384a:	de b7       	in	r29, 0x3e	; 62
	sensor_refresh();
    384c:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <sensor_refresh>
	while(!((L>0x17 && C>0x17 && R>0x17) || (L<0x17 && C>0x17 && R>0x17) || (L>0x17 && C>0x17 && R<0x17) || (IR3 < 0x30)))
    3850:	49 c0       	rjmp	.+146    	; 0x38e4 <move_forward+0xa0>
	{
		if((L<0x17 && C>0x17 && R<0x17))        // 010
    3852:	80 91 36 02 	lds	r24, 0x0236
    3856:	87 31       	cpi	r24, 0x17	; 23
    3858:	88 f4       	brcc	.+34     	; 0x387c <move_forward+0x38>
    385a:	80 91 37 02 	lds	r24, 0x0237
    385e:	88 31       	cpi	r24, 0x18	; 24
    3860:	68 f0       	brcs	.+26     	; 0x387c <move_forward+0x38>
    3862:	80 91 38 02 	lds	r24, 0x0238
    3866:	87 31       	cpi	r24, 0x17	; 23
    3868:	48 f4       	brcc	.+18     	; 0x387c <move_forward+0x38>
		{
			forward_mm(5);
    386a:	85 e0       	ldi	r24, 0x05	; 5
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	0e 94 71 13 	call	0x26e2	; 0x26e2 <forward_mm>
			velocity(170,170);
    3872:	8a ea       	ldi	r24, 0xAA	; 170
    3874:	6a ea       	ldi	r22, 0xAA	; 170
    3876:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <velocity>
    387a:	32 c0       	rjmp	.+100    	; 0x38e0 <move_forward+0x9c>
		}
		else if((L<0x17 && C<0x17 && R>0x17))   // 001 0r 011
    387c:	80 91 36 02 	lds	r24, 0x0236
    3880:	87 31       	cpi	r24, 0x17	; 23
    3882:	88 f4       	brcc	.+34     	; 0x38a6 <move_forward+0x62>
    3884:	80 91 37 02 	lds	r24, 0x0237
    3888:	87 31       	cpi	r24, 0x17	; 23
    388a:	68 f4       	brcc	.+26     	; 0x38a6 <move_forward+0x62>
    388c:	80 91 38 02 	lds	r24, 0x0238
    3890:	88 31       	cpi	r24, 0x18	; 24
    3892:	48 f0       	brcs	.+18     	; 0x38a6 <move_forward+0x62>
		{
			right_degrees(6);  //soft right}
    3894:	86 e0       	ldi	r24, 0x06	; 6
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	0e 94 e5 12 	call	0x25ca	; 0x25ca <right_degrees>
			velocity(150,150);
    389c:	86 e9       	ldi	r24, 0x96	; 150
    389e:	66 e9       	ldi	r22, 0x96	; 150
    38a0:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <velocity>
    38a4:	1d c0       	rjmp	.+58     	; 0x38e0 <move_forward+0x9c>
		}
	
		else if((L>0x17 && C<0x17 && R<0x17))   // 100
    38a6:	80 91 36 02 	lds	r24, 0x0236
    38aa:	88 31       	cpi	r24, 0x18	; 24
    38ac:	88 f0       	brcs	.+34     	; 0x38d0 <move_forward+0x8c>
    38ae:	80 91 37 02 	lds	r24, 0x0237
    38b2:	87 31       	cpi	r24, 0x17	; 23
    38b4:	68 f4       	brcc	.+26     	; 0x38d0 <move_forward+0x8c>
    38b6:	80 91 38 02 	lds	r24, 0x0238
    38ba:	87 31       	cpi	r24, 0x17	; 23
    38bc:	48 f4       	brcc	.+18     	; 0x38d0 <move_forward+0x8c>
		{
			left_degrees(6);    //soft left
    38be:	86 e0       	ldi	r24, 0x06	; 6
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <left_degrees>
			velocity(150,150);
    38c6:	86 e9       	ldi	r24, 0x96	; 150
    38c8:	66 e9       	ldi	r22, 0x96	; 150
    38ca:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <velocity>
    38ce:	08 c0       	rjmp	.+16     	; 0x38e0 <move_forward+0x9c>
		}
		else
		{
			forward_mm(10);
    38d0:	8a e0       	ldi	r24, 0x0A	; 10
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	0e 94 71 13 	call	0x26e2	; 0x26e2 <forward_mm>
			velocity(170,170);
    38d8:	8a ea       	ldi	r24, 0xAA	; 170
    38da:	6a ea       	ldi	r22, 0xAA	; 170
    38dc:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <velocity>
		}
		sensor_refresh();
    38e0:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <sensor_refresh>
}

void move_forward()       //to move forward until node is detected.
{
	sensor_refresh();
	while(!((L>0x17 && C>0x17 && R>0x17) || (L<0x17 && C>0x17 && R>0x17) || (L>0x17 && C>0x17 && R<0x17) || (IR3 < 0x30)))
    38e4:	80 91 36 02 	lds	r24, 0x0236
    38e8:	88 31       	cpi	r24, 0x18	; 24
    38ea:	40 f0       	brcs	.+16     	; 0x38fc <move_forward+0xb8>
    38ec:	80 91 37 02 	lds	r24, 0x0237
    38f0:	88 31       	cpi	r24, 0x18	; 24
    38f2:	20 f0       	brcs	.+8      	; 0x38fc <move_forward+0xb8>
    38f4:	80 91 38 02 	lds	r24, 0x0238
    38f8:	88 31       	cpi	r24, 0x18	; 24
    38fa:	e8 f4       	brcc	.+58     	; 0x3936 <move_forward+0xf2>
    38fc:	80 91 36 02 	lds	r24, 0x0236
    3900:	87 31       	cpi	r24, 0x17	; 23
    3902:	40 f4       	brcc	.+16     	; 0x3914 <move_forward+0xd0>
    3904:	80 91 37 02 	lds	r24, 0x0237
    3908:	88 31       	cpi	r24, 0x18	; 24
    390a:	20 f0       	brcs	.+8      	; 0x3914 <move_forward+0xd0>
    390c:	80 91 38 02 	lds	r24, 0x0238
    3910:	88 31       	cpi	r24, 0x18	; 24
    3912:	88 f4       	brcc	.+34     	; 0x3936 <move_forward+0xf2>
    3914:	80 91 36 02 	lds	r24, 0x0236
    3918:	88 31       	cpi	r24, 0x18	; 24
    391a:	40 f0       	brcs	.+16     	; 0x392c <move_forward+0xe8>
    391c:	80 91 37 02 	lds	r24, 0x0237
    3920:	88 31       	cpi	r24, 0x18	; 24
    3922:	20 f0       	brcs	.+8      	; 0x392c <move_forward+0xe8>
    3924:	80 91 38 02 	lds	r24, 0x0238
    3928:	87 31       	cpi	r24, 0x17	; 23
    392a:	28 f0       	brcs	.+10     	; 0x3936 <move_forward+0xf2>
    392c:	80 91 3b 02 	lds	r24, 0x023B
    3930:	80 33       	cpi	r24, 0x30	; 48
    3932:	08 f0       	brcs	.+2      	; 0x3936 <move_forward+0xf2>
    3934:	8e cf       	rjmp	.-228    	; 0x3852 <move_forward+0xe>
			forward_mm(10);
			velocity(170,170);
		}
		sensor_refresh();
	}
	if (IR3 < 0x30)
    3936:	80 91 3b 02 	lds	r24, 0x023B
    393a:	80 33       	cpi	r24, 0x30	; 48
    393c:	30 f4       	brcc	.+12     	; 0x394a <move_forward+0x106>
	{
		obstacle_found='1';
    393e:	81 e3       	ldi	r24, 0x31	; 49
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	90 93 09 02 	sts	0x0209, r25
    3946:	80 93 08 02 	sts	0x0208, r24
	}
	buzzer_beep();	
    394a:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <buzzer_beep>
}
    394e:	df 91       	pop	r29
    3950:	cf 91       	pop	r28
    3952:	08 95       	ret

00003954 <direction_calculator>:

unsigned char direction_calculator()      //to calculate the direction in the path previous to current node
{
    3954:	cf 93       	push	r28
    3956:	df 93       	push	r29
    3958:	cd b7       	in	r28, 0x3d	; 61
    395a:	de b7       	in	r29, 0x3e	; 62
	rmnder=node_count % 6;
    395c:	80 91 24 02 	lds	r24, 0x0224
    3960:	90 91 25 02 	lds	r25, 0x0225
    3964:	26 e0       	ldi	r18, 0x06	; 6
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	b9 01       	movw	r22, r18
    396a:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <__udivmodhi4>
    396e:	90 93 30 02 	sts	0x0230, r25
    3972:	80 93 2f 02 	sts	0x022F, r24
	if (run == 1)
    3976:	80 91 27 02 	lds	r24, 0x0227
    397a:	81 30       	cpi	r24, 0x01	; 1
    397c:	09 f0       	breq	.+2      	; 0x3980 <direction_calculator+0x2c>
    397e:	3f c0       	rjmp	.+126    	; 0x39fe <direction_calculator+0xaa>
	{
		if(node_count == 0)
    3980:	80 91 24 02 	lds	r24, 0x0224
    3984:	90 91 25 02 	lds	r25, 0x0225
    3988:	00 97       	sbiw	r24, 0x00	; 0
    398a:	11 f4       	brne	.+4      	; 0x3990 <direction_calculator+0x3c>
		{
			return 'N';
    398c:	8e e4       	ldi	r24, 0x4E	; 78
    398e:	7b c0       	rjmp	.+246    	; 0x3a86 <direction_calculator+0x132>
		}
		else if(rmnder == 0)
    3990:	80 91 2f 02 	lds	r24, 0x022F
    3994:	90 91 30 02 	lds	r25, 0x0230
    3998:	00 97       	sbiw	r24, 0x00	; 0
    399a:	11 f4       	brne	.+4      	; 0x39a0 <direction_calculator+0x4c>
		{
			return 'E';
    399c:	85 e4       	ldi	r24, 0x45	; 69
    399e:	73 c0       	rjmp	.+230    	; 0x3a86 <direction_calculator+0x132>
		}
		else if((line_no == 1) || (line_no == 3) || (line_no == 5))
    39a0:	80 91 00 02 	lds	r24, 0x0200
    39a4:	90 91 01 02 	lds	r25, 0x0201
    39a8:	81 30       	cpi	r24, 0x01	; 1
    39aa:	91 05       	cpc	r25, r1
    39ac:	71 f0       	breq	.+28     	; 0x39ca <direction_calculator+0x76>
    39ae:	80 91 00 02 	lds	r24, 0x0200
    39b2:	90 91 01 02 	lds	r25, 0x0201
    39b6:	83 30       	cpi	r24, 0x03	; 3
    39b8:	91 05       	cpc	r25, r1
    39ba:	39 f0       	breq	.+14     	; 0x39ca <direction_calculator+0x76>
    39bc:	80 91 00 02 	lds	r24, 0x0200
    39c0:	90 91 01 02 	lds	r25, 0x0201
    39c4:	85 30       	cpi	r24, 0x05	; 5
    39c6:	91 05       	cpc	r25, r1
    39c8:	11 f4       	brne	.+4      	; 0x39ce <direction_calculator+0x7a>
		{
			return 'N';
    39ca:	8e e4       	ldi	r24, 0x4E	; 78
    39cc:	5c c0       	rjmp	.+184    	; 0x3a86 <direction_calculator+0x132>
		}
		else if((line_no == 2) || (line_no == 4) || (line_no == 6))
    39ce:	80 91 00 02 	lds	r24, 0x0200
    39d2:	90 91 01 02 	lds	r25, 0x0201
    39d6:	82 30       	cpi	r24, 0x02	; 2
    39d8:	91 05       	cpc	r25, r1
    39da:	79 f0       	breq	.+30     	; 0x39fa <direction_calculator+0xa6>
    39dc:	80 91 00 02 	lds	r24, 0x0200
    39e0:	90 91 01 02 	lds	r25, 0x0201
    39e4:	84 30       	cpi	r24, 0x04	; 4
    39e6:	91 05       	cpc	r25, r1
    39e8:	41 f0       	breq	.+16     	; 0x39fa <direction_calculator+0xa6>
    39ea:	80 91 00 02 	lds	r24, 0x0200
    39ee:	90 91 01 02 	lds	r25, 0x0201
    39f2:	86 30       	cpi	r24, 0x06	; 6
    39f4:	91 05       	cpc	r25, r1
    39f6:	09 f0       	breq	.+2      	; 0x39fa <direction_calculator+0xa6>
    39f8:	45 c0       	rjmp	.+138    	; 0x3a84 <direction_calculator+0x130>
		{
			return 'S';
    39fa:	83 e5       	ldi	r24, 0x53	; 83
    39fc:	44 c0       	rjmp	.+136    	; 0x3a86 <direction_calculator+0x132>
		}
	}
	else if(run == 2)
    39fe:	80 91 27 02 	lds	r24, 0x0227
    3a02:	82 30       	cpi	r24, 0x02	; 2
    3a04:	09 f0       	breq	.+2      	; 0x3a08 <direction_calculator+0xb4>
    3a06:	3e c0       	rjmp	.+124    	; 0x3a84 <direction_calculator+0x130>
	{
		if(node_count == 0)
    3a08:	80 91 24 02 	lds	r24, 0x0224
    3a0c:	90 91 25 02 	lds	r25, 0x0225
    3a10:	00 97       	sbiw	r24, 0x00	; 0
    3a12:	11 f4       	brne	.+4      	; 0x3a18 <direction_calculator+0xc4>
		{
			return 'W';
    3a14:	87 e5       	ldi	r24, 0x57	; 87
    3a16:	37 c0       	rjmp	.+110    	; 0x3a86 <direction_calculator+0x132>
		}
		if(rmnder == 0)
    3a18:	80 91 2f 02 	lds	r24, 0x022F
    3a1c:	90 91 30 02 	lds	r25, 0x0230
    3a20:	00 97       	sbiw	r24, 0x00	; 0
    3a22:	11 f4       	brne	.+4      	; 0x3a28 <direction_calculator+0xd4>
		{
			return 'N';
    3a24:	8e e4       	ldi	r24, 0x4E	; 78
    3a26:	2f c0       	rjmp	.+94     	; 0x3a86 <direction_calculator+0x132>
		}
		else if((line_no == 1) || (line_no == 3) || (line_no == 5))
    3a28:	80 91 00 02 	lds	r24, 0x0200
    3a2c:	90 91 01 02 	lds	r25, 0x0201
    3a30:	81 30       	cpi	r24, 0x01	; 1
    3a32:	91 05       	cpc	r25, r1
    3a34:	71 f0       	breq	.+28     	; 0x3a52 <direction_calculator+0xfe>
    3a36:	80 91 00 02 	lds	r24, 0x0200
    3a3a:	90 91 01 02 	lds	r25, 0x0201
    3a3e:	83 30       	cpi	r24, 0x03	; 3
    3a40:	91 05       	cpc	r25, r1
    3a42:	39 f0       	breq	.+14     	; 0x3a52 <direction_calculator+0xfe>
    3a44:	80 91 00 02 	lds	r24, 0x0200
    3a48:	90 91 01 02 	lds	r25, 0x0201
    3a4c:	85 30       	cpi	r24, 0x05	; 5
    3a4e:	91 05       	cpc	r25, r1
    3a50:	11 f4       	brne	.+4      	; 0x3a56 <direction_calculator+0x102>
		{
			return 'W';
    3a52:	87 e5       	ldi	r24, 0x57	; 87
    3a54:	18 c0       	rjmp	.+48     	; 0x3a86 <direction_calculator+0x132>
		}
		else if((line_no == 2) || (line_no == 4) || (line_no == 6))
    3a56:	80 91 00 02 	lds	r24, 0x0200
    3a5a:	90 91 01 02 	lds	r25, 0x0201
    3a5e:	82 30       	cpi	r24, 0x02	; 2
    3a60:	91 05       	cpc	r25, r1
    3a62:	71 f0       	breq	.+28     	; 0x3a80 <direction_calculator+0x12c>
    3a64:	80 91 00 02 	lds	r24, 0x0200
    3a68:	90 91 01 02 	lds	r25, 0x0201
    3a6c:	84 30       	cpi	r24, 0x04	; 4
    3a6e:	91 05       	cpc	r25, r1
    3a70:	39 f0       	breq	.+14     	; 0x3a80 <direction_calculator+0x12c>
    3a72:	80 91 00 02 	lds	r24, 0x0200
    3a76:	90 91 01 02 	lds	r25, 0x0201
    3a7a:	86 30       	cpi	r24, 0x06	; 6
    3a7c:	91 05       	cpc	r25, r1
    3a7e:	11 f4       	brne	.+4      	; 0x3a84 <direction_calculator+0x130>
		{
			return 'E';
    3a80:	85 e4       	ldi	r24, 0x45	; 69
    3a82:	01 c0       	rjmp	.+2      	; 0x3a86 <direction_calculator+0x132>
    3a84:	00 c0       	rjmp	.+0      	; 0x3a86 <direction_calculator+0x132>
		}
	}
}
    3a86:	df 91       	pop	r29
    3a88:	cf 91       	pop	r28
    3a8a:	08 95       	ret

00003a8c <obstacle_update>:

void obstacle_update()        //to update the obstacle count
{
    3a8c:	cf 93       	push	r28
    3a8e:	df 93       	push	r29
    3a90:	cd b7       	in	r28, 0x3d	; 61
    3a92:	de b7       	in	r29, 0x3e	; 62
	rmnder=node_count % 6;
    3a94:	80 91 24 02 	lds	r24, 0x0224
    3a98:	90 91 25 02 	lds	r25, 0x0225
    3a9c:	26 e0       	ldi	r18, 0x06	; 6
    3a9e:	30 e0       	ldi	r19, 0x00	; 0
    3aa0:	b9 01       	movw	r22, r18
    3aa2:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <__udivmodhi4>
    3aa6:	90 93 30 02 	sts	0x0230, r25
    3aaa:	80 93 2f 02 	sts	0x022F, r24
	if((line_no == 3) || (line_no == 5))
    3aae:	80 91 00 02 	lds	r24, 0x0200
    3ab2:	90 91 01 02 	lds	r25, 0x0201
    3ab6:	83 30       	cpi	r24, 0x03	; 3
    3ab8:	91 05       	cpc	r25, r1
    3aba:	39 f0       	breq	.+14     	; 0x3aca <obstacle_update+0x3e>
    3abc:	80 91 00 02 	lds	r24, 0x0200
    3ac0:	90 91 01 02 	lds	r25, 0x0201
    3ac4:	85 30       	cpi	r24, 0x05	; 5
    3ac6:	91 05       	cpc	r25, r1
    3ac8:	b1 f5       	brne	.+108    	; 0x3b36 <obstacle_update+0xaa>
	{
		obstacle_array[line_no - 1][rmnder - 1]=1;
    3aca:	80 91 00 02 	lds	r24, 0x0200
    3ace:	90 91 01 02 	lds	r25, 0x0201
    3ad2:	9c 01       	movw	r18, r24
    3ad4:	21 50       	subi	r18, 0x01	; 1
    3ad6:	30 40       	sbci	r19, 0x00	; 0
    3ad8:	80 91 2f 02 	lds	r24, 0x022F
    3adc:	90 91 30 02 	lds	r25, 0x0230
    3ae0:	ac 01       	movw	r20, r24
    3ae2:	41 50       	subi	r20, 0x01	; 1
    3ae4:	50 40       	sbci	r21, 0x00	; 0
    3ae6:	c9 01       	movw	r24, r18
    3ae8:	88 0f       	add	r24, r24
    3aea:	99 1f       	adc	r25, r25
    3aec:	88 0f       	add	r24, r24
    3aee:	99 1f       	adc	r25, r25
    3af0:	82 0f       	add	r24, r18
    3af2:	93 1f       	adc	r25, r19
    3af4:	84 0f       	add	r24, r20
    3af6:	95 1f       	adc	r25, r21
    3af8:	8a 59       	subi	r24, 0x9A	; 154
    3afa:	9d 4f       	sbci	r25, 0xFD	; 253
    3afc:	21 e0       	ldi	r18, 0x01	; 1
    3afe:	fc 01       	movw	r30, r24
    3b00:	20 83       	st	Z, r18
		obstacle_array[line_no - 1][rmnder]=1;
    3b02:	80 91 00 02 	lds	r24, 0x0200
    3b06:	90 91 01 02 	lds	r25, 0x0201
    3b0a:	9c 01       	movw	r18, r24
    3b0c:	21 50       	subi	r18, 0x01	; 1
    3b0e:	30 40       	sbci	r19, 0x00	; 0
    3b10:	40 91 2f 02 	lds	r20, 0x022F
    3b14:	50 91 30 02 	lds	r21, 0x0230
    3b18:	c9 01       	movw	r24, r18
    3b1a:	88 0f       	add	r24, r24
    3b1c:	99 1f       	adc	r25, r25
    3b1e:	88 0f       	add	r24, r24
    3b20:	99 1f       	adc	r25, r25
    3b22:	82 0f       	add	r24, r18
    3b24:	93 1f       	adc	r25, r19
    3b26:	84 0f       	add	r24, r20
    3b28:	95 1f       	adc	r25, r21
    3b2a:	8a 59       	subi	r24, 0x9A	; 154
    3b2c:	9d 4f       	sbci	r25, 0xFD	; 253
    3b2e:	21 e0       	ldi	r18, 0x01	; 1
    3b30:	fc 01       	movw	r30, r24
    3b32:	20 83       	st	Z, r18
    3b34:	48 c0       	rjmp	.+144    	; 0x3bc6 <obstacle_update+0x13a>
	}
	else if((line_no == 2) || (line_no == 4))
    3b36:	80 91 00 02 	lds	r24, 0x0200
    3b3a:	90 91 01 02 	lds	r25, 0x0201
    3b3e:	82 30       	cpi	r24, 0x02	; 2
    3b40:	91 05       	cpc	r25, r1
    3b42:	39 f0       	breq	.+14     	; 0x3b52 <obstacle_update+0xc6>
    3b44:	80 91 00 02 	lds	r24, 0x0200
    3b48:	90 91 01 02 	lds	r25, 0x0201
    3b4c:	84 30       	cpi	r24, 0x04	; 4
    3b4e:	91 05       	cpc	r25, r1
    3b50:	d1 f5       	brne	.+116    	; 0x3bc6 <obstacle_update+0x13a>
	{
		obstacle_array[line_no - 1][5 - rmnder]=1;
    3b52:	80 91 00 02 	lds	r24, 0x0200
    3b56:	90 91 01 02 	lds	r25, 0x0201
    3b5a:	9c 01       	movw	r18, r24
    3b5c:	21 50       	subi	r18, 0x01	; 1
    3b5e:	30 40       	sbci	r19, 0x00	; 0
    3b60:	80 91 2f 02 	lds	r24, 0x022F
    3b64:	90 91 30 02 	lds	r25, 0x0230
    3b68:	45 e0       	ldi	r20, 0x05	; 5
    3b6a:	50 e0       	ldi	r21, 0x00	; 0
    3b6c:	48 1b       	sub	r20, r24
    3b6e:	59 0b       	sbc	r21, r25
    3b70:	c9 01       	movw	r24, r18
    3b72:	88 0f       	add	r24, r24
    3b74:	99 1f       	adc	r25, r25
    3b76:	88 0f       	add	r24, r24
    3b78:	99 1f       	adc	r25, r25
    3b7a:	82 0f       	add	r24, r18
    3b7c:	93 1f       	adc	r25, r19
    3b7e:	84 0f       	add	r24, r20
    3b80:	95 1f       	adc	r25, r21
    3b82:	8a 59       	subi	r24, 0x9A	; 154
    3b84:	9d 4f       	sbci	r25, 0xFD	; 253
    3b86:	21 e0       	ldi	r18, 0x01	; 1
    3b88:	fc 01       	movw	r30, r24
    3b8a:	20 83       	st	Z, r18
		obstacle_array[line_no - 1][4 - rmnder]=1;
    3b8c:	80 91 00 02 	lds	r24, 0x0200
    3b90:	90 91 01 02 	lds	r25, 0x0201
    3b94:	9c 01       	movw	r18, r24
    3b96:	21 50       	subi	r18, 0x01	; 1
    3b98:	30 40       	sbci	r19, 0x00	; 0
    3b9a:	80 91 2f 02 	lds	r24, 0x022F
    3b9e:	90 91 30 02 	lds	r25, 0x0230
    3ba2:	44 e0       	ldi	r20, 0x04	; 4
    3ba4:	50 e0       	ldi	r21, 0x00	; 0
    3ba6:	48 1b       	sub	r20, r24
    3ba8:	59 0b       	sbc	r21, r25
    3baa:	c9 01       	movw	r24, r18
    3bac:	88 0f       	add	r24, r24
    3bae:	99 1f       	adc	r25, r25
    3bb0:	88 0f       	add	r24, r24
    3bb2:	99 1f       	adc	r25, r25
    3bb4:	82 0f       	add	r24, r18
    3bb6:	93 1f       	adc	r25, r19
    3bb8:	84 0f       	add	r24, r20
    3bba:	95 1f       	adc	r25, r21
    3bbc:	8a 59       	subi	r24, 0x9A	; 154
    3bbe:	9d 4f       	sbci	r25, 0xFD	; 253
    3bc0:	21 e0       	ldi	r18, 0x01	; 1
    3bc2:	fc 01       	movw	r30, r24
    3bc4:	20 83       	st	Z, r18
	}
}
    3bc6:	df 91       	pop	r29
    3bc8:	cf 91       	pop	r28
    3bca:	08 95       	ret

00003bcc <obstacle_check>:

unsigned char obstacle_check()
{
    3bcc:	cf 93       	push	r28
    3bce:	df 93       	push	r29
    3bd0:	cd b7       	in	r28, 0x3d	; 61
    3bd2:	de b7       	in	r29, 0x3e	; 62
	rmnder=node_count % 6;
    3bd4:	80 91 24 02 	lds	r24, 0x0224
    3bd8:	90 91 25 02 	lds	r25, 0x0225
    3bdc:	26 e0       	ldi	r18, 0x06	; 6
    3bde:	30 e0       	ldi	r19, 0x00	; 0
    3be0:	b9 01       	movw	r22, r18
    3be2:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <__udivmodhi4>
    3be6:	90 93 30 02 	sts	0x0230, r25
    3bea:	80 93 2f 02 	sts	0x022F, r24
	if((line_no == 3) || (line_no == 5))
    3bee:	80 91 00 02 	lds	r24, 0x0200
    3bf2:	90 91 01 02 	lds	r25, 0x0201
    3bf6:	83 30       	cpi	r24, 0x03	; 3
    3bf8:	91 05       	cpc	r25, r1
    3bfa:	39 f0       	breq	.+14     	; 0x3c0a <obstacle_check+0x3e>
    3bfc:	80 91 00 02 	lds	r24, 0x0200
    3c00:	90 91 01 02 	lds	r25, 0x0201
    3c04:	85 30       	cpi	r24, 0x05	; 5
    3c06:	91 05       	cpc	r25, r1
    3c08:	09 f5       	brne	.+66     	; 0x3c4c <obstacle_check+0x80>
	{
		if(obstacle_array[line_no - 2][rmnder - 1] == 1)
    3c0a:	80 91 00 02 	lds	r24, 0x0200
    3c0e:	90 91 01 02 	lds	r25, 0x0201
    3c12:	9c 01       	movw	r18, r24
    3c14:	22 50       	subi	r18, 0x02	; 2
    3c16:	30 40       	sbci	r19, 0x00	; 0
    3c18:	80 91 2f 02 	lds	r24, 0x022F
    3c1c:	90 91 30 02 	lds	r25, 0x0230
    3c20:	ac 01       	movw	r20, r24
    3c22:	41 50       	subi	r20, 0x01	; 1
    3c24:	50 40       	sbci	r21, 0x00	; 0
    3c26:	c9 01       	movw	r24, r18
    3c28:	88 0f       	add	r24, r24
    3c2a:	99 1f       	adc	r25, r25
    3c2c:	88 0f       	add	r24, r24
    3c2e:	99 1f       	adc	r25, r25
    3c30:	82 0f       	add	r24, r18
    3c32:	93 1f       	adc	r25, r19
    3c34:	84 0f       	add	r24, r20
    3c36:	95 1f       	adc	r25, r21
    3c38:	8a 59       	subi	r24, 0x9A	; 154
    3c3a:	9d 4f       	sbci	r25, 0xFD	; 253
    3c3c:	fc 01       	movw	r30, r24
    3c3e:	80 81       	ld	r24, Z
    3c40:	81 30       	cpi	r24, 0x01	; 1
    3c42:	11 f4       	brne	.+4      	; 0x3c48 <obstacle_check+0x7c>
		{
			return 1;
    3c44:	81 e0       	ldi	r24, 0x01	; 1
    3c46:	3a c0       	rjmp	.+116    	; 0x3cbc <obstacle_check+0xf0>
		}
		else
		{
			return 0;
    3c48:	80 e0       	ldi	r24, 0x00	; 0
    3c4a:	38 c0       	rjmp	.+112    	; 0x3cbc <obstacle_check+0xf0>
		}
	}
	else if((line_no == 2) || (line_no == 4) || (line_no == 6))
    3c4c:	80 91 00 02 	lds	r24, 0x0200
    3c50:	90 91 01 02 	lds	r25, 0x0201
    3c54:	82 30       	cpi	r24, 0x02	; 2
    3c56:	91 05       	cpc	r25, r1
    3c58:	71 f0       	breq	.+28     	; 0x3c76 <obstacle_check+0xaa>
    3c5a:	80 91 00 02 	lds	r24, 0x0200
    3c5e:	90 91 01 02 	lds	r25, 0x0201
    3c62:	84 30       	cpi	r24, 0x04	; 4
    3c64:	91 05       	cpc	r25, r1
    3c66:	39 f0       	breq	.+14     	; 0x3c76 <obstacle_check+0xaa>
    3c68:	80 91 00 02 	lds	r24, 0x0200
    3c6c:	90 91 01 02 	lds	r25, 0x0201
    3c70:	86 30       	cpi	r24, 0x06	; 6
    3c72:	91 05       	cpc	r25, r1
    3c74:	11 f5       	brne	.+68     	; 0x3cba <obstacle_check+0xee>
	{
		if(obstacle_array[line_no - 2][5 - rmnder] == 1)
    3c76:	80 91 00 02 	lds	r24, 0x0200
    3c7a:	90 91 01 02 	lds	r25, 0x0201
    3c7e:	9c 01       	movw	r18, r24
    3c80:	22 50       	subi	r18, 0x02	; 2
    3c82:	30 40       	sbci	r19, 0x00	; 0
    3c84:	80 91 2f 02 	lds	r24, 0x022F
    3c88:	90 91 30 02 	lds	r25, 0x0230
    3c8c:	45 e0       	ldi	r20, 0x05	; 5
    3c8e:	50 e0       	ldi	r21, 0x00	; 0
    3c90:	48 1b       	sub	r20, r24
    3c92:	59 0b       	sbc	r21, r25
    3c94:	c9 01       	movw	r24, r18
    3c96:	88 0f       	add	r24, r24
    3c98:	99 1f       	adc	r25, r25
    3c9a:	88 0f       	add	r24, r24
    3c9c:	99 1f       	adc	r25, r25
    3c9e:	82 0f       	add	r24, r18
    3ca0:	93 1f       	adc	r25, r19
    3ca2:	84 0f       	add	r24, r20
    3ca4:	95 1f       	adc	r25, r21
    3ca6:	8a 59       	subi	r24, 0x9A	; 154
    3ca8:	9d 4f       	sbci	r25, 0xFD	; 253
    3caa:	fc 01       	movw	r30, r24
    3cac:	80 81       	ld	r24, Z
    3cae:	81 30       	cpi	r24, 0x01	; 1
    3cb0:	11 f4       	brne	.+4      	; 0x3cb6 <obstacle_check+0xea>
		{
			return 1;
    3cb2:	81 e0       	ldi	r24, 0x01	; 1
    3cb4:	03 c0       	rjmp	.+6      	; 0x3cbc <obstacle_check+0xf0>
		}
		else
		{
			return 0;
    3cb6:	80 e0       	ldi	r24, 0x00	; 0
    3cb8:	01 c0       	rjmp	.+2      	; 0x3cbc <obstacle_check+0xf0>
    3cba:	00 c0       	rjmp	.+0      	; 0x3cbc <obstacle_check+0xf0>
		}
	}
}
    3cbc:	df 91       	pop	r29
    3cbe:	cf 91       	pop	r28
    3cc0:	08 95       	ret

00003cc2 <default_path>:

void default_path()  //default path chosen by bot when obstacle is detected
{
    3cc2:	0f 93       	push	r16
    3cc4:	1f 93       	push	r17
    3cc6:	cf 93       	push	r28
    3cc8:	df 93       	push	r29
    3cca:	cd b7       	in	r28, 0x3d	; 61
    3ccc:	de b7       	in	r29, 0x3e	; 62
    3cce:	6c 97       	sbiw	r28, 0x1c	; 28
    3cd0:	0f b6       	in	r0, 0x3f	; 63
    3cd2:	f8 94       	cli
    3cd4:	de bf       	out	0x3e, r29	; 62
    3cd6:	0f be       	out	0x3f, r0	; 63
    3cd8:	cd bf       	out	0x3d, r28	; 61
	back_mm(80);
    3cda:	80 e5       	ldi	r24, 0x50	; 80
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	0e 94 84 13 	call	0x2708	; 0x2708 <back_mm>
	stop_bot();
    3ce2:	0e 94 4a 12 	call	0x2494	; 0x2494 <stop_bot>
    3ce6:	80 e0       	ldi	r24, 0x00	; 0
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	a8 ec       	ldi	r26, 0xC8	; 200
    3cec:	b2 e4       	ldi	r27, 0x42	; 66
    3cee:	89 83       	std	Y+1, r24	; 0x01
    3cf0:	9a 83       	std	Y+2, r25	; 0x02
    3cf2:	ab 83       	std	Y+3, r26	; 0x03
    3cf4:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3cf6:	69 81       	ldd	r22, Y+1	; 0x01
    3cf8:	7a 81       	ldd	r23, Y+2	; 0x02
    3cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    3cfc:	9c 81       	ldd	r25, Y+4	; 0x04
    3cfe:	26 e6       	ldi	r18, 0x66	; 102
    3d00:	36 e6       	ldi	r19, 0x66	; 102
    3d02:	46 e6       	ldi	r20, 0x66	; 102
    3d04:	55 e4       	ldi	r21, 0x45	; 69
    3d06:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    3d0a:	dc 01       	movw	r26, r24
    3d0c:	cb 01       	movw	r24, r22
    3d0e:	8d 83       	std	Y+5, r24	; 0x05
    3d10:	9e 83       	std	Y+6, r25	; 0x06
    3d12:	af 83       	std	Y+7, r26	; 0x07
    3d14:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3d16:	11 e0       	ldi	r17, 0x01	; 1
    3d18:	6d 81       	ldd	r22, Y+5	; 0x05
    3d1a:	7e 81       	ldd	r23, Y+6	; 0x06
    3d1c:	8f 81       	ldd	r24, Y+7	; 0x07
    3d1e:	98 85       	ldd	r25, Y+8	; 0x08
    3d20:	20 e0       	ldi	r18, 0x00	; 0
    3d22:	30 e0       	ldi	r19, 0x00	; 0
    3d24:	40 e8       	ldi	r20, 0x80	; 128
    3d26:	5f e3       	ldi	r21, 0x3F	; 63
    3d28:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    3d2c:	88 23       	and	r24, r24
    3d2e:	0c f0       	brlt	.+2      	; 0x3d32 <default_path+0x70>
    3d30:	10 e0       	ldi	r17, 0x00	; 0
    3d32:	11 23       	and	r17, r17
    3d34:	29 f0       	breq	.+10     	; 0x3d40 <default_path+0x7e>
		__ticks = 1;
    3d36:	81 e0       	ldi	r24, 0x01	; 1
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	9a 87       	std	Y+10, r25	; 0x0a
    3d3c:	89 87       	std	Y+9, r24	; 0x09
    3d3e:	46 c0       	rjmp	.+140    	; 0x3dcc <default_path+0x10a>
	else if (__tmp > 65535)
    3d40:	11 e0       	ldi	r17, 0x01	; 1
    3d42:	6d 81       	ldd	r22, Y+5	; 0x05
    3d44:	7e 81       	ldd	r23, Y+6	; 0x06
    3d46:	8f 81       	ldd	r24, Y+7	; 0x07
    3d48:	98 85       	ldd	r25, Y+8	; 0x08
    3d4a:	20 e0       	ldi	r18, 0x00	; 0
    3d4c:	3f ef       	ldi	r19, 0xFF	; 255
    3d4e:	4f e7       	ldi	r20, 0x7F	; 127
    3d50:	57 e4       	ldi	r21, 0x47	; 71
    3d52:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    3d56:	18 16       	cp	r1, r24
    3d58:	0c f0       	brlt	.+2      	; 0x3d5c <default_path+0x9a>
    3d5a:	10 e0       	ldi	r17, 0x00	; 0
    3d5c:	11 23       	and	r17, r17
    3d5e:	61 f1       	breq	.+88     	; 0x3db8 <default_path+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d60:	69 81       	ldd	r22, Y+1	; 0x01
    3d62:	7a 81       	ldd	r23, Y+2	; 0x02
    3d64:	8b 81       	ldd	r24, Y+3	; 0x03
    3d66:	9c 81       	ldd	r25, Y+4	; 0x04
    3d68:	20 e0       	ldi	r18, 0x00	; 0
    3d6a:	30 e0       	ldi	r19, 0x00	; 0
    3d6c:	40 e2       	ldi	r20, 0x20	; 32
    3d6e:	51 e4       	ldi	r21, 0x41	; 65
    3d70:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    3d74:	dc 01       	movw	r26, r24
    3d76:	cb 01       	movw	r24, r22
    3d78:	bc 01       	movw	r22, r24
    3d7a:	cd 01       	movw	r24, r26
    3d7c:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    3d80:	dc 01       	movw	r26, r24
    3d82:	cb 01       	movw	r24, r22
    3d84:	9a 87       	std	Y+10, r25	; 0x0a
    3d86:	89 87       	std	Y+9, r24	; 0x09
    3d88:	12 c0       	rjmp	.+36     	; 0x3dae <default_path+0xec>
    3d8a:	80 e7       	ldi	r24, 0x70	; 112
    3d8c:	91 e0       	ldi	r25, 0x01	; 1
    3d8e:	9c 87       	std	Y+12, r25	; 0x0c
    3d90:	8b 87       	std	Y+11, r24	; 0x0b
    3d92:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d94:	9c 85       	ldd	r25, Y+12	; 0x0c
    3d96:	8c 01       	movw	r16, r24
    3d98:	c8 01       	movw	r24, r16
    3d9a:	01 97       	sbiw	r24, 0x01	; 1
    3d9c:	f1 f7       	brne	.-4      	; 0x3d9a <default_path+0xd8>
    3d9e:	8c 01       	movw	r16, r24
    3da0:	1c 87       	std	Y+12, r17	; 0x0c
    3da2:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3da4:	89 85       	ldd	r24, Y+9	; 0x09
    3da6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3da8:	01 97       	sbiw	r24, 0x01	; 1
    3daa:	9a 87       	std	Y+10, r25	; 0x0a
    3dac:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dae:	89 85       	ldd	r24, Y+9	; 0x09
    3db0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3db2:	00 97       	sbiw	r24, 0x00	; 0
    3db4:	51 f7       	brne	.-44     	; 0x3d8a <default_path+0xc8>
    3db6:	17 c0       	rjmp	.+46     	; 0x3de6 <default_path+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3db8:	6d 81       	ldd	r22, Y+5	; 0x05
    3dba:	7e 81       	ldd	r23, Y+6	; 0x06
    3dbc:	8f 81       	ldd	r24, Y+7	; 0x07
    3dbe:	98 85       	ldd	r25, Y+8	; 0x08
    3dc0:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    3dc4:	dc 01       	movw	r26, r24
    3dc6:	cb 01       	movw	r24, r22
    3dc8:	9a 87       	std	Y+10, r25	; 0x0a
    3dca:	89 87       	std	Y+9, r24	; 0x09
    3dcc:	89 85       	ldd	r24, Y+9	; 0x09
    3dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dd0:	9e 87       	std	Y+14, r25	; 0x0e
    3dd2:	8d 87       	std	Y+13, r24	; 0x0d
    3dd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dd8:	8c 01       	movw	r16, r24
    3dda:	c8 01       	movw	r24, r16
    3ddc:	01 97       	sbiw	r24, 0x01	; 1
    3dde:	f1 f7       	brne	.-4      	; 0x3ddc <default_path+0x11a>
    3de0:	8c 01       	movw	r16, r24
    3de2:	1e 87       	std	Y+14, r17	; 0x0e
    3de4:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(100);
	right_turn();
    3de6:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <right_turn>
	move_forward();
    3dea:	0e 94 22 1c 	call	0x3844	; 0x3844 <move_forward>
	forward_mm(30);
    3dee:	8e e1       	ldi	r24, 0x1E	; 30
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	0e 94 71 13 	call	0x26e2	; 0x26e2 <forward_mm>
	left_turn();
    3df6:	0e 94 0b 1c 	call	0x3816	; 0x3816 <left_turn>
	move_forward();
    3dfa:	0e 94 22 1c 	call	0x3844	; 0x3844 <move_forward>
	forward_mm(20);
    3dfe:	84 e1       	ldi	r24, 0x14	; 20
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	0e 94 71 13 	call	0x26e2	; 0x26e2 <forward_mm>
	send_to_pc();
    3e06:	0e 94 4f 24 	call	0x489e	; 0x489e <send_to_pc>
    3e0a:	80 e0       	ldi	r24, 0x00	; 0
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	aa e7       	ldi	r26, 0x7A	; 122
    3e10:	b4 e4       	ldi	r27, 0x44	; 68
    3e12:	8f 87       	std	Y+15, r24	; 0x0f
    3e14:	98 8b       	std	Y+16, r25	; 0x10
    3e16:	a9 8b       	std	Y+17, r26	; 0x11
    3e18:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3e1a:	6f 85       	ldd	r22, Y+15	; 0x0f
    3e1c:	78 89       	ldd	r23, Y+16	; 0x10
    3e1e:	89 89       	ldd	r24, Y+17	; 0x11
    3e20:	9a 89       	ldd	r25, Y+18	; 0x12
    3e22:	26 e6       	ldi	r18, 0x66	; 102
    3e24:	36 e6       	ldi	r19, 0x66	; 102
    3e26:	46 e6       	ldi	r20, 0x66	; 102
    3e28:	55 e4       	ldi	r21, 0x45	; 69
    3e2a:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    3e2e:	dc 01       	movw	r26, r24
    3e30:	cb 01       	movw	r24, r22
    3e32:	8b 8b       	std	Y+19, r24	; 0x13
    3e34:	9c 8b       	std	Y+20, r25	; 0x14
    3e36:	ad 8b       	std	Y+21, r26	; 0x15
    3e38:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3e3a:	11 e0       	ldi	r17, 0x01	; 1
    3e3c:	6b 89       	ldd	r22, Y+19	; 0x13
    3e3e:	7c 89       	ldd	r23, Y+20	; 0x14
    3e40:	8d 89       	ldd	r24, Y+21	; 0x15
    3e42:	9e 89       	ldd	r25, Y+22	; 0x16
    3e44:	20 e0       	ldi	r18, 0x00	; 0
    3e46:	30 e0       	ldi	r19, 0x00	; 0
    3e48:	40 e8       	ldi	r20, 0x80	; 128
    3e4a:	5f e3       	ldi	r21, 0x3F	; 63
    3e4c:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    3e50:	88 23       	and	r24, r24
    3e52:	0c f0       	brlt	.+2      	; 0x3e56 <default_path+0x194>
    3e54:	10 e0       	ldi	r17, 0x00	; 0
    3e56:	11 23       	and	r17, r17
    3e58:	29 f0       	breq	.+10     	; 0x3e64 <default_path+0x1a2>
		__ticks = 1;
    3e5a:	81 e0       	ldi	r24, 0x01	; 1
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	98 8f       	std	Y+24, r25	; 0x18
    3e60:	8f 8b       	std	Y+23, r24	; 0x17
    3e62:	46 c0       	rjmp	.+140    	; 0x3ef0 <default_path+0x22e>
	else if (__tmp > 65535)
    3e64:	11 e0       	ldi	r17, 0x01	; 1
    3e66:	6b 89       	ldd	r22, Y+19	; 0x13
    3e68:	7c 89       	ldd	r23, Y+20	; 0x14
    3e6a:	8d 89       	ldd	r24, Y+21	; 0x15
    3e6c:	9e 89       	ldd	r25, Y+22	; 0x16
    3e6e:	20 e0       	ldi	r18, 0x00	; 0
    3e70:	3f ef       	ldi	r19, 0xFF	; 255
    3e72:	4f e7       	ldi	r20, 0x7F	; 127
    3e74:	57 e4       	ldi	r21, 0x47	; 71
    3e76:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    3e7a:	18 16       	cp	r1, r24
    3e7c:	0c f0       	brlt	.+2      	; 0x3e80 <default_path+0x1be>
    3e7e:	10 e0       	ldi	r17, 0x00	; 0
    3e80:	11 23       	and	r17, r17
    3e82:	61 f1       	breq	.+88     	; 0x3edc <default_path+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e84:	6f 85       	ldd	r22, Y+15	; 0x0f
    3e86:	78 89       	ldd	r23, Y+16	; 0x10
    3e88:	89 89       	ldd	r24, Y+17	; 0x11
    3e8a:	9a 89       	ldd	r25, Y+18	; 0x12
    3e8c:	20 e0       	ldi	r18, 0x00	; 0
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	40 e2       	ldi	r20, 0x20	; 32
    3e92:	51 e4       	ldi	r21, 0x41	; 65
    3e94:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    3e98:	dc 01       	movw	r26, r24
    3e9a:	cb 01       	movw	r24, r22
    3e9c:	bc 01       	movw	r22, r24
    3e9e:	cd 01       	movw	r24, r26
    3ea0:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    3ea4:	dc 01       	movw	r26, r24
    3ea6:	cb 01       	movw	r24, r22
    3ea8:	98 8f       	std	Y+24, r25	; 0x18
    3eaa:	8f 8b       	std	Y+23, r24	; 0x17
    3eac:	12 c0       	rjmp	.+36     	; 0x3ed2 <default_path+0x210>
    3eae:	80 e7       	ldi	r24, 0x70	; 112
    3eb0:	91 e0       	ldi	r25, 0x01	; 1
    3eb2:	9a 8f       	std	Y+26, r25	; 0x1a
    3eb4:	89 8f       	std	Y+25, r24	; 0x19
    3eb6:	89 8d       	ldd	r24, Y+25	; 0x19
    3eb8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3eba:	8c 01       	movw	r16, r24
    3ebc:	c8 01       	movw	r24, r16
    3ebe:	01 97       	sbiw	r24, 0x01	; 1
    3ec0:	f1 f7       	brne	.-4      	; 0x3ebe <default_path+0x1fc>
    3ec2:	8c 01       	movw	r16, r24
    3ec4:	1a 8f       	std	Y+26, r17	; 0x1a
    3ec6:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ec8:	8f 89       	ldd	r24, Y+23	; 0x17
    3eca:	98 8d       	ldd	r25, Y+24	; 0x18
    3ecc:	01 97       	sbiw	r24, 0x01	; 1
    3ece:	98 8f       	std	Y+24, r25	; 0x18
    3ed0:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ed2:	8f 89       	ldd	r24, Y+23	; 0x17
    3ed4:	98 8d       	ldd	r25, Y+24	; 0x18
    3ed6:	00 97       	sbiw	r24, 0x00	; 0
    3ed8:	51 f7       	brne	.-44     	; 0x3eae <default_path+0x1ec>
    3eda:	17 c0       	rjmp	.+46     	; 0x3f0a <default_path+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3edc:	6b 89       	ldd	r22, Y+19	; 0x13
    3ede:	7c 89       	ldd	r23, Y+20	; 0x14
    3ee0:	8d 89       	ldd	r24, Y+21	; 0x15
    3ee2:	9e 89       	ldd	r25, Y+22	; 0x16
    3ee4:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    3ee8:	dc 01       	movw	r26, r24
    3eea:	cb 01       	movw	r24, r22
    3eec:	98 8f       	std	Y+24, r25	; 0x18
    3eee:	8f 8b       	std	Y+23, r24	; 0x17
    3ef0:	8f 89       	ldd	r24, Y+23	; 0x17
    3ef2:	98 8d       	ldd	r25, Y+24	; 0x18
    3ef4:	9c 8f       	std	Y+28, r25	; 0x1c
    3ef6:	8b 8f       	std	Y+27, r24	; 0x1b
    3ef8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3efa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3efc:	8c 01       	movw	r16, r24
    3efe:	c8 01       	movw	r24, r16
    3f00:	01 97       	sbiw	r24, 0x01	; 1
    3f02:	f1 f7       	brne	.-4      	; 0x3f00 <default_path+0x23e>
    3f04:	8c 01       	movw	r16, r24
    3f06:	1c 8f       	std	Y+28, r17	; 0x1c
    3f08:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(1000);
	move_forward();
    3f0a:	0e 94 22 1c 	call	0x3844	; 0x3844 <move_forward>
	forward_mm(20);
    3f0e:	84 e1       	ldi	r24, 0x14	; 20
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	0e 94 71 13 	call	0x26e2	; 0x26e2 <forward_mm>
	left_turn();
    3f16:	0e 94 0b 1c 	call	0x3816	; 0x3816 <left_turn>
	move_forward();
    3f1a:	0e 94 22 1c 	call	0x3844	; 0x3844 <move_forward>
	forward_mm(30);
    3f1e:	8e e1       	ldi	r24, 0x1E	; 30
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	0e 94 71 13 	call	0x26e2	; 0x26e2 <forward_mm>
	left_turn();
    3f26:	0e 94 0b 1c 	call	0x3816	; 0x3816 <left_turn>
	move_forward();
    3f2a:	0e 94 22 1c 	call	0x3844	; 0x3844 <move_forward>
	stop_bot();
    3f2e:	0e 94 4a 12 	call	0x2494	; 0x2494 <stop_bot>
	left_degrees(190);
    3f32:	8e eb       	ldi	r24, 0xBE	; 190
    3f34:	90 e0       	ldi	r25, 0x00	; 0
    3f36:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <left_degrees>
	back_mm(90);
    3f3a:	8a e5       	ldi	r24, 0x5A	; 90
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	0e 94 84 13 	call	0x2708	; 0x2708 <back_mm>
	node_count++;
    3f42:	80 91 24 02 	lds	r24, 0x0224
    3f46:	90 91 25 02 	lds	r25, 0x0225
    3f4a:	01 96       	adiw	r24, 0x01	; 1
    3f4c:	90 93 25 02 	sts	0x0225, r25
    3f50:	80 93 24 02 	sts	0x0224, r24
}
    3f54:	6c 96       	adiw	r28, 0x1c	; 28
    3f56:	0f b6       	in	r0, 0x3f	; 63
    3f58:	f8 94       	cli
    3f5a:	de bf       	out	0x3e, r29	; 62
    3f5c:	0f be       	out	0x3f, r0	; 63
    3f5e:	cd bf       	out	0x3d, r28	; 61
    3f60:	df 91       	pop	r29
    3f62:	cf 91       	pop	r28
    3f64:	1f 91       	pop	r17
    3f66:	0f 91       	pop	r16
    3f68:	08 95       	ret

00003f6a <alternate_path>:

void alternate_path()  //alternate path chosen by bot when obstacle is detected
{
    3f6a:	0f 93       	push	r16
    3f6c:	1f 93       	push	r17
    3f6e:	cf 93       	push	r28
    3f70:	df 93       	push	r29
    3f72:	cd b7       	in	r28, 0x3d	; 61
    3f74:	de b7       	in	r29, 0x3e	; 62
    3f76:	6c 97       	sbiw	r28, 0x1c	; 28
    3f78:	0f b6       	in	r0, 0x3f	; 63
    3f7a:	f8 94       	cli
    3f7c:	de bf       	out	0x3e, r29	; 62
    3f7e:	0f be       	out	0x3f, r0	; 63
    3f80:	cd bf       	out	0x3d, r28	; 61
	back_mm(80);
    3f82:	80 e5       	ldi	r24, 0x50	; 80
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	0e 94 84 13 	call	0x2708	; 0x2708 <back_mm>
	stop_bot();
    3f8a:	0e 94 4a 12 	call	0x2494	; 0x2494 <stop_bot>
    3f8e:	80 e0       	ldi	r24, 0x00	; 0
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	a8 ec       	ldi	r26, 0xC8	; 200
    3f94:	b2 e4       	ldi	r27, 0x42	; 66
    3f96:	89 83       	std	Y+1, r24	; 0x01
    3f98:	9a 83       	std	Y+2, r25	; 0x02
    3f9a:	ab 83       	std	Y+3, r26	; 0x03
    3f9c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3f9e:	69 81       	ldd	r22, Y+1	; 0x01
    3fa0:	7a 81       	ldd	r23, Y+2	; 0x02
    3fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa4:	9c 81       	ldd	r25, Y+4	; 0x04
    3fa6:	26 e6       	ldi	r18, 0x66	; 102
    3fa8:	36 e6       	ldi	r19, 0x66	; 102
    3faa:	46 e6       	ldi	r20, 0x66	; 102
    3fac:	55 e4       	ldi	r21, 0x45	; 69
    3fae:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    3fb2:	dc 01       	movw	r26, r24
    3fb4:	cb 01       	movw	r24, r22
    3fb6:	8d 83       	std	Y+5, r24	; 0x05
    3fb8:	9e 83       	std	Y+6, r25	; 0x06
    3fba:	af 83       	std	Y+7, r26	; 0x07
    3fbc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3fbe:	11 e0       	ldi	r17, 0x01	; 1
    3fc0:	6d 81       	ldd	r22, Y+5	; 0x05
    3fc2:	7e 81       	ldd	r23, Y+6	; 0x06
    3fc4:	8f 81       	ldd	r24, Y+7	; 0x07
    3fc6:	98 85       	ldd	r25, Y+8	; 0x08
    3fc8:	20 e0       	ldi	r18, 0x00	; 0
    3fca:	30 e0       	ldi	r19, 0x00	; 0
    3fcc:	40 e8       	ldi	r20, 0x80	; 128
    3fce:	5f e3       	ldi	r21, 0x3F	; 63
    3fd0:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    3fd4:	88 23       	and	r24, r24
    3fd6:	0c f0       	brlt	.+2      	; 0x3fda <alternate_path+0x70>
    3fd8:	10 e0       	ldi	r17, 0x00	; 0
    3fda:	11 23       	and	r17, r17
    3fdc:	29 f0       	breq	.+10     	; 0x3fe8 <alternate_path+0x7e>
		__ticks = 1;
    3fde:	81 e0       	ldi	r24, 0x01	; 1
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	9a 87       	std	Y+10, r25	; 0x0a
    3fe4:	89 87       	std	Y+9, r24	; 0x09
    3fe6:	46 c0       	rjmp	.+140    	; 0x4074 <alternate_path+0x10a>
	else if (__tmp > 65535)
    3fe8:	11 e0       	ldi	r17, 0x01	; 1
    3fea:	6d 81       	ldd	r22, Y+5	; 0x05
    3fec:	7e 81       	ldd	r23, Y+6	; 0x06
    3fee:	8f 81       	ldd	r24, Y+7	; 0x07
    3ff0:	98 85       	ldd	r25, Y+8	; 0x08
    3ff2:	20 e0       	ldi	r18, 0x00	; 0
    3ff4:	3f ef       	ldi	r19, 0xFF	; 255
    3ff6:	4f e7       	ldi	r20, 0x7F	; 127
    3ff8:	57 e4       	ldi	r21, 0x47	; 71
    3ffa:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    3ffe:	18 16       	cp	r1, r24
    4000:	0c f0       	brlt	.+2      	; 0x4004 <alternate_path+0x9a>
    4002:	10 e0       	ldi	r17, 0x00	; 0
    4004:	11 23       	and	r17, r17
    4006:	61 f1       	breq	.+88     	; 0x4060 <alternate_path+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4008:	69 81       	ldd	r22, Y+1	; 0x01
    400a:	7a 81       	ldd	r23, Y+2	; 0x02
    400c:	8b 81       	ldd	r24, Y+3	; 0x03
    400e:	9c 81       	ldd	r25, Y+4	; 0x04
    4010:	20 e0       	ldi	r18, 0x00	; 0
    4012:	30 e0       	ldi	r19, 0x00	; 0
    4014:	40 e2       	ldi	r20, 0x20	; 32
    4016:	51 e4       	ldi	r21, 0x41	; 65
    4018:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    401c:	dc 01       	movw	r26, r24
    401e:	cb 01       	movw	r24, r22
    4020:	bc 01       	movw	r22, r24
    4022:	cd 01       	movw	r24, r26
    4024:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    4028:	dc 01       	movw	r26, r24
    402a:	cb 01       	movw	r24, r22
    402c:	9a 87       	std	Y+10, r25	; 0x0a
    402e:	89 87       	std	Y+9, r24	; 0x09
    4030:	12 c0       	rjmp	.+36     	; 0x4056 <alternate_path+0xec>
    4032:	80 e7       	ldi	r24, 0x70	; 112
    4034:	91 e0       	ldi	r25, 0x01	; 1
    4036:	9c 87       	std	Y+12, r25	; 0x0c
    4038:	8b 87       	std	Y+11, r24	; 0x0b
    403a:	8b 85       	ldd	r24, Y+11	; 0x0b
    403c:	9c 85       	ldd	r25, Y+12	; 0x0c
    403e:	8c 01       	movw	r16, r24
    4040:	c8 01       	movw	r24, r16
    4042:	01 97       	sbiw	r24, 0x01	; 1
    4044:	f1 f7       	brne	.-4      	; 0x4042 <alternate_path+0xd8>
    4046:	8c 01       	movw	r16, r24
    4048:	1c 87       	std	Y+12, r17	; 0x0c
    404a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    404c:	89 85       	ldd	r24, Y+9	; 0x09
    404e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4050:	01 97       	sbiw	r24, 0x01	; 1
    4052:	9a 87       	std	Y+10, r25	; 0x0a
    4054:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4056:	89 85       	ldd	r24, Y+9	; 0x09
    4058:	9a 85       	ldd	r25, Y+10	; 0x0a
    405a:	00 97       	sbiw	r24, 0x00	; 0
    405c:	51 f7       	brne	.-44     	; 0x4032 <alternate_path+0xc8>
    405e:	17 c0       	rjmp	.+46     	; 0x408e <alternate_path+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4060:	6d 81       	ldd	r22, Y+5	; 0x05
    4062:	7e 81       	ldd	r23, Y+6	; 0x06
    4064:	8f 81       	ldd	r24, Y+7	; 0x07
    4066:	98 85       	ldd	r25, Y+8	; 0x08
    4068:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    406c:	dc 01       	movw	r26, r24
    406e:	cb 01       	movw	r24, r22
    4070:	9a 87       	std	Y+10, r25	; 0x0a
    4072:	89 87       	std	Y+9, r24	; 0x09
    4074:	89 85       	ldd	r24, Y+9	; 0x09
    4076:	9a 85       	ldd	r25, Y+10	; 0x0a
    4078:	9e 87       	std	Y+14, r25	; 0x0e
    407a:	8d 87       	std	Y+13, r24	; 0x0d
    407c:	8d 85       	ldd	r24, Y+13	; 0x0d
    407e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4080:	8c 01       	movw	r16, r24
    4082:	c8 01       	movw	r24, r16
    4084:	01 97       	sbiw	r24, 0x01	; 1
    4086:	f1 f7       	brne	.-4      	; 0x4084 <alternate_path+0x11a>
    4088:	8c 01       	movw	r16, r24
    408a:	1e 87       	std	Y+14, r17	; 0x0e
    408c:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(100);
	left_turn();
    408e:	0e 94 0b 1c 	call	0x3816	; 0x3816 <left_turn>
	move_forward();
    4092:	0e 94 22 1c 	call	0x3844	; 0x3844 <move_forward>
	forward_mm(30);
    4096:	8e e1       	ldi	r24, 0x1E	; 30
    4098:	90 e0       	ldi	r25, 0x00	; 0
    409a:	0e 94 71 13 	call	0x26e2	; 0x26e2 <forward_mm>
	right_turn();
    409e:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <right_turn>
	move_forward();
    40a2:	0e 94 22 1c 	call	0x3844	; 0x3844 <move_forward>
	forward_mm(20);
    40a6:	84 e1       	ldi	r24, 0x14	; 20
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	0e 94 71 13 	call	0x26e2	; 0x26e2 <forward_mm>
	send_to_pc();
    40ae:	0e 94 4f 24 	call	0x489e	; 0x489e <send_to_pc>
    40b2:	80 e0       	ldi	r24, 0x00	; 0
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	aa e7       	ldi	r26, 0x7A	; 122
    40b8:	b4 e4       	ldi	r27, 0x44	; 68
    40ba:	8f 87       	std	Y+15, r24	; 0x0f
    40bc:	98 8b       	std	Y+16, r25	; 0x10
    40be:	a9 8b       	std	Y+17, r26	; 0x11
    40c0:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    40c2:	6f 85       	ldd	r22, Y+15	; 0x0f
    40c4:	78 89       	ldd	r23, Y+16	; 0x10
    40c6:	89 89       	ldd	r24, Y+17	; 0x11
    40c8:	9a 89       	ldd	r25, Y+18	; 0x12
    40ca:	26 e6       	ldi	r18, 0x66	; 102
    40cc:	36 e6       	ldi	r19, 0x66	; 102
    40ce:	46 e6       	ldi	r20, 0x66	; 102
    40d0:	55 e4       	ldi	r21, 0x45	; 69
    40d2:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    40d6:	dc 01       	movw	r26, r24
    40d8:	cb 01       	movw	r24, r22
    40da:	8b 8b       	std	Y+19, r24	; 0x13
    40dc:	9c 8b       	std	Y+20, r25	; 0x14
    40de:	ad 8b       	std	Y+21, r26	; 0x15
    40e0:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    40e2:	11 e0       	ldi	r17, 0x01	; 1
    40e4:	6b 89       	ldd	r22, Y+19	; 0x13
    40e6:	7c 89       	ldd	r23, Y+20	; 0x14
    40e8:	8d 89       	ldd	r24, Y+21	; 0x15
    40ea:	9e 89       	ldd	r25, Y+22	; 0x16
    40ec:	20 e0       	ldi	r18, 0x00	; 0
    40ee:	30 e0       	ldi	r19, 0x00	; 0
    40f0:	40 e8       	ldi	r20, 0x80	; 128
    40f2:	5f e3       	ldi	r21, 0x3F	; 63
    40f4:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    40f8:	88 23       	and	r24, r24
    40fa:	0c f0       	brlt	.+2      	; 0x40fe <alternate_path+0x194>
    40fc:	10 e0       	ldi	r17, 0x00	; 0
    40fe:	11 23       	and	r17, r17
    4100:	29 f0       	breq	.+10     	; 0x410c <alternate_path+0x1a2>
		__ticks = 1;
    4102:	81 e0       	ldi	r24, 0x01	; 1
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	98 8f       	std	Y+24, r25	; 0x18
    4108:	8f 8b       	std	Y+23, r24	; 0x17
    410a:	46 c0       	rjmp	.+140    	; 0x4198 <alternate_path+0x22e>
	else if (__tmp > 65535)
    410c:	11 e0       	ldi	r17, 0x01	; 1
    410e:	6b 89       	ldd	r22, Y+19	; 0x13
    4110:	7c 89       	ldd	r23, Y+20	; 0x14
    4112:	8d 89       	ldd	r24, Y+21	; 0x15
    4114:	9e 89       	ldd	r25, Y+22	; 0x16
    4116:	20 e0       	ldi	r18, 0x00	; 0
    4118:	3f ef       	ldi	r19, 0xFF	; 255
    411a:	4f e7       	ldi	r20, 0x7F	; 127
    411c:	57 e4       	ldi	r21, 0x47	; 71
    411e:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    4122:	18 16       	cp	r1, r24
    4124:	0c f0       	brlt	.+2      	; 0x4128 <alternate_path+0x1be>
    4126:	10 e0       	ldi	r17, 0x00	; 0
    4128:	11 23       	and	r17, r17
    412a:	61 f1       	breq	.+88     	; 0x4184 <alternate_path+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    412c:	6f 85       	ldd	r22, Y+15	; 0x0f
    412e:	78 89       	ldd	r23, Y+16	; 0x10
    4130:	89 89       	ldd	r24, Y+17	; 0x11
    4132:	9a 89       	ldd	r25, Y+18	; 0x12
    4134:	20 e0       	ldi	r18, 0x00	; 0
    4136:	30 e0       	ldi	r19, 0x00	; 0
    4138:	40 e2       	ldi	r20, 0x20	; 32
    413a:	51 e4       	ldi	r21, 0x41	; 65
    413c:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    4140:	dc 01       	movw	r26, r24
    4142:	cb 01       	movw	r24, r22
    4144:	bc 01       	movw	r22, r24
    4146:	cd 01       	movw	r24, r26
    4148:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    414c:	dc 01       	movw	r26, r24
    414e:	cb 01       	movw	r24, r22
    4150:	98 8f       	std	Y+24, r25	; 0x18
    4152:	8f 8b       	std	Y+23, r24	; 0x17
    4154:	12 c0       	rjmp	.+36     	; 0x417a <alternate_path+0x210>
    4156:	80 e7       	ldi	r24, 0x70	; 112
    4158:	91 e0       	ldi	r25, 0x01	; 1
    415a:	9a 8f       	std	Y+26, r25	; 0x1a
    415c:	89 8f       	std	Y+25, r24	; 0x19
    415e:	89 8d       	ldd	r24, Y+25	; 0x19
    4160:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4162:	8c 01       	movw	r16, r24
    4164:	c8 01       	movw	r24, r16
    4166:	01 97       	sbiw	r24, 0x01	; 1
    4168:	f1 f7       	brne	.-4      	; 0x4166 <alternate_path+0x1fc>
    416a:	8c 01       	movw	r16, r24
    416c:	1a 8f       	std	Y+26, r17	; 0x1a
    416e:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4170:	8f 89       	ldd	r24, Y+23	; 0x17
    4172:	98 8d       	ldd	r25, Y+24	; 0x18
    4174:	01 97       	sbiw	r24, 0x01	; 1
    4176:	98 8f       	std	Y+24, r25	; 0x18
    4178:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    417a:	8f 89       	ldd	r24, Y+23	; 0x17
    417c:	98 8d       	ldd	r25, Y+24	; 0x18
    417e:	00 97       	sbiw	r24, 0x00	; 0
    4180:	51 f7       	brne	.-44     	; 0x4156 <alternate_path+0x1ec>
    4182:	17 c0       	rjmp	.+46     	; 0x41b2 <alternate_path+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4184:	6b 89       	ldd	r22, Y+19	; 0x13
    4186:	7c 89       	ldd	r23, Y+20	; 0x14
    4188:	8d 89       	ldd	r24, Y+21	; 0x15
    418a:	9e 89       	ldd	r25, Y+22	; 0x16
    418c:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    4190:	dc 01       	movw	r26, r24
    4192:	cb 01       	movw	r24, r22
    4194:	98 8f       	std	Y+24, r25	; 0x18
    4196:	8f 8b       	std	Y+23, r24	; 0x17
    4198:	8f 89       	ldd	r24, Y+23	; 0x17
    419a:	98 8d       	ldd	r25, Y+24	; 0x18
    419c:	9c 8f       	std	Y+28, r25	; 0x1c
    419e:	8b 8f       	std	Y+27, r24	; 0x1b
    41a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41a4:	8c 01       	movw	r16, r24
    41a6:	c8 01       	movw	r24, r16
    41a8:	01 97       	sbiw	r24, 0x01	; 1
    41aa:	f1 f7       	brne	.-4      	; 0x41a8 <alternate_path+0x23e>
    41ac:	8c 01       	movw	r16, r24
    41ae:	1c 8f       	std	Y+28, r17	; 0x1c
    41b0:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(1000);
	move_forward();
    41b2:	0e 94 22 1c 	call	0x3844	; 0x3844 <move_forward>
	forward_mm(30);
    41b6:	8e e1       	ldi	r24, 0x1E	; 30
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	0e 94 71 13 	call	0x26e2	; 0x26e2 <forward_mm>
	right_turn();
    41be:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <right_turn>
	move_forward();
    41c2:	0e 94 22 1c 	call	0x3844	; 0x3844 <move_forward>
	forward_mm(30);
    41c6:	8e e1       	ldi	r24, 0x1E	; 30
    41c8:	90 e0       	ldi	r25, 0x00	; 0
    41ca:	0e 94 71 13 	call	0x26e2	; 0x26e2 <forward_mm>
	right_turn();
    41ce:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <right_turn>
	move_forward();
    41d2:	0e 94 22 1c 	call	0x3844	; 0x3844 <move_forward>
	stop_bot();
    41d6:	0e 94 4a 12 	call	0x2494	; 0x2494 <stop_bot>
	left_degrees(190);
    41da:	8e eb       	ldi	r24, 0xBE	; 190
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <left_degrees>
	back_mm(90);
    41e2:	8a e5       	ldi	r24, 0x5A	; 90
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	0e 94 84 13 	call	0x2708	; 0x2708 <back_mm>
	node_count++;
    41ea:	80 91 24 02 	lds	r24, 0x0224
    41ee:	90 91 25 02 	lds	r25, 0x0225
    41f2:	01 96       	adiw	r24, 0x01	; 1
    41f4:	90 93 25 02 	sts	0x0225, r25
    41f8:	80 93 24 02 	sts	0x0224, r24
}
    41fc:	6c 96       	adiw	r28, 0x1c	; 28
    41fe:	0f b6       	in	r0, 0x3f	; 63
    4200:	f8 94       	cli
    4202:	de bf       	out	0x3e, r29	; 62
    4204:	0f be       	out	0x3f, r0	; 63
    4206:	cd bf       	out	0x3d, r28	; 61
    4208:	df 91       	pop	r29
    420a:	cf 91       	pop	r28
    420c:	1f 91       	pop	r17
    420e:	0f 91       	pop	r16
    4210:	08 95       	ret

00004212 <obstacle_detector>:

//this function will be used, when obstacle is detected
void obstacle_detector()
{
    4212:	0f 93       	push	r16
    4214:	1f 93       	push	r17
    4216:	cf 93       	push	r28
    4218:	df 93       	push	r29
    421a:	cd b7       	in	r28, 0x3d	; 61
    421c:	de b7       	in	r29, 0x3e	; 62
    421e:	2e 97       	sbiw	r28, 0x0e	; 14
    4220:	0f b6       	in	r0, 0x3f	; 63
    4222:	f8 94       	cli
    4224:	de bf       	out	0x3e, r29	; 62
    4226:	0f be       	out	0x3f, r0	; 63
    4228:	cd bf       	out	0x3d, r28	; 61
	buzzer_beep();
    422a:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <buzzer_beep>
	obstacle_update();
    422e:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <obstacle_update>
	obstacle_found='1';
    4232:	81 e3       	ldi	r24, 0x31	; 49
    4234:	90 e0       	ldi	r25, 0x00	; 0
    4236:	90 93 09 02 	sts	0x0209, r25
    423a:	80 93 08 02 	sts	0x0208, r24
	path_direction=direction_calculator();
    423e:	0e 94 aa 1c 	call	0x3954	; 0x3954 <direction_calculator>
    4242:	80 93 02 02 	sts	0x0202, r24
	rmnder=node_count % 6;
    4246:	80 91 24 02 	lds	r24, 0x0224
    424a:	90 91 25 02 	lds	r25, 0x0225
    424e:	26 e0       	ldi	r18, 0x06	; 6
    4250:	30 e0       	ldi	r19, 0x00	; 0
    4252:	b9 01       	movw	r22, r18
    4254:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <__udivmodhi4>
    4258:	90 93 30 02 	sts	0x0230, r25
    425c:	80 93 2f 02 	sts	0x022F, r24
	priority=obstacle_check();
    4260:	0e 94 e6 1d 	call	0x3bcc	; 0x3bcc <obstacle_check>
    4264:	80 93 31 02 	sts	0x0231, r24
	if((line_no == 2) || (line_no == 4))    //when obstacle is in even line numbers
    4268:	80 91 00 02 	lds	r24, 0x0200
    426c:	90 91 01 02 	lds	r25, 0x0201
    4270:	82 30       	cpi	r24, 0x02	; 2
    4272:	91 05       	cpc	r25, r1
    4274:	39 f0       	breq	.+14     	; 0x4284 <obstacle_detector+0x72>
    4276:	80 91 00 02 	lds	r24, 0x0200
    427a:	90 91 01 02 	lds	r25, 0x0201
    427e:	84 30       	cpi	r24, 0x04	; 4
    4280:	91 05       	cpc	r25, r1
    4282:	51 f4       	brne	.+20     	; 0x4298 <obstacle_detector+0x86>
	{
		if (priority == 1)
    4284:	80 91 31 02 	lds	r24, 0x0231
    4288:	81 30       	cpi	r24, 0x01	; 1
    428a:	19 f4       	brne	.+6      	; 0x4292 <obstacle_detector+0x80>
		{
			alternate_path();
    428c:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <alternate_path>
	path_direction=direction_calculator();
	rmnder=node_count % 6;
	priority=obstacle_check();
	if((line_no == 2) || (line_no == 4))    //when obstacle is in even line numbers
	{
		if (priority == 1)
    4290:	1a c0       	rjmp	.+52     	; 0x42c6 <obstacle_detector+0xb4>
		{
			alternate_path();
		}
		else
		{
			default_path();
    4292:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <default_path>
	path_direction=direction_calculator();
	rmnder=node_count % 6;
	priority=obstacle_check();
	if((line_no == 2) || (line_no == 4))    //when obstacle is in even line numbers
	{
		if (priority == 1)
    4296:	17 c0       	rjmp	.+46     	; 0x42c6 <obstacle_detector+0xb4>
		{
			default_path();
		}
		
	}
	else if((line_no == 3) || (line_no == 5)) 
    4298:	80 91 00 02 	lds	r24, 0x0200
    429c:	90 91 01 02 	lds	r25, 0x0201
    42a0:	83 30       	cpi	r24, 0x03	; 3
    42a2:	91 05       	cpc	r25, r1
    42a4:	39 f0       	breq	.+14     	; 0x42b4 <obstacle_detector+0xa2>
    42a6:	80 91 00 02 	lds	r24, 0x0200
    42aa:	90 91 01 02 	lds	r25, 0x0201
    42ae:	85 30       	cpi	r24, 0x05	; 5
    42b0:	91 05       	cpc	r25, r1
    42b2:	49 f4       	brne	.+18     	; 0x42c6 <obstacle_detector+0xb4>
	{
		if (priority == 1)
    42b4:	80 91 31 02 	lds	r24, 0x0231
    42b8:	81 30       	cpi	r24, 0x01	; 1
    42ba:	19 f4       	brne	.+6      	; 0x42c2 <obstacle_detector+0xb0>
		{
			default_path();
    42bc:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <default_path>
    42c0:	02 c0       	rjmp	.+4      	; 0x42c6 <obstacle_detector+0xb4>
		}
		else
		{
			alternate_path();
    42c2:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <alternate_path>
		}
		
	}
	send_to_pc();
    42c6:	0e 94 4f 24 	call	0x489e	; 0x489e <send_to_pc>
	obstacle_found='0';
    42ca:	80 e3       	ldi	r24, 0x30	; 48
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	90 93 09 02 	sts	0x0209, r25
    42d2:	80 93 08 02 	sts	0x0208, r24
	stop_bot();
    42d6:	0e 94 4a 12 	call	0x2494	; 0x2494 <stop_bot>
    42da:	80 e0       	ldi	r24, 0x00	; 0
    42dc:	90 e0       	ldi	r25, 0x00	; 0
    42de:	aa ef       	ldi	r26, 0xFA	; 250
    42e0:	b4 e4       	ldi	r27, 0x44	; 68
    42e2:	89 83       	std	Y+1, r24	; 0x01
    42e4:	9a 83       	std	Y+2, r25	; 0x02
    42e6:	ab 83       	std	Y+3, r26	; 0x03
    42e8:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    42ea:	69 81       	ldd	r22, Y+1	; 0x01
    42ec:	7a 81       	ldd	r23, Y+2	; 0x02
    42ee:	8b 81       	ldd	r24, Y+3	; 0x03
    42f0:	9c 81       	ldd	r25, Y+4	; 0x04
    42f2:	26 e6       	ldi	r18, 0x66	; 102
    42f4:	36 e6       	ldi	r19, 0x66	; 102
    42f6:	46 e6       	ldi	r20, 0x66	; 102
    42f8:	55 e4       	ldi	r21, 0x45	; 69
    42fa:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    42fe:	dc 01       	movw	r26, r24
    4300:	cb 01       	movw	r24, r22
    4302:	8d 83       	std	Y+5, r24	; 0x05
    4304:	9e 83       	std	Y+6, r25	; 0x06
    4306:	af 83       	std	Y+7, r26	; 0x07
    4308:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    430a:	11 e0       	ldi	r17, 0x01	; 1
    430c:	6d 81       	ldd	r22, Y+5	; 0x05
    430e:	7e 81       	ldd	r23, Y+6	; 0x06
    4310:	8f 81       	ldd	r24, Y+7	; 0x07
    4312:	98 85       	ldd	r25, Y+8	; 0x08
    4314:	20 e0       	ldi	r18, 0x00	; 0
    4316:	30 e0       	ldi	r19, 0x00	; 0
    4318:	40 e8       	ldi	r20, 0x80	; 128
    431a:	5f e3       	ldi	r21, 0x3F	; 63
    431c:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    4320:	88 23       	and	r24, r24
    4322:	0c f0       	brlt	.+2      	; 0x4326 <obstacle_detector+0x114>
    4324:	10 e0       	ldi	r17, 0x00	; 0
    4326:	11 23       	and	r17, r17
    4328:	29 f0       	breq	.+10     	; 0x4334 <obstacle_detector+0x122>
		__ticks = 1;
    432a:	81 e0       	ldi	r24, 0x01	; 1
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	9a 87       	std	Y+10, r25	; 0x0a
    4330:	89 87       	std	Y+9, r24	; 0x09
    4332:	46 c0       	rjmp	.+140    	; 0x43c0 <obstacle_detector+0x1ae>
	else if (__tmp > 65535)
    4334:	11 e0       	ldi	r17, 0x01	; 1
    4336:	6d 81       	ldd	r22, Y+5	; 0x05
    4338:	7e 81       	ldd	r23, Y+6	; 0x06
    433a:	8f 81       	ldd	r24, Y+7	; 0x07
    433c:	98 85       	ldd	r25, Y+8	; 0x08
    433e:	20 e0       	ldi	r18, 0x00	; 0
    4340:	3f ef       	ldi	r19, 0xFF	; 255
    4342:	4f e7       	ldi	r20, 0x7F	; 127
    4344:	57 e4       	ldi	r21, 0x47	; 71
    4346:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    434a:	18 16       	cp	r1, r24
    434c:	0c f0       	brlt	.+2      	; 0x4350 <obstacle_detector+0x13e>
    434e:	10 e0       	ldi	r17, 0x00	; 0
    4350:	11 23       	and	r17, r17
    4352:	61 f1       	breq	.+88     	; 0x43ac <obstacle_detector+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4354:	69 81       	ldd	r22, Y+1	; 0x01
    4356:	7a 81       	ldd	r23, Y+2	; 0x02
    4358:	8b 81       	ldd	r24, Y+3	; 0x03
    435a:	9c 81       	ldd	r25, Y+4	; 0x04
    435c:	20 e0       	ldi	r18, 0x00	; 0
    435e:	30 e0       	ldi	r19, 0x00	; 0
    4360:	40 e2       	ldi	r20, 0x20	; 32
    4362:	51 e4       	ldi	r21, 0x41	; 65
    4364:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    4368:	dc 01       	movw	r26, r24
    436a:	cb 01       	movw	r24, r22
    436c:	bc 01       	movw	r22, r24
    436e:	cd 01       	movw	r24, r26
    4370:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    4374:	dc 01       	movw	r26, r24
    4376:	cb 01       	movw	r24, r22
    4378:	9a 87       	std	Y+10, r25	; 0x0a
    437a:	89 87       	std	Y+9, r24	; 0x09
    437c:	12 c0       	rjmp	.+36     	; 0x43a2 <obstacle_detector+0x190>
    437e:	80 e7       	ldi	r24, 0x70	; 112
    4380:	91 e0       	ldi	r25, 0x01	; 1
    4382:	9c 87       	std	Y+12, r25	; 0x0c
    4384:	8b 87       	std	Y+11, r24	; 0x0b
    4386:	8b 85       	ldd	r24, Y+11	; 0x0b
    4388:	9c 85       	ldd	r25, Y+12	; 0x0c
    438a:	8c 01       	movw	r16, r24
    438c:	c8 01       	movw	r24, r16
    438e:	01 97       	sbiw	r24, 0x01	; 1
    4390:	f1 f7       	brne	.-4      	; 0x438e <obstacle_detector+0x17c>
    4392:	8c 01       	movw	r16, r24
    4394:	1c 87       	std	Y+12, r17	; 0x0c
    4396:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4398:	89 85       	ldd	r24, Y+9	; 0x09
    439a:	9a 85       	ldd	r25, Y+10	; 0x0a
    439c:	01 97       	sbiw	r24, 0x01	; 1
    439e:	9a 87       	std	Y+10, r25	; 0x0a
    43a0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43a2:	89 85       	ldd	r24, Y+9	; 0x09
    43a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    43a6:	00 97       	sbiw	r24, 0x00	; 0
    43a8:	51 f7       	brne	.-44     	; 0x437e <obstacle_detector+0x16c>
    43aa:	17 c0       	rjmp	.+46     	; 0x43da <obstacle_detector+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43ac:	6d 81       	ldd	r22, Y+5	; 0x05
    43ae:	7e 81       	ldd	r23, Y+6	; 0x06
    43b0:	8f 81       	ldd	r24, Y+7	; 0x07
    43b2:	98 85       	ldd	r25, Y+8	; 0x08
    43b4:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    43b8:	dc 01       	movw	r26, r24
    43ba:	cb 01       	movw	r24, r22
    43bc:	9a 87       	std	Y+10, r25	; 0x0a
    43be:	89 87       	std	Y+9, r24	; 0x09
    43c0:	89 85       	ldd	r24, Y+9	; 0x09
    43c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    43c4:	9e 87       	std	Y+14, r25	; 0x0e
    43c6:	8d 87       	std	Y+13, r24	; 0x0d
    43c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    43ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    43cc:	8c 01       	movw	r16, r24
    43ce:	c8 01       	movw	r24, r16
    43d0:	01 97       	sbiw	r24, 0x01	; 1
    43d2:	f1 f7       	brne	.-4      	; 0x43d0 <obstacle_detector+0x1be>
    43d4:	8c 01       	movw	r16, r24
    43d6:	1e 87       	std	Y+14, r17	; 0x0e
    43d8:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(2000);
}
    43da:	2e 96       	adiw	r28, 0x0e	; 14
    43dc:	0f b6       	in	r0, 0x3f	; 63
    43de:	f8 94       	cli
    43e0:	de bf       	out	0x3e, r29	; 62
    43e2:	0f be       	out	0x3f, r0	; 63
    43e4:	cd bf       	out	0x3d, r28	; 61
    43e6:	df 91       	pop	r29
    43e8:	cf 91       	pop	r28
    43ea:	1f 91       	pop	r17
    43ec:	0f 91       	pop	r16
    43ee:	08 95       	ret

000043f0 <node_detector>:


//this function will be used, when node is detected
void node_detector()
{
    43f0:	0f 93       	push	r16
    43f2:	1f 93       	push	r17
    43f4:	cf 93       	push	r28
    43f6:	df 93       	push	r29
    43f8:	cd b7       	in	r28, 0x3d	; 61
    43fa:	de b7       	in	r29, 0x3e	; 62
    43fc:	a0 97       	sbiw	r28, 0x20	; 32
    43fe:	0f b6       	in	r0, 0x3f	; 63
    4400:	f8 94       	cli
    4402:	de bf       	out	0x3e, r29	; 62
    4404:	0f be       	out	0x3f, r0	; 63
    4406:	cd bf       	out	0x3d, r28	; 61
	buzzer_beep();
    4408:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <buzzer_beep>
	path_direction = direction_calculator();
    440c:	0e 94 aa 1c 	call	0x3954	; 0x3954 <direction_calculator>
    4410:	80 93 02 02 	sts	0x0202, r24
	node_count++;
    4414:	80 91 24 02 	lds	r24, 0x0224
    4418:	90 91 25 02 	lds	r25, 0x0225
    441c:	01 96       	adiw	r24, 0x01	; 1
    441e:	90 93 25 02 	sts	0x0225, r25
    4422:	80 93 24 02 	sts	0x0224, r24
	if (node_count == 11 || node_count == 27 || (run==2 && node_count==28))
    4426:	80 91 24 02 	lds	r24, 0x0224
    442a:	90 91 25 02 	lds	r25, 0x0225
    442e:	8b 30       	cpi	r24, 0x0B	; 11
    4430:	91 05       	cpc	r25, r1
    4432:	a1 f0       	breq	.+40     	; 0x445c <node_detector+0x6c>
    4434:	80 91 24 02 	lds	r24, 0x0224
    4438:	90 91 25 02 	lds	r25, 0x0225
    443c:	8b 31       	cpi	r24, 0x1B	; 27
    443e:	91 05       	cpc	r25, r1
    4440:	69 f0       	breq	.+26     	; 0x445c <node_detector+0x6c>
    4442:	80 91 27 02 	lds	r24, 0x0227
    4446:	82 30       	cpi	r24, 0x02	; 2
    4448:	09 f0       	breq	.+2      	; 0x444c <node_detector+0x5c>
    444a:	8a c0       	rjmp	.+276    	; 0x4560 <node_detector+0x170>
    444c:	80 91 24 02 	lds	r24, 0x0224
    4450:	90 91 25 02 	lds	r25, 0x0225
    4454:	8c 31       	cpi	r24, 0x1C	; 28
    4456:	91 05       	cpc	r25, r1
    4458:	09 f0       	breq	.+2      	; 0x445c <node_detector+0x6c>
    445a:	82 c0       	rjmp	.+260    	; 0x4560 <node_detector+0x170>
	{
		stop_bot();
    445c:	0e 94 4a 12 	call	0x2494	; 0x2494 <stop_bot>
    4460:	80 e0       	ldi	r24, 0x00	; 0
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	aa ef       	ldi	r26, 0xFA	; 250
    4466:	b4 e4       	ldi	r27, 0x44	; 68
    4468:	8d 83       	std	Y+5, r24	; 0x05
    446a:	9e 83       	std	Y+6, r25	; 0x06
    446c:	af 83       	std	Y+7, r26	; 0x07
    446e:	b8 87       	std	Y+8, r27	; 0x08
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4470:	6d 81       	ldd	r22, Y+5	; 0x05
    4472:	7e 81       	ldd	r23, Y+6	; 0x06
    4474:	8f 81       	ldd	r24, Y+7	; 0x07
    4476:	98 85       	ldd	r25, Y+8	; 0x08
    4478:	26 e6       	ldi	r18, 0x66	; 102
    447a:	36 e6       	ldi	r19, 0x66	; 102
    447c:	46 e6       	ldi	r20, 0x66	; 102
    447e:	55 e4       	ldi	r21, 0x45	; 69
    4480:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    4484:	dc 01       	movw	r26, r24
    4486:	cb 01       	movw	r24, r22
    4488:	89 87       	std	Y+9, r24	; 0x09
    448a:	9a 87       	std	Y+10, r25	; 0x0a
    448c:	ab 87       	std	Y+11, r26	; 0x0b
    448e:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    4490:	11 e0       	ldi	r17, 0x01	; 1
    4492:	69 85       	ldd	r22, Y+9	; 0x09
    4494:	7a 85       	ldd	r23, Y+10	; 0x0a
    4496:	8b 85       	ldd	r24, Y+11	; 0x0b
    4498:	9c 85       	ldd	r25, Y+12	; 0x0c
    449a:	20 e0       	ldi	r18, 0x00	; 0
    449c:	30 e0       	ldi	r19, 0x00	; 0
    449e:	40 e8       	ldi	r20, 0x80	; 128
    44a0:	5f e3       	ldi	r21, 0x3F	; 63
    44a2:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    44a6:	88 23       	and	r24, r24
    44a8:	0c f0       	brlt	.+2      	; 0x44ac <node_detector+0xbc>
    44aa:	10 e0       	ldi	r17, 0x00	; 0
    44ac:	11 23       	and	r17, r17
    44ae:	29 f0       	breq	.+10     	; 0x44ba <node_detector+0xca>
		__ticks = 1;
    44b0:	81 e0       	ldi	r24, 0x01	; 1
    44b2:	90 e0       	ldi	r25, 0x00	; 0
    44b4:	9e 87       	std	Y+14, r25	; 0x0e
    44b6:	8d 87       	std	Y+13, r24	; 0x0d
    44b8:	46 c0       	rjmp	.+140    	; 0x4546 <node_detector+0x156>
	else if (__tmp > 65535)
    44ba:	11 e0       	ldi	r17, 0x01	; 1
    44bc:	69 85       	ldd	r22, Y+9	; 0x09
    44be:	7a 85       	ldd	r23, Y+10	; 0x0a
    44c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    44c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    44c4:	20 e0       	ldi	r18, 0x00	; 0
    44c6:	3f ef       	ldi	r19, 0xFF	; 255
    44c8:	4f e7       	ldi	r20, 0x7F	; 127
    44ca:	57 e4       	ldi	r21, 0x47	; 71
    44cc:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    44d0:	18 16       	cp	r1, r24
    44d2:	0c f0       	brlt	.+2      	; 0x44d6 <node_detector+0xe6>
    44d4:	10 e0       	ldi	r17, 0x00	; 0
    44d6:	11 23       	and	r17, r17
    44d8:	61 f1       	breq	.+88     	; 0x4532 <node_detector+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44da:	6d 81       	ldd	r22, Y+5	; 0x05
    44dc:	7e 81       	ldd	r23, Y+6	; 0x06
    44de:	8f 81       	ldd	r24, Y+7	; 0x07
    44e0:	98 85       	ldd	r25, Y+8	; 0x08
    44e2:	20 e0       	ldi	r18, 0x00	; 0
    44e4:	30 e0       	ldi	r19, 0x00	; 0
    44e6:	40 e2       	ldi	r20, 0x20	; 32
    44e8:	51 e4       	ldi	r21, 0x41	; 65
    44ea:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    44ee:	dc 01       	movw	r26, r24
    44f0:	cb 01       	movw	r24, r22
    44f2:	bc 01       	movw	r22, r24
    44f4:	cd 01       	movw	r24, r26
    44f6:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    44fa:	dc 01       	movw	r26, r24
    44fc:	cb 01       	movw	r24, r22
    44fe:	9e 87       	std	Y+14, r25	; 0x0e
    4500:	8d 87       	std	Y+13, r24	; 0x0d
    4502:	12 c0       	rjmp	.+36     	; 0x4528 <node_detector+0x138>
    4504:	80 e7       	ldi	r24, 0x70	; 112
    4506:	91 e0       	ldi	r25, 0x01	; 1
    4508:	98 8b       	std	Y+16, r25	; 0x10
    450a:	8f 87       	std	Y+15, r24	; 0x0f
    450c:	8f 85       	ldd	r24, Y+15	; 0x0f
    450e:	98 89       	ldd	r25, Y+16	; 0x10
    4510:	8c 01       	movw	r16, r24
    4512:	c8 01       	movw	r24, r16
    4514:	01 97       	sbiw	r24, 0x01	; 1
    4516:	f1 f7       	brne	.-4      	; 0x4514 <node_detector+0x124>
    4518:	8c 01       	movw	r16, r24
    451a:	18 8b       	std	Y+16, r17	; 0x10
    451c:	0f 87       	std	Y+15, r16	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    451e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4520:	9e 85       	ldd	r25, Y+14	; 0x0e
    4522:	01 97       	sbiw	r24, 0x01	; 1
    4524:	9e 87       	std	Y+14, r25	; 0x0e
    4526:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4528:	8d 85       	ldd	r24, Y+13	; 0x0d
    452a:	9e 85       	ldd	r25, Y+14	; 0x0e
    452c:	00 97       	sbiw	r24, 0x00	; 0
    452e:	51 f7       	brne	.-44     	; 0x4504 <node_detector+0x114>
    4530:	17 c0       	rjmp	.+46     	; 0x4560 <node_detector+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4532:	69 85       	ldd	r22, Y+9	; 0x09
    4534:	7a 85       	ldd	r23, Y+10	; 0x0a
    4536:	8b 85       	ldd	r24, Y+11	; 0x0b
    4538:	9c 85       	ldd	r25, Y+12	; 0x0c
    453a:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    453e:	dc 01       	movw	r26, r24
    4540:	cb 01       	movw	r24, r22
    4542:	9e 87       	std	Y+14, r25	; 0x0e
    4544:	8d 87       	std	Y+13, r24	; 0x0d
    4546:	8d 85       	ldd	r24, Y+13	; 0x0d
    4548:	9e 85       	ldd	r25, Y+14	; 0x0e
    454a:	9a 8b       	std	Y+18, r25	; 0x12
    454c:	89 8b       	std	Y+17, r24	; 0x11
    454e:	89 89       	ldd	r24, Y+17	; 0x11
    4550:	9a 89       	ldd	r25, Y+18	; 0x12
    4552:	8c 01       	movw	r16, r24
    4554:	f8 01       	movw	r30, r16
    4556:	31 97       	sbiw	r30, 0x01	; 1
    4558:	f1 f7       	brne	.-4      	; 0x4556 <node_detector+0x166>
    455a:	8f 01       	movw	r16, r30
    455c:	1a 8b       	std	Y+18, r17	; 0x12
    455e:	09 8b       	std	Y+17, r16	; 0x11
		_delay_ms(2000);
	}
	if (node_count > 1)
    4560:	80 91 24 02 	lds	r24, 0x0224
    4564:	90 91 25 02 	lds	r25, 0x0225
    4568:	82 30       	cpi	r24, 0x02	; 2
    456a:	91 05       	cpc	r25, r1
    456c:	10 f0       	brcs	.+4      	; 0x4572 <node_detector+0x182>
	{
		send_to_pc();
    456e:	0e 94 4f 24 	call	0x489e	; 0x489e <send_to_pc>
	}
	
	flag_left_object=0;
    4572:	10 92 32 02 	sts	0x0232, r1
	flag_right_object=0;
    4576:	10 92 33 02 	sts	0x0233, r1
	left_object_type='0';
    457a:	80 e3       	ldi	r24, 0x30	; 48
    457c:	90 e0       	ldi	r25, 0x00	; 0
    457e:	90 93 05 02 	sts	0x0205, r25
    4582:	80 93 04 02 	sts	0x0204, r24
	right_object_type='0';
    4586:	80 e3       	ldi	r24, 0x30	; 48
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	90 93 07 02 	sts	0x0207, r25
    458e:	80 93 06 02 	sts	0x0206, r24
	obstacle_found='0';
    4592:	80 e3       	ldi	r24, 0x30	; 48
    4594:	90 e0       	ldi	r25, 0x00	; 0
    4596:	90 93 09 02 	sts	0x0209, r25
    459a:	80 93 08 02 	sts	0x0208, r24
	pathL=0;
    459e:	10 92 34 02 	sts	0x0234, r1
	pathR=0;
    45a2:	10 92 35 02 	sts	0x0235, r1
	flag_Shape=0;
    45a6:	10 92 28 02 	sts	0x0228, r1
	shape_type='0';
    45aa:	80 e3       	ldi	r24, 0x30	; 48
    45ac:	80 93 03 02 	sts	0x0203, r24
	
	
	
	if((node_count == 36) && (run == 1))   //end of run=1,run=2 starts 
    45b0:	80 91 24 02 	lds	r24, 0x0224
    45b4:	90 91 25 02 	lds	r25, 0x0225
    45b8:	84 32       	cpi	r24, 0x24	; 36
    45ba:	91 05       	cpc	r25, r1
    45bc:	09 f0       	breq	.+2      	; 0x45c0 <node_detector+0x1d0>
    45be:	c6 c0       	rjmp	.+396    	; 0x474c <node_detector+0x35c>
    45c0:	80 91 27 02 	lds	r24, 0x0227
    45c4:	81 30       	cpi	r24, 0x01	; 1
    45c6:	09 f0       	breq	.+2      	; 0x45ca <node_detector+0x1da>
    45c8:	c1 c0       	rjmp	.+386    	; 0x474c <node_detector+0x35c>
	{
		stop_bot();
    45ca:	0e 94 4a 12 	call	0x2494	; 0x2494 <stop_bot>
    45ce:	80 e0       	ldi	r24, 0x00	; 0
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	aa ef       	ldi	r26, 0xFA	; 250
    45d4:	b4 e4       	ldi	r27, 0x44	; 68
    45d6:	8b 8b       	std	Y+19, r24	; 0x13
    45d8:	9c 8b       	std	Y+20, r25	; 0x14
    45da:	ad 8b       	std	Y+21, r26	; 0x15
    45dc:	be 8b       	std	Y+22, r27	; 0x16
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    45de:	6b 89       	ldd	r22, Y+19	; 0x13
    45e0:	7c 89       	ldd	r23, Y+20	; 0x14
    45e2:	8d 89       	ldd	r24, Y+21	; 0x15
    45e4:	9e 89       	ldd	r25, Y+22	; 0x16
    45e6:	26 e6       	ldi	r18, 0x66	; 102
    45e8:	36 e6       	ldi	r19, 0x66	; 102
    45ea:	46 e6       	ldi	r20, 0x66	; 102
    45ec:	55 e4       	ldi	r21, 0x45	; 69
    45ee:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    45f2:	dc 01       	movw	r26, r24
    45f4:	cb 01       	movw	r24, r22
    45f6:	8f 8b       	std	Y+23, r24	; 0x17
    45f8:	98 8f       	std	Y+24, r25	; 0x18
    45fa:	a9 8f       	std	Y+25, r26	; 0x19
    45fc:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
    45fe:	11 e0       	ldi	r17, 0x01	; 1
    4600:	6f 89       	ldd	r22, Y+23	; 0x17
    4602:	78 8d       	ldd	r23, Y+24	; 0x18
    4604:	89 8d       	ldd	r24, Y+25	; 0x19
    4606:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4608:	20 e0       	ldi	r18, 0x00	; 0
    460a:	30 e0       	ldi	r19, 0x00	; 0
    460c:	40 e8       	ldi	r20, 0x80	; 128
    460e:	5f e3       	ldi	r21, 0x3F	; 63
    4610:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    4614:	88 23       	and	r24, r24
    4616:	0c f0       	brlt	.+2      	; 0x461a <node_detector+0x22a>
    4618:	10 e0       	ldi	r17, 0x00	; 0
    461a:	11 23       	and	r17, r17
    461c:	29 f0       	breq	.+10     	; 0x4628 <node_detector+0x238>
		__ticks = 1;
    461e:	81 e0       	ldi	r24, 0x01	; 1
    4620:	90 e0       	ldi	r25, 0x00	; 0
    4622:	9c 8f       	std	Y+28, r25	; 0x1c
    4624:	8b 8f       	std	Y+27, r24	; 0x1b
    4626:	46 c0       	rjmp	.+140    	; 0x46b4 <node_detector+0x2c4>
	else if (__tmp > 65535)
    4628:	11 e0       	ldi	r17, 0x01	; 1
    462a:	6f 89       	ldd	r22, Y+23	; 0x17
    462c:	78 8d       	ldd	r23, Y+24	; 0x18
    462e:	89 8d       	ldd	r24, Y+25	; 0x19
    4630:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4632:	20 e0       	ldi	r18, 0x00	; 0
    4634:	3f ef       	ldi	r19, 0xFF	; 255
    4636:	4f e7       	ldi	r20, 0x7F	; 127
    4638:	57 e4       	ldi	r21, 0x47	; 71
    463a:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    463e:	18 16       	cp	r1, r24
    4640:	0c f0       	brlt	.+2      	; 0x4644 <node_detector+0x254>
    4642:	10 e0       	ldi	r17, 0x00	; 0
    4644:	11 23       	and	r17, r17
    4646:	61 f1       	breq	.+88     	; 0x46a0 <node_detector+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4648:	6b 89       	ldd	r22, Y+19	; 0x13
    464a:	7c 89       	ldd	r23, Y+20	; 0x14
    464c:	8d 89       	ldd	r24, Y+21	; 0x15
    464e:	9e 89       	ldd	r25, Y+22	; 0x16
    4650:	20 e0       	ldi	r18, 0x00	; 0
    4652:	30 e0       	ldi	r19, 0x00	; 0
    4654:	40 e2       	ldi	r20, 0x20	; 32
    4656:	51 e4       	ldi	r21, 0x41	; 65
    4658:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    465c:	dc 01       	movw	r26, r24
    465e:	cb 01       	movw	r24, r22
    4660:	bc 01       	movw	r22, r24
    4662:	cd 01       	movw	r24, r26
    4664:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    4668:	dc 01       	movw	r26, r24
    466a:	cb 01       	movw	r24, r22
    466c:	9c 8f       	std	Y+28, r25	; 0x1c
    466e:	8b 8f       	std	Y+27, r24	; 0x1b
    4670:	12 c0       	rjmp	.+36     	; 0x4696 <node_detector+0x2a6>
    4672:	80 e7       	ldi	r24, 0x70	; 112
    4674:	91 e0       	ldi	r25, 0x01	; 1
    4676:	9e 8f       	std	Y+30, r25	; 0x1e
    4678:	8d 8f       	std	Y+29, r24	; 0x1d
    467a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    467c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    467e:	8c 01       	movw	r16, r24
    4680:	c8 01       	movw	r24, r16
    4682:	01 97       	sbiw	r24, 0x01	; 1
    4684:	f1 f7       	brne	.-4      	; 0x4682 <node_detector+0x292>
    4686:	8c 01       	movw	r16, r24
    4688:	1e 8f       	std	Y+30, r17	; 0x1e
    468a:	0d 8f       	std	Y+29, r16	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    468c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    468e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4690:	01 97       	sbiw	r24, 0x01	; 1
    4692:	9c 8f       	std	Y+28, r25	; 0x1c
    4694:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4696:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4698:	9c 8d       	ldd	r25, Y+28	; 0x1c
    469a:	00 97       	sbiw	r24, 0x00	; 0
    469c:	51 f7       	brne	.-44     	; 0x4672 <node_detector+0x282>
    469e:	17 c0       	rjmp	.+46     	; 0x46ce <node_detector+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46a0:	6f 89       	ldd	r22, Y+23	; 0x17
    46a2:	78 8d       	ldd	r23, Y+24	; 0x18
    46a4:	89 8d       	ldd	r24, Y+25	; 0x19
    46a6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    46a8:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    46ac:	dc 01       	movw	r26, r24
    46ae:	cb 01       	movw	r24, r22
    46b0:	9c 8f       	std	Y+28, r25	; 0x1c
    46b2:	8b 8f       	std	Y+27, r24	; 0x1b
    46b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46b8:	98 a3       	lds	r25, 0x58
    46ba:	8f 8f       	std	Y+31, r24	; 0x1f
    46bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    46be:	98 a1       	lds	r25, 0x48
    46c0:	8c 01       	movw	r16, r24
    46c2:	f8 01       	movw	r30, r16
    46c4:	31 97       	sbiw	r30, 0x01	; 1
    46c6:	f1 f7       	brne	.-4      	; 0x46c4 <node_detector+0x2d4>
    46c8:	8f 01       	movw	r16, r30
    46ca:	18 a3       	lds	r17, 0x58
    46cc:	0f 8f       	std	Y+31, r16	; 0x1f
		_delay_ms(2000);
		right_turn();
    46ce:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <right_turn>
		buzzer_beep();
    46d2:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <buzzer_beep>
		run=2;
    46d6:	82 e0       	ldi	r24, 0x02	; 2
    46d8:	80 93 27 02 	sts	0x0227, r24
		node_count=1;
    46dc:	81 e0       	ldi	r24, 0x01	; 1
    46de:	90 e0       	ldi	r25, 0x00	; 0
    46e0:	90 93 25 02 	sts	0x0225, r25
    46e4:	80 93 24 02 	sts	0x0224, r24
		line_no=1;
    46e8:	81 e0       	ldi	r24, 0x01	; 1
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	90 93 01 02 	sts	0x0201, r25
    46f0:	80 93 00 02 	sts	0x0200, r24
		for (int i=0; i < 5; i++)
    46f4:	1a 82       	std	Y+2, r1	; 0x02
    46f6:	19 82       	std	Y+1, r1	; 0x01
    46f8:	23 c0       	rjmp	.+70     	; 0x4740 <node_detector+0x350>
		{
			for(int j=0; j < 5; j++)
    46fa:	1c 82       	std	Y+4, r1	; 0x04
    46fc:	1b 82       	std	Y+3, r1	; 0x03
    46fe:	16 c0       	rjmp	.+44     	; 0x472c <node_detector+0x33c>
			{
				obstacle_array[i][j]=0;
    4700:	29 81       	ldd	r18, Y+1	; 0x01
    4702:	3a 81       	ldd	r19, Y+2	; 0x02
    4704:	c9 01       	movw	r24, r18
    4706:	88 0f       	add	r24, r24
    4708:	99 1f       	adc	r25, r25
    470a:	88 0f       	add	r24, r24
    470c:	99 1f       	adc	r25, r25
    470e:	82 0f       	add	r24, r18
    4710:	93 1f       	adc	r25, r19
    4712:	2b 81       	ldd	r18, Y+3	; 0x03
    4714:	3c 81       	ldd	r19, Y+4	; 0x04
    4716:	82 0f       	add	r24, r18
    4718:	93 1f       	adc	r25, r19
    471a:	8a 59       	subi	r24, 0x9A	; 154
    471c:	9d 4f       	sbci	r25, 0xFD	; 253
    471e:	fc 01       	movw	r30, r24
    4720:	10 82       	st	Z, r1
		run=2;
		node_count=1;
		line_no=1;
		for (int i=0; i < 5; i++)
		{
			for(int j=0; j < 5; j++)
    4722:	8b 81       	ldd	r24, Y+3	; 0x03
    4724:	9c 81       	ldd	r25, Y+4	; 0x04
    4726:	01 96       	adiw	r24, 0x01	; 1
    4728:	9c 83       	std	Y+4, r25	; 0x04
    472a:	8b 83       	std	Y+3, r24	; 0x03
    472c:	8b 81       	ldd	r24, Y+3	; 0x03
    472e:	9c 81       	ldd	r25, Y+4	; 0x04
    4730:	85 30       	cpi	r24, 0x05	; 5
    4732:	91 05       	cpc	r25, r1
    4734:	2c f3       	brlt	.-54     	; 0x4700 <node_detector+0x310>
		right_turn();
		buzzer_beep();
		run=2;
		node_count=1;
		line_no=1;
		for (int i=0; i < 5; i++)
    4736:	89 81       	ldd	r24, Y+1	; 0x01
    4738:	9a 81       	ldd	r25, Y+2	; 0x02
    473a:	01 96       	adiw	r24, 0x01	; 1
    473c:	9a 83       	std	Y+2, r25	; 0x02
    473e:	89 83       	std	Y+1, r24	; 0x01
    4740:	89 81       	ldd	r24, Y+1	; 0x01
    4742:	9a 81       	ldd	r25, Y+2	; 0x02
    4744:	85 30       	cpi	r24, 0x05	; 5
    4746:	91 05       	cpc	r25, r1
    4748:	c4 f2       	brlt	.-80     	; 0x46fa <node_detector+0x30a>
    474a:	14 c0       	rjmp	.+40     	; 0x4774 <node_detector+0x384>
			{
				obstacle_array[i][j]=0;
			}
		}
    }
	else if((node_count == 36) && (run == 2))  //finished scanning the arena, turn on buzzer and stop permanently
    474c:	80 91 24 02 	lds	r24, 0x0224
    4750:	90 91 25 02 	lds	r25, 0x0225
    4754:	84 32       	cpi	r24, 0x24	; 36
    4756:	91 05       	cpc	r25, r1
    4758:	69 f4       	brne	.+26     	; 0x4774 <node_detector+0x384>
    475a:	80 91 27 02 	lds	r24, 0x0227
    475e:	82 30       	cpi	r24, 0x02	; 2
    4760:	49 f4       	brne	.+18     	; 0x4774 <node_detector+0x384>
	{
		velocity(0,0);
    4762:	80 e0       	ldi	r24, 0x00	; 0
    4764:	60 e0       	ldi	r22, 0x00	; 0
    4766:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <velocity>
		stop_bot();
    476a:	0e 94 4a 12 	call	0x2494	; 0x2494 <stop_bot>
		while(1)
		{
			buzzer_beep_long();
    476e:	0e 94 04 11 	call	0x2208	; 0x2208 <buzzer_beep_long>
		}
    4772:	fd cf       	rjmp	.-6      	; 0x476e <node_detector+0x37e>
		
	}
	
	quotient = node_count / 6;
    4774:	80 91 24 02 	lds	r24, 0x0224
    4778:	90 91 25 02 	lds	r25, 0x0225
    477c:	26 e0       	ldi	r18, 0x06	; 6
    477e:	30 e0       	ldi	r19, 0x00	; 0
    4780:	b9 01       	movw	r22, r18
    4782:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <__udivmodhi4>
    4786:	9b 01       	movw	r18, r22
    4788:	c9 01       	movw	r24, r18
    478a:	90 93 2e 02 	sts	0x022E, r25
    478e:	80 93 2d 02 	sts	0x022D, r24
	rmnder = node_count % 6;
    4792:	80 91 24 02 	lds	r24, 0x0224
    4796:	90 91 25 02 	lds	r25, 0x0225
    479a:	26 e0       	ldi	r18, 0x06	; 6
    479c:	30 e0       	ldi	r19, 0x00	; 0
    479e:	b9 01       	movw	r22, r18
    47a0:	0e 94 84 2f 	call	0x5f08	; 0x5f08 <__udivmodhi4>
    47a4:	90 93 30 02 	sts	0x0230, r25
    47a8:	80 93 2f 02 	sts	0x022F, r24
	
	if(quotient == 1 || quotient == 3 || quotient == 5)   //at end of north and begining of south direction
    47ac:	80 91 2d 02 	lds	r24, 0x022D
    47b0:	90 91 2e 02 	lds	r25, 0x022E
    47b4:	81 30       	cpi	r24, 0x01	; 1
    47b6:	91 05       	cpc	r25, r1
    47b8:	71 f0       	breq	.+28     	; 0x47d6 <node_detector+0x3e6>
    47ba:	80 91 2d 02 	lds	r24, 0x022D
    47be:	90 91 2e 02 	lds	r25, 0x022E
    47c2:	83 30       	cpi	r24, 0x03	; 3
    47c4:	91 05       	cpc	r25, r1
    47c6:	39 f0       	breq	.+14     	; 0x47d6 <node_detector+0x3e6>
    47c8:	80 91 2d 02 	lds	r24, 0x022D
    47cc:	90 91 2e 02 	lds	r25, 0x022E
    47d0:	85 30       	cpi	r24, 0x05	; 5
    47d2:	91 05       	cpc	r25, r1
    47d4:	31 f5       	brne	.+76     	; 0x4822 <node_detector+0x432>
	{
		if((rmnder == 0) || (rmnder == 1))
    47d6:	80 91 2f 02 	lds	r24, 0x022F
    47da:	90 91 30 02 	lds	r25, 0x0230
    47de:	00 97       	sbiw	r24, 0x00	; 0
    47e0:	39 f0       	breq	.+14     	; 0x47f0 <node_detector+0x400>
    47e2:	80 91 2f 02 	lds	r24, 0x022F
    47e6:	90 91 30 02 	lds	r25, 0x0230
    47ea:	81 30       	cpi	r24, 0x01	; 1
    47ec:	91 05       	cpc	r25, r1
    47ee:	41 f4       	brne	.+16     	; 0x4800 <node_detector+0x410>
		{
			right_turn();
    47f0:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <right_turn>
			pathL=18;
    47f4:	82 e1       	ldi	r24, 0x12	; 18
    47f6:	80 93 34 02 	sts	0x0234, r24
			pathR=18;
    47fa:	82 e1       	ldi	r24, 0x12	; 18
    47fc:	80 93 35 02 	sts	0x0235, r24
		}
		if(rmnder == 1)
    4800:	80 91 2f 02 	lds	r24, 0x022F
    4804:	90 91 30 02 	lds	r25, 0x0230
    4808:	81 30       	cpi	r24, 0x01	; 1
    480a:	91 05       	cpc	r25, r1
    480c:	e9 f5       	brne	.+122    	; 0x4888 <node_detector+0x498>
		{
			line_no++;
    480e:	80 91 00 02 	lds	r24, 0x0200
    4812:	90 91 01 02 	lds	r25, 0x0201
    4816:	01 96       	adiw	r24, 0x01	; 1
    4818:	90 93 01 02 	sts	0x0201, r25
    481c:	80 93 00 02 	sts	0x0200, r24
		{
			right_turn();
			pathL=18;
			pathR=18;
		}
		if(rmnder == 1)
    4820:	33 c0       	rjmp	.+102    	; 0x4888 <node_detector+0x498>
		{
			line_no++;
		}
	}
	
	else if(quotient == 2 || quotient == 4)          //at end of south and begining of north direction
    4822:	80 91 2d 02 	lds	r24, 0x022D
    4826:	90 91 2e 02 	lds	r25, 0x022E
    482a:	82 30       	cpi	r24, 0x02	; 2
    482c:	91 05       	cpc	r25, r1
    482e:	39 f0       	breq	.+14     	; 0x483e <node_detector+0x44e>
    4830:	80 91 2d 02 	lds	r24, 0x022D
    4834:	90 91 2e 02 	lds	r25, 0x022E
    4838:	84 30       	cpi	r24, 0x04	; 4
    483a:	91 05       	cpc	r25, r1
    483c:	29 f5       	brne	.+74     	; 0x4888 <node_detector+0x498>
	{
		if((rmnder == 0) || (rmnder == 1))
    483e:	80 91 2f 02 	lds	r24, 0x022F
    4842:	90 91 30 02 	lds	r25, 0x0230
    4846:	00 97       	sbiw	r24, 0x00	; 0
    4848:	39 f0       	breq	.+14     	; 0x4858 <node_detector+0x468>
    484a:	80 91 2f 02 	lds	r24, 0x022F
    484e:	90 91 30 02 	lds	r25, 0x0230
    4852:	81 30       	cpi	r24, 0x01	; 1
    4854:	91 05       	cpc	r25, r1
    4856:	41 f4       	brne	.+16     	; 0x4868 <node_detector+0x478>
		{
			left_turn();
    4858:	0e 94 0b 1c 	call	0x3816	; 0x3816 <left_turn>
			pathL=18;
    485c:	82 e1       	ldi	r24, 0x12	; 18
    485e:	80 93 34 02 	sts	0x0234, r24
			pathR=18;
    4862:	82 e1       	ldi	r24, 0x12	; 18
    4864:	80 93 35 02 	sts	0x0235, r24
			
		}
		if(rmnder == 1)
    4868:	80 91 2f 02 	lds	r24, 0x022F
    486c:	90 91 30 02 	lds	r25, 0x0230
    4870:	81 30       	cpi	r24, 0x01	; 1
    4872:	91 05       	cpc	r25, r1
    4874:	49 f4       	brne	.+18     	; 0x4888 <node_detector+0x498>
		{
			line_no++;
    4876:	80 91 00 02 	lds	r24, 0x0200
    487a:	90 91 01 02 	lds	r25, 0x0201
    487e:	01 96       	adiw	r24, 0x01	; 1
    4880:	90 93 01 02 	sts	0x0201, r25
    4884:	80 93 00 02 	sts	0x0200, r24
		}
	}
}
    4888:	a0 96       	adiw	r28, 0x20	; 32
    488a:	0f b6       	in	r0, 0x3f	; 63
    488c:	f8 94       	cli
    488e:	de bf       	out	0x3e, r29	; 62
    4890:	0f be       	out	0x3f, r0	; 63
    4892:	cd bf       	out	0x3d, r28	; 61
    4894:	df 91       	pop	r29
    4896:	cf 91       	pop	r28
    4898:	1f 91       	pop	r17
    489a:	0f 91       	pop	r16
    489c:	08 95       	ret

0000489e <send_to_pc>:

/************************************************************ Send to PC ************************************************************/

//function to send the data to pc using UART0
void send_to_pc()
{
    489e:	0f 93       	push	r16
    48a0:	1f 93       	push	r17
    48a2:	cf 93       	push	r28
    48a4:	df 93       	push	r29
    48a6:	cd b7       	in	r28, 0x3d	; 61
    48a8:	de b7       	in	r29, 0x3e	; 62
    48aa:	c4 55       	subi	r28, 0x54	; 84
    48ac:	d0 40       	sbci	r29, 0x00	; 0
    48ae:	0f b6       	in	r0, 0x3f	; 63
    48b0:	f8 94       	cli
    48b2:	de bf       	out	0x3e, r29	; 62
    48b4:	0f be       	out	0x3f, r0	; 63
    48b6:	cd bf       	out	0x3d, r28	; 61
	
	stop_bot();
    48b8:	0e 94 4a 12 	call	0x2494	; 0x2494 <stop_bot>
	velocity(0,0);
    48bc:	80 e0       	ldi	r24, 0x00	; 0
    48be:	60 e0       	ldi	r22, 0x00	; 0
    48c0:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <velocity>
	UDR0=path_direction;
    48c4:	86 ec       	ldi	r24, 0xC6	; 198
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	20 91 02 02 	lds	r18, 0x0202
    48cc:	fc 01       	movw	r30, r24
    48ce:	20 83       	st	Z, r18
    48d0:	80 e0       	ldi	r24, 0x00	; 0
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	a8 ec       	ldi	r26, 0xC8	; 200
    48d6:	b2 e4       	ldi	r27, 0x42	; 66
    48d8:	89 83       	std	Y+1, r24	; 0x01
    48da:	9a 83       	std	Y+2, r25	; 0x02
    48dc:	ab 83       	std	Y+3, r26	; 0x03
    48de:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    48e0:	69 81       	ldd	r22, Y+1	; 0x01
    48e2:	7a 81       	ldd	r23, Y+2	; 0x02
    48e4:	8b 81       	ldd	r24, Y+3	; 0x03
    48e6:	9c 81       	ldd	r25, Y+4	; 0x04
    48e8:	26 e6       	ldi	r18, 0x66	; 102
    48ea:	36 e6       	ldi	r19, 0x66	; 102
    48ec:	46 e6       	ldi	r20, 0x66	; 102
    48ee:	55 e4       	ldi	r21, 0x45	; 69
    48f0:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    48f4:	dc 01       	movw	r26, r24
    48f6:	cb 01       	movw	r24, r22
    48f8:	8d 83       	std	Y+5, r24	; 0x05
    48fa:	9e 83       	std	Y+6, r25	; 0x06
    48fc:	af 83       	std	Y+7, r26	; 0x07
    48fe:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4900:	11 e0       	ldi	r17, 0x01	; 1
    4902:	6d 81       	ldd	r22, Y+5	; 0x05
    4904:	7e 81       	ldd	r23, Y+6	; 0x06
    4906:	8f 81       	ldd	r24, Y+7	; 0x07
    4908:	98 85       	ldd	r25, Y+8	; 0x08
    490a:	20 e0       	ldi	r18, 0x00	; 0
    490c:	30 e0       	ldi	r19, 0x00	; 0
    490e:	40 e8       	ldi	r20, 0x80	; 128
    4910:	5f e3       	ldi	r21, 0x3F	; 63
    4912:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    4916:	88 23       	and	r24, r24
    4918:	0c f0       	brlt	.+2      	; 0x491c <send_to_pc+0x7e>
    491a:	10 e0       	ldi	r17, 0x00	; 0
    491c:	11 23       	and	r17, r17
    491e:	29 f0       	breq	.+10     	; 0x492a <send_to_pc+0x8c>
		__ticks = 1;
    4920:	81 e0       	ldi	r24, 0x01	; 1
    4922:	90 e0       	ldi	r25, 0x00	; 0
    4924:	9a 87       	std	Y+10, r25	; 0x0a
    4926:	89 87       	std	Y+9, r24	; 0x09
    4928:	46 c0       	rjmp	.+140    	; 0x49b6 <send_to_pc+0x118>
	else if (__tmp > 65535)
    492a:	11 e0       	ldi	r17, 0x01	; 1
    492c:	6d 81       	ldd	r22, Y+5	; 0x05
    492e:	7e 81       	ldd	r23, Y+6	; 0x06
    4930:	8f 81       	ldd	r24, Y+7	; 0x07
    4932:	98 85       	ldd	r25, Y+8	; 0x08
    4934:	20 e0       	ldi	r18, 0x00	; 0
    4936:	3f ef       	ldi	r19, 0xFF	; 255
    4938:	4f e7       	ldi	r20, 0x7F	; 127
    493a:	57 e4       	ldi	r21, 0x47	; 71
    493c:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    4940:	18 16       	cp	r1, r24
    4942:	0c f0       	brlt	.+2      	; 0x4946 <send_to_pc+0xa8>
    4944:	10 e0       	ldi	r17, 0x00	; 0
    4946:	11 23       	and	r17, r17
    4948:	61 f1       	breq	.+88     	; 0x49a2 <send_to_pc+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    494a:	69 81       	ldd	r22, Y+1	; 0x01
    494c:	7a 81       	ldd	r23, Y+2	; 0x02
    494e:	8b 81       	ldd	r24, Y+3	; 0x03
    4950:	9c 81       	ldd	r25, Y+4	; 0x04
    4952:	20 e0       	ldi	r18, 0x00	; 0
    4954:	30 e0       	ldi	r19, 0x00	; 0
    4956:	40 e2       	ldi	r20, 0x20	; 32
    4958:	51 e4       	ldi	r21, 0x41	; 65
    495a:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    495e:	dc 01       	movw	r26, r24
    4960:	cb 01       	movw	r24, r22
    4962:	bc 01       	movw	r22, r24
    4964:	cd 01       	movw	r24, r26
    4966:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    496a:	dc 01       	movw	r26, r24
    496c:	cb 01       	movw	r24, r22
    496e:	9a 87       	std	Y+10, r25	; 0x0a
    4970:	89 87       	std	Y+9, r24	; 0x09
    4972:	12 c0       	rjmp	.+36     	; 0x4998 <send_to_pc+0xfa>
    4974:	80 e7       	ldi	r24, 0x70	; 112
    4976:	91 e0       	ldi	r25, 0x01	; 1
    4978:	9c 87       	std	Y+12, r25	; 0x0c
    497a:	8b 87       	std	Y+11, r24	; 0x0b
    497c:	8b 85       	ldd	r24, Y+11	; 0x0b
    497e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4980:	8c 01       	movw	r16, r24
    4982:	c8 01       	movw	r24, r16
    4984:	01 97       	sbiw	r24, 0x01	; 1
    4986:	f1 f7       	brne	.-4      	; 0x4984 <send_to_pc+0xe6>
    4988:	8c 01       	movw	r16, r24
    498a:	1c 87       	std	Y+12, r17	; 0x0c
    498c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    498e:	89 85       	ldd	r24, Y+9	; 0x09
    4990:	9a 85       	ldd	r25, Y+10	; 0x0a
    4992:	01 97       	sbiw	r24, 0x01	; 1
    4994:	9a 87       	std	Y+10, r25	; 0x0a
    4996:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4998:	89 85       	ldd	r24, Y+9	; 0x09
    499a:	9a 85       	ldd	r25, Y+10	; 0x0a
    499c:	00 97       	sbiw	r24, 0x00	; 0
    499e:	51 f7       	brne	.-44     	; 0x4974 <send_to_pc+0xd6>
    49a0:	17 c0       	rjmp	.+46     	; 0x49d0 <send_to_pc+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49a2:	6d 81       	ldd	r22, Y+5	; 0x05
    49a4:	7e 81       	ldd	r23, Y+6	; 0x06
    49a6:	8f 81       	ldd	r24, Y+7	; 0x07
    49a8:	98 85       	ldd	r25, Y+8	; 0x08
    49aa:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    49ae:	dc 01       	movw	r26, r24
    49b0:	cb 01       	movw	r24, r22
    49b2:	9a 87       	std	Y+10, r25	; 0x0a
    49b4:	89 87       	std	Y+9, r24	; 0x09
    49b6:	89 85       	ldd	r24, Y+9	; 0x09
    49b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    49ba:	9e 87       	std	Y+14, r25	; 0x0e
    49bc:	8d 87       	std	Y+13, r24	; 0x0d
    49be:	8d 85       	ldd	r24, Y+13	; 0x0d
    49c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    49c2:	8c 01       	movw	r16, r24
    49c4:	f8 01       	movw	r30, r16
    49c6:	31 97       	sbiw	r30, 0x01	; 1
    49c8:	f1 f7       	brne	.-4      	; 0x49c6 <send_to_pc+0x128>
    49ca:	8f 01       	movw	r16, r30
    49cc:	1e 87       	std	Y+14, r17	; 0x0e
    49ce:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(100);
	UDR0=obstacle_found;
    49d0:	86 ec       	ldi	r24, 0xC6	; 198
    49d2:	90 e0       	ldi	r25, 0x00	; 0
    49d4:	20 91 08 02 	lds	r18, 0x0208
    49d8:	30 91 09 02 	lds	r19, 0x0209
    49dc:	fc 01       	movw	r30, r24
    49de:	20 83       	st	Z, r18
    49e0:	80 e0       	ldi	r24, 0x00	; 0
    49e2:	90 e0       	ldi	r25, 0x00	; 0
    49e4:	a8 ec       	ldi	r26, 0xC8	; 200
    49e6:	b2 e4       	ldi	r27, 0x42	; 66
    49e8:	8f 87       	std	Y+15, r24	; 0x0f
    49ea:	98 8b       	std	Y+16, r25	; 0x10
    49ec:	a9 8b       	std	Y+17, r26	; 0x11
    49ee:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    49f0:	6f 85       	ldd	r22, Y+15	; 0x0f
    49f2:	78 89       	ldd	r23, Y+16	; 0x10
    49f4:	89 89       	ldd	r24, Y+17	; 0x11
    49f6:	9a 89       	ldd	r25, Y+18	; 0x12
    49f8:	26 e6       	ldi	r18, 0x66	; 102
    49fa:	36 e6       	ldi	r19, 0x66	; 102
    49fc:	46 e6       	ldi	r20, 0x66	; 102
    49fe:	55 e4       	ldi	r21, 0x45	; 69
    4a00:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    4a04:	dc 01       	movw	r26, r24
    4a06:	cb 01       	movw	r24, r22
    4a08:	8b 8b       	std	Y+19, r24	; 0x13
    4a0a:	9c 8b       	std	Y+20, r25	; 0x14
    4a0c:	ad 8b       	std	Y+21, r26	; 0x15
    4a0e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    4a10:	11 e0       	ldi	r17, 0x01	; 1
    4a12:	6b 89       	ldd	r22, Y+19	; 0x13
    4a14:	7c 89       	ldd	r23, Y+20	; 0x14
    4a16:	8d 89       	ldd	r24, Y+21	; 0x15
    4a18:	9e 89       	ldd	r25, Y+22	; 0x16
    4a1a:	20 e0       	ldi	r18, 0x00	; 0
    4a1c:	30 e0       	ldi	r19, 0x00	; 0
    4a1e:	40 e8       	ldi	r20, 0x80	; 128
    4a20:	5f e3       	ldi	r21, 0x3F	; 63
    4a22:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    4a26:	88 23       	and	r24, r24
    4a28:	0c f0       	brlt	.+2      	; 0x4a2c <send_to_pc+0x18e>
    4a2a:	10 e0       	ldi	r17, 0x00	; 0
    4a2c:	11 23       	and	r17, r17
    4a2e:	29 f0       	breq	.+10     	; 0x4a3a <send_to_pc+0x19c>
		__ticks = 1;
    4a30:	81 e0       	ldi	r24, 0x01	; 1
    4a32:	90 e0       	ldi	r25, 0x00	; 0
    4a34:	98 8f       	std	Y+24, r25	; 0x18
    4a36:	8f 8b       	std	Y+23, r24	; 0x17
    4a38:	46 c0       	rjmp	.+140    	; 0x4ac6 <send_to_pc+0x228>
	else if (__tmp > 65535)
    4a3a:	11 e0       	ldi	r17, 0x01	; 1
    4a3c:	6b 89       	ldd	r22, Y+19	; 0x13
    4a3e:	7c 89       	ldd	r23, Y+20	; 0x14
    4a40:	8d 89       	ldd	r24, Y+21	; 0x15
    4a42:	9e 89       	ldd	r25, Y+22	; 0x16
    4a44:	20 e0       	ldi	r18, 0x00	; 0
    4a46:	3f ef       	ldi	r19, 0xFF	; 255
    4a48:	4f e7       	ldi	r20, 0x7F	; 127
    4a4a:	57 e4       	ldi	r21, 0x47	; 71
    4a4c:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    4a50:	18 16       	cp	r1, r24
    4a52:	0c f0       	brlt	.+2      	; 0x4a56 <send_to_pc+0x1b8>
    4a54:	10 e0       	ldi	r17, 0x00	; 0
    4a56:	11 23       	and	r17, r17
    4a58:	61 f1       	breq	.+88     	; 0x4ab2 <send_to_pc+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a5a:	6f 85       	ldd	r22, Y+15	; 0x0f
    4a5c:	78 89       	ldd	r23, Y+16	; 0x10
    4a5e:	89 89       	ldd	r24, Y+17	; 0x11
    4a60:	9a 89       	ldd	r25, Y+18	; 0x12
    4a62:	20 e0       	ldi	r18, 0x00	; 0
    4a64:	30 e0       	ldi	r19, 0x00	; 0
    4a66:	40 e2       	ldi	r20, 0x20	; 32
    4a68:	51 e4       	ldi	r21, 0x41	; 65
    4a6a:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    4a6e:	dc 01       	movw	r26, r24
    4a70:	cb 01       	movw	r24, r22
    4a72:	bc 01       	movw	r22, r24
    4a74:	cd 01       	movw	r24, r26
    4a76:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    4a7a:	dc 01       	movw	r26, r24
    4a7c:	cb 01       	movw	r24, r22
    4a7e:	98 8f       	std	Y+24, r25	; 0x18
    4a80:	8f 8b       	std	Y+23, r24	; 0x17
    4a82:	12 c0       	rjmp	.+36     	; 0x4aa8 <send_to_pc+0x20a>
    4a84:	80 e7       	ldi	r24, 0x70	; 112
    4a86:	91 e0       	ldi	r25, 0x01	; 1
    4a88:	9a 8f       	std	Y+26, r25	; 0x1a
    4a8a:	89 8f       	std	Y+25, r24	; 0x19
    4a8c:	89 8d       	ldd	r24, Y+25	; 0x19
    4a8e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4a90:	8c 01       	movw	r16, r24
    4a92:	c8 01       	movw	r24, r16
    4a94:	01 97       	sbiw	r24, 0x01	; 1
    4a96:	f1 f7       	brne	.-4      	; 0x4a94 <send_to_pc+0x1f6>
    4a98:	8c 01       	movw	r16, r24
    4a9a:	1a 8f       	std	Y+26, r17	; 0x1a
    4a9c:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a9e:	8f 89       	ldd	r24, Y+23	; 0x17
    4aa0:	98 8d       	ldd	r25, Y+24	; 0x18
    4aa2:	01 97       	sbiw	r24, 0x01	; 1
    4aa4:	98 8f       	std	Y+24, r25	; 0x18
    4aa6:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aa8:	8f 89       	ldd	r24, Y+23	; 0x17
    4aaa:	98 8d       	ldd	r25, Y+24	; 0x18
    4aac:	00 97       	sbiw	r24, 0x00	; 0
    4aae:	51 f7       	brne	.-44     	; 0x4a84 <send_to_pc+0x1e6>
    4ab0:	17 c0       	rjmp	.+46     	; 0x4ae0 <send_to_pc+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ab2:	6b 89       	ldd	r22, Y+19	; 0x13
    4ab4:	7c 89       	ldd	r23, Y+20	; 0x14
    4ab6:	8d 89       	ldd	r24, Y+21	; 0x15
    4ab8:	9e 89       	ldd	r25, Y+22	; 0x16
    4aba:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    4abe:	dc 01       	movw	r26, r24
    4ac0:	cb 01       	movw	r24, r22
    4ac2:	98 8f       	std	Y+24, r25	; 0x18
    4ac4:	8f 8b       	std	Y+23, r24	; 0x17
    4ac6:	8f 89       	ldd	r24, Y+23	; 0x17
    4ac8:	98 8d       	ldd	r25, Y+24	; 0x18
    4aca:	9c 8f       	std	Y+28, r25	; 0x1c
    4acc:	8b 8f       	std	Y+27, r24	; 0x1b
    4ace:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ad0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ad2:	8c 01       	movw	r16, r24
    4ad4:	f8 01       	movw	r30, r16
    4ad6:	31 97       	sbiw	r30, 0x01	; 1
    4ad8:	f1 f7       	brne	.-4      	; 0x4ad6 <send_to_pc+0x238>
    4ada:	8f 01       	movw	r16, r30
    4adc:	1c 8f       	std	Y+28, r17	; 0x1c
    4ade:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(100);
	UDR0=left_object_type;
    4ae0:	86 ec       	ldi	r24, 0xC6	; 198
    4ae2:	90 e0       	ldi	r25, 0x00	; 0
    4ae4:	20 91 04 02 	lds	r18, 0x0204
    4ae8:	30 91 05 02 	lds	r19, 0x0205
    4aec:	fc 01       	movw	r30, r24
    4aee:	20 83       	st	Z, r18
    4af0:	80 e0       	ldi	r24, 0x00	; 0
    4af2:	90 e0       	ldi	r25, 0x00	; 0
    4af4:	a8 ec       	ldi	r26, 0xC8	; 200
    4af6:	b2 e4       	ldi	r27, 0x42	; 66
    4af8:	8d 8f       	std	Y+29, r24	; 0x1d
    4afa:	9e 8f       	std	Y+30, r25	; 0x1e
    4afc:	af 8f       	std	Y+31, r26	; 0x1f
    4afe:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4b00:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4b02:	7e 8d       	ldd	r23, Y+30	; 0x1e
    4b04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4b06:	98 a1       	lds	r25, 0x48
    4b08:	26 e6       	ldi	r18, 0x66	; 102
    4b0a:	36 e6       	ldi	r19, 0x66	; 102
    4b0c:	46 e6       	ldi	r20, 0x66	; 102
    4b0e:	55 e4       	ldi	r21, 0x45	; 69
    4b10:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    4b14:	dc 01       	movw	r26, r24
    4b16:	cb 01       	movw	r24, r22
    4b18:	89 a3       	lds	r24, 0x59
    4b1a:	9a a3       	lds	r25, 0x5a
    4b1c:	ab a3       	lds	r26, 0x5b
    4b1e:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    4b20:	11 e0       	ldi	r17, 0x01	; 1
    4b22:	69 a1       	lds	r22, 0x49
    4b24:	7a a1       	lds	r23, 0x4a
    4b26:	8b a1       	lds	r24, 0x4b
    4b28:	9c a1       	lds	r25, 0x4c
    4b2a:	20 e0       	ldi	r18, 0x00	; 0
    4b2c:	30 e0       	ldi	r19, 0x00	; 0
    4b2e:	40 e8       	ldi	r20, 0x80	; 128
    4b30:	5f e3       	ldi	r21, 0x3F	; 63
    4b32:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    4b36:	88 23       	and	r24, r24
    4b38:	0c f0       	brlt	.+2      	; 0x4b3c <send_to_pc+0x29e>
    4b3a:	10 e0       	ldi	r17, 0x00	; 0
    4b3c:	11 23       	and	r17, r17
    4b3e:	29 f0       	breq	.+10     	; 0x4b4a <send_to_pc+0x2ac>
		__ticks = 1;
    4b40:	81 e0       	ldi	r24, 0x01	; 1
    4b42:	90 e0       	ldi	r25, 0x00	; 0
    4b44:	9e a3       	lds	r25, 0x5e
    4b46:	8d a3       	lds	r24, 0x5d
    4b48:	46 c0       	rjmp	.+140    	; 0x4bd6 <send_to_pc+0x338>
	else if (__tmp > 65535)
    4b4a:	11 e0       	ldi	r17, 0x01	; 1
    4b4c:	69 a1       	lds	r22, 0x49
    4b4e:	7a a1       	lds	r23, 0x4a
    4b50:	8b a1       	lds	r24, 0x4b
    4b52:	9c a1       	lds	r25, 0x4c
    4b54:	20 e0       	ldi	r18, 0x00	; 0
    4b56:	3f ef       	ldi	r19, 0xFF	; 255
    4b58:	4f e7       	ldi	r20, 0x7F	; 127
    4b5a:	57 e4       	ldi	r21, 0x47	; 71
    4b5c:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    4b60:	18 16       	cp	r1, r24
    4b62:	0c f0       	brlt	.+2      	; 0x4b66 <send_to_pc+0x2c8>
    4b64:	10 e0       	ldi	r17, 0x00	; 0
    4b66:	11 23       	and	r17, r17
    4b68:	61 f1       	breq	.+88     	; 0x4bc2 <send_to_pc+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b6a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4b6c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    4b6e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4b70:	98 a1       	lds	r25, 0x48
    4b72:	20 e0       	ldi	r18, 0x00	; 0
    4b74:	30 e0       	ldi	r19, 0x00	; 0
    4b76:	40 e2       	ldi	r20, 0x20	; 32
    4b78:	51 e4       	ldi	r21, 0x41	; 65
    4b7a:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    4b7e:	dc 01       	movw	r26, r24
    4b80:	cb 01       	movw	r24, r22
    4b82:	bc 01       	movw	r22, r24
    4b84:	cd 01       	movw	r24, r26
    4b86:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    4b8a:	dc 01       	movw	r26, r24
    4b8c:	cb 01       	movw	r24, r22
    4b8e:	9e a3       	lds	r25, 0x5e
    4b90:	8d a3       	lds	r24, 0x5d
    4b92:	12 c0       	rjmp	.+36     	; 0x4bb8 <send_to_pc+0x31a>
    4b94:	80 e7       	ldi	r24, 0x70	; 112
    4b96:	91 e0       	ldi	r25, 0x01	; 1
    4b98:	98 a7       	lds	r25, 0x78
    4b9a:	8f a3       	lds	r24, 0x5f
    4b9c:	8f a1       	lds	r24, 0x4f
    4b9e:	98 a5       	lds	r25, 0x68
    4ba0:	8c 01       	movw	r16, r24
    4ba2:	c8 01       	movw	r24, r16
    4ba4:	01 97       	sbiw	r24, 0x01	; 1
    4ba6:	f1 f7       	brne	.-4      	; 0x4ba4 <send_to_pc+0x306>
    4ba8:	8c 01       	movw	r16, r24
    4baa:	18 a7       	lds	r17, 0x78
    4bac:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bae:	8d a1       	lds	r24, 0x4d
    4bb0:	9e a1       	lds	r25, 0x4e
    4bb2:	01 97       	sbiw	r24, 0x01	; 1
    4bb4:	9e a3       	lds	r25, 0x5e
    4bb6:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bb8:	8d a1       	lds	r24, 0x4d
    4bba:	9e a1       	lds	r25, 0x4e
    4bbc:	00 97       	sbiw	r24, 0x00	; 0
    4bbe:	51 f7       	brne	.-44     	; 0x4b94 <send_to_pc+0x2f6>
    4bc0:	17 c0       	rjmp	.+46     	; 0x4bf0 <send_to_pc+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bc2:	69 a1       	lds	r22, 0x49
    4bc4:	7a a1       	lds	r23, 0x4a
    4bc6:	8b a1       	lds	r24, 0x4b
    4bc8:	9c a1       	lds	r25, 0x4c
    4bca:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    4bce:	dc 01       	movw	r26, r24
    4bd0:	cb 01       	movw	r24, r22
    4bd2:	9e a3       	lds	r25, 0x5e
    4bd4:	8d a3       	lds	r24, 0x5d
    4bd6:	8d a1       	lds	r24, 0x4d
    4bd8:	9e a1       	lds	r25, 0x4e
    4bda:	9a a7       	lds	r25, 0x7a
    4bdc:	89 a7       	lds	r24, 0x79
    4bde:	89 a5       	lds	r24, 0x69
    4be0:	9a a5       	lds	r25, 0x6a
    4be2:	8c 01       	movw	r16, r24
    4be4:	f8 01       	movw	r30, r16
    4be6:	31 97       	sbiw	r30, 0x01	; 1
    4be8:	f1 f7       	brne	.-4      	; 0x4be6 <send_to_pc+0x348>
    4bea:	8f 01       	movw	r16, r30
    4bec:	1a a7       	lds	r17, 0x7a
    4bee:	09 a7       	lds	r16, 0x79
	_delay_ms(100);
	UDR0=right_object_type;
    4bf0:	86 ec       	ldi	r24, 0xC6	; 198
    4bf2:	90 e0       	ldi	r25, 0x00	; 0
    4bf4:	20 91 06 02 	lds	r18, 0x0206
    4bf8:	30 91 07 02 	lds	r19, 0x0207
    4bfc:	fc 01       	movw	r30, r24
    4bfe:	20 83       	st	Z, r18
    4c00:	80 e0       	ldi	r24, 0x00	; 0
    4c02:	90 e0       	ldi	r25, 0x00	; 0
    4c04:	a8 ec       	ldi	r26, 0xC8	; 200
    4c06:	b2 e4       	ldi	r27, 0x42	; 66
    4c08:	8b a7       	lds	r24, 0x7b
    4c0a:	9c a7       	lds	r25, 0x7c
    4c0c:	ad a7       	lds	r26, 0x7d
    4c0e:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4c10:	6b a5       	lds	r22, 0x6b
    4c12:	7c a5       	lds	r23, 0x6c
    4c14:	8d a5       	lds	r24, 0x6d
    4c16:	9e a5       	lds	r25, 0x6e
    4c18:	26 e6       	ldi	r18, 0x66	; 102
    4c1a:	36 e6       	ldi	r19, 0x66	; 102
    4c1c:	46 e6       	ldi	r20, 0x66	; 102
    4c1e:	55 e4       	ldi	r21, 0x45	; 69
    4c20:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    4c24:	dc 01       	movw	r26, r24
    4c26:	cb 01       	movw	r24, r22
    4c28:	8f a7       	lds	r24, 0x7f
    4c2a:	98 ab       	sts	0x58, r25
    4c2c:	a9 ab       	sts	0x59, r26
    4c2e:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    4c30:	11 e0       	ldi	r17, 0x01	; 1
    4c32:	6f a5       	lds	r22, 0x6f
    4c34:	78 a9       	sts	0x48, r23
    4c36:	89 a9       	sts	0x49, r24
    4c38:	9a a9       	sts	0x4a, r25
    4c3a:	20 e0       	ldi	r18, 0x00	; 0
    4c3c:	30 e0       	ldi	r19, 0x00	; 0
    4c3e:	40 e8       	ldi	r20, 0x80	; 128
    4c40:	5f e3       	ldi	r21, 0x3F	; 63
    4c42:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    4c46:	88 23       	and	r24, r24
    4c48:	0c f0       	brlt	.+2      	; 0x4c4c <send_to_pc+0x3ae>
    4c4a:	10 e0       	ldi	r17, 0x00	; 0
    4c4c:	11 23       	and	r17, r17
    4c4e:	29 f0       	breq	.+10     	; 0x4c5a <send_to_pc+0x3bc>
		__ticks = 1;
    4c50:	81 e0       	ldi	r24, 0x01	; 1
    4c52:	90 e0       	ldi	r25, 0x00	; 0
    4c54:	9c ab       	sts	0x5c, r25
    4c56:	8b ab       	sts	0x5b, r24
    4c58:	46 c0       	rjmp	.+140    	; 0x4ce6 <send_to_pc+0x448>
	else if (__tmp > 65535)
    4c5a:	11 e0       	ldi	r17, 0x01	; 1
    4c5c:	6f a5       	lds	r22, 0x6f
    4c5e:	78 a9       	sts	0x48, r23
    4c60:	89 a9       	sts	0x49, r24
    4c62:	9a a9       	sts	0x4a, r25
    4c64:	20 e0       	ldi	r18, 0x00	; 0
    4c66:	3f ef       	ldi	r19, 0xFF	; 255
    4c68:	4f e7       	ldi	r20, 0x7F	; 127
    4c6a:	57 e4       	ldi	r21, 0x47	; 71
    4c6c:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    4c70:	18 16       	cp	r1, r24
    4c72:	0c f0       	brlt	.+2      	; 0x4c76 <send_to_pc+0x3d8>
    4c74:	10 e0       	ldi	r17, 0x00	; 0
    4c76:	11 23       	and	r17, r17
    4c78:	61 f1       	breq	.+88     	; 0x4cd2 <send_to_pc+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c7a:	6b a5       	lds	r22, 0x6b
    4c7c:	7c a5       	lds	r23, 0x6c
    4c7e:	8d a5       	lds	r24, 0x6d
    4c80:	9e a5       	lds	r25, 0x6e
    4c82:	20 e0       	ldi	r18, 0x00	; 0
    4c84:	30 e0       	ldi	r19, 0x00	; 0
    4c86:	40 e2       	ldi	r20, 0x20	; 32
    4c88:	51 e4       	ldi	r21, 0x41	; 65
    4c8a:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    4c8e:	dc 01       	movw	r26, r24
    4c90:	cb 01       	movw	r24, r22
    4c92:	bc 01       	movw	r22, r24
    4c94:	cd 01       	movw	r24, r26
    4c96:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    4c9a:	dc 01       	movw	r26, r24
    4c9c:	cb 01       	movw	r24, r22
    4c9e:	9c ab       	sts	0x5c, r25
    4ca0:	8b ab       	sts	0x5b, r24
    4ca2:	12 c0       	rjmp	.+36     	; 0x4cc8 <send_to_pc+0x42a>
    4ca4:	80 e7       	ldi	r24, 0x70	; 112
    4ca6:	91 e0       	ldi	r25, 0x01	; 1
    4ca8:	9e ab       	sts	0x5e, r25
    4caa:	8d ab       	sts	0x5d, r24
    4cac:	8d a9       	sts	0x4d, r24
    4cae:	9e a9       	sts	0x4e, r25
    4cb0:	8c 01       	movw	r16, r24
    4cb2:	c8 01       	movw	r24, r16
    4cb4:	01 97       	sbiw	r24, 0x01	; 1
    4cb6:	f1 f7       	brne	.-4      	; 0x4cb4 <send_to_pc+0x416>
    4cb8:	8c 01       	movw	r16, r24
    4cba:	1e ab       	sts	0x5e, r17
    4cbc:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cbe:	8b a9       	sts	0x4b, r24
    4cc0:	9c a9       	sts	0x4c, r25
    4cc2:	01 97       	sbiw	r24, 0x01	; 1
    4cc4:	9c ab       	sts	0x5c, r25
    4cc6:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cc8:	8b a9       	sts	0x4b, r24
    4cca:	9c a9       	sts	0x4c, r25
    4ccc:	00 97       	sbiw	r24, 0x00	; 0
    4cce:	51 f7       	brne	.-44     	; 0x4ca4 <send_to_pc+0x406>
    4cd0:	17 c0       	rjmp	.+46     	; 0x4d00 <send_to_pc+0x462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cd2:	6f a5       	lds	r22, 0x6f
    4cd4:	78 a9       	sts	0x48, r23
    4cd6:	89 a9       	sts	0x49, r24
    4cd8:	9a a9       	sts	0x4a, r25
    4cda:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    4cde:	dc 01       	movw	r26, r24
    4ce0:	cb 01       	movw	r24, r22
    4ce2:	9c ab       	sts	0x5c, r25
    4ce4:	8b ab       	sts	0x5b, r24
    4ce6:	8b a9       	sts	0x4b, r24
    4ce8:	9c a9       	sts	0x4c, r25
    4cea:	98 af       	sts	0x78, r25
    4cec:	8f ab       	sts	0x5f, r24
    4cee:	8f a9       	sts	0x4f, r24
    4cf0:	98 ad       	sts	0x68, r25
    4cf2:	8c 01       	movw	r16, r24
    4cf4:	f8 01       	movw	r30, r16
    4cf6:	31 97       	sbiw	r30, 0x01	; 1
    4cf8:	f1 f7       	brne	.-4      	; 0x4cf6 <send_to_pc+0x458>
    4cfa:	8f 01       	movw	r16, r30
    4cfc:	18 af       	sts	0x78, r17
    4cfe:	0f ab       	sts	0x5f, r16
	_delay_ms(100);
	UDR0=shape_type;
    4d00:	86 ec       	ldi	r24, 0xC6	; 198
    4d02:	90 e0       	ldi	r25, 0x00	; 0
    4d04:	20 91 03 02 	lds	r18, 0x0203
    4d08:	fc 01       	movw	r30, r24
    4d0a:	20 83       	st	Z, r18
    4d0c:	80 e0       	ldi	r24, 0x00	; 0
    4d0e:	90 e0       	ldi	r25, 0x00	; 0
    4d10:	a8 ec       	ldi	r26, 0xC8	; 200
    4d12:	b2 e4       	ldi	r27, 0x42	; 66
    4d14:	89 af       	sts	0x79, r24
    4d16:	9a af       	sts	0x7a, r25
    4d18:	ab af       	sts	0x7b, r26
    4d1a:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4d1c:	69 ad       	sts	0x69, r22
    4d1e:	7a ad       	sts	0x6a, r23
    4d20:	8b ad       	sts	0x6b, r24
    4d22:	9c ad       	sts	0x6c, r25
    4d24:	26 e6       	ldi	r18, 0x66	; 102
    4d26:	36 e6       	ldi	r19, 0x66	; 102
    4d28:	46 e6       	ldi	r20, 0x66	; 102
    4d2a:	55 e4       	ldi	r21, 0x45	; 69
    4d2c:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    4d30:	dc 01       	movw	r26, r24
    4d32:	cb 01       	movw	r24, r22
    4d34:	9e 01       	movw	r18, r28
    4d36:	23 5c       	subi	r18, 0xC3	; 195
    4d38:	3f 4f       	sbci	r19, 0xFF	; 255
    4d3a:	f9 01       	movw	r30, r18
    4d3c:	80 83       	st	Z, r24
    4d3e:	91 83       	std	Z+1, r25	; 0x01
    4d40:	a2 83       	std	Z+2, r26	; 0x02
    4d42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d44:	11 e0       	ldi	r17, 0x01	; 1
    4d46:	ce 01       	movw	r24, r28
    4d48:	cd 96       	adiw	r24, 0x3d	; 61
    4d4a:	fc 01       	movw	r30, r24
    4d4c:	60 81       	ld	r22, Z
    4d4e:	71 81       	ldd	r23, Z+1	; 0x01
    4d50:	82 81       	ldd	r24, Z+2	; 0x02
    4d52:	93 81       	ldd	r25, Z+3	; 0x03
    4d54:	20 e0       	ldi	r18, 0x00	; 0
    4d56:	30 e0       	ldi	r19, 0x00	; 0
    4d58:	40 e8       	ldi	r20, 0x80	; 128
    4d5a:	5f e3       	ldi	r21, 0x3F	; 63
    4d5c:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    4d60:	88 23       	and	r24, r24
    4d62:	0c f0       	brlt	.+2      	; 0x4d66 <send_to_pc+0x4c8>
    4d64:	10 e0       	ldi	r17, 0x00	; 0
    4d66:	11 23       	and	r17, r17
    4d68:	49 f0       	breq	.+18     	; 0x4d7c <send_to_pc+0x4de>
		__ticks = 1;
    4d6a:	ce 01       	movw	r24, r28
    4d6c:	8f 5b       	subi	r24, 0xBF	; 191
    4d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    4d70:	21 e0       	ldi	r18, 0x01	; 1
    4d72:	30 e0       	ldi	r19, 0x00	; 0
    4d74:	fc 01       	movw	r30, r24
    4d76:	31 83       	std	Z+1, r19	; 0x01
    4d78:	20 83       	st	Z, r18
    4d7a:	6e c0       	rjmp	.+220    	; 0x4e58 <send_to_pc+0x5ba>
	else if (__tmp > 65535)
    4d7c:	11 e0       	ldi	r17, 0x01	; 1
    4d7e:	ce 01       	movw	r24, r28
    4d80:	cd 96       	adiw	r24, 0x3d	; 61
    4d82:	fc 01       	movw	r30, r24
    4d84:	60 81       	ld	r22, Z
    4d86:	71 81       	ldd	r23, Z+1	; 0x01
    4d88:	82 81       	ldd	r24, Z+2	; 0x02
    4d8a:	93 81       	ldd	r25, Z+3	; 0x03
    4d8c:	20 e0       	ldi	r18, 0x00	; 0
    4d8e:	3f ef       	ldi	r19, 0xFF	; 255
    4d90:	4f e7       	ldi	r20, 0x7F	; 127
    4d92:	57 e4       	ldi	r21, 0x47	; 71
    4d94:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    4d98:	18 16       	cp	r1, r24
    4d9a:	0c f0       	brlt	.+2      	; 0x4d9e <send_to_pc+0x500>
    4d9c:	10 e0       	ldi	r17, 0x00	; 0
    4d9e:	11 23       	and	r17, r17
    4da0:	09 f4       	brne	.+2      	; 0x4da4 <send_to_pc+0x506>
    4da2:	49 c0       	rjmp	.+146    	; 0x4e36 <send_to_pc+0x598>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4da4:	69 ad       	sts	0x69, r22
    4da6:	7a ad       	sts	0x6a, r23
    4da8:	8b ad       	sts	0x6b, r24
    4daa:	9c ad       	sts	0x6c, r25
    4dac:	20 e0       	ldi	r18, 0x00	; 0
    4dae:	30 e0       	ldi	r19, 0x00	; 0
    4db0:	40 e2       	ldi	r20, 0x20	; 32
    4db2:	51 e4       	ldi	r21, 0x41	; 65
    4db4:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    4db8:	dc 01       	movw	r26, r24
    4dba:	cb 01       	movw	r24, r22
    4dbc:	8e 01       	movw	r16, r28
    4dbe:	0f 5b       	subi	r16, 0xBF	; 191
    4dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    4dc2:	bc 01       	movw	r22, r24
    4dc4:	cd 01       	movw	r24, r26
    4dc6:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    4dca:	dc 01       	movw	r26, r24
    4dcc:	cb 01       	movw	r24, r22
    4dce:	f8 01       	movw	r30, r16
    4dd0:	91 83       	std	Z+1, r25	; 0x01
    4dd2:	80 83       	st	Z, r24
    4dd4:	27 c0       	rjmp	.+78     	; 0x4e24 <send_to_pc+0x586>
    4dd6:	ce 01       	movw	r24, r28
    4dd8:	8d 5b       	subi	r24, 0xBD	; 189
    4dda:	9f 4f       	sbci	r25, 0xFF	; 255
    4ddc:	20 e7       	ldi	r18, 0x70	; 112
    4dde:	31 e0       	ldi	r19, 0x01	; 1
    4de0:	fc 01       	movw	r30, r24
    4de2:	31 83       	std	Z+1, r19	; 0x01
    4de4:	20 83       	st	Z, r18
    4de6:	ce 01       	movw	r24, r28
    4de8:	8d 5b       	subi	r24, 0xBD	; 189
    4dea:	9f 4f       	sbci	r25, 0xFF	; 255
    4dec:	fc 01       	movw	r30, r24
    4dee:	80 81       	ld	r24, Z
    4df0:	91 81       	ldd	r25, Z+1	; 0x01
    4df2:	8c 01       	movw	r16, r24
    4df4:	c8 01       	movw	r24, r16
    4df6:	01 97       	sbiw	r24, 0x01	; 1
    4df8:	f1 f7       	brne	.-4      	; 0x4df6 <send_to_pc+0x558>
    4dfa:	8c 01       	movw	r16, r24
    4dfc:	ce 01       	movw	r24, r28
    4dfe:	8d 5b       	subi	r24, 0xBD	; 189
    4e00:	9f 4f       	sbci	r25, 0xFF	; 255
    4e02:	fc 01       	movw	r30, r24
    4e04:	11 83       	std	Z+1, r17	; 0x01
    4e06:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e08:	ce 01       	movw	r24, r28
    4e0a:	8f 5b       	subi	r24, 0xBF	; 191
    4e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    4e0e:	9e 01       	movw	r18, r28
    4e10:	2f 5b       	subi	r18, 0xBF	; 191
    4e12:	3f 4f       	sbci	r19, 0xFF	; 255
    4e14:	f9 01       	movw	r30, r18
    4e16:	20 81       	ld	r18, Z
    4e18:	31 81       	ldd	r19, Z+1	; 0x01
    4e1a:	21 50       	subi	r18, 0x01	; 1
    4e1c:	30 40       	sbci	r19, 0x00	; 0
    4e1e:	fc 01       	movw	r30, r24
    4e20:	31 83       	std	Z+1, r19	; 0x01
    4e22:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e24:	ce 01       	movw	r24, r28
    4e26:	8f 5b       	subi	r24, 0xBF	; 191
    4e28:	9f 4f       	sbci	r25, 0xFF	; 255
    4e2a:	fc 01       	movw	r30, r24
    4e2c:	80 81       	ld	r24, Z
    4e2e:	91 81       	ldd	r25, Z+1	; 0x01
    4e30:	00 97       	sbiw	r24, 0x00	; 0
    4e32:	89 f6       	brne	.-94     	; 0x4dd6 <send_to_pc+0x538>
    4e34:	2e c0       	rjmp	.+92     	; 0x4e92 <send_to_pc+0x5f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e36:	8e 01       	movw	r16, r28
    4e38:	0f 5b       	subi	r16, 0xBF	; 191
    4e3a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e3c:	ce 01       	movw	r24, r28
    4e3e:	cd 96       	adiw	r24, 0x3d	; 61
    4e40:	fc 01       	movw	r30, r24
    4e42:	60 81       	ld	r22, Z
    4e44:	71 81       	ldd	r23, Z+1	; 0x01
    4e46:	82 81       	ldd	r24, Z+2	; 0x02
    4e48:	93 81       	ldd	r25, Z+3	; 0x03
    4e4a:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    4e4e:	dc 01       	movw	r26, r24
    4e50:	cb 01       	movw	r24, r22
    4e52:	f8 01       	movw	r30, r16
    4e54:	91 83       	std	Z+1, r25	; 0x01
    4e56:	80 83       	st	Z, r24
    4e58:	ce 01       	movw	r24, r28
    4e5a:	8b 5b       	subi	r24, 0xBB	; 187
    4e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    4e5e:	9e 01       	movw	r18, r28
    4e60:	2f 5b       	subi	r18, 0xBF	; 191
    4e62:	3f 4f       	sbci	r19, 0xFF	; 255
    4e64:	f9 01       	movw	r30, r18
    4e66:	20 81       	ld	r18, Z
    4e68:	31 81       	ldd	r19, Z+1	; 0x01
    4e6a:	fc 01       	movw	r30, r24
    4e6c:	31 83       	std	Z+1, r19	; 0x01
    4e6e:	20 83       	st	Z, r18
    4e70:	ce 01       	movw	r24, r28
    4e72:	8b 5b       	subi	r24, 0xBB	; 187
    4e74:	9f 4f       	sbci	r25, 0xFF	; 255
    4e76:	fc 01       	movw	r30, r24
    4e78:	80 81       	ld	r24, Z
    4e7a:	91 81       	ldd	r25, Z+1	; 0x01
    4e7c:	8c 01       	movw	r16, r24
    4e7e:	c8 01       	movw	r24, r16
    4e80:	01 97       	sbiw	r24, 0x01	; 1
    4e82:	f1 f7       	brne	.-4      	; 0x4e80 <send_to_pc+0x5e2>
    4e84:	8c 01       	movw	r16, r24
    4e86:	ce 01       	movw	r24, r28
    4e88:	8b 5b       	subi	r24, 0xBB	; 187
    4e8a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e8c:	fc 01       	movw	r30, r24
    4e8e:	11 83       	std	Z+1, r17	; 0x01
    4e90:	00 83       	st	Z, r16
	_delay_ms(100);
	UDR0=' ';
    4e92:	86 ec       	ldi	r24, 0xC6	; 198
    4e94:	90 e0       	ldi	r25, 0x00	; 0
    4e96:	20 e2       	ldi	r18, 0x20	; 32
    4e98:	fc 01       	movw	r30, r24
    4e9a:	20 83       	st	Z, r18
	UDR0=' ';
    4e9c:	86 ec       	ldi	r24, 0xC6	; 198
    4e9e:	90 e0       	ldi	r25, 0x00	; 0
    4ea0:	20 e2       	ldi	r18, 0x20	; 32
    4ea2:	fc 01       	movw	r30, r24
    4ea4:	20 83       	st	Z, r18
    4ea6:	9e 01       	movw	r18, r28
    4ea8:	29 5b       	subi	r18, 0xB9	; 185
    4eaa:	3f 4f       	sbci	r19, 0xFF	; 255
    4eac:	80 e0       	ldi	r24, 0x00	; 0
    4eae:	90 e0       	ldi	r25, 0x00	; 0
    4eb0:	aa e7       	ldi	r26, 0x7A	; 122
    4eb2:	b4 e4       	ldi	r27, 0x44	; 68
    4eb4:	f9 01       	movw	r30, r18
    4eb6:	80 83       	st	Z, r24
    4eb8:	91 83       	std	Z+1, r25	; 0x01
    4eba:	a2 83       	std	Z+2, r26	; 0x02
    4ebc:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4ebe:	8e 01       	movw	r16, r28
    4ec0:	05 5b       	subi	r16, 0xB5	; 181
    4ec2:	1f 4f       	sbci	r17, 0xFF	; 255
    4ec4:	ce 01       	movw	r24, r28
    4ec6:	89 5b       	subi	r24, 0xB9	; 185
    4ec8:	9f 4f       	sbci	r25, 0xFF	; 255
    4eca:	fc 01       	movw	r30, r24
    4ecc:	60 81       	ld	r22, Z
    4ece:	71 81       	ldd	r23, Z+1	; 0x01
    4ed0:	82 81       	ldd	r24, Z+2	; 0x02
    4ed2:	93 81       	ldd	r25, Z+3	; 0x03
    4ed4:	26 e6       	ldi	r18, 0x66	; 102
    4ed6:	36 e6       	ldi	r19, 0x66	; 102
    4ed8:	46 e6       	ldi	r20, 0x66	; 102
    4eda:	55 e4       	ldi	r21, 0x45	; 69
    4edc:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    4ee0:	dc 01       	movw	r26, r24
    4ee2:	cb 01       	movw	r24, r22
    4ee4:	f8 01       	movw	r30, r16
    4ee6:	80 83       	st	Z, r24
    4ee8:	91 83       	std	Z+1, r25	; 0x01
    4eea:	a2 83       	std	Z+2, r26	; 0x02
    4eec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4eee:	ce 01       	movw	r24, r28
    4ef0:	85 5b       	subi	r24, 0xB5	; 181
    4ef2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ef4:	11 e0       	ldi	r17, 0x01	; 1
    4ef6:	fc 01       	movw	r30, r24
    4ef8:	60 81       	ld	r22, Z
    4efa:	71 81       	ldd	r23, Z+1	; 0x01
    4efc:	82 81       	ldd	r24, Z+2	; 0x02
    4efe:	93 81       	ldd	r25, Z+3	; 0x03
    4f00:	20 e0       	ldi	r18, 0x00	; 0
    4f02:	30 e0       	ldi	r19, 0x00	; 0
    4f04:	40 e8       	ldi	r20, 0x80	; 128
    4f06:	5f e3       	ldi	r21, 0x3F	; 63
    4f08:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    4f0c:	88 23       	and	r24, r24
    4f0e:	0c f0       	brlt	.+2      	; 0x4f12 <send_to_pc+0x674>
    4f10:	10 e0       	ldi	r17, 0x00	; 0
    4f12:	11 23       	and	r17, r17
    4f14:	49 f0       	breq	.+18     	; 0x4f28 <send_to_pc+0x68a>
		__ticks = 1;
    4f16:	ce 01       	movw	r24, r28
    4f18:	81 5b       	subi	r24, 0xB1	; 177
    4f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    4f1c:	21 e0       	ldi	r18, 0x01	; 1
    4f1e:	30 e0       	ldi	r19, 0x00	; 0
    4f20:	fc 01       	movw	r30, r24
    4f22:	31 83       	std	Z+1, r19	; 0x01
    4f24:	20 83       	st	Z, r18
    4f26:	74 c0       	rjmp	.+232    	; 0x5010 <send_to_pc+0x772>
	else if (__tmp > 65535)
    4f28:	ce 01       	movw	r24, r28
    4f2a:	85 5b       	subi	r24, 0xB5	; 181
    4f2c:	9f 4f       	sbci	r25, 0xFF	; 255
    4f2e:	11 e0       	ldi	r17, 0x01	; 1
    4f30:	fc 01       	movw	r30, r24
    4f32:	60 81       	ld	r22, Z
    4f34:	71 81       	ldd	r23, Z+1	; 0x01
    4f36:	82 81       	ldd	r24, Z+2	; 0x02
    4f38:	93 81       	ldd	r25, Z+3	; 0x03
    4f3a:	20 e0       	ldi	r18, 0x00	; 0
    4f3c:	3f ef       	ldi	r19, 0xFF	; 255
    4f3e:	4f e7       	ldi	r20, 0x7F	; 127
    4f40:	57 e4       	ldi	r21, 0x47	; 71
    4f42:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    4f46:	18 16       	cp	r1, r24
    4f48:	0c f0       	brlt	.+2      	; 0x4f4c <send_to_pc+0x6ae>
    4f4a:	10 e0       	ldi	r17, 0x00	; 0
    4f4c:	11 23       	and	r17, r17
    4f4e:	09 f4       	brne	.+2      	; 0x4f52 <send_to_pc+0x6b4>
    4f50:	4d c0       	rjmp	.+154    	; 0x4fec <send_to_pc+0x74e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f52:	ce 01       	movw	r24, r28
    4f54:	89 5b       	subi	r24, 0xB9	; 185
    4f56:	9f 4f       	sbci	r25, 0xFF	; 255
    4f58:	fc 01       	movw	r30, r24
    4f5a:	60 81       	ld	r22, Z
    4f5c:	71 81       	ldd	r23, Z+1	; 0x01
    4f5e:	82 81       	ldd	r24, Z+2	; 0x02
    4f60:	93 81       	ldd	r25, Z+3	; 0x03
    4f62:	20 e0       	ldi	r18, 0x00	; 0
    4f64:	30 e0       	ldi	r19, 0x00	; 0
    4f66:	40 e2       	ldi	r20, 0x20	; 32
    4f68:	51 e4       	ldi	r21, 0x41	; 65
    4f6a:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    4f6e:	dc 01       	movw	r26, r24
    4f70:	cb 01       	movw	r24, r22
    4f72:	8e 01       	movw	r16, r28
    4f74:	01 5b       	subi	r16, 0xB1	; 177
    4f76:	1f 4f       	sbci	r17, 0xFF	; 255
    4f78:	bc 01       	movw	r22, r24
    4f7a:	cd 01       	movw	r24, r26
    4f7c:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    4f80:	dc 01       	movw	r26, r24
    4f82:	cb 01       	movw	r24, r22
    4f84:	f8 01       	movw	r30, r16
    4f86:	91 83       	std	Z+1, r25	; 0x01
    4f88:	80 83       	st	Z, r24
    4f8a:	27 c0       	rjmp	.+78     	; 0x4fda <send_to_pc+0x73c>
    4f8c:	ce 01       	movw	r24, r28
    4f8e:	8f 5a       	subi	r24, 0xAF	; 175
    4f90:	9f 4f       	sbci	r25, 0xFF	; 255
    4f92:	20 e7       	ldi	r18, 0x70	; 112
    4f94:	31 e0       	ldi	r19, 0x01	; 1
    4f96:	fc 01       	movw	r30, r24
    4f98:	31 83       	std	Z+1, r19	; 0x01
    4f9a:	20 83       	st	Z, r18
    4f9c:	ce 01       	movw	r24, r28
    4f9e:	8f 5a       	subi	r24, 0xAF	; 175
    4fa0:	9f 4f       	sbci	r25, 0xFF	; 255
    4fa2:	fc 01       	movw	r30, r24
    4fa4:	80 81       	ld	r24, Z
    4fa6:	91 81       	ldd	r25, Z+1	; 0x01
    4fa8:	8c 01       	movw	r16, r24
    4faa:	c8 01       	movw	r24, r16
    4fac:	01 97       	sbiw	r24, 0x01	; 1
    4fae:	f1 f7       	brne	.-4      	; 0x4fac <send_to_pc+0x70e>
    4fb0:	8c 01       	movw	r16, r24
    4fb2:	ce 01       	movw	r24, r28
    4fb4:	8f 5a       	subi	r24, 0xAF	; 175
    4fb6:	9f 4f       	sbci	r25, 0xFF	; 255
    4fb8:	fc 01       	movw	r30, r24
    4fba:	11 83       	std	Z+1, r17	; 0x01
    4fbc:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fbe:	ce 01       	movw	r24, r28
    4fc0:	81 5b       	subi	r24, 0xB1	; 177
    4fc2:	9f 4f       	sbci	r25, 0xFF	; 255
    4fc4:	9e 01       	movw	r18, r28
    4fc6:	21 5b       	subi	r18, 0xB1	; 177
    4fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    4fca:	f9 01       	movw	r30, r18
    4fcc:	20 81       	ld	r18, Z
    4fce:	31 81       	ldd	r19, Z+1	; 0x01
    4fd0:	21 50       	subi	r18, 0x01	; 1
    4fd2:	30 40       	sbci	r19, 0x00	; 0
    4fd4:	fc 01       	movw	r30, r24
    4fd6:	31 83       	std	Z+1, r19	; 0x01
    4fd8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fda:	ce 01       	movw	r24, r28
    4fdc:	81 5b       	subi	r24, 0xB1	; 177
    4fde:	9f 4f       	sbci	r25, 0xFF	; 255
    4fe0:	fc 01       	movw	r30, r24
    4fe2:	80 81       	ld	r24, Z
    4fe4:	91 81       	ldd	r25, Z+1	; 0x01
    4fe6:	00 97       	sbiw	r24, 0x00	; 0
    4fe8:	89 f6       	brne	.-94     	; 0x4f8c <send_to_pc+0x6ee>
    4fea:	2f c0       	rjmp	.+94     	; 0x504a <send_to_pc+0x7ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fec:	8e 01       	movw	r16, r28
    4fee:	01 5b       	subi	r16, 0xB1	; 177
    4ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ff2:	ce 01       	movw	r24, r28
    4ff4:	85 5b       	subi	r24, 0xB5	; 181
    4ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ff8:	fc 01       	movw	r30, r24
    4ffa:	60 81       	ld	r22, Z
    4ffc:	71 81       	ldd	r23, Z+1	; 0x01
    4ffe:	82 81       	ldd	r24, Z+2	; 0x02
    5000:	93 81       	ldd	r25, Z+3	; 0x03
    5002:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    5006:	dc 01       	movw	r26, r24
    5008:	cb 01       	movw	r24, r22
    500a:	f8 01       	movw	r30, r16
    500c:	91 83       	std	Z+1, r25	; 0x01
    500e:	80 83       	st	Z, r24
    5010:	ce 01       	movw	r24, r28
    5012:	8d 5a       	subi	r24, 0xAD	; 173
    5014:	9f 4f       	sbci	r25, 0xFF	; 255
    5016:	9e 01       	movw	r18, r28
    5018:	21 5b       	subi	r18, 0xB1	; 177
    501a:	3f 4f       	sbci	r19, 0xFF	; 255
    501c:	f9 01       	movw	r30, r18
    501e:	20 81       	ld	r18, Z
    5020:	31 81       	ldd	r19, Z+1	; 0x01
    5022:	fc 01       	movw	r30, r24
    5024:	31 83       	std	Z+1, r19	; 0x01
    5026:	20 83       	st	Z, r18
    5028:	ce 01       	movw	r24, r28
    502a:	8d 5a       	subi	r24, 0xAD	; 173
    502c:	9f 4f       	sbci	r25, 0xFF	; 255
    502e:	fc 01       	movw	r30, r24
    5030:	80 81       	ld	r24, Z
    5032:	91 81       	ldd	r25, Z+1	; 0x01
    5034:	8c 01       	movw	r16, r24
    5036:	c8 01       	movw	r24, r16
    5038:	01 97       	sbiw	r24, 0x01	; 1
    503a:	f1 f7       	brne	.-4      	; 0x5038 <send_to_pc+0x79a>
    503c:	8c 01       	movw	r16, r24
    503e:	ce 01       	movw	r24, r28
    5040:	8d 5a       	subi	r24, 0xAD	; 173
    5042:	9f 4f       	sbci	r25, 0xFF	; 255
    5044:	fc 01       	movw	r30, r24
    5046:	11 83       	std	Z+1, r17	; 0x01
    5048:	00 83       	st	Z, r16
	_delay_ms(1000);
	velocity(170,170);
    504a:	8a ea       	ldi	r24, 0xAA	; 170
    504c:	6a ea       	ldi	r22, 0xAA	; 170
    504e:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <velocity>
	forward_mm(10);
    5052:	8a e0       	ldi	r24, 0x0A	; 10
    5054:	90 e0       	ldi	r25, 0x00	; 0
    5056:	0e 94 71 13 	call	0x26e2	; 0x26e2 <forward_mm>
}
    505a:	cc 5a       	subi	r28, 0xAC	; 172
    505c:	df 4f       	sbci	r29, 0xFF	; 255
    505e:	0f b6       	in	r0, 0x3f	; 63
    5060:	f8 94       	cli
    5062:	de bf       	out	0x3e, r29	; 62
    5064:	0f be       	out	0x3f, r0	; 63
    5066:	cd bf       	out	0x3d, r28	; 61
    5068:	df 91       	pop	r29
    506a:	cf 91       	pop	r28
    506c:	1f 91       	pop	r17
    506e:	0f 91       	pop	r16
    5070:	08 95       	ret

00005072 <main>:


/*************************************************************** Main Function ************************************************/
int main()
{
    5072:	0f 93       	push	r16
    5074:	1f 93       	push	r17
    5076:	cf 93       	push	r28
    5078:	df 93       	push	r29
    507a:	cd b7       	in	r28, 0x3d	; 61
    507c:	de b7       	in	r29, 0x3e	; 62
    507e:	c6 54       	subi	r28, 0x46	; 70
    5080:	d0 40       	sbci	r29, 0x00	; 0
    5082:	0f b6       	in	r0, 0x3f	; 63
    5084:	f8 94       	cli
    5086:	de bf       	out	0x3e, r29	; 62
    5088:	0f be       	out	0x3f, r0	; 63
    508a:	cd bf       	out	0x3d, r28	; 61
	init_devices();
    508c:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <init_devices>
	i2c_init();
    5090:	0e 94 95 00 	call	0x12a	; 0x12a <i2c_init>
	lcd_set_4bit();
    5094:	0e 94 a1 02 	call	0x542	; 0x542 <lcd_set_4bit>
	lcd_init();
    5098:	0e 94 97 08 	call	0x112e	; 0x112e <lcd_init>
	color_sensor_scaling();
    509c:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <color_sensor_scaling>
	
	servo_1(70);
    50a0:	86 e4       	ldi	r24, 0x46	; 70
    50a2:	0e 94 29 11 	call	0x2252	; 0x2252 <servo_1>
    50a6:	80 e0       	ldi	r24, 0x00	; 0
    50a8:	90 e0       	ldi	r25, 0x00	; 0
    50aa:	a8 e4       	ldi	r26, 0x48	; 72
    50ac:	b3 e4       	ldi	r27, 0x43	; 67
    50ae:	89 83       	std	Y+1, r24	; 0x01
    50b0:	9a 83       	std	Y+2, r25	; 0x02
    50b2:	ab 83       	std	Y+3, r26	; 0x03
    50b4:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    50b6:	69 81       	ldd	r22, Y+1	; 0x01
    50b8:	7a 81       	ldd	r23, Y+2	; 0x02
    50ba:	8b 81       	ldd	r24, Y+3	; 0x03
    50bc:	9c 81       	ldd	r25, Y+4	; 0x04
    50be:	26 e6       	ldi	r18, 0x66	; 102
    50c0:	36 e6       	ldi	r19, 0x66	; 102
    50c2:	46 e6       	ldi	r20, 0x66	; 102
    50c4:	55 e4       	ldi	r21, 0x45	; 69
    50c6:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    50ca:	dc 01       	movw	r26, r24
    50cc:	cb 01       	movw	r24, r22
    50ce:	8d 83       	std	Y+5, r24	; 0x05
    50d0:	9e 83       	std	Y+6, r25	; 0x06
    50d2:	af 83       	std	Y+7, r26	; 0x07
    50d4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    50d6:	11 e0       	ldi	r17, 0x01	; 1
    50d8:	6d 81       	ldd	r22, Y+5	; 0x05
    50da:	7e 81       	ldd	r23, Y+6	; 0x06
    50dc:	8f 81       	ldd	r24, Y+7	; 0x07
    50de:	98 85       	ldd	r25, Y+8	; 0x08
    50e0:	20 e0       	ldi	r18, 0x00	; 0
    50e2:	30 e0       	ldi	r19, 0x00	; 0
    50e4:	40 e8       	ldi	r20, 0x80	; 128
    50e6:	5f e3       	ldi	r21, 0x3F	; 63
    50e8:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    50ec:	88 23       	and	r24, r24
    50ee:	0c f0       	brlt	.+2      	; 0x50f2 <main+0x80>
    50f0:	10 e0       	ldi	r17, 0x00	; 0
    50f2:	11 23       	and	r17, r17
    50f4:	29 f0       	breq	.+10     	; 0x5100 <main+0x8e>
		__ticks = 1;
    50f6:	81 e0       	ldi	r24, 0x01	; 1
    50f8:	90 e0       	ldi	r25, 0x00	; 0
    50fa:	9a 87       	std	Y+10, r25	; 0x0a
    50fc:	89 87       	std	Y+9, r24	; 0x09
    50fe:	46 c0       	rjmp	.+140    	; 0x518c <main+0x11a>
	else if (__tmp > 65535)
    5100:	11 e0       	ldi	r17, 0x01	; 1
    5102:	6d 81       	ldd	r22, Y+5	; 0x05
    5104:	7e 81       	ldd	r23, Y+6	; 0x06
    5106:	8f 81       	ldd	r24, Y+7	; 0x07
    5108:	98 85       	ldd	r25, Y+8	; 0x08
    510a:	20 e0       	ldi	r18, 0x00	; 0
    510c:	3f ef       	ldi	r19, 0xFF	; 255
    510e:	4f e7       	ldi	r20, 0x7F	; 127
    5110:	57 e4       	ldi	r21, 0x47	; 71
    5112:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    5116:	18 16       	cp	r1, r24
    5118:	0c f0       	brlt	.+2      	; 0x511c <main+0xaa>
    511a:	10 e0       	ldi	r17, 0x00	; 0
    511c:	11 23       	and	r17, r17
    511e:	61 f1       	breq	.+88     	; 0x5178 <main+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5120:	69 81       	ldd	r22, Y+1	; 0x01
    5122:	7a 81       	ldd	r23, Y+2	; 0x02
    5124:	8b 81       	ldd	r24, Y+3	; 0x03
    5126:	9c 81       	ldd	r25, Y+4	; 0x04
    5128:	20 e0       	ldi	r18, 0x00	; 0
    512a:	30 e0       	ldi	r19, 0x00	; 0
    512c:	40 e2       	ldi	r20, 0x20	; 32
    512e:	51 e4       	ldi	r21, 0x41	; 65
    5130:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    5134:	dc 01       	movw	r26, r24
    5136:	cb 01       	movw	r24, r22
    5138:	bc 01       	movw	r22, r24
    513a:	cd 01       	movw	r24, r26
    513c:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    5140:	dc 01       	movw	r26, r24
    5142:	cb 01       	movw	r24, r22
    5144:	9a 87       	std	Y+10, r25	; 0x0a
    5146:	89 87       	std	Y+9, r24	; 0x09
    5148:	12 c0       	rjmp	.+36     	; 0x516e <main+0xfc>
    514a:	80 e7       	ldi	r24, 0x70	; 112
    514c:	91 e0       	ldi	r25, 0x01	; 1
    514e:	9c 87       	std	Y+12, r25	; 0x0c
    5150:	8b 87       	std	Y+11, r24	; 0x0b
    5152:	8b 85       	ldd	r24, Y+11	; 0x0b
    5154:	9c 85       	ldd	r25, Y+12	; 0x0c
    5156:	8c 01       	movw	r16, r24
    5158:	c8 01       	movw	r24, r16
    515a:	01 97       	sbiw	r24, 0x01	; 1
    515c:	f1 f7       	brne	.-4      	; 0x515a <main+0xe8>
    515e:	8c 01       	movw	r16, r24
    5160:	1c 87       	std	Y+12, r17	; 0x0c
    5162:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5164:	89 85       	ldd	r24, Y+9	; 0x09
    5166:	9a 85       	ldd	r25, Y+10	; 0x0a
    5168:	01 97       	sbiw	r24, 0x01	; 1
    516a:	9a 87       	std	Y+10, r25	; 0x0a
    516c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    516e:	89 85       	ldd	r24, Y+9	; 0x09
    5170:	9a 85       	ldd	r25, Y+10	; 0x0a
    5172:	00 97       	sbiw	r24, 0x00	; 0
    5174:	51 f7       	brne	.-44     	; 0x514a <main+0xd8>
    5176:	17 c0       	rjmp	.+46     	; 0x51a6 <main+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5178:	6d 81       	ldd	r22, Y+5	; 0x05
    517a:	7e 81       	ldd	r23, Y+6	; 0x06
    517c:	8f 81       	ldd	r24, Y+7	; 0x07
    517e:	98 85       	ldd	r25, Y+8	; 0x08
    5180:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    5184:	dc 01       	movw	r26, r24
    5186:	cb 01       	movw	r24, r22
    5188:	9a 87       	std	Y+10, r25	; 0x0a
    518a:	89 87       	std	Y+9, r24	; 0x09
    518c:	89 85       	ldd	r24, Y+9	; 0x09
    518e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5190:	9e 87       	std	Y+14, r25	; 0x0e
    5192:	8d 87       	std	Y+13, r24	; 0x0d
    5194:	8d 85       	ldd	r24, Y+13	; 0x0d
    5196:	9e 85       	ldd	r25, Y+14	; 0x0e
    5198:	8c 01       	movw	r16, r24
    519a:	f8 01       	movw	r30, r16
    519c:	31 97       	sbiw	r30, 0x01	; 1
    519e:	f1 f7       	brne	.-4      	; 0x519c <main+0x12a>
    51a0:	8f 01       	movw	r16, r30
    51a2:	1e 87       	std	Y+14, r17	; 0x0e
    51a4:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(200);                        //repositioning the servo at default angle(80 degrees)
	servo_1_free();
    51a6:	0e 94 77 11 	call	0x22ee	; 0x22ee <servo_1_free>
	
	//I2C device id check
	check_status(i2c_getbyte(DEV_ADD, WHO_AM_I,&devid));
    51aa:	22 e9       	ldi	r18, 0x92	; 146
    51ac:	32 e0       	ldi	r19, 0x02	; 2
    51ae:	80 ed       	ldi	r24, 0xD0	; 208
    51b0:	65 e7       	ldi	r22, 0x75	; 117
    51b2:	a9 01       	movw	r20, r18
    51b4:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <i2c_getbyte>
    51b8:	0e 94 cf 1a 	call	0x359e	; 0x359e <check_status>
	if(devid != DEV_ID_VAL)
    51bc:	80 91 92 02 	lds	r24, 0x0292
    51c0:	88 36       	cpi	r24, 0x68	; 104
    51c2:	09 f4       	brne	.+2      	; 0x51c6 <main+0x154>
    51c4:	09 c1       	rjmp	.+530    	; 0x53d8 <main+0x366>
	{
		lcd_cursor(1,2);
    51c6:	81 e0       	ldi	r24, 0x01	; 1
    51c8:	62 e0       	ldi	r22, 0x02	; 2
    51ca:	0e 94 8c 0c 	call	0x1918	; 0x1918 <lcd_cursor>
    51ce:	80 e0       	ldi	r24, 0x00	; 0
    51d0:	90 e0       	ldi	r25, 0x00	; 0
    51d2:	a8 e4       	ldi	r26, 0x48	; 72
    51d4:	b2 e4       	ldi	r27, 0x42	; 66
    51d6:	8f 87       	std	Y+15, r24	; 0x0f
    51d8:	98 8b       	std	Y+16, r25	; 0x10
    51da:	a9 8b       	std	Y+17, r26	; 0x11
    51dc:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    51de:	6f 85       	ldd	r22, Y+15	; 0x0f
    51e0:	78 89       	ldd	r23, Y+16	; 0x10
    51e2:	89 89       	ldd	r24, Y+17	; 0x11
    51e4:	9a 89       	ldd	r25, Y+18	; 0x12
    51e6:	26 e6       	ldi	r18, 0x66	; 102
    51e8:	36 e6       	ldi	r19, 0x66	; 102
    51ea:	46 e6       	ldi	r20, 0x66	; 102
    51ec:	55 e4       	ldi	r21, 0x45	; 69
    51ee:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    51f2:	dc 01       	movw	r26, r24
    51f4:	cb 01       	movw	r24, r22
    51f6:	8b 8b       	std	Y+19, r24	; 0x13
    51f8:	9c 8b       	std	Y+20, r25	; 0x14
    51fa:	ad 8b       	std	Y+21, r26	; 0x15
    51fc:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    51fe:	11 e0       	ldi	r17, 0x01	; 1
    5200:	6b 89       	ldd	r22, Y+19	; 0x13
    5202:	7c 89       	ldd	r23, Y+20	; 0x14
    5204:	8d 89       	ldd	r24, Y+21	; 0x15
    5206:	9e 89       	ldd	r25, Y+22	; 0x16
    5208:	20 e0       	ldi	r18, 0x00	; 0
    520a:	30 e0       	ldi	r19, 0x00	; 0
    520c:	40 e8       	ldi	r20, 0x80	; 128
    520e:	5f e3       	ldi	r21, 0x3F	; 63
    5210:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    5214:	88 23       	and	r24, r24
    5216:	0c f0       	brlt	.+2      	; 0x521a <main+0x1a8>
    5218:	10 e0       	ldi	r17, 0x00	; 0
    521a:	11 23       	and	r17, r17
    521c:	29 f0       	breq	.+10     	; 0x5228 <main+0x1b6>
		__ticks = 1;
    521e:	81 e0       	ldi	r24, 0x01	; 1
    5220:	90 e0       	ldi	r25, 0x00	; 0
    5222:	98 8f       	std	Y+24, r25	; 0x18
    5224:	8f 8b       	std	Y+23, r24	; 0x17
    5226:	46 c0       	rjmp	.+140    	; 0x52b4 <main+0x242>
	else if (__tmp > 65535)
    5228:	11 e0       	ldi	r17, 0x01	; 1
    522a:	6b 89       	ldd	r22, Y+19	; 0x13
    522c:	7c 89       	ldd	r23, Y+20	; 0x14
    522e:	8d 89       	ldd	r24, Y+21	; 0x15
    5230:	9e 89       	ldd	r25, Y+22	; 0x16
    5232:	20 e0       	ldi	r18, 0x00	; 0
    5234:	3f ef       	ldi	r19, 0xFF	; 255
    5236:	4f e7       	ldi	r20, 0x7F	; 127
    5238:	57 e4       	ldi	r21, 0x47	; 71
    523a:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    523e:	18 16       	cp	r1, r24
    5240:	0c f0       	brlt	.+2      	; 0x5244 <main+0x1d2>
    5242:	10 e0       	ldi	r17, 0x00	; 0
    5244:	11 23       	and	r17, r17
    5246:	61 f1       	breq	.+88     	; 0x52a0 <main+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5248:	6f 85       	ldd	r22, Y+15	; 0x0f
    524a:	78 89       	ldd	r23, Y+16	; 0x10
    524c:	89 89       	ldd	r24, Y+17	; 0x11
    524e:	9a 89       	ldd	r25, Y+18	; 0x12
    5250:	20 e0       	ldi	r18, 0x00	; 0
    5252:	30 e0       	ldi	r19, 0x00	; 0
    5254:	40 e2       	ldi	r20, 0x20	; 32
    5256:	51 e4       	ldi	r21, 0x41	; 65
    5258:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    525c:	dc 01       	movw	r26, r24
    525e:	cb 01       	movw	r24, r22
    5260:	bc 01       	movw	r22, r24
    5262:	cd 01       	movw	r24, r26
    5264:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    5268:	dc 01       	movw	r26, r24
    526a:	cb 01       	movw	r24, r22
    526c:	98 8f       	std	Y+24, r25	; 0x18
    526e:	8f 8b       	std	Y+23, r24	; 0x17
    5270:	12 c0       	rjmp	.+36     	; 0x5296 <main+0x224>
    5272:	80 e7       	ldi	r24, 0x70	; 112
    5274:	91 e0       	ldi	r25, 0x01	; 1
    5276:	9a 8f       	std	Y+26, r25	; 0x1a
    5278:	89 8f       	std	Y+25, r24	; 0x19
    527a:	89 8d       	ldd	r24, Y+25	; 0x19
    527c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    527e:	8c 01       	movw	r16, r24
    5280:	c8 01       	movw	r24, r16
    5282:	01 97       	sbiw	r24, 0x01	; 1
    5284:	f1 f7       	brne	.-4      	; 0x5282 <main+0x210>
    5286:	8c 01       	movw	r16, r24
    5288:	1a 8f       	std	Y+26, r17	; 0x1a
    528a:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    528c:	8f 89       	ldd	r24, Y+23	; 0x17
    528e:	98 8d       	ldd	r25, Y+24	; 0x18
    5290:	01 97       	sbiw	r24, 0x01	; 1
    5292:	98 8f       	std	Y+24, r25	; 0x18
    5294:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5296:	8f 89       	ldd	r24, Y+23	; 0x17
    5298:	98 8d       	ldd	r25, Y+24	; 0x18
    529a:	00 97       	sbiw	r24, 0x00	; 0
    529c:	51 f7       	brne	.-44     	; 0x5272 <main+0x200>
    529e:	17 c0       	rjmp	.+46     	; 0x52ce <main+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52a0:	6b 89       	ldd	r22, Y+19	; 0x13
    52a2:	7c 89       	ldd	r23, Y+20	; 0x14
    52a4:	8d 89       	ldd	r24, Y+21	; 0x15
    52a6:	9e 89       	ldd	r25, Y+22	; 0x16
    52a8:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    52ac:	dc 01       	movw	r26, r24
    52ae:	cb 01       	movw	r24, r22
    52b0:	98 8f       	std	Y+24, r25	; 0x18
    52b2:	8f 8b       	std	Y+23, r24	; 0x17
    52b4:	8f 89       	ldd	r24, Y+23	; 0x17
    52b6:	98 8d       	ldd	r25, Y+24	; 0x18
    52b8:	9c 8f       	std	Y+28, r25	; 0x1c
    52ba:	8b 8f       	std	Y+27, r24	; 0x1b
    52bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    52be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    52c0:	8c 01       	movw	r16, r24
    52c2:	f8 01       	movw	r30, r16
    52c4:	31 97       	sbiw	r30, 0x01	; 1
    52c6:	f1 f7       	brne	.-4      	; 0x52c4 <main+0x252>
    52c8:	8f 01       	movw	r16, r30
    52ca:	1c 8f       	std	Y+28, r17	; 0x1c
    52cc:	0b 8f       	std	Y+27, r16	; 0x1b
		_delay_ms(50);
		lcd_string("Wrng Dev ID");
    52ce:	88 e1       	ldi	r24, 0x18	; 24
    52d0:	92 e0       	ldi	r25, 0x02	; 2
    52d2:	0e 94 6d 0c 	call	0x18da	; 0x18da <lcd_string>
    52d6:	80 e0       	ldi	r24, 0x00	; 0
    52d8:	90 e0       	ldi	r25, 0x00	; 0
    52da:	a8 e4       	ldi	r26, 0x48	; 72
    52dc:	b2 e4       	ldi	r27, 0x42	; 66
    52de:	8d 8f       	std	Y+29, r24	; 0x1d
    52e0:	9e 8f       	std	Y+30, r25	; 0x1e
    52e2:	af 8f       	std	Y+31, r26	; 0x1f
    52e4:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    52e6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    52e8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    52ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    52ec:	98 a1       	lds	r25, 0x48
    52ee:	26 e6       	ldi	r18, 0x66	; 102
    52f0:	36 e6       	ldi	r19, 0x66	; 102
    52f2:	46 e6       	ldi	r20, 0x66	; 102
    52f4:	55 e4       	ldi	r21, 0x45	; 69
    52f6:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    52fa:	dc 01       	movw	r26, r24
    52fc:	cb 01       	movw	r24, r22
    52fe:	89 a3       	lds	r24, 0x59
    5300:	9a a3       	lds	r25, 0x5a
    5302:	ab a3       	lds	r26, 0x5b
    5304:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    5306:	11 e0       	ldi	r17, 0x01	; 1
    5308:	69 a1       	lds	r22, 0x49
    530a:	7a a1       	lds	r23, 0x4a
    530c:	8b a1       	lds	r24, 0x4b
    530e:	9c a1       	lds	r25, 0x4c
    5310:	20 e0       	ldi	r18, 0x00	; 0
    5312:	30 e0       	ldi	r19, 0x00	; 0
    5314:	40 e8       	ldi	r20, 0x80	; 128
    5316:	5f e3       	ldi	r21, 0x3F	; 63
    5318:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    531c:	88 23       	and	r24, r24
    531e:	0c f0       	brlt	.+2      	; 0x5322 <main+0x2b0>
    5320:	10 e0       	ldi	r17, 0x00	; 0
    5322:	11 23       	and	r17, r17
    5324:	29 f0       	breq	.+10     	; 0x5330 <main+0x2be>
		__ticks = 1;
    5326:	81 e0       	ldi	r24, 0x01	; 1
    5328:	90 e0       	ldi	r25, 0x00	; 0
    532a:	9e a3       	lds	r25, 0x5e
    532c:	8d a3       	lds	r24, 0x5d
    532e:	46 c0       	rjmp	.+140    	; 0x53bc <main+0x34a>
	else if (__tmp > 65535)
    5330:	11 e0       	ldi	r17, 0x01	; 1
    5332:	69 a1       	lds	r22, 0x49
    5334:	7a a1       	lds	r23, 0x4a
    5336:	8b a1       	lds	r24, 0x4b
    5338:	9c a1       	lds	r25, 0x4c
    533a:	20 e0       	ldi	r18, 0x00	; 0
    533c:	3f ef       	ldi	r19, 0xFF	; 255
    533e:	4f e7       	ldi	r20, 0x7F	; 127
    5340:	57 e4       	ldi	r21, 0x47	; 71
    5342:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    5346:	18 16       	cp	r1, r24
    5348:	0c f0       	brlt	.+2      	; 0x534c <main+0x2da>
    534a:	10 e0       	ldi	r17, 0x00	; 0
    534c:	11 23       	and	r17, r17
    534e:	61 f1       	breq	.+88     	; 0x53a8 <main+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5350:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5352:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5354:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5356:	98 a1       	lds	r25, 0x48
    5358:	20 e0       	ldi	r18, 0x00	; 0
    535a:	30 e0       	ldi	r19, 0x00	; 0
    535c:	40 e2       	ldi	r20, 0x20	; 32
    535e:	51 e4       	ldi	r21, 0x41	; 65
    5360:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    5364:	dc 01       	movw	r26, r24
    5366:	cb 01       	movw	r24, r22
    5368:	bc 01       	movw	r22, r24
    536a:	cd 01       	movw	r24, r26
    536c:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    5370:	dc 01       	movw	r26, r24
    5372:	cb 01       	movw	r24, r22
    5374:	9e a3       	lds	r25, 0x5e
    5376:	8d a3       	lds	r24, 0x5d
    5378:	12 c0       	rjmp	.+36     	; 0x539e <main+0x32c>
    537a:	80 e7       	ldi	r24, 0x70	; 112
    537c:	91 e0       	ldi	r25, 0x01	; 1
    537e:	98 a7       	lds	r25, 0x78
    5380:	8f a3       	lds	r24, 0x5f
    5382:	8f a1       	lds	r24, 0x4f
    5384:	98 a5       	lds	r25, 0x68
    5386:	8c 01       	movw	r16, r24
    5388:	c8 01       	movw	r24, r16
    538a:	01 97       	sbiw	r24, 0x01	; 1
    538c:	f1 f7       	brne	.-4      	; 0x538a <main+0x318>
    538e:	8c 01       	movw	r16, r24
    5390:	18 a7       	lds	r17, 0x78
    5392:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5394:	8d a1       	lds	r24, 0x4d
    5396:	9e a1       	lds	r25, 0x4e
    5398:	01 97       	sbiw	r24, 0x01	; 1
    539a:	9e a3       	lds	r25, 0x5e
    539c:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    539e:	8d a1       	lds	r24, 0x4d
    53a0:	9e a1       	lds	r25, 0x4e
    53a2:	00 97       	sbiw	r24, 0x00	; 0
    53a4:	51 f7       	brne	.-44     	; 0x537a <main+0x308>
    53a6:	17 c0       	rjmp	.+46     	; 0x53d6 <main+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53a8:	69 a1       	lds	r22, 0x49
    53aa:	7a a1       	lds	r23, 0x4a
    53ac:	8b a1       	lds	r24, 0x4b
    53ae:	9c a1       	lds	r25, 0x4c
    53b0:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    53b4:	dc 01       	movw	r26, r24
    53b6:	cb 01       	movw	r24, r22
    53b8:	9e a3       	lds	r25, 0x5e
    53ba:	8d a3       	lds	r24, 0x5d
    53bc:	8d a1       	lds	r24, 0x4d
    53be:	9e a1       	lds	r25, 0x4e
    53c0:	9a a7       	lds	r25, 0x7a
    53c2:	89 a7       	lds	r24, 0x79
    53c4:	89 a5       	lds	r24, 0x69
    53c6:	9a a5       	lds	r25, 0x6a
    53c8:	8c 01       	movw	r16, r24
    53ca:	f8 01       	movw	r30, r16
    53cc:	31 97       	sbiw	r30, 0x01	; 1
    53ce:	f1 f7       	brne	.-4      	; 0x53cc <main+0x35a>
    53d0:	8f 01       	movw	r16, r30
    53d2:	1a a7       	lds	r17, 0x7a
    53d4:	09 a7       	lds	r16, 0x79
		_delay_ms(50);
		while(1);			//Invalid Device id
    53d6:	ff cf       	rjmp	.-2      	; 0x53d6 <main+0x364>
	}
	check_status(i2c_sendbyte(DEV_ADD, INIT_REG, INIT_VAL)); //initializing the device when device id is correct.
    53d8:	80 ed       	ldi	r24, 0xD0	; 208
    53da:	6b e6       	ldi	r22, 0x6B	; 107
    53dc:	40 e0       	ldi	r20, 0x00	; 0
    53de:	0e 94 21 01 	call	0x242	; 0x242 <i2c_sendbyte>
    53e2:	0e 94 cf 1a 	call	0x359e	; 0x359e <check_status>
	check_status(i2c_sendbyte(DEV_ADD, INIT_REG_ACC, INIT_VAL)); //initializing the device when device id is correct.
    53e6:	80 ed       	ldi	r24, 0xD0	; 208
    53e8:	6c e1       	ldi	r22, 0x1C	; 28
    53ea:	40 e0       	ldi	r20, 0x00	; 0
    53ec:	0e 94 21 01 	call	0x242	; 0x242 <i2c_sendbyte>
    53f0:	0e 94 cf 1a 	call	0x359e	; 0x359e <check_status>
	check_status(i2c_sendbyte(DEV_ADD, INIT_REG_GYRO, INIT_VAL)); //initializing the device when device id is correct.
    53f4:	80 ed       	ldi	r24, 0xD0	; 208
    53f6:	6b e1       	ldi	r22, 0x1B	; 27
    53f8:	40 e0       	ldi	r20, 0x00	; 0
    53fa:	0e 94 21 01 	call	0x242	; 0x242 <i2c_sendbyte>
    53fe:	0e 94 cf 1a 	call	0x359e	; 0x359e <check_status>
	
	run=1;
    5402:	81 e0       	ldi	r24, 0x01	; 1
    5404:	80 93 27 02 	sts	0x0227, r24
    5408:	01 c0       	rjmp	.+2      	; 0x540c <main+0x39a>
			flag_S3=1;
			flag_Shape=1;
			buzzer_beep();
			shape_type='3';                    
		}		
	}
    540a:	00 00       	nop
	check_status(i2c_sendbyte(DEV_ADD, INIT_REG_GYRO, INIT_VAL)); //initializing the device when device id is correct.
	
	run=1;
	while(1)
	{
        sensor_refresh();        //refreshes the ADC values of the sensors.
    540c:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <sensor_refresh>
  
		if((L>0x17 && C>0x17 && R>0x17)||(L<0x17 && C>0x17 && R>0x17)||(L>0x17 && C>0x17 && R<0x17)) //|| (pathL > 76)|| (pathR > 76))   //node detection
    5410:	80 91 36 02 	lds	r24, 0x0236
    5414:	88 31       	cpi	r24, 0x18	; 24
    5416:	40 f0       	brcs	.+16     	; 0x5428 <main+0x3b6>
    5418:	80 91 37 02 	lds	r24, 0x0237
    541c:	88 31       	cpi	r24, 0x18	; 24
    541e:	20 f0       	brcs	.+8      	; 0x5428 <main+0x3b6>
    5420:	80 91 38 02 	lds	r24, 0x0238
    5424:	88 31       	cpi	r24, 0x18	; 24
    5426:	c0 f4       	brcc	.+48     	; 0x5458 <main+0x3e6>
    5428:	80 91 36 02 	lds	r24, 0x0236
    542c:	87 31       	cpi	r24, 0x17	; 23
    542e:	40 f4       	brcc	.+16     	; 0x5440 <main+0x3ce>
    5430:	80 91 37 02 	lds	r24, 0x0237
    5434:	88 31       	cpi	r24, 0x18	; 24
    5436:	20 f0       	brcs	.+8      	; 0x5440 <main+0x3ce>
    5438:	80 91 38 02 	lds	r24, 0x0238
    543c:	88 31       	cpi	r24, 0x18	; 24
    543e:	60 f4       	brcc	.+24     	; 0x5458 <main+0x3e6>
    5440:	80 91 36 02 	lds	r24, 0x0236
    5444:	88 31       	cpi	r24, 0x18	; 24
    5446:	88 f0       	brcs	.+34     	; 0x546a <main+0x3f8>
    5448:	80 91 37 02 	lds	r24, 0x0237
    544c:	88 31       	cpi	r24, 0x18	; 24
    544e:	68 f0       	brcs	.+26     	; 0x546a <main+0x3f8>
    5450:	80 91 38 02 	lds	r24, 0x0238
    5454:	87 31       	cpi	r24, 0x17	; 23
    5456:	48 f4       	brcc	.+18     	; 0x546a <main+0x3f8>
		{
			if(flag_node==0)
    5458:	80 91 26 02 	lds	r24, 0x0226
    545c:	88 23       	and	r24, r24
    545e:	29 f4       	brne	.+10     	; 0x546a <main+0x3f8>
			{
				node_detector();
    5460:	0e 94 f8 21 	call	0x43f0	; 0x43f0 <node_detector>
				flag_node=1;
    5464:	81 e0       	ldi	r24, 0x01	; 1
    5466:	80 93 26 02 	sts	0x0226, r24
			}
			
		}
		if((pathL > 20) || (pathR > 20))
    546a:	80 91 34 02 	lds	r24, 0x0234
    546e:	85 31       	cpi	r24, 0x15	; 21
    5470:	20 f4       	brcc	.+8      	; 0x547a <main+0x408>
    5472:	80 91 35 02 	lds	r24, 0x0235
    5476:	85 31       	cpi	r24, 0x15	; 21
    5478:	10 f0       	brcs	.+4      	; 0x547e <main+0x40c>
		{
			flag_node=0;
    547a:	10 92 26 02 	sts	0x0226, r1
		}
		
		if(IR3 < 0x30)            //condition for obstacle detection
    547e:	80 91 3b 02 	lds	r24, 0x023B
    5482:	80 33       	cpi	r24, 0x30	; 48
    5484:	08 f0       	brcs	.+2      	; 0x5488 <main+0x416>
    5486:	84 c0       	rjmp	.+264    	; 0x5590 <main+0x51e>
		{
			stop_bot();
    5488:	0e 94 4a 12 	call	0x2494	; 0x2494 <stop_bot>
    548c:	80 e0       	ldi	r24, 0x00	; 0
    548e:	90 e0       	ldi	r25, 0x00	; 0
    5490:	a8 e4       	ldi	r26, 0x48	; 72
    5492:	b3 e4       	ldi	r27, 0x43	; 67
    5494:	8b a7       	lds	r24, 0x7b
    5496:	9c a7       	lds	r25, 0x7c
    5498:	ad a7       	lds	r26, 0x7d
    549a:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    549c:	6b a5       	lds	r22, 0x6b
    549e:	7c a5       	lds	r23, 0x6c
    54a0:	8d a5       	lds	r24, 0x6d
    54a2:	9e a5       	lds	r25, 0x6e
    54a4:	26 e6       	ldi	r18, 0x66	; 102
    54a6:	36 e6       	ldi	r19, 0x66	; 102
    54a8:	46 e6       	ldi	r20, 0x66	; 102
    54aa:	55 e4       	ldi	r21, 0x45	; 69
    54ac:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    54b0:	dc 01       	movw	r26, r24
    54b2:	cb 01       	movw	r24, r22
    54b4:	8f a7       	lds	r24, 0x7f
    54b6:	98 ab       	sts	0x58, r25
    54b8:	a9 ab       	sts	0x59, r26
    54ba:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    54bc:	11 e0       	ldi	r17, 0x01	; 1
    54be:	6f a5       	lds	r22, 0x6f
    54c0:	78 a9       	sts	0x48, r23
    54c2:	89 a9       	sts	0x49, r24
    54c4:	9a a9       	sts	0x4a, r25
    54c6:	20 e0       	ldi	r18, 0x00	; 0
    54c8:	30 e0       	ldi	r19, 0x00	; 0
    54ca:	40 e8       	ldi	r20, 0x80	; 128
    54cc:	5f e3       	ldi	r21, 0x3F	; 63
    54ce:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    54d2:	88 23       	and	r24, r24
    54d4:	0c f0       	brlt	.+2      	; 0x54d8 <main+0x466>
    54d6:	10 e0       	ldi	r17, 0x00	; 0
    54d8:	11 23       	and	r17, r17
    54da:	29 f0       	breq	.+10     	; 0x54e6 <main+0x474>
		__ticks = 1;
    54dc:	81 e0       	ldi	r24, 0x01	; 1
    54de:	90 e0       	ldi	r25, 0x00	; 0
    54e0:	9c ab       	sts	0x5c, r25
    54e2:	8b ab       	sts	0x5b, r24
    54e4:	46 c0       	rjmp	.+140    	; 0x5572 <main+0x500>
	else if (__tmp > 65535)
    54e6:	11 e0       	ldi	r17, 0x01	; 1
    54e8:	6f a5       	lds	r22, 0x6f
    54ea:	78 a9       	sts	0x48, r23
    54ec:	89 a9       	sts	0x49, r24
    54ee:	9a a9       	sts	0x4a, r25
    54f0:	20 e0       	ldi	r18, 0x00	; 0
    54f2:	3f ef       	ldi	r19, 0xFF	; 255
    54f4:	4f e7       	ldi	r20, 0x7F	; 127
    54f6:	57 e4       	ldi	r21, 0x47	; 71
    54f8:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    54fc:	18 16       	cp	r1, r24
    54fe:	0c f0       	brlt	.+2      	; 0x5502 <main+0x490>
    5500:	10 e0       	ldi	r17, 0x00	; 0
    5502:	11 23       	and	r17, r17
    5504:	61 f1       	breq	.+88     	; 0x555e <main+0x4ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5506:	6b a5       	lds	r22, 0x6b
    5508:	7c a5       	lds	r23, 0x6c
    550a:	8d a5       	lds	r24, 0x6d
    550c:	9e a5       	lds	r25, 0x6e
    550e:	20 e0       	ldi	r18, 0x00	; 0
    5510:	30 e0       	ldi	r19, 0x00	; 0
    5512:	40 e2       	ldi	r20, 0x20	; 32
    5514:	51 e4       	ldi	r21, 0x41	; 65
    5516:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    551a:	dc 01       	movw	r26, r24
    551c:	cb 01       	movw	r24, r22
    551e:	bc 01       	movw	r22, r24
    5520:	cd 01       	movw	r24, r26
    5522:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    5526:	dc 01       	movw	r26, r24
    5528:	cb 01       	movw	r24, r22
    552a:	9c ab       	sts	0x5c, r25
    552c:	8b ab       	sts	0x5b, r24
    552e:	12 c0       	rjmp	.+36     	; 0x5554 <main+0x4e2>
    5530:	80 e7       	ldi	r24, 0x70	; 112
    5532:	91 e0       	ldi	r25, 0x01	; 1
    5534:	9e ab       	sts	0x5e, r25
    5536:	8d ab       	sts	0x5d, r24
    5538:	8d a9       	sts	0x4d, r24
    553a:	9e a9       	sts	0x4e, r25
    553c:	8c 01       	movw	r16, r24
    553e:	c8 01       	movw	r24, r16
    5540:	01 97       	sbiw	r24, 0x01	; 1
    5542:	f1 f7       	brne	.-4      	; 0x5540 <main+0x4ce>
    5544:	8c 01       	movw	r16, r24
    5546:	1e ab       	sts	0x5e, r17
    5548:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    554a:	8b a9       	sts	0x4b, r24
    554c:	9c a9       	sts	0x4c, r25
    554e:	01 97       	sbiw	r24, 0x01	; 1
    5550:	9c ab       	sts	0x5c, r25
    5552:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5554:	8b a9       	sts	0x4b, r24
    5556:	9c a9       	sts	0x4c, r25
    5558:	00 97       	sbiw	r24, 0x00	; 0
    555a:	51 f7       	brne	.-44     	; 0x5530 <main+0x4be>
    555c:	17 c0       	rjmp	.+46     	; 0x558c <main+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    555e:	6f a5       	lds	r22, 0x6f
    5560:	78 a9       	sts	0x48, r23
    5562:	89 a9       	sts	0x49, r24
    5564:	9a a9       	sts	0x4a, r25
    5566:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    556a:	dc 01       	movw	r26, r24
    556c:	cb 01       	movw	r24, r22
    556e:	9c ab       	sts	0x5c, r25
    5570:	8b ab       	sts	0x5b, r24
    5572:	8b a9       	sts	0x4b, r24
    5574:	9c a9       	sts	0x4c, r25
    5576:	98 af       	sts	0x78, r25
    5578:	8f ab       	sts	0x5f, r24
    557a:	8f a9       	sts	0x4f, r24
    557c:	98 ad       	sts	0x68, r25
    557e:	8c 01       	movw	r16, r24
    5580:	f8 01       	movw	r30, r16
    5582:	31 97       	sbiw	r30, 0x01	; 1
    5584:	f1 f7       	brne	.-4      	; 0x5582 <main+0x510>
    5586:	8f 01       	movw	r16, r30
    5588:	18 af       	sts	0x78, r17
    558a:	0f ab       	sts	0x5f, r16
			_delay_ms(200);
			obstacle_detector();     
    558c:	0e 94 09 21 	call	0x4212	; 0x4212 <obstacle_detector>
		}
		
		if ((SHARP1 > 100 && SHARP1 < 160) && (flag_left_object==0) && (pathL > 25 && pathL < 40))   //when left object is detected.
    5590:	80 91 3e 02 	lds	r24, 0x023E
    5594:	85 36       	cpi	r24, 0x65	; 101
    5596:	48 f1       	brcs	.+82     	; 0x55ea <main+0x578>
    5598:	80 91 3e 02 	lds	r24, 0x023E
    559c:	80 3a       	cpi	r24, 0xA0	; 160
    559e:	28 f5       	brcc	.+74     	; 0x55ea <main+0x578>
    55a0:	80 91 32 02 	lds	r24, 0x0232
    55a4:	88 23       	and	r24, r24
    55a6:	09 f5       	brne	.+66     	; 0x55ea <main+0x578>
    55a8:	80 91 34 02 	lds	r24, 0x0234
    55ac:	8a 31       	cpi	r24, 0x1A	; 26
    55ae:	e8 f0       	brcs	.+58     	; 0x55ea <main+0x578>
    55b0:	80 91 34 02 	lds	r24, 0x0234
    55b4:	88 32       	cpi	r24, 0x28	; 40
    55b6:	c8 f4       	brcc	.+50     	; 0x55ea <main+0x578>
		{
			flag_left_object=1;
    55b8:	81 e0       	ldi	r24, 0x01	; 1
    55ba:	80 93 32 02 	sts	0x0232, r24
			IR1=ADC_Conversion(4);
    55be:	84 e0       	ldi	r24, 0x04	; 4
    55c0:	0e 94 88 11 	call	0x2310	; 0x2310 <ADC_Conversion>
    55c4:	80 93 39 02 	sts	0x0239, r24
			if(IR1 < 147)
    55c8:	80 91 39 02 	lds	r24, 0x0239
    55cc:	83 39       	cpi	r24, 0x93	; 147
    55ce:	68 f4       	brcc	.+26     	; 0x55ea <main+0x578>
			{
				stop_bot();
    55d0:	0e 94 4a 12 	call	0x2494	; 0x2494 <stop_bot>
				object_detector();
    55d4:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <object_detector>
				flag_left_object=2;
    55d8:	82 e0       	ldi	r24, 0x02	; 2
    55da:	80 93 32 02 	sts	0x0232, r24
				forward();
    55de:	0e 94 22 12 	call	0x2444	; 0x2444 <forward>
				velocity(140,140);
    55e2:	8c e8       	ldi	r24, 0x8C	; 140
    55e4:	6c e8       	ldi	r22, 0x8C	; 140
    55e6:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <velocity>
			}		
		}
		SHARP5=ADC_Conversion(13); 
    55ea:	8d e0       	ldi	r24, 0x0D	; 13
    55ec:	0e 94 88 11 	call	0x2310	; 0x2310 <ADC_Conversion>
    55f0:	80 93 3f 02 	sts	0x023F, r24
		if ((SHARP5 > 48 && SHARP5 < 100) && (flag_right_object==0) && (pathR > 25 && pathR < 40))   //when right object is detected
    55f4:	80 91 3f 02 	lds	r24, 0x023F
    55f8:	81 33       	cpi	r24, 0x31	; 49
    55fa:	48 f1       	brcs	.+82     	; 0x564e <main+0x5dc>
    55fc:	80 91 3f 02 	lds	r24, 0x023F
    5600:	84 36       	cpi	r24, 0x64	; 100
    5602:	28 f5       	brcc	.+74     	; 0x564e <main+0x5dc>
    5604:	80 91 33 02 	lds	r24, 0x0233
    5608:	88 23       	and	r24, r24
    560a:	09 f5       	brne	.+66     	; 0x564e <main+0x5dc>
    560c:	80 91 35 02 	lds	r24, 0x0235
    5610:	8a 31       	cpi	r24, 0x1A	; 26
    5612:	e8 f0       	brcs	.+58     	; 0x564e <main+0x5dc>
    5614:	80 91 35 02 	lds	r24, 0x0235
    5618:	88 32       	cpi	r24, 0x28	; 40
    561a:	c8 f4       	brcc	.+50     	; 0x564e <main+0x5dc>
		{
			flag_right_object=1;
    561c:	81 e0       	ldi	r24, 0x01	; 1
    561e:	80 93 33 02 	sts	0x0233, r24
			IR5=ADC_Conversion(8);
    5622:	88 e0       	ldi	r24, 0x08	; 8
    5624:	0e 94 88 11 	call	0x2310	; 0x2310 <ADC_Conversion>
    5628:	80 93 3d 02 	sts	0x023D, r24
			if (IR5 < 152)
    562c:	80 91 3d 02 	lds	r24, 0x023D
    5630:	88 39       	cpi	r24, 0x98	; 152
    5632:	68 f4       	brcc	.+26     	; 0x564e <main+0x5dc>
			{
				stop_bot();
    5634:	0e 94 4a 12 	call	0x2494	; 0x2494 <stop_bot>
				object_detector();
    5638:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <object_detector>
				flag_right_object=2;
    563c:	82 e0       	ldi	r24, 0x02	; 2
    563e:	80 93 33 02 	sts	0x0233, r24
				forward();
    5642:	0e 94 22 12 	call	0x2444	; 0x2444 <forward>
				velocity(140,140);
    5646:	8c e8       	ldi	r24, 0x8C	; 140
    5648:	6c e8       	ldi	r22, 0x8C	; 140
    564a:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <velocity>
			}
			
		}
		if((flag_S4==0) && (flag_Shape == 0) && (IR1<100 && IR5<100) && (pathL > 2 && pathL < 60))    //tunnel detection
    564e:	80 91 2c 02 	lds	r24, 0x022C
    5652:	88 23       	and	r24, r24
    5654:	09 f0       	breq	.+2      	; 0x5658 <main+0x5e6>
    5656:	ee c0       	rjmp	.+476    	; 0x5834 <main+0x7c2>
    5658:	80 91 28 02 	lds	r24, 0x0228
    565c:	88 23       	and	r24, r24
    565e:	09 f0       	breq	.+2      	; 0x5662 <main+0x5f0>
    5660:	e9 c0       	rjmp	.+466    	; 0x5834 <main+0x7c2>
    5662:	80 91 39 02 	lds	r24, 0x0239
    5666:	84 36       	cpi	r24, 0x64	; 100
    5668:	08 f0       	brcs	.+2      	; 0x566c <main+0x5fa>
    566a:	e4 c0       	rjmp	.+456    	; 0x5834 <main+0x7c2>
    566c:	80 91 3d 02 	lds	r24, 0x023D
    5670:	84 36       	cpi	r24, 0x64	; 100
    5672:	08 f0       	brcs	.+2      	; 0x5676 <main+0x604>
    5674:	df c0       	rjmp	.+446    	; 0x5834 <main+0x7c2>
    5676:	80 91 34 02 	lds	r24, 0x0234
    567a:	83 30       	cpi	r24, 0x03	; 3
    567c:	08 f4       	brcc	.+2      	; 0x5680 <main+0x60e>
    567e:	da c0       	rjmp	.+436    	; 0x5834 <main+0x7c2>
    5680:	80 91 34 02 	lds	r24, 0x0234
    5684:	8c 33       	cpi	r24, 0x3C	; 60
    5686:	08 f0       	brcs	.+2      	; 0x568a <main+0x618>
    5688:	d5 c0       	rjmp	.+426    	; 0x5834 <main+0x7c2>
		{
			flag_S4=1;
    568a:	81 e0       	ldi	r24, 0x01	; 1
    568c:	80 93 2c 02 	sts	0x022C, r24
			flag_Shape=1;
    5690:	81 e0       	ldi	r24, 0x01	; 1
    5692:	80 93 28 02 	sts	0x0228, r24
			shape_type='4';
    5696:	84 e3       	ldi	r24, 0x34	; 52
    5698:	80 93 03 02 	sts	0x0203, r24
			buzzer_beep();
    569c:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <buzzer_beep>
			servo_1(95);
    56a0:	8f e5       	ldi	r24, 0x5F	; 95
    56a2:	0e 94 29 11 	call	0x2252	; 0x2252 <servo_1>
    56a6:	80 e0       	ldi	r24, 0x00	; 0
    56a8:	90 e0       	ldi	r25, 0x00	; 0
    56aa:	a8 ec       	ldi	r26, 0xC8	; 200
    56ac:	b2 e4       	ldi	r27, 0x42	; 66
    56ae:	89 af       	sts	0x79, r24
    56b0:	9a af       	sts	0x7a, r25
    56b2:	ab af       	sts	0x7b, r26
    56b4:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    56b6:	69 ad       	sts	0x69, r22
    56b8:	7a ad       	sts	0x6a, r23
    56ba:	8b ad       	sts	0x6b, r24
    56bc:	9c ad       	sts	0x6c, r25
    56be:	26 e6       	ldi	r18, 0x66	; 102
    56c0:	36 e6       	ldi	r19, 0x66	; 102
    56c2:	46 e6       	ldi	r20, 0x66	; 102
    56c4:	55 e4       	ldi	r21, 0x45	; 69
    56c6:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    56ca:	dc 01       	movw	r26, r24
    56cc:	cb 01       	movw	r24, r22
    56ce:	9e 01       	movw	r18, r28
    56d0:	23 5c       	subi	r18, 0xC3	; 195
    56d2:	3f 4f       	sbci	r19, 0xFF	; 255
    56d4:	f9 01       	movw	r30, r18
    56d6:	80 83       	st	Z, r24
    56d8:	91 83       	std	Z+1, r25	; 0x01
    56da:	a2 83       	std	Z+2, r26	; 0x02
    56dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    56de:	11 e0       	ldi	r17, 0x01	; 1
    56e0:	ce 01       	movw	r24, r28
    56e2:	cd 96       	adiw	r24, 0x3d	; 61
    56e4:	fc 01       	movw	r30, r24
    56e6:	60 81       	ld	r22, Z
    56e8:	71 81       	ldd	r23, Z+1	; 0x01
    56ea:	82 81       	ldd	r24, Z+2	; 0x02
    56ec:	93 81       	ldd	r25, Z+3	; 0x03
    56ee:	20 e0       	ldi	r18, 0x00	; 0
    56f0:	30 e0       	ldi	r19, 0x00	; 0
    56f2:	40 e8       	ldi	r20, 0x80	; 128
    56f4:	5f e3       	ldi	r21, 0x3F	; 63
    56f6:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    56fa:	88 23       	and	r24, r24
    56fc:	0c f0       	brlt	.+2      	; 0x5700 <main+0x68e>
    56fe:	10 e0       	ldi	r17, 0x00	; 0
    5700:	11 23       	and	r17, r17
    5702:	49 f0       	breq	.+18     	; 0x5716 <main+0x6a4>
		__ticks = 1;
    5704:	ce 01       	movw	r24, r28
    5706:	8f 5b       	subi	r24, 0xBF	; 191
    5708:	9f 4f       	sbci	r25, 0xFF	; 255
    570a:	21 e0       	ldi	r18, 0x01	; 1
    570c:	30 e0       	ldi	r19, 0x00	; 0
    570e:	fc 01       	movw	r30, r24
    5710:	31 83       	std	Z+1, r19	; 0x01
    5712:	20 83       	st	Z, r18
    5714:	6e c0       	rjmp	.+220    	; 0x57f2 <main+0x780>
	else if (__tmp > 65535)
    5716:	11 e0       	ldi	r17, 0x01	; 1
    5718:	ce 01       	movw	r24, r28
    571a:	cd 96       	adiw	r24, 0x3d	; 61
    571c:	fc 01       	movw	r30, r24
    571e:	60 81       	ld	r22, Z
    5720:	71 81       	ldd	r23, Z+1	; 0x01
    5722:	82 81       	ldd	r24, Z+2	; 0x02
    5724:	93 81       	ldd	r25, Z+3	; 0x03
    5726:	20 e0       	ldi	r18, 0x00	; 0
    5728:	3f ef       	ldi	r19, 0xFF	; 255
    572a:	4f e7       	ldi	r20, 0x7F	; 127
    572c:	57 e4       	ldi	r21, 0x47	; 71
    572e:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    5732:	18 16       	cp	r1, r24
    5734:	0c f0       	brlt	.+2      	; 0x5738 <main+0x6c6>
    5736:	10 e0       	ldi	r17, 0x00	; 0
    5738:	11 23       	and	r17, r17
    573a:	09 f4       	brne	.+2      	; 0x573e <main+0x6cc>
    573c:	49 c0       	rjmp	.+146    	; 0x57d0 <main+0x75e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    573e:	69 ad       	sts	0x69, r22
    5740:	7a ad       	sts	0x6a, r23
    5742:	8b ad       	sts	0x6b, r24
    5744:	9c ad       	sts	0x6c, r25
    5746:	20 e0       	ldi	r18, 0x00	; 0
    5748:	30 e0       	ldi	r19, 0x00	; 0
    574a:	40 e2       	ldi	r20, 0x20	; 32
    574c:	51 e4       	ldi	r21, 0x41	; 65
    574e:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <__mulsf3>
    5752:	dc 01       	movw	r26, r24
    5754:	cb 01       	movw	r24, r22
    5756:	8e 01       	movw	r16, r28
    5758:	0f 5b       	subi	r16, 0xBF	; 191
    575a:	1f 4f       	sbci	r17, 0xFF	; 255
    575c:	bc 01       	movw	r22, r24
    575e:	cd 01       	movw	r24, r26
    5760:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    5764:	dc 01       	movw	r26, r24
    5766:	cb 01       	movw	r24, r22
    5768:	f8 01       	movw	r30, r16
    576a:	91 83       	std	Z+1, r25	; 0x01
    576c:	80 83       	st	Z, r24
    576e:	27 c0       	rjmp	.+78     	; 0x57be <main+0x74c>
    5770:	ce 01       	movw	r24, r28
    5772:	8d 5b       	subi	r24, 0xBD	; 189
    5774:	9f 4f       	sbci	r25, 0xFF	; 255
    5776:	20 e7       	ldi	r18, 0x70	; 112
    5778:	31 e0       	ldi	r19, 0x01	; 1
    577a:	fc 01       	movw	r30, r24
    577c:	31 83       	std	Z+1, r19	; 0x01
    577e:	20 83       	st	Z, r18
    5780:	ce 01       	movw	r24, r28
    5782:	8d 5b       	subi	r24, 0xBD	; 189
    5784:	9f 4f       	sbci	r25, 0xFF	; 255
    5786:	fc 01       	movw	r30, r24
    5788:	80 81       	ld	r24, Z
    578a:	91 81       	ldd	r25, Z+1	; 0x01
    578c:	8c 01       	movw	r16, r24
    578e:	c8 01       	movw	r24, r16
    5790:	01 97       	sbiw	r24, 0x01	; 1
    5792:	f1 f7       	brne	.-4      	; 0x5790 <main+0x71e>
    5794:	8c 01       	movw	r16, r24
    5796:	ce 01       	movw	r24, r28
    5798:	8d 5b       	subi	r24, 0xBD	; 189
    579a:	9f 4f       	sbci	r25, 0xFF	; 255
    579c:	fc 01       	movw	r30, r24
    579e:	11 83       	std	Z+1, r17	; 0x01
    57a0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57a2:	ce 01       	movw	r24, r28
    57a4:	8f 5b       	subi	r24, 0xBF	; 191
    57a6:	9f 4f       	sbci	r25, 0xFF	; 255
    57a8:	9e 01       	movw	r18, r28
    57aa:	2f 5b       	subi	r18, 0xBF	; 191
    57ac:	3f 4f       	sbci	r19, 0xFF	; 255
    57ae:	f9 01       	movw	r30, r18
    57b0:	20 81       	ld	r18, Z
    57b2:	31 81       	ldd	r19, Z+1	; 0x01
    57b4:	21 50       	subi	r18, 0x01	; 1
    57b6:	30 40       	sbci	r19, 0x00	; 0
    57b8:	fc 01       	movw	r30, r24
    57ba:	31 83       	std	Z+1, r19	; 0x01
    57bc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57be:	ce 01       	movw	r24, r28
    57c0:	8f 5b       	subi	r24, 0xBF	; 191
    57c2:	9f 4f       	sbci	r25, 0xFF	; 255
    57c4:	fc 01       	movw	r30, r24
    57c6:	80 81       	ld	r24, Z
    57c8:	91 81       	ldd	r25, Z+1	; 0x01
    57ca:	00 97       	sbiw	r24, 0x00	; 0
    57cc:	89 f6       	brne	.-94     	; 0x5770 <main+0x6fe>
    57ce:	2e c0       	rjmp	.+92     	; 0x582c <main+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57d0:	8e 01       	movw	r16, r28
    57d2:	0f 5b       	subi	r16, 0xBF	; 191
    57d4:	1f 4f       	sbci	r17, 0xFF	; 255
    57d6:	ce 01       	movw	r24, r28
    57d8:	cd 96       	adiw	r24, 0x3d	; 61
    57da:	fc 01       	movw	r30, r24
    57dc:	60 81       	ld	r22, Z
    57de:	71 81       	ldd	r23, Z+1	; 0x01
    57e0:	82 81       	ldd	r24, Z+2	; 0x02
    57e2:	93 81       	ldd	r25, Z+3	; 0x03
    57e4:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__fixunssfsi>
    57e8:	dc 01       	movw	r26, r24
    57ea:	cb 01       	movw	r24, r22
    57ec:	f8 01       	movw	r30, r16
    57ee:	91 83       	std	Z+1, r25	; 0x01
    57f0:	80 83       	st	Z, r24
    57f2:	ce 01       	movw	r24, r28
    57f4:	8b 5b       	subi	r24, 0xBB	; 187
    57f6:	9f 4f       	sbci	r25, 0xFF	; 255
    57f8:	9e 01       	movw	r18, r28
    57fa:	2f 5b       	subi	r18, 0xBF	; 191
    57fc:	3f 4f       	sbci	r19, 0xFF	; 255
    57fe:	f9 01       	movw	r30, r18
    5800:	20 81       	ld	r18, Z
    5802:	31 81       	ldd	r19, Z+1	; 0x01
    5804:	fc 01       	movw	r30, r24
    5806:	31 83       	std	Z+1, r19	; 0x01
    5808:	20 83       	st	Z, r18
    580a:	ce 01       	movw	r24, r28
    580c:	8b 5b       	subi	r24, 0xBB	; 187
    580e:	9f 4f       	sbci	r25, 0xFF	; 255
    5810:	fc 01       	movw	r30, r24
    5812:	80 81       	ld	r24, Z
    5814:	91 81       	ldd	r25, Z+1	; 0x01
    5816:	8c 01       	movw	r16, r24
    5818:	c8 01       	movw	r24, r16
    581a:	01 97       	sbiw	r24, 0x01	; 1
    581c:	f1 f7       	brne	.-4      	; 0x581a <main+0x7a8>
    581e:	8c 01       	movw	r16, r24
    5820:	ce 01       	movw	r24, r28
    5822:	8b 5b       	subi	r24, 0xBB	; 187
    5824:	9f 4f       	sbci	r25, 0xFF	; 255
    5826:	fc 01       	movw	r30, r24
    5828:	11 83       	std	Z+1, r17	; 0x01
    582a:	00 83       	st	Z, r16
			_delay_ms(100);
			servo_1_free();
    582c:	0e 94 77 11 	call	0x22ee	; 0x22ee <servo_1_free>
			tunnel_traveller();
    5830:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <tunnel_traveller>
		}
		
        // line follower
		sensor_refresh();
    5834:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <sensor_refresh>
	L1:	if((L<0x17 && C>0x17 && R<0x17))        // 010 
    5838:	80 91 36 02 	lds	r24, 0x0236
    583c:	87 31       	cpi	r24, 0x17	; 23
    583e:	88 f4       	brcc	.+34     	; 0x5862 <main+0x7f0>
    5840:	80 91 37 02 	lds	r24, 0x0237
    5844:	88 31       	cpi	r24, 0x18	; 24
    5846:	68 f0       	brcs	.+26     	; 0x5862 <main+0x7f0>
    5848:	80 91 38 02 	lds	r24, 0x0238
    584c:	87 31       	cpi	r24, 0x17	; 23
    584e:	48 f4       	brcc	.+18     	; 0x5862 <main+0x7f0>
		{
			forward_mm(5);
    5850:	85 e0       	ldi	r24, 0x05	; 5
    5852:	90 e0       	ldi	r25, 0x00	; 0
    5854:	0e 94 71 13 	call	0x26e2	; 0x26e2 <forward_mm>
			velocity(170,170);	
    5858:	8a ea       	ldi	r24, 0xAA	; 170
    585a:	6a ea       	ldi	r22, 0xAA	; 170
    585c:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <velocity>
    5860:	46 c0       	rjmp	.+140    	; 0x58ee <main+0x87c>
		}
		else if((L<0x17 && C<0x17 && R>0x17))   // 001 0r 011
    5862:	80 91 36 02 	lds	r24, 0x0236
    5866:	87 31       	cpi	r24, 0x17	; 23
    5868:	d0 f4       	brcc	.+52     	; 0x589e <main+0x82c>
    586a:	80 91 37 02 	lds	r24, 0x0237
    586e:	87 31       	cpi	r24, 0x17	; 23
    5870:	b0 f4       	brcc	.+44     	; 0x589e <main+0x82c>
    5872:	80 91 38 02 	lds	r24, 0x0238
    5876:	88 31       	cpi	r24, 0x18	; 24
    5878:	90 f0       	brcs	.+36     	; 0x589e <main+0x82c>
		{
			 right_degrees(6);  //soft right}
    587a:	86 e0       	ldi	r24, 0x06	; 6
    587c:	90 e0       	ldi	r25, 0x00	; 0
    587e:	0e 94 e5 12 	call	0x25ca	; 0x25ca <right_degrees>
			 velocity(150,150);
    5882:	86 e9       	ldi	r24, 0x96	; 150
    5884:	66 e9       	ldi	r22, 0x96	; 150
    5886:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <velocity>
			 C=ADC_Conversion(2);
    588a:	82 e0       	ldi	r24, 0x02	; 2
    588c:	0e 94 88 11 	call	0x2310	; 0x2310 <ADC_Conversion>
    5890:	80 93 37 02 	sts	0x0237, r24
			 if(C>0x17)
    5894:	80 91 37 02 	lds	r24, 0x0237
    5898:	88 31       	cpi	r24, 0x18	; 24
    589a:	48 f1       	brcs	.+82     	; 0x58ee <main+0x87c>
			 goto L1;
    589c:	cd cf       	rjmp	.-102    	; 0x5838 <main+0x7c6>
		}
		
		else if((L>0x17 && C<0x17 && R<0x17))   // 100
    589e:	80 91 36 02 	lds	r24, 0x0236
    58a2:	88 31       	cpi	r24, 0x18	; 24
    58a4:	d0 f0       	brcs	.+52     	; 0x58da <main+0x868>
    58a6:	80 91 37 02 	lds	r24, 0x0237
    58aa:	87 31       	cpi	r24, 0x17	; 23
    58ac:	b0 f4       	brcc	.+44     	; 0x58da <main+0x868>
    58ae:	80 91 38 02 	lds	r24, 0x0238
    58b2:	87 31       	cpi	r24, 0x17	; 23
    58b4:	90 f4       	brcc	.+36     	; 0x58da <main+0x868>
		{
			 left_degrees(6);    //soft left
    58b6:	86 e0       	ldi	r24, 0x06	; 6
    58b8:	90 e0       	ldi	r25, 0x00	; 0
    58ba:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <left_degrees>
			 velocity(150,150);
    58be:	86 e9       	ldi	r24, 0x96	; 150
    58c0:	66 e9       	ldi	r22, 0x96	; 150
    58c2:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <velocity>
			 C=ADC_Conversion(2);  
    58c6:	82 e0       	ldi	r24, 0x02	; 2
    58c8:	0e 94 88 11 	call	0x2310	; 0x2310 <ADC_Conversion>
    58cc:	80 93 37 02 	sts	0x0237, r24
			  if(C>0x17)
    58d0:	80 91 37 02 	lds	r24, 0x0237
    58d4:	88 31       	cpi	r24, 0x18	; 24
    58d6:	58 f0       	brcs	.+22     	; 0x58ee <main+0x87c>
			  goto L1;
    58d8:	af cf       	rjmp	.-162    	; 0x5838 <main+0x7c6>
		}
		else
		{
			forward_mm(10);
    58da:	8a e0       	ldi	r24, 0x0A	; 10
    58dc:	90 e0       	ldi	r25, 0x00	; 0
    58de:	0e 94 71 13 	call	0x26e2	; 0x26e2 <forward_mm>
			velocity(170,170);
    58e2:	8a ea       	ldi	r24, 0xAA	; 170
    58e4:	6a ea       	ldi	r22, 0xAA	; 170
    58e6:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <velocity>
			sensor_refresh();
    58ea:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <sensor_refresh>
		}
		
		I2C_read();              //reads the I2C value
    58ee:	0e 94 56 16 	call	0x2cac	; 0x2cac <I2C_read>
		
		if((flag_S1==0) && (flag_Shape == 0) && ( rotation_z > 30 && rotation_z < 50 ) && (pathR > 18) && (node_count == 32))      //curve detection
    58f2:	80 91 29 02 	lds	r24, 0x0229
    58f6:	88 23       	and	r24, r24
    58f8:	09 f0       	breq	.+2      	; 0x58fc <main+0x88a>
    58fa:	48 c0       	rjmp	.+144    	; 0x598c <main+0x91a>
    58fc:	80 91 28 02 	lds	r24, 0x0228
    5900:	88 23       	and	r24, r24
    5902:	09 f0       	breq	.+2      	; 0x5906 <main+0x894>
    5904:	43 c0       	rjmp	.+134    	; 0x598c <main+0x91a>
    5906:	80 91 5c 02 	lds	r24, 0x025C
    590a:	90 91 5d 02 	lds	r25, 0x025D
    590e:	a0 91 5e 02 	lds	r26, 0x025E
    5912:	b0 91 5f 02 	lds	r27, 0x025F
    5916:	11 e0       	ldi	r17, 0x01	; 1
    5918:	bc 01       	movw	r22, r24
    591a:	cd 01       	movw	r24, r26
    591c:	20 e0       	ldi	r18, 0x00	; 0
    591e:	30 e0       	ldi	r19, 0x00	; 0
    5920:	40 ef       	ldi	r20, 0xF0	; 240
    5922:	51 e4       	ldi	r21, 0x41	; 65
    5924:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    5928:	18 16       	cp	r1, r24
    592a:	0c f0       	brlt	.+2      	; 0x592e <main+0x8bc>
    592c:	10 e0       	ldi	r17, 0x00	; 0
    592e:	11 23       	and	r17, r17
    5930:	69 f1       	breq	.+90     	; 0x598c <main+0x91a>
    5932:	80 91 5c 02 	lds	r24, 0x025C
    5936:	90 91 5d 02 	lds	r25, 0x025D
    593a:	a0 91 5e 02 	lds	r26, 0x025E
    593e:	b0 91 5f 02 	lds	r27, 0x025F
    5942:	11 e0       	ldi	r17, 0x01	; 1
    5944:	bc 01       	movw	r22, r24
    5946:	cd 01       	movw	r24, r26
    5948:	20 e0       	ldi	r18, 0x00	; 0
    594a:	30 e0       	ldi	r19, 0x00	; 0
    594c:	48 e4       	ldi	r20, 0x48	; 72
    594e:	52 e4       	ldi	r21, 0x42	; 66
    5950:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    5954:	88 23       	and	r24, r24
    5956:	0c f0       	brlt	.+2      	; 0x595a <main+0x8e8>
    5958:	10 e0       	ldi	r17, 0x00	; 0
    595a:	11 23       	and	r17, r17
    595c:	b9 f0       	breq	.+46     	; 0x598c <main+0x91a>
    595e:	80 91 35 02 	lds	r24, 0x0235
    5962:	83 31       	cpi	r24, 0x13	; 19
    5964:	98 f0       	brcs	.+38     	; 0x598c <main+0x91a>
    5966:	80 91 24 02 	lds	r24, 0x0224
    596a:	90 91 25 02 	lds	r25, 0x0225
    596e:	80 32       	cpi	r24, 0x20	; 32
    5970:	91 05       	cpc	r25, r1
    5972:	61 f4       	brne	.+24     	; 0x598c <main+0x91a>
		{
			flag_S1=1;
    5974:	81 e0       	ldi	r24, 0x01	; 1
    5976:	80 93 29 02 	sts	0x0229, r24
			flag_Shape=1;
    597a:	81 e0       	ldi	r24, 0x01	; 1
    597c:	80 93 28 02 	sts	0x0228, r24
			buzzer_beep();
    5980:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <buzzer_beep>
			shape_type='1';
    5984:	81 e3       	ldi	r24, 0x31	; 49
    5986:	80 93 03 02 	sts	0x0203, r24
    598a:	a7 c0       	rjmp	.+334    	; 0x5ada <main+0xa68>
		}
		else if((flag_S2==0) && (flag_Shape == 0) && ( force_x > 3000 && force_x < 4000 ) && (pathR > 20 && pathR < 30) && (node_count == 10))    //bigger hump detector
    598c:	80 91 2a 02 	lds	r24, 0x022A
    5990:	88 23       	and	r24, r24
    5992:	09 f0       	breq	.+2      	; 0x5996 <main+0x924>
    5994:	4c c0       	rjmp	.+152    	; 0x5a2e <main+0x9bc>
    5996:	80 91 28 02 	lds	r24, 0x0228
    599a:	88 23       	and	r24, r24
    599c:	09 f0       	breq	.+2      	; 0x59a0 <main+0x92e>
    599e:	47 c0       	rjmp	.+142    	; 0x5a2e <main+0x9bc>
    59a0:	80 91 54 02 	lds	r24, 0x0254
    59a4:	90 91 55 02 	lds	r25, 0x0255
    59a8:	a0 91 56 02 	lds	r26, 0x0256
    59ac:	b0 91 57 02 	lds	r27, 0x0257
    59b0:	11 e0       	ldi	r17, 0x01	; 1
    59b2:	bc 01       	movw	r22, r24
    59b4:	cd 01       	movw	r24, r26
    59b6:	20 e0       	ldi	r18, 0x00	; 0
    59b8:	30 e8       	ldi	r19, 0x80	; 128
    59ba:	4b e3       	ldi	r20, 0x3B	; 59
    59bc:	55 e4       	ldi	r21, 0x45	; 69
    59be:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    59c2:	18 16       	cp	r1, r24
    59c4:	0c f0       	brlt	.+2      	; 0x59c8 <main+0x956>
    59c6:	10 e0       	ldi	r17, 0x00	; 0
    59c8:	11 23       	and	r17, r17
    59ca:	89 f1       	breq	.+98     	; 0x5a2e <main+0x9bc>
    59cc:	80 91 54 02 	lds	r24, 0x0254
    59d0:	90 91 55 02 	lds	r25, 0x0255
    59d4:	a0 91 56 02 	lds	r26, 0x0256
    59d8:	b0 91 57 02 	lds	r27, 0x0257
    59dc:	11 e0       	ldi	r17, 0x01	; 1
    59de:	bc 01       	movw	r22, r24
    59e0:	cd 01       	movw	r24, r26
    59e2:	20 e0       	ldi	r18, 0x00	; 0
    59e4:	30 e0       	ldi	r19, 0x00	; 0
    59e6:	4a e7       	ldi	r20, 0x7A	; 122
    59e8:	55 e4       	ldi	r21, 0x45	; 69
    59ea:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    59ee:	88 23       	and	r24, r24
    59f0:	0c f0       	brlt	.+2      	; 0x59f4 <main+0x982>
    59f2:	10 e0       	ldi	r17, 0x00	; 0
    59f4:	11 23       	and	r17, r17
    59f6:	d9 f0       	breq	.+54     	; 0x5a2e <main+0x9bc>
    59f8:	80 91 35 02 	lds	r24, 0x0235
    59fc:	85 31       	cpi	r24, 0x15	; 21
    59fe:	b8 f0       	brcs	.+46     	; 0x5a2e <main+0x9bc>
    5a00:	80 91 35 02 	lds	r24, 0x0235
    5a04:	8e 31       	cpi	r24, 0x1E	; 30
    5a06:	98 f4       	brcc	.+38     	; 0x5a2e <main+0x9bc>
    5a08:	80 91 24 02 	lds	r24, 0x0224
    5a0c:	90 91 25 02 	lds	r25, 0x0225
    5a10:	8a 30       	cpi	r24, 0x0A	; 10
    5a12:	91 05       	cpc	r25, r1
    5a14:	61 f4       	brne	.+24     	; 0x5a2e <main+0x9bc>
		{
			flag_S2=1;
    5a16:	81 e0       	ldi	r24, 0x01	; 1
    5a18:	80 93 2a 02 	sts	0x022A, r24
			flag_Shape=1;
    5a1c:	81 e0       	ldi	r24, 0x01	; 1
    5a1e:	80 93 28 02 	sts	0x0228, r24
			buzzer_beep();
    5a22:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <buzzer_beep>
			shape_type='2';
    5a26:	82 e3       	ldi	r24, 0x32	; 50
    5a28:	80 93 03 02 	sts	0x0203, r24
    5a2c:	56 c0       	rjmp	.+172    	; 0x5ada <main+0xa68>
		}
		else if((flag_S3==0) && (flag_Shape == 0) && ( force_x > 700 && force_x < 1500 ) && (pathR > 20 && pathR < 30) && (node_count == 26))     //smaller hump detector
    5a2e:	80 91 2b 02 	lds	r24, 0x022B
    5a32:	88 23       	and	r24, r24
    5a34:	09 f0       	breq	.+2      	; 0x5a38 <main+0x9c6>
    5a36:	e9 cc       	rjmp	.-1582   	; 0x540a <main+0x398>
    5a38:	80 91 28 02 	lds	r24, 0x0228
    5a3c:	88 23       	and	r24, r24
    5a3e:	09 f0       	breq	.+2      	; 0x5a42 <main+0x9d0>
    5a40:	e4 cc       	rjmp	.-1592   	; 0x540a <main+0x398>
    5a42:	80 91 54 02 	lds	r24, 0x0254
    5a46:	90 91 55 02 	lds	r25, 0x0255
    5a4a:	a0 91 56 02 	lds	r26, 0x0256
    5a4e:	b0 91 57 02 	lds	r27, 0x0257
    5a52:	11 e0       	ldi	r17, 0x01	; 1
    5a54:	bc 01       	movw	r22, r24
    5a56:	cd 01       	movw	r24, r26
    5a58:	20 e0       	ldi	r18, 0x00	; 0
    5a5a:	30 e0       	ldi	r19, 0x00	; 0
    5a5c:	4f e2       	ldi	r20, 0x2F	; 47
    5a5e:	54 e4       	ldi	r21, 0x44	; 68
    5a60:	0e 94 1d 2f 	call	0x5e3a	; 0x5e3a <__gesf2>
    5a64:	18 16       	cp	r1, r24
    5a66:	0c f0       	brlt	.+2      	; 0x5a6a <main+0x9f8>
    5a68:	10 e0       	ldi	r17, 0x00	; 0
    5a6a:	11 23       	and	r17, r17
    5a6c:	09 f4       	brne	.+2      	; 0x5a70 <main+0x9fe>
    5a6e:	cd cc       	rjmp	.-1638   	; 0x540a <main+0x398>
    5a70:	80 91 54 02 	lds	r24, 0x0254
    5a74:	90 91 55 02 	lds	r25, 0x0255
    5a78:	a0 91 56 02 	lds	r26, 0x0256
    5a7c:	b0 91 57 02 	lds	r27, 0x0257
    5a80:	11 e0       	ldi	r17, 0x01	; 1
    5a82:	bc 01       	movw	r22, r24
    5a84:	cd 01       	movw	r24, r26
    5a86:	20 e0       	ldi	r18, 0x00	; 0
    5a88:	30 e8       	ldi	r19, 0x80	; 128
    5a8a:	4b eb       	ldi	r20, 0xBB	; 187
    5a8c:	54 e4       	ldi	r21, 0x44	; 68
    5a8e:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <__cmpsf2>
    5a92:	88 23       	and	r24, r24
    5a94:	0c f0       	brlt	.+2      	; 0x5a98 <main+0xa26>
    5a96:	10 e0       	ldi	r17, 0x00	; 0
    5a98:	11 23       	and	r17, r17
    5a9a:	09 f4       	brne	.+2      	; 0x5a9e <main+0xa2c>
    5a9c:	b6 cc       	rjmp	.-1684   	; 0x540a <main+0x398>
    5a9e:	80 91 35 02 	lds	r24, 0x0235
    5aa2:	85 31       	cpi	r24, 0x15	; 21
    5aa4:	08 f4       	brcc	.+2      	; 0x5aa8 <main+0xa36>
    5aa6:	b1 cc       	rjmp	.-1694   	; 0x540a <main+0x398>
    5aa8:	80 91 35 02 	lds	r24, 0x0235
    5aac:	8e 31       	cpi	r24, 0x1E	; 30
    5aae:	08 f0       	brcs	.+2      	; 0x5ab2 <main+0xa40>
    5ab0:	ac cc       	rjmp	.-1704   	; 0x540a <main+0x398>
    5ab2:	80 91 24 02 	lds	r24, 0x0224
    5ab6:	90 91 25 02 	lds	r25, 0x0225
    5aba:	8a 31       	cpi	r24, 0x1A	; 26
    5abc:	91 05       	cpc	r25, r1
    5abe:	09 f0       	breq	.+2      	; 0x5ac2 <main+0xa50>
    5ac0:	a4 cc       	rjmp	.-1720   	; 0x540a <main+0x398>
		{
			flag_S3=1;
    5ac2:	81 e0       	ldi	r24, 0x01	; 1
    5ac4:	80 93 2b 02 	sts	0x022B, r24
			flag_Shape=1;
    5ac8:	81 e0       	ldi	r24, 0x01	; 1
    5aca:	80 93 28 02 	sts	0x0228, r24
			buzzer_beep();
    5ace:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <buzzer_beep>
			shape_type='3';                    
    5ad2:	83 e3       	ldi	r24, 0x33	; 51
    5ad4:	80 93 03 02 	sts	0x0203, r24
		}		
	}
    5ad8:	98 cc       	rjmp	.-1744   	; 0x540a <main+0x398>
    5ada:	97 cc       	rjmp	.-1746   	; 0x540a <main+0x398>

00005adc <__subsf3>:
    5adc:	50 58       	subi	r21, 0x80	; 128

00005ade <__addsf3>:
    5ade:	bb 27       	eor	r27, r27
    5ae0:	aa 27       	eor	r26, r26
    5ae2:	0e d0       	rcall	.+28     	; 0x5b00 <__addsf3x>
    5ae4:	70 c1       	rjmp	.+736    	; 0x5dc6 <__fp_round>
    5ae6:	61 d1       	rcall	.+706    	; 0x5daa <__fp_pscA>
    5ae8:	30 f0       	brcs	.+12     	; 0x5af6 <__addsf3+0x18>
    5aea:	66 d1       	rcall	.+716    	; 0x5db8 <__fp_pscB>
    5aec:	20 f0       	brcs	.+8      	; 0x5af6 <__addsf3+0x18>
    5aee:	31 f4       	brne	.+12     	; 0x5afc <__addsf3+0x1e>
    5af0:	9f 3f       	cpi	r25, 0xFF	; 255
    5af2:	11 f4       	brne	.+4      	; 0x5af8 <__addsf3+0x1a>
    5af4:	1e f4       	brtc	.+6      	; 0x5afc <__addsf3+0x1e>
    5af6:	56 c1       	rjmp	.+684    	; 0x5da4 <__fp_nan>
    5af8:	0e f4       	brtc	.+2      	; 0x5afc <__addsf3+0x1e>
    5afa:	e0 95       	com	r30
    5afc:	e7 fb       	bst	r30, 7
    5afe:	4c c1       	rjmp	.+664    	; 0x5d98 <__fp_inf>

00005b00 <__addsf3x>:
    5b00:	e9 2f       	mov	r30, r25
    5b02:	72 d1       	rcall	.+740    	; 0x5de8 <__fp_split3>
    5b04:	80 f3       	brcs	.-32     	; 0x5ae6 <__addsf3+0x8>
    5b06:	ba 17       	cp	r27, r26
    5b08:	62 07       	cpc	r22, r18
    5b0a:	73 07       	cpc	r23, r19
    5b0c:	84 07       	cpc	r24, r20
    5b0e:	95 07       	cpc	r25, r21
    5b10:	18 f0       	brcs	.+6      	; 0x5b18 <__addsf3x+0x18>
    5b12:	71 f4       	brne	.+28     	; 0x5b30 <__addsf3x+0x30>
    5b14:	9e f5       	brtc	.+102    	; 0x5b7c <__addsf3x+0x7c>
    5b16:	8a c1       	rjmp	.+788    	; 0x5e2c <__fp_zero>
    5b18:	0e f4       	brtc	.+2      	; 0x5b1c <__addsf3x+0x1c>
    5b1a:	e0 95       	com	r30
    5b1c:	0b 2e       	mov	r0, r27
    5b1e:	ba 2f       	mov	r27, r26
    5b20:	a0 2d       	mov	r26, r0
    5b22:	0b 01       	movw	r0, r22
    5b24:	b9 01       	movw	r22, r18
    5b26:	90 01       	movw	r18, r0
    5b28:	0c 01       	movw	r0, r24
    5b2a:	ca 01       	movw	r24, r20
    5b2c:	a0 01       	movw	r20, r0
    5b2e:	11 24       	eor	r1, r1
    5b30:	ff 27       	eor	r31, r31
    5b32:	59 1b       	sub	r21, r25
    5b34:	99 f0       	breq	.+38     	; 0x5b5c <__addsf3x+0x5c>
    5b36:	59 3f       	cpi	r21, 0xF9	; 249
    5b38:	50 f4       	brcc	.+20     	; 0x5b4e <__addsf3x+0x4e>
    5b3a:	50 3e       	cpi	r21, 0xE0	; 224
    5b3c:	68 f1       	brcs	.+90     	; 0x5b98 <__addsf3x+0x98>
    5b3e:	1a 16       	cp	r1, r26
    5b40:	f0 40       	sbci	r31, 0x00	; 0
    5b42:	a2 2f       	mov	r26, r18
    5b44:	23 2f       	mov	r18, r19
    5b46:	34 2f       	mov	r19, r20
    5b48:	44 27       	eor	r20, r20
    5b4a:	58 5f       	subi	r21, 0xF8	; 248
    5b4c:	f3 cf       	rjmp	.-26     	; 0x5b34 <__addsf3x+0x34>
    5b4e:	46 95       	lsr	r20
    5b50:	37 95       	ror	r19
    5b52:	27 95       	ror	r18
    5b54:	a7 95       	ror	r26
    5b56:	f0 40       	sbci	r31, 0x00	; 0
    5b58:	53 95       	inc	r21
    5b5a:	c9 f7       	brne	.-14     	; 0x5b4e <__addsf3x+0x4e>
    5b5c:	7e f4       	brtc	.+30     	; 0x5b7c <__addsf3x+0x7c>
    5b5e:	1f 16       	cp	r1, r31
    5b60:	ba 0b       	sbc	r27, r26
    5b62:	62 0b       	sbc	r22, r18
    5b64:	73 0b       	sbc	r23, r19
    5b66:	84 0b       	sbc	r24, r20
    5b68:	ba f0       	brmi	.+46     	; 0x5b98 <__addsf3x+0x98>
    5b6a:	91 50       	subi	r25, 0x01	; 1
    5b6c:	a1 f0       	breq	.+40     	; 0x5b96 <__addsf3x+0x96>
    5b6e:	ff 0f       	add	r31, r31
    5b70:	bb 1f       	adc	r27, r27
    5b72:	66 1f       	adc	r22, r22
    5b74:	77 1f       	adc	r23, r23
    5b76:	88 1f       	adc	r24, r24
    5b78:	c2 f7       	brpl	.-16     	; 0x5b6a <__addsf3x+0x6a>
    5b7a:	0e c0       	rjmp	.+28     	; 0x5b98 <__addsf3x+0x98>
    5b7c:	ba 0f       	add	r27, r26
    5b7e:	62 1f       	adc	r22, r18
    5b80:	73 1f       	adc	r23, r19
    5b82:	84 1f       	adc	r24, r20
    5b84:	48 f4       	brcc	.+18     	; 0x5b98 <__addsf3x+0x98>
    5b86:	87 95       	ror	r24
    5b88:	77 95       	ror	r23
    5b8a:	67 95       	ror	r22
    5b8c:	b7 95       	ror	r27
    5b8e:	f7 95       	ror	r31
    5b90:	9e 3f       	cpi	r25, 0xFE	; 254
    5b92:	08 f0       	brcs	.+2      	; 0x5b96 <__addsf3x+0x96>
    5b94:	b3 cf       	rjmp	.-154    	; 0x5afc <__addsf3+0x1e>
    5b96:	93 95       	inc	r25
    5b98:	88 0f       	add	r24, r24
    5b9a:	08 f0       	brcs	.+2      	; 0x5b9e <__addsf3x+0x9e>
    5b9c:	99 27       	eor	r25, r25
    5b9e:	ee 0f       	add	r30, r30
    5ba0:	97 95       	ror	r25
    5ba2:	87 95       	ror	r24
    5ba4:	08 95       	ret

00005ba6 <__cmpsf2>:
    5ba6:	d4 d0       	rcall	.+424    	; 0x5d50 <__fp_cmp>
    5ba8:	08 f4       	brcc	.+2      	; 0x5bac <__cmpsf2+0x6>
    5baa:	81 e0       	ldi	r24, 0x01	; 1
    5bac:	08 95       	ret

00005bae <__divsf3>:
    5bae:	0c d0       	rcall	.+24     	; 0x5bc8 <__divsf3x>
    5bb0:	0a c1       	rjmp	.+532    	; 0x5dc6 <__fp_round>
    5bb2:	02 d1       	rcall	.+516    	; 0x5db8 <__fp_pscB>
    5bb4:	40 f0       	brcs	.+16     	; 0x5bc6 <__divsf3+0x18>
    5bb6:	f9 d0       	rcall	.+498    	; 0x5daa <__fp_pscA>
    5bb8:	30 f0       	brcs	.+12     	; 0x5bc6 <__divsf3+0x18>
    5bba:	21 f4       	brne	.+8      	; 0x5bc4 <__divsf3+0x16>
    5bbc:	5f 3f       	cpi	r21, 0xFF	; 255
    5bbe:	19 f0       	breq	.+6      	; 0x5bc6 <__divsf3+0x18>
    5bc0:	eb c0       	rjmp	.+470    	; 0x5d98 <__fp_inf>
    5bc2:	51 11       	cpse	r21, r1
    5bc4:	34 c1       	rjmp	.+616    	; 0x5e2e <__fp_szero>
    5bc6:	ee c0       	rjmp	.+476    	; 0x5da4 <__fp_nan>

00005bc8 <__divsf3x>:
    5bc8:	0f d1       	rcall	.+542    	; 0x5de8 <__fp_split3>
    5bca:	98 f3       	brcs	.-26     	; 0x5bb2 <__divsf3+0x4>

00005bcc <__divsf3_pse>:
    5bcc:	99 23       	and	r25, r25
    5bce:	c9 f3       	breq	.-14     	; 0x5bc2 <__divsf3+0x14>
    5bd0:	55 23       	and	r21, r21
    5bd2:	b1 f3       	breq	.-20     	; 0x5bc0 <__divsf3+0x12>
    5bd4:	95 1b       	sub	r25, r21
    5bd6:	55 0b       	sbc	r21, r21
    5bd8:	bb 27       	eor	r27, r27
    5bda:	aa 27       	eor	r26, r26
    5bdc:	62 17       	cp	r22, r18
    5bde:	73 07       	cpc	r23, r19
    5be0:	84 07       	cpc	r24, r20
    5be2:	38 f0       	brcs	.+14     	; 0x5bf2 <__divsf3_pse+0x26>
    5be4:	9f 5f       	subi	r25, 0xFF	; 255
    5be6:	5f 4f       	sbci	r21, 0xFF	; 255
    5be8:	22 0f       	add	r18, r18
    5bea:	33 1f       	adc	r19, r19
    5bec:	44 1f       	adc	r20, r20
    5bee:	aa 1f       	adc	r26, r26
    5bf0:	a9 f3       	breq	.-22     	; 0x5bdc <__divsf3_pse+0x10>
    5bf2:	33 d0       	rcall	.+102    	; 0x5c5a <__divsf3_pse+0x8e>
    5bf4:	0e 2e       	mov	r0, r30
    5bf6:	3a f0       	brmi	.+14     	; 0x5c06 <__divsf3_pse+0x3a>
    5bf8:	e0 e8       	ldi	r30, 0x80	; 128
    5bfa:	30 d0       	rcall	.+96     	; 0x5c5c <__divsf3_pse+0x90>
    5bfc:	91 50       	subi	r25, 0x01	; 1
    5bfe:	50 40       	sbci	r21, 0x00	; 0
    5c00:	e6 95       	lsr	r30
    5c02:	00 1c       	adc	r0, r0
    5c04:	ca f7       	brpl	.-14     	; 0x5bf8 <__divsf3_pse+0x2c>
    5c06:	29 d0       	rcall	.+82     	; 0x5c5a <__divsf3_pse+0x8e>
    5c08:	fe 2f       	mov	r31, r30
    5c0a:	27 d0       	rcall	.+78     	; 0x5c5a <__divsf3_pse+0x8e>
    5c0c:	66 0f       	add	r22, r22
    5c0e:	77 1f       	adc	r23, r23
    5c10:	88 1f       	adc	r24, r24
    5c12:	bb 1f       	adc	r27, r27
    5c14:	26 17       	cp	r18, r22
    5c16:	37 07       	cpc	r19, r23
    5c18:	48 07       	cpc	r20, r24
    5c1a:	ab 07       	cpc	r26, r27
    5c1c:	b0 e8       	ldi	r27, 0x80	; 128
    5c1e:	09 f0       	breq	.+2      	; 0x5c22 <__divsf3_pse+0x56>
    5c20:	bb 0b       	sbc	r27, r27
    5c22:	80 2d       	mov	r24, r0
    5c24:	bf 01       	movw	r22, r30
    5c26:	ff 27       	eor	r31, r31
    5c28:	93 58       	subi	r25, 0x83	; 131
    5c2a:	5f 4f       	sbci	r21, 0xFF	; 255
    5c2c:	2a f0       	brmi	.+10     	; 0x5c38 <__divsf3_pse+0x6c>
    5c2e:	9e 3f       	cpi	r25, 0xFE	; 254
    5c30:	51 05       	cpc	r21, r1
    5c32:	68 f0       	brcs	.+26     	; 0x5c4e <__divsf3_pse+0x82>
    5c34:	b1 c0       	rjmp	.+354    	; 0x5d98 <__fp_inf>
    5c36:	fb c0       	rjmp	.+502    	; 0x5e2e <__fp_szero>
    5c38:	5f 3f       	cpi	r21, 0xFF	; 255
    5c3a:	ec f3       	brlt	.-6      	; 0x5c36 <__divsf3_pse+0x6a>
    5c3c:	98 3e       	cpi	r25, 0xE8	; 232
    5c3e:	dc f3       	brlt	.-10     	; 0x5c36 <__divsf3_pse+0x6a>
    5c40:	86 95       	lsr	r24
    5c42:	77 95       	ror	r23
    5c44:	67 95       	ror	r22
    5c46:	b7 95       	ror	r27
    5c48:	f7 95       	ror	r31
    5c4a:	9f 5f       	subi	r25, 0xFF	; 255
    5c4c:	c9 f7       	brne	.-14     	; 0x5c40 <__divsf3_pse+0x74>
    5c4e:	88 0f       	add	r24, r24
    5c50:	91 1d       	adc	r25, r1
    5c52:	96 95       	lsr	r25
    5c54:	87 95       	ror	r24
    5c56:	97 f9       	bld	r25, 7
    5c58:	08 95       	ret
    5c5a:	e1 e0       	ldi	r30, 0x01	; 1
    5c5c:	66 0f       	add	r22, r22
    5c5e:	77 1f       	adc	r23, r23
    5c60:	88 1f       	adc	r24, r24
    5c62:	bb 1f       	adc	r27, r27
    5c64:	62 17       	cp	r22, r18
    5c66:	73 07       	cpc	r23, r19
    5c68:	84 07       	cpc	r24, r20
    5c6a:	ba 07       	cpc	r27, r26
    5c6c:	20 f0       	brcs	.+8      	; 0x5c76 <__divsf3_pse+0xaa>
    5c6e:	62 1b       	sub	r22, r18
    5c70:	73 0b       	sbc	r23, r19
    5c72:	84 0b       	sbc	r24, r20
    5c74:	ba 0b       	sbc	r27, r26
    5c76:	ee 1f       	adc	r30, r30
    5c78:	88 f7       	brcc	.-30     	; 0x5c5c <__divsf3_pse+0x90>
    5c7a:	e0 95       	com	r30
    5c7c:	08 95       	ret

00005c7e <__fixunssfsi>:
    5c7e:	bc d0       	rcall	.+376    	; 0x5df8 <__fp_splitA>
    5c80:	88 f0       	brcs	.+34     	; 0x5ca4 <__fixunssfsi+0x26>
    5c82:	9f 57       	subi	r25, 0x7F	; 127
    5c84:	90 f0       	brcs	.+36     	; 0x5caa <__fixunssfsi+0x2c>
    5c86:	b9 2f       	mov	r27, r25
    5c88:	99 27       	eor	r25, r25
    5c8a:	b7 51       	subi	r27, 0x17	; 23
    5c8c:	a0 f0       	brcs	.+40     	; 0x5cb6 <__fixunssfsi+0x38>
    5c8e:	d1 f0       	breq	.+52     	; 0x5cc4 <__fixunssfsi+0x46>
    5c90:	66 0f       	add	r22, r22
    5c92:	77 1f       	adc	r23, r23
    5c94:	88 1f       	adc	r24, r24
    5c96:	99 1f       	adc	r25, r25
    5c98:	1a f0       	brmi	.+6      	; 0x5ca0 <__fixunssfsi+0x22>
    5c9a:	ba 95       	dec	r27
    5c9c:	c9 f7       	brne	.-14     	; 0x5c90 <__fixunssfsi+0x12>
    5c9e:	12 c0       	rjmp	.+36     	; 0x5cc4 <__fixunssfsi+0x46>
    5ca0:	b1 30       	cpi	r27, 0x01	; 1
    5ca2:	81 f0       	breq	.+32     	; 0x5cc4 <__fixunssfsi+0x46>
    5ca4:	c3 d0       	rcall	.+390    	; 0x5e2c <__fp_zero>
    5ca6:	b1 e0       	ldi	r27, 0x01	; 1
    5ca8:	08 95       	ret
    5caa:	c0 c0       	rjmp	.+384    	; 0x5e2c <__fp_zero>
    5cac:	67 2f       	mov	r22, r23
    5cae:	78 2f       	mov	r23, r24
    5cb0:	88 27       	eor	r24, r24
    5cb2:	b8 5f       	subi	r27, 0xF8	; 248
    5cb4:	39 f0       	breq	.+14     	; 0x5cc4 <__fixunssfsi+0x46>
    5cb6:	b9 3f       	cpi	r27, 0xF9	; 249
    5cb8:	cc f3       	brlt	.-14     	; 0x5cac <__fixunssfsi+0x2e>
    5cba:	86 95       	lsr	r24
    5cbc:	77 95       	ror	r23
    5cbe:	67 95       	ror	r22
    5cc0:	b3 95       	inc	r27
    5cc2:	d9 f7       	brne	.-10     	; 0x5cba <__fixunssfsi+0x3c>
    5cc4:	3e f4       	brtc	.+14     	; 0x5cd4 <__fixunssfsi+0x56>
    5cc6:	90 95       	com	r25
    5cc8:	80 95       	com	r24
    5cca:	70 95       	com	r23
    5ccc:	61 95       	neg	r22
    5cce:	7f 4f       	sbci	r23, 0xFF	; 255
    5cd0:	8f 4f       	sbci	r24, 0xFF	; 255
    5cd2:	9f 4f       	sbci	r25, 0xFF	; 255
    5cd4:	08 95       	ret

00005cd6 <__floatunsisf>:
    5cd6:	e8 94       	clt
    5cd8:	09 c0       	rjmp	.+18     	; 0x5cec <__floatsisf+0x12>

00005cda <__floatsisf>:
    5cda:	97 fb       	bst	r25, 7
    5cdc:	3e f4       	brtc	.+14     	; 0x5cec <__floatsisf+0x12>
    5cde:	90 95       	com	r25
    5ce0:	80 95       	com	r24
    5ce2:	70 95       	com	r23
    5ce4:	61 95       	neg	r22
    5ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    5ce8:	8f 4f       	sbci	r24, 0xFF	; 255
    5cea:	9f 4f       	sbci	r25, 0xFF	; 255
    5cec:	99 23       	and	r25, r25
    5cee:	a9 f0       	breq	.+42     	; 0x5d1a <__floatsisf+0x40>
    5cf0:	f9 2f       	mov	r31, r25
    5cf2:	96 e9       	ldi	r25, 0x96	; 150
    5cf4:	bb 27       	eor	r27, r27
    5cf6:	93 95       	inc	r25
    5cf8:	f6 95       	lsr	r31
    5cfa:	87 95       	ror	r24
    5cfc:	77 95       	ror	r23
    5cfe:	67 95       	ror	r22
    5d00:	b7 95       	ror	r27
    5d02:	f1 11       	cpse	r31, r1
    5d04:	f8 cf       	rjmp	.-16     	; 0x5cf6 <__floatsisf+0x1c>
    5d06:	fa f4       	brpl	.+62     	; 0x5d46 <__floatsisf+0x6c>
    5d08:	bb 0f       	add	r27, r27
    5d0a:	11 f4       	brne	.+4      	; 0x5d10 <__floatsisf+0x36>
    5d0c:	60 ff       	sbrs	r22, 0
    5d0e:	1b c0       	rjmp	.+54     	; 0x5d46 <__floatsisf+0x6c>
    5d10:	6f 5f       	subi	r22, 0xFF	; 255
    5d12:	7f 4f       	sbci	r23, 0xFF	; 255
    5d14:	8f 4f       	sbci	r24, 0xFF	; 255
    5d16:	9f 4f       	sbci	r25, 0xFF	; 255
    5d18:	16 c0       	rjmp	.+44     	; 0x5d46 <__floatsisf+0x6c>
    5d1a:	88 23       	and	r24, r24
    5d1c:	11 f0       	breq	.+4      	; 0x5d22 <__floatsisf+0x48>
    5d1e:	96 e9       	ldi	r25, 0x96	; 150
    5d20:	11 c0       	rjmp	.+34     	; 0x5d44 <__floatsisf+0x6a>
    5d22:	77 23       	and	r23, r23
    5d24:	21 f0       	breq	.+8      	; 0x5d2e <__floatsisf+0x54>
    5d26:	9e e8       	ldi	r25, 0x8E	; 142
    5d28:	87 2f       	mov	r24, r23
    5d2a:	76 2f       	mov	r23, r22
    5d2c:	05 c0       	rjmp	.+10     	; 0x5d38 <__floatsisf+0x5e>
    5d2e:	66 23       	and	r22, r22
    5d30:	71 f0       	breq	.+28     	; 0x5d4e <__floatsisf+0x74>
    5d32:	96 e8       	ldi	r25, 0x86	; 134
    5d34:	86 2f       	mov	r24, r22
    5d36:	70 e0       	ldi	r23, 0x00	; 0
    5d38:	60 e0       	ldi	r22, 0x00	; 0
    5d3a:	2a f0       	brmi	.+10     	; 0x5d46 <__floatsisf+0x6c>
    5d3c:	9a 95       	dec	r25
    5d3e:	66 0f       	add	r22, r22
    5d40:	77 1f       	adc	r23, r23
    5d42:	88 1f       	adc	r24, r24
    5d44:	da f7       	brpl	.-10     	; 0x5d3c <__floatsisf+0x62>
    5d46:	88 0f       	add	r24, r24
    5d48:	96 95       	lsr	r25
    5d4a:	87 95       	ror	r24
    5d4c:	97 f9       	bld	r25, 7
    5d4e:	08 95       	ret

00005d50 <__fp_cmp>:
    5d50:	99 0f       	add	r25, r25
    5d52:	00 08       	sbc	r0, r0
    5d54:	55 0f       	add	r21, r21
    5d56:	aa 0b       	sbc	r26, r26
    5d58:	e0 e8       	ldi	r30, 0x80	; 128
    5d5a:	fe ef       	ldi	r31, 0xFE	; 254
    5d5c:	16 16       	cp	r1, r22
    5d5e:	17 06       	cpc	r1, r23
    5d60:	e8 07       	cpc	r30, r24
    5d62:	f9 07       	cpc	r31, r25
    5d64:	c0 f0       	brcs	.+48     	; 0x5d96 <__fp_cmp+0x46>
    5d66:	12 16       	cp	r1, r18
    5d68:	13 06       	cpc	r1, r19
    5d6a:	e4 07       	cpc	r30, r20
    5d6c:	f5 07       	cpc	r31, r21
    5d6e:	98 f0       	brcs	.+38     	; 0x5d96 <__fp_cmp+0x46>
    5d70:	62 1b       	sub	r22, r18
    5d72:	73 0b       	sbc	r23, r19
    5d74:	84 0b       	sbc	r24, r20
    5d76:	95 0b       	sbc	r25, r21
    5d78:	39 f4       	brne	.+14     	; 0x5d88 <__fp_cmp+0x38>
    5d7a:	0a 26       	eor	r0, r26
    5d7c:	61 f0       	breq	.+24     	; 0x5d96 <__fp_cmp+0x46>
    5d7e:	23 2b       	or	r18, r19
    5d80:	24 2b       	or	r18, r20
    5d82:	25 2b       	or	r18, r21
    5d84:	21 f4       	brne	.+8      	; 0x5d8e <__fp_cmp+0x3e>
    5d86:	08 95       	ret
    5d88:	0a 26       	eor	r0, r26
    5d8a:	09 f4       	brne	.+2      	; 0x5d8e <__fp_cmp+0x3e>
    5d8c:	a1 40       	sbci	r26, 0x01	; 1
    5d8e:	a6 95       	lsr	r26
    5d90:	8f ef       	ldi	r24, 0xFF	; 255
    5d92:	81 1d       	adc	r24, r1
    5d94:	81 1d       	adc	r24, r1
    5d96:	08 95       	ret

00005d98 <__fp_inf>:
    5d98:	97 f9       	bld	r25, 7
    5d9a:	9f 67       	ori	r25, 0x7F	; 127
    5d9c:	80 e8       	ldi	r24, 0x80	; 128
    5d9e:	70 e0       	ldi	r23, 0x00	; 0
    5da0:	60 e0       	ldi	r22, 0x00	; 0
    5da2:	08 95       	ret

00005da4 <__fp_nan>:
    5da4:	9f ef       	ldi	r25, 0xFF	; 255
    5da6:	80 ec       	ldi	r24, 0xC0	; 192
    5da8:	08 95       	ret

00005daa <__fp_pscA>:
    5daa:	00 24       	eor	r0, r0
    5dac:	0a 94       	dec	r0
    5dae:	16 16       	cp	r1, r22
    5db0:	17 06       	cpc	r1, r23
    5db2:	18 06       	cpc	r1, r24
    5db4:	09 06       	cpc	r0, r25
    5db6:	08 95       	ret

00005db8 <__fp_pscB>:
    5db8:	00 24       	eor	r0, r0
    5dba:	0a 94       	dec	r0
    5dbc:	12 16       	cp	r1, r18
    5dbe:	13 06       	cpc	r1, r19
    5dc0:	14 06       	cpc	r1, r20
    5dc2:	05 06       	cpc	r0, r21
    5dc4:	08 95       	ret

00005dc6 <__fp_round>:
    5dc6:	09 2e       	mov	r0, r25
    5dc8:	03 94       	inc	r0
    5dca:	00 0c       	add	r0, r0
    5dcc:	11 f4       	brne	.+4      	; 0x5dd2 <__fp_round+0xc>
    5dce:	88 23       	and	r24, r24
    5dd0:	52 f0       	brmi	.+20     	; 0x5de6 <__fp_round+0x20>
    5dd2:	bb 0f       	add	r27, r27
    5dd4:	40 f4       	brcc	.+16     	; 0x5de6 <__fp_round+0x20>
    5dd6:	bf 2b       	or	r27, r31
    5dd8:	11 f4       	brne	.+4      	; 0x5dde <__fp_round+0x18>
    5dda:	60 ff       	sbrs	r22, 0
    5ddc:	04 c0       	rjmp	.+8      	; 0x5de6 <__fp_round+0x20>
    5dde:	6f 5f       	subi	r22, 0xFF	; 255
    5de0:	7f 4f       	sbci	r23, 0xFF	; 255
    5de2:	8f 4f       	sbci	r24, 0xFF	; 255
    5de4:	9f 4f       	sbci	r25, 0xFF	; 255
    5de6:	08 95       	ret

00005de8 <__fp_split3>:
    5de8:	57 fd       	sbrc	r21, 7
    5dea:	90 58       	subi	r25, 0x80	; 128
    5dec:	44 0f       	add	r20, r20
    5dee:	55 1f       	adc	r21, r21
    5df0:	59 f0       	breq	.+22     	; 0x5e08 <__fp_splitA+0x10>
    5df2:	5f 3f       	cpi	r21, 0xFF	; 255
    5df4:	71 f0       	breq	.+28     	; 0x5e12 <__fp_splitA+0x1a>
    5df6:	47 95       	ror	r20

00005df8 <__fp_splitA>:
    5df8:	88 0f       	add	r24, r24
    5dfa:	97 fb       	bst	r25, 7
    5dfc:	99 1f       	adc	r25, r25
    5dfe:	61 f0       	breq	.+24     	; 0x5e18 <__fp_splitA+0x20>
    5e00:	9f 3f       	cpi	r25, 0xFF	; 255
    5e02:	79 f0       	breq	.+30     	; 0x5e22 <__fp_splitA+0x2a>
    5e04:	87 95       	ror	r24
    5e06:	08 95       	ret
    5e08:	12 16       	cp	r1, r18
    5e0a:	13 06       	cpc	r1, r19
    5e0c:	14 06       	cpc	r1, r20
    5e0e:	55 1f       	adc	r21, r21
    5e10:	f2 cf       	rjmp	.-28     	; 0x5df6 <__fp_split3+0xe>
    5e12:	46 95       	lsr	r20
    5e14:	f1 df       	rcall	.-30     	; 0x5df8 <__fp_splitA>
    5e16:	08 c0       	rjmp	.+16     	; 0x5e28 <__fp_splitA+0x30>
    5e18:	16 16       	cp	r1, r22
    5e1a:	17 06       	cpc	r1, r23
    5e1c:	18 06       	cpc	r1, r24
    5e1e:	99 1f       	adc	r25, r25
    5e20:	f1 cf       	rjmp	.-30     	; 0x5e04 <__fp_splitA+0xc>
    5e22:	86 95       	lsr	r24
    5e24:	71 05       	cpc	r23, r1
    5e26:	61 05       	cpc	r22, r1
    5e28:	08 94       	sec
    5e2a:	08 95       	ret

00005e2c <__fp_zero>:
    5e2c:	e8 94       	clt

00005e2e <__fp_szero>:
    5e2e:	bb 27       	eor	r27, r27
    5e30:	66 27       	eor	r22, r22
    5e32:	77 27       	eor	r23, r23
    5e34:	cb 01       	movw	r24, r22
    5e36:	97 f9       	bld	r25, 7
    5e38:	08 95       	ret

00005e3a <__gesf2>:
    5e3a:	8a df       	rcall	.-236    	; 0x5d50 <__fp_cmp>
    5e3c:	08 f4       	brcc	.+2      	; 0x5e40 <__gesf2+0x6>
    5e3e:	8f ef       	ldi	r24, 0xFF	; 255
    5e40:	08 95       	ret

00005e42 <__mulsf3>:
    5e42:	0b d0       	rcall	.+22     	; 0x5e5a <__mulsf3x>
    5e44:	c0 cf       	rjmp	.-128    	; 0x5dc6 <__fp_round>
    5e46:	b1 df       	rcall	.-158    	; 0x5daa <__fp_pscA>
    5e48:	28 f0       	brcs	.+10     	; 0x5e54 <__mulsf3+0x12>
    5e4a:	b6 df       	rcall	.-148    	; 0x5db8 <__fp_pscB>
    5e4c:	18 f0       	brcs	.+6      	; 0x5e54 <__mulsf3+0x12>
    5e4e:	95 23       	and	r25, r21
    5e50:	09 f0       	breq	.+2      	; 0x5e54 <__mulsf3+0x12>
    5e52:	a2 cf       	rjmp	.-188    	; 0x5d98 <__fp_inf>
    5e54:	a7 cf       	rjmp	.-178    	; 0x5da4 <__fp_nan>
    5e56:	11 24       	eor	r1, r1
    5e58:	ea cf       	rjmp	.-44     	; 0x5e2e <__fp_szero>

00005e5a <__mulsf3x>:
    5e5a:	c6 df       	rcall	.-116    	; 0x5de8 <__fp_split3>
    5e5c:	a0 f3       	brcs	.-24     	; 0x5e46 <__mulsf3+0x4>

00005e5e <__mulsf3_pse>:
    5e5e:	95 9f       	mul	r25, r21
    5e60:	d1 f3       	breq	.-12     	; 0x5e56 <__mulsf3+0x14>
    5e62:	95 0f       	add	r25, r21
    5e64:	50 e0       	ldi	r21, 0x00	; 0
    5e66:	55 1f       	adc	r21, r21
    5e68:	62 9f       	mul	r22, r18
    5e6a:	f0 01       	movw	r30, r0
    5e6c:	72 9f       	mul	r23, r18
    5e6e:	bb 27       	eor	r27, r27
    5e70:	f0 0d       	add	r31, r0
    5e72:	b1 1d       	adc	r27, r1
    5e74:	63 9f       	mul	r22, r19
    5e76:	aa 27       	eor	r26, r26
    5e78:	f0 0d       	add	r31, r0
    5e7a:	b1 1d       	adc	r27, r1
    5e7c:	aa 1f       	adc	r26, r26
    5e7e:	64 9f       	mul	r22, r20
    5e80:	66 27       	eor	r22, r22
    5e82:	b0 0d       	add	r27, r0
    5e84:	a1 1d       	adc	r26, r1
    5e86:	66 1f       	adc	r22, r22
    5e88:	82 9f       	mul	r24, r18
    5e8a:	22 27       	eor	r18, r18
    5e8c:	b0 0d       	add	r27, r0
    5e8e:	a1 1d       	adc	r26, r1
    5e90:	62 1f       	adc	r22, r18
    5e92:	73 9f       	mul	r23, r19
    5e94:	b0 0d       	add	r27, r0
    5e96:	a1 1d       	adc	r26, r1
    5e98:	62 1f       	adc	r22, r18
    5e9a:	83 9f       	mul	r24, r19
    5e9c:	a0 0d       	add	r26, r0
    5e9e:	61 1d       	adc	r22, r1
    5ea0:	22 1f       	adc	r18, r18
    5ea2:	74 9f       	mul	r23, r20
    5ea4:	33 27       	eor	r19, r19
    5ea6:	a0 0d       	add	r26, r0
    5ea8:	61 1d       	adc	r22, r1
    5eaa:	23 1f       	adc	r18, r19
    5eac:	84 9f       	mul	r24, r20
    5eae:	60 0d       	add	r22, r0
    5eb0:	21 1d       	adc	r18, r1
    5eb2:	82 2f       	mov	r24, r18
    5eb4:	76 2f       	mov	r23, r22
    5eb6:	6a 2f       	mov	r22, r26
    5eb8:	11 24       	eor	r1, r1
    5eba:	9f 57       	subi	r25, 0x7F	; 127
    5ebc:	50 40       	sbci	r21, 0x00	; 0
    5ebe:	8a f0       	brmi	.+34     	; 0x5ee2 <__mulsf3_pse+0x84>
    5ec0:	e1 f0       	breq	.+56     	; 0x5efa <__mulsf3_pse+0x9c>
    5ec2:	88 23       	and	r24, r24
    5ec4:	4a f0       	brmi	.+18     	; 0x5ed8 <__mulsf3_pse+0x7a>
    5ec6:	ee 0f       	add	r30, r30
    5ec8:	ff 1f       	adc	r31, r31
    5eca:	bb 1f       	adc	r27, r27
    5ecc:	66 1f       	adc	r22, r22
    5ece:	77 1f       	adc	r23, r23
    5ed0:	88 1f       	adc	r24, r24
    5ed2:	91 50       	subi	r25, 0x01	; 1
    5ed4:	50 40       	sbci	r21, 0x00	; 0
    5ed6:	a9 f7       	brne	.-22     	; 0x5ec2 <__mulsf3_pse+0x64>
    5ed8:	9e 3f       	cpi	r25, 0xFE	; 254
    5eda:	51 05       	cpc	r21, r1
    5edc:	70 f0       	brcs	.+28     	; 0x5efa <__mulsf3_pse+0x9c>
    5ede:	5c cf       	rjmp	.-328    	; 0x5d98 <__fp_inf>
    5ee0:	a6 cf       	rjmp	.-180    	; 0x5e2e <__fp_szero>
    5ee2:	5f 3f       	cpi	r21, 0xFF	; 255
    5ee4:	ec f3       	brlt	.-6      	; 0x5ee0 <__mulsf3_pse+0x82>
    5ee6:	98 3e       	cpi	r25, 0xE8	; 232
    5ee8:	dc f3       	brlt	.-10     	; 0x5ee0 <__mulsf3_pse+0x82>
    5eea:	86 95       	lsr	r24
    5eec:	77 95       	ror	r23
    5eee:	67 95       	ror	r22
    5ef0:	b7 95       	ror	r27
    5ef2:	f7 95       	ror	r31
    5ef4:	e7 95       	ror	r30
    5ef6:	9f 5f       	subi	r25, 0xFF	; 255
    5ef8:	c1 f7       	brne	.-16     	; 0x5eea <__mulsf3_pse+0x8c>
    5efa:	fe 2b       	or	r31, r30
    5efc:	88 0f       	add	r24, r24
    5efe:	91 1d       	adc	r25, r1
    5f00:	96 95       	lsr	r25
    5f02:	87 95       	ror	r24
    5f04:	97 f9       	bld	r25, 7
    5f06:	08 95       	ret

00005f08 <__udivmodhi4>:
    5f08:	aa 1b       	sub	r26, r26
    5f0a:	bb 1b       	sub	r27, r27
    5f0c:	51 e1       	ldi	r21, 0x11	; 17
    5f0e:	07 c0       	rjmp	.+14     	; 0x5f1e <__udivmodhi4_ep>

00005f10 <__udivmodhi4_loop>:
    5f10:	aa 1f       	adc	r26, r26
    5f12:	bb 1f       	adc	r27, r27
    5f14:	a6 17       	cp	r26, r22
    5f16:	b7 07       	cpc	r27, r23
    5f18:	10 f0       	brcs	.+4      	; 0x5f1e <__udivmodhi4_ep>
    5f1a:	a6 1b       	sub	r26, r22
    5f1c:	b7 0b       	sbc	r27, r23

00005f1e <__udivmodhi4_ep>:
    5f1e:	88 1f       	adc	r24, r24
    5f20:	99 1f       	adc	r25, r25
    5f22:	5a 95       	dec	r21
    5f24:	a9 f7       	brne	.-22     	; 0x5f10 <__udivmodhi4_loop>
    5f26:	80 95       	com	r24
    5f28:	90 95       	com	r25
    5f2a:	bc 01       	movw	r22, r24
    5f2c:	cd 01       	movw	r24, r26
    5f2e:	08 95       	ret

00005f30 <__divmodhi4>:
    5f30:	97 fb       	bst	r25, 7
    5f32:	09 2e       	mov	r0, r25
    5f34:	07 26       	eor	r0, r23
    5f36:	0a d0       	rcall	.+20     	; 0x5f4c <__divmodhi4_neg1>
    5f38:	77 fd       	sbrc	r23, 7
    5f3a:	04 d0       	rcall	.+8      	; 0x5f44 <__divmodhi4_neg2>
    5f3c:	e5 df       	rcall	.-54     	; 0x5f08 <__udivmodhi4>
    5f3e:	06 d0       	rcall	.+12     	; 0x5f4c <__divmodhi4_neg1>
    5f40:	00 20       	and	r0, r0
    5f42:	1a f4       	brpl	.+6      	; 0x5f4a <__divmodhi4_exit>

00005f44 <__divmodhi4_neg2>:
    5f44:	70 95       	com	r23
    5f46:	61 95       	neg	r22
    5f48:	7f 4f       	sbci	r23, 0xFF	; 255

00005f4a <__divmodhi4_exit>:
    5f4a:	08 95       	ret

00005f4c <__divmodhi4_neg1>:
    5f4c:	f6 f7       	brtc	.-4      	; 0x5f4a <__divmodhi4_exit>
    5f4e:	90 95       	com	r25
    5f50:	81 95       	neg	r24
    5f52:	9f 4f       	sbci	r25, 0xFF	; 255
    5f54:	08 95       	ret

00005f56 <_exit>:
    5f56:	f8 94       	cli

00005f58 <__stop_program>:
    5f58:	ff cf       	rjmp	.-2      	; 0x5f58 <__stop_program>
