
Final_BOB_Final_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800200  000093f6  0000948a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000093f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000076  00800226  00800226  000094b0  2**0
                  ALLOC
  3 .stab         000023f4  00000000  00000000  000094b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000768  00000000  00000000  0000b8a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  0000c010  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003679  00000000  00000000  0000c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000341  00000000  00000000  0000f729  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015a7  00000000  00000000  0000fa6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b84  00000000  00000000  00011014  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000850  00000000  00000000  00011b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001702  00000000  00000000  000123e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <__vector_4>
      14:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__vector_5>
      18:	0c 94 ca 0f 	jmp	0x1f94	; 0x1f94 <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 ef       	ldi	r30, 0xF6	; 246
      fc:	f3 e9       	ldi	r31, 0x93	; 147
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a6 32       	cpi	r26, 0x26	; 38
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a6 e2       	ldi	r26, 0x26	; 38
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ac 39       	cpi	r26, 0x9C	; 156
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 15 3f 	call	0x7e2a	; 0x7e2a <main>
     122:	0c 94 f9 49 	jmp	0x93f2	; 0x93f2 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <i2c_init>:
functionality	:	initialise i2c or enabling i2cen bit
arguments		:	none
return value	:	void
*********************************/
void i2c_init()
{
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
	TWSR = 0x00;
     132:	89 eb       	ldi	r24, 0xB9	; 185
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	fc 01       	movw	r30, r24
     138:	10 82       	st	Z, r1
	TWCR = 0x00;
     13a:	8c eb       	ldi	r24, 0xBC	; 188
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	fc 01       	movw	r30, r24
     140:	10 82       	st	Z, r1
	TWCR = i2cen | done | eack;		//enables i2c , ack bit and clears TWINT bit
     142:	8c eb       	ldi	r24, 0xBC	; 188
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	24 ec       	ldi	r18, 0xC4	; 196
     148:	fc 01       	movw	r30, r24
     14a:	20 83       	st	Z, r18
	TWBR = 0X0A;					//400khz speed for TWI in 14745600 hz clock frequency
     14c:	88 eb       	ldi	r24, 0xB8	; 184
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	2a e0       	ldi	r18, 0x0A	; 10
     152:	fc 01       	movw	r30, r24
     154:	20 83       	st	Z, r18
}
     156:	df 91       	pop	r29
     158:	cf 91       	pop	r28
     15a:	08 95       	ret

0000015c <i2c_start>:
functionality	:	starts tranmission or setting start bit high
arguments		:	none
return value	:	void
********************************/
void i2c_start()
{
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	cd b7       	in	r28, 0x3d	; 61
     162:	de b7       	in	r29, 0x3e	; 62
	TWCR |= start | eack;			//starting transmission ie TWSTA bit is made high
     164:	8c eb       	ldi	r24, 0xBC	; 188
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	2c eb       	ldi	r18, 0xBC	; 188
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	f9 01       	movw	r30, r18
     16e:	20 81       	ld	r18, Z
     170:	20 66       	ori	r18, 0x60	; 96
     172:	fc 01       	movw	r30, r24
     174:	20 83       	st	Z, r18
}
     176:	df 91       	pop	r29
     178:	cf 91       	pop	r28
     17a:	08 95       	ret

0000017c <clear_twint>:
functionality	:	clears the interrupt bit
arguments		:	none	
return value	:	void
********************************/
void clear_twint()
{
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	cd b7       	in	r28, 0x3d	; 61
     182:	de b7       	in	r29, 0x3e	; 62
	TWCR |= done;					//clearing TWINT bit
     184:	8c eb       	ldi	r24, 0xBC	; 188
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	2c eb       	ldi	r18, 0xBC	; 188
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	f9 01       	movw	r30, r18
     18e:	20 81       	ld	r18, Z
     190:	20 68       	ori	r18, 0x80	; 128
     192:	fc 01       	movw	r30, r24
     194:	20 83       	st	Z, r18
}
     196:	df 91       	pop	r29
     198:	cf 91       	pop	r28
     19a:	08 95       	ret

0000019c <wait>:
functionality	:	waiting till the data is transmitted or till the interrupt bit gets high
arguments		:	none
return value	:	void
*********************************/
void wait()
{
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	cd b7       	in	r28, 0x3d	; 61
     1a2:	de b7       	in	r29, 0x3e	; 62
	while(!(TWCR & done));			//waiting for TWINT bit to be high ie to complete transmission
     1a4:	00 00       	nop
     1a6:	8c eb       	ldi	r24, 0xBC	; 188
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	fc 01       	movw	r30, r24
     1ac:	80 81       	ld	r24, Z
     1ae:	88 23       	and	r24, r24
     1b0:	d4 f7       	brge	.-12     	; 0x1a6 <wait+0xa>
}
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	08 95       	ret

000001b8 <i2c_stop>:
functionality	:	stops the transmission or sets the stop bit high
arguments		:	none
return value	:	void
********************************/
void i2c_stop()
{
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
	TWCR |= stop;					//TWSTO bit is set high
     1c0:	8c eb       	ldi	r24, 0xBC	; 188
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	2c eb       	ldi	r18, 0xBC	; 188
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	f9 01       	movw	r30, r18
     1ca:	20 81       	ld	r18, Z
     1cc:	20 61       	ori	r18, 0x10	; 16
     1ce:	fc 01       	movw	r30, r24
     1d0:	20 83       	st	Z, r18
}
     1d2:	df 91       	pop	r29
     1d4:	cf 91       	pop	r28
     1d6:	08 95       	ret

000001d8 <i2c_getstatus>:
functionality	:	to find the status of the i2c
arguments		:	none
return value	:	UINT8 (returns the status)
********************************/
UINT8 i2c_getstatus()
{
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	0f 92       	push	r0
     1de:	cd b7       	in	r28, 0x3d	; 61
     1e0:	de b7       	in	r29, 0x3e	; 62
	UINT8 status;
	status = TWSR & 0xF8;			//5 bits of TWSR register gives the status
     1e2:	89 eb       	ldi	r24, 0xB9	; 185
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	fc 01       	movw	r30, r24
     1e8:	80 81       	ld	r24, Z
     1ea:	88 7f       	andi	r24, 0xF8	; 248
     1ec:	89 83       	std	Y+1, r24	; 0x01
	return status;
     1ee:	89 81       	ldd	r24, Y+1	; 0x01
}
     1f0:	0f 90       	pop	r0
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <i2c_write>:
functionality	:	writes a byte of data to TWDR register
arguments		:	UINT8 data(the byte which is to be written)
return value	:	void
*********************************/
void i2c_write(UINT8 data)
{
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	0f 92       	push	r0
     1fe:	cd b7       	in	r28, 0x3d	; 61
     200:	de b7       	in	r29, 0x3e	; 62
     202:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data;					//writing data or add to TWDR register
     204:	8b eb       	ldi	r24, 0xBB	; 187
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	29 81       	ldd	r18, Y+1	; 0x01
     20a:	fc 01       	movw	r30, r24
     20c:	20 83       	st	Z, r18
}
     20e:	0f 90       	pop	r0
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28
     214:	08 95       	ret

00000216 <i2c_get>:
functionality	:	reads a byte of data from TWDR register
arguments		:	INT8 *data (points to the byte to which the data needs to be copied)
return value	:	void
*********************************/
void i2c_get(INT8 *data)
{
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
     21a:	0f 92       	push	r0
     21c:	0f 92       	push	r0
     21e:	cd b7       	in	r28, 0x3d	; 61
     220:	de b7       	in	r29, 0x3e	; 62
     222:	9a 83       	std	Y+2, r25	; 0x02
     224:	89 83       	std	Y+1, r24	; 0x01
	*data = TWDR;					//copying data from TWDR register
     226:	8b eb       	ldi	r24, 0xBB	; 187
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	fc 01       	movw	r30, r24
     22c:	80 81       	ld	r24, Z
     22e:	28 2f       	mov	r18, r24
     230:	89 81       	ldd	r24, Y+1	; 0x01
     232:	9a 81       	ldd	r25, Y+2	; 0x02
     234:	fc 01       	movw	r30, r24
     236:	20 83       	st	Z, r18
}
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	08 95       	ret

00000242 <i2c_sendbyte>:
					UINT8 int_add (address of the internal register of the slave),
					UINT8 data(byte of data which needs to be sent)
return value	:	enum (value which tells if the transmission was succesfull or not)
********************************/
STAT i2c_sendbyte(UINT8 dev_add, UINT8 int_add,UINT8 data)
{
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	00 d0       	rcall	.+0      	; 0x248 <i2c_sendbyte+0x6>
     248:	cd b7       	in	r28, 0x3d	; 61
     24a:	de b7       	in	r29, 0x3e	; 62
     24c:	89 83       	std	Y+1, r24	; 0x01
     24e:	6a 83       	std	Y+2, r22	; 0x02
     250:	4b 83       	std	Y+3, r20	; 0x03
	i2c_start();					//starting transmission
     252:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_start>
	wait();							//then wait for succesfull transmission
     256:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus() != 0x08)		//check status
     25a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     25e:	88 30       	cpi	r24, 0x08	; 8
     260:	11 f0       	breq	.+4      	; 0x266 <i2c_sendbyte+0x24>
		return START_ERR;
     262:	88 ef       	ldi	r24, 0xF8	; 248
     264:	33 c0       	rjmp	.+102    	; 0x2cc <i2c_sendbyte+0x8a>

	i2c_write(dev_add | write);		//writing slave + write to TWDR
     266:	89 81       	ldd	r24, Y+1	; 0x01
     268:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_write>
	TWCR &= ~start;
     26c:	8c eb       	ldi	r24, 0xBC	; 188
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	2c eb       	ldi	r18, 0xBC	; 188
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	f9 01       	movw	r30, r18
     276:	20 81       	ld	r18, Z
     278:	2f 7d       	andi	r18, 0xDF	; 223
     27a:	fc 01       	movw	r30, r24
     27c:	20 83       	st	Z, r18
	clear_twint();					//clear TWINT bit starts transmission
     27e:	0e 94 be 00 	call	0x17c	; 0x17c <clear_twint>
	wait();
     282:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus()!=0x18)
     286:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     28a:	88 31       	cpi	r24, 0x18	; 24
     28c:	11 f0       	breq	.+4      	; 0x292 <i2c_sendbyte+0x50>
		return SLAVEW_ERR;
     28e:	89 ef       	ldi	r24, 0xF9	; 249
     290:	1d c0       	rjmp	.+58     	; 0x2cc <i2c_sendbyte+0x8a>

	i2c_write(int_add);				//writing int_add to TWDR
     292:	8a 81       	ldd	r24, Y+2	; 0x02
     294:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_write>
	clear_twint();
     298:	0e 94 be 00 	call	0x17c	; 0x17c <clear_twint>
	wait();
     29c:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus()!=0x28)
     2a0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     2a4:	88 32       	cpi	r24, 0x28	; 40
     2a6:	11 f0       	breq	.+4      	; 0x2ac <i2c_sendbyte+0x6a>
	{	return WRITE_ERR;	}
     2a8:	8b ef       	ldi	r24, 0xFB	; 251
     2aa:	10 c0       	rjmp	.+32     	; 0x2cc <i2c_sendbyte+0x8a>

	i2c_write(data);				//writing one byte of data...to write multi byte | with 0x80
     2ac:	8b 81       	ldd	r24, Y+3	; 0x03
     2ae:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_write>
	clear_twint();
     2b2:	0e 94 be 00 	call	0x17c	; 0x17c <clear_twint>
	wait();
     2b6:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus()!=0x28)
     2ba:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     2be:	88 32       	cpi	r24, 0x28	; 40
     2c0:	11 f0       	breq	.+4      	; 0x2c6 <i2c_sendbyte+0x84>
		return WRITE_ERR;
     2c2:	8b ef       	ldi	r24, 0xFB	; 251
     2c4:	03 c0       	rjmp	.+6      	; 0x2cc <i2c_sendbyte+0x8a>

	i2c_stop();
     2c6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <i2c_stop>

	return OK;
     2ca:	80 e0       	ldi	r24, 0x00	; 0
}
     2cc:	0f 90       	pop	r0
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	08 95       	ret

000002d8 <i2c_getbyte>:
					UINT8 int_add (address of the internal register of the slave),
					INT8 *data(points to the byte to which the data needs to be copied)					
return value	:	enum (value which tells if the transmission was succesfull or not)
********************************/
STAT i2c_getbyte(UINT8 dev_add,UINT8 int_add,INT8 *data)
{
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	00 d0       	rcall	.+0      	; 0x2de <i2c_getbyte+0x6>
     2de:	0f 92       	push	r0
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
     2e4:	89 83       	std	Y+1, r24	; 0x01
     2e6:	6a 83       	std	Y+2, r22	; 0x02
     2e8:	5c 83       	std	Y+4, r21	; 0x04
     2ea:	4b 83       	std	Y+3, r20	; 0x03
	i2c_start();					//starting transmission
     2ec:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_start>
	wait();							//then wait for succesfull transmission
     2f0:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus() != 0x08)		//checking status
     2f4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     2f8:	88 30       	cpi	r24, 0x08	; 8
     2fa:	11 f0       	breq	.+4      	; 0x300 <i2c_getbyte+0x28>
		return START_ERR;
     2fc:	88 ef       	ldi	r24, 0xF8	; 248
     2fe:	5e c0       	rjmp	.+188    	; 0x3bc <i2c_getbyte+0xe4>

	i2c_write(dev_add | write);		//writing slave + write to TWDR
     300:	89 81       	ldd	r24, Y+1	; 0x01
     302:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_write>
	TWCR &= ~start;
     306:	8c eb       	ldi	r24, 0xBC	; 188
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	2c eb       	ldi	r18, 0xBC	; 188
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	f9 01       	movw	r30, r18
     310:	20 81       	ld	r18, Z
     312:	2f 7d       	andi	r18, 0xDF	; 223
     314:	fc 01       	movw	r30, r24
     316:	20 83       	st	Z, r18
	clear_twint();					//clear TWINT bit and starts transmission
     318:	0e 94 be 00 	call	0x17c	; 0x17c <clear_twint>
	wait();
     31c:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus()!=0x18)
     320:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     324:	88 31       	cpi	r24, 0x18	; 24
     326:	11 f0       	breq	.+4      	; 0x32c <i2c_getbyte+0x54>
		return SLAVEW_ERR;	
     328:	89 ef       	ldi	r24, 0xF9	; 249
     32a:	48 c0       	rjmp	.+144    	; 0x3bc <i2c_getbyte+0xe4>

	i2c_write(int_add);				//writing int_add to TWDR
     32c:	8a 81       	ldd	r24, Y+2	; 0x02
     32e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_write>
	clear_twint();
     332:	0e 94 be 00 	call	0x17c	; 0x17c <clear_twint>
	wait();
     336:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus()!=0x28)
     33a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     33e:	88 32       	cpi	r24, 0x28	; 40
     340:	11 f0       	breq	.+4      	; 0x346 <i2c_getbyte+0x6e>
		return WRITE_ERR;
     342:	8b ef       	ldi	r24, 0xFB	; 251
     344:	3b c0       	rjmp	.+118    	; 0x3bc <i2c_getbyte+0xe4>

	i2c_start();					//repeated start
     346:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_start>
	wait();
     34a:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus() != 0x10)
     34e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     352:	80 31       	cpi	r24, 0x10	; 16
     354:	11 f0       	breq	.+4      	; 0x35a <i2c_getbyte+0x82>
		return REPSTART_ERR;
     356:	8d ef       	ldi	r24, 0xFD	; 253
     358:	31 c0       	rjmp	.+98     	; 0x3bc <i2c_getbyte+0xe4>

	i2c_write(dev_add | read);		//writing slave + read to TWDR register
     35a:	89 81       	ldd	r24, Y+1	; 0x01
     35c:	81 60       	ori	r24, 0x01	; 1
     35e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_write>
	TWCR &= ~start;
     362:	8c eb       	ldi	r24, 0xBC	; 188
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	2c eb       	ldi	r18, 0xBC	; 188
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	f9 01       	movw	r30, r18
     36c:	20 81       	ld	r18, Z
     36e:	2f 7d       	andi	r18, 0xDF	; 223
     370:	fc 01       	movw	r30, r24
     372:	20 83       	st	Z, r18
	clear_twint();
     374:	0e 94 be 00 	call	0x17c	; 0x17c <clear_twint>
	wait();
     378:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus()!=0x40)
     37c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     380:	80 34       	cpi	r24, 0x40	; 64
     382:	11 f0       	breq	.+4      	; 0x388 <i2c_getbyte+0xb0>
		return SLAVER_ERR;
     384:	8a ef       	ldi	r24, 0xFA	; 250
     386:	1a c0       	rjmp	.+52     	; 0x3bc <i2c_getbyte+0xe4>

	TWCR &= ~eack;
     388:	8c eb       	ldi	r24, 0xBC	; 188
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	2c eb       	ldi	r18, 0xBC	; 188
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	f9 01       	movw	r30, r18
     392:	20 81       	ld	r18, Z
     394:	2f 7b       	andi	r18, 0xBF	; 191
     396:	fc 01       	movw	r30, r24
     398:	20 83       	st	Z, r18
	clear_twint();
     39a:	0e 94 be 00 	call	0x17c	; 0x17c <clear_twint>
	wait();
     39e:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus()!=0x58)
     3a2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     3a6:	88 35       	cpi	r24, 0x58	; 88
     3a8:	11 f0       	breq	.+4      	; 0x3ae <i2c_getbyte+0xd6>
		return READ_ERR;
     3aa:	8c ef       	ldi	r24, 0xFC	; 252
     3ac:	07 c0       	rjmp	.+14     	; 0x3bc <i2c_getbyte+0xe4>

	i2c_get(data);					//getting data to the char pointer
     3ae:	8b 81       	ldd	r24, Y+3	; 0x03
     3b0:	9c 81       	ldd	r25, Y+4	; 0x04
     3b2:	0e 94 0b 01 	call	0x216	; 0x216 <i2c_get>

	i2c_stop();						//stopping the transmission
     3b6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <i2c_stop>

	return OK;
     3ba:	80 e0       	ldi	r24, 0x00	; 0
}
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	08 95       	ret

000003ca <i2c_read_multi_byte>:
					UINT16 n(no of bytes which needs to be read)
					INT8 *data(points to the byte to which the data needs to be copied)	
return value	:	enum (value which tells if the transmission was succesfull or not)
*********************************/
STAT i2c_read_multi_byte(UINT8 dev_add,UINT8 int_add,UINT16 n,INT8 *data)
{
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	cd b7       	in	r28, 0x3d	; 61
     3d0:	de b7       	in	r29, 0x3e	; 62
     3d2:	28 97       	sbiw	r28, 0x08	; 8
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	f8 94       	cli
     3d8:	de bf       	out	0x3e, r29	; 62
     3da:	0f be       	out	0x3f, r0	; 63
     3dc:	cd bf       	out	0x3d, r28	; 61
     3de:	8b 83       	std	Y+3, r24	; 0x03
     3e0:	6c 83       	std	Y+4, r22	; 0x04
     3e2:	5e 83       	std	Y+6, r21	; 0x06
     3e4:	4d 83       	std	Y+5, r20	; 0x05
     3e6:	38 87       	std	Y+8, r19	; 0x08
     3e8:	2f 83       	std	Y+7, r18	; 0x07
	UINT16 i;
	i2c_start();					//starting transmission
     3ea:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_start>
	wait();							//then wait for succesfull transmission
     3ee:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus() != 0x08)		//check status
     3f2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     3f6:	88 30       	cpi	r24, 0x08	; 8
     3f8:	11 f0       	breq	.+4      	; 0x3fe <i2c_read_multi_byte+0x34>
		return START_ERR;
     3fa:	88 ef       	ldi	r24, 0xF8	; 248
     3fc:	99 c0       	rjmp	.+306    	; 0x530 <i2c_read_multi_byte+0x166>

	i2c_write(dev_add | write);		//writing slave + write to TWDR
     3fe:	8b 81       	ldd	r24, Y+3	; 0x03
     400:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_write>
	TWCR &=~start;					//to avoid transmitting start bit again
     404:	8c eb       	ldi	r24, 0xBC	; 188
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	2c eb       	ldi	r18, 0xBC	; 188
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	f9 01       	movw	r30, r18
     40e:	20 81       	ld	r18, Z
     410:	2f 7d       	andi	r18, 0xDF	; 223
     412:	fc 01       	movw	r30, r24
     414:	20 83       	st	Z, r18
	clear_twint();					//clear TWINT bit and starts transmission
     416:	0e 94 be 00 	call	0x17c	; 0x17c <clear_twint>
	wait();
     41a:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus()!=0x18)
     41e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     422:	88 31       	cpi	r24, 0x18	; 24
     424:	11 f0       	breq	.+4      	; 0x42a <i2c_read_multi_byte+0x60>
		return SLAVEW_ERR;
     426:	89 ef       	ldi	r24, 0xF9	; 249
     428:	83 c0       	rjmp	.+262    	; 0x530 <i2c_read_multi_byte+0x166>

	i2c_write(int_add | 0x80);		//to read multi-byte logical or(|) the register with 0x80
     42a:	8c 81       	ldd	r24, Y+4	; 0x04
     42c:	80 68       	ori	r24, 0x80	; 128
     42e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_write>
	clear_twint();
     432:	0e 94 be 00 	call	0x17c	; 0x17c <clear_twint>
	wait();
     436:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus()!=0x28)
     43a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     43e:	88 32       	cpi	r24, 0x28	; 40
     440:	11 f0       	breq	.+4      	; 0x446 <i2c_read_multi_byte+0x7c>
		return WRITE_ERR;
     442:	8b ef       	ldi	r24, 0xFB	; 251
     444:	75 c0       	rjmp	.+234    	; 0x530 <i2c_read_multi_byte+0x166>

	i2c_start();					//repeated start
     446:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_start>
	wait();
     44a:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus() != 0x10)
     44e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     452:	80 31       	cpi	r24, 0x10	; 16
     454:	11 f0       	breq	.+4      	; 0x45a <i2c_read_multi_byte+0x90>
		return REPSTART_ERR;
     456:	8d ef       	ldi	r24, 0xFD	; 253
     458:	6b c0       	rjmp	.+214    	; 0x530 <i2c_read_multi_byte+0x166>

	i2c_write(dev_add | read);		//writing slave + read to TWDR register
     45a:	8b 81       	ldd	r24, Y+3	; 0x03
     45c:	81 60       	ori	r24, 0x01	; 1
     45e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <i2c_write>
	TWCR &= ~start;
     462:	8c eb       	ldi	r24, 0xBC	; 188
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	2c eb       	ldi	r18, 0xBC	; 188
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	f9 01       	movw	r30, r18
     46c:	20 81       	ld	r18, Z
     46e:	2f 7d       	andi	r18, 0xDF	; 223
     470:	fc 01       	movw	r30, r24
     472:	20 83       	st	Z, r18
	clear_twint();
     474:	0e 94 be 00 	call	0x17c	; 0x17c <clear_twint>
	wait();
     478:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
	if(i2c_getstatus()!=0x40)
     47c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     480:	80 34       	cpi	r24, 0x40	; 64
     482:	11 f0       	breq	.+4      	; 0x488 <i2c_read_multi_byte+0xbe>
		return SLAVER_ERR;
     484:	8a ef       	ldi	r24, 0xFA	; 250
     486:	54 c0       	rjmp	.+168    	; 0x530 <i2c_read_multi_byte+0x166>

	for(i=0;i<n;i++)
     488:	1a 82       	std	Y+2, r1	; 0x02
     48a:	19 82       	std	Y+1, r1	; 0x01
     48c:	46 c0       	rjmp	.+140    	; 0x51a <i2c_read_multi_byte+0x150>
	{
		if(i==(n-1))				//if last byte send nack
     48e:	8d 81       	ldd	r24, Y+5	; 0x05
     490:	9e 81       	ldd	r25, Y+6	; 0x06
     492:	9c 01       	movw	r18, r24
     494:	21 50       	subi	r18, 0x01	; 1
     496:	30 40       	sbci	r19, 0x00	; 0
     498:	89 81       	ldd	r24, Y+1	; 0x01
     49a:	9a 81       	ldd	r25, Y+2	; 0x02
     49c:	28 17       	cp	r18, r24
     49e:	39 07       	cpc	r19, r25
     4a0:	e1 f4       	brne	.+56     	; 0x4da <i2c_read_multi_byte+0x110>
		{
			TWCR &= ~eack;			//sending NACK since it is the last bit
     4a2:	8c eb       	ldi	r24, 0xBC	; 188
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	2c eb       	ldi	r18, 0xBC	; 188
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	f9 01       	movw	r30, r18
     4ac:	20 81       	ld	r18, Z
     4ae:	2f 7b       	andi	r18, 0xBF	; 191
     4b0:	fc 01       	movw	r30, r24
     4b2:	20 83       	st	Z, r18
			clear_twint();
     4b4:	0e 94 be 00 	call	0x17c	; 0x17c <clear_twint>
			wait();
     4b8:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
			if(i2c_getstatus()!=0x58)
     4bc:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     4c0:	88 35       	cpi	r24, 0x58	; 88
     4c2:	11 f0       	breq	.+4      	; 0x4c8 <i2c_read_multi_byte+0xfe>
				return NACK_ERR;	
     4c4:	8f ef       	ldi	r24, 0xFF	; 255
     4c6:	34 c0       	rjmp	.+104    	; 0x530 <i2c_read_multi_byte+0x166>
			i2c_get(&data[i]);		
     4c8:	2f 81       	ldd	r18, Y+7	; 0x07
     4ca:	38 85       	ldd	r19, Y+8	; 0x08
     4cc:	89 81       	ldd	r24, Y+1	; 0x01
     4ce:	9a 81       	ldd	r25, Y+2	; 0x02
     4d0:	82 0f       	add	r24, r18
     4d2:	93 1f       	adc	r25, r19
     4d4:	0e 94 0b 01 	call	0x216	; 0x216 <i2c_get>
     4d8:	1b c0       	rjmp	.+54     	; 0x510 <i2c_read_multi_byte+0x146>
		}
		else
		{
			TWCR |= eack;			//sending ACK
     4da:	8c eb       	ldi	r24, 0xBC	; 188
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	2c eb       	ldi	r18, 0xBC	; 188
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	f9 01       	movw	r30, r18
     4e4:	20 81       	ld	r18, Z
     4e6:	20 64       	ori	r18, 0x40	; 64
     4e8:	fc 01       	movw	r30, r24
     4ea:	20 83       	st	Z, r18
			clear_twint();
     4ec:	0e 94 be 00 	call	0x17c	; 0x17c <clear_twint>
			wait();
     4f0:	0e 94 ce 00 	call	0x19c	; 0x19c <wait>
			if(i2c_getstatus()!=0x50)
     4f4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <i2c_getstatus>
     4f8:	80 35       	cpi	r24, 0x50	; 80
     4fa:	11 f0       	breq	.+4      	; 0x500 <i2c_read_multi_byte+0x136>
				return ACK_ERR;	
     4fc:	8e ef       	ldi	r24, 0xFE	; 254
     4fe:	18 c0       	rjmp	.+48     	; 0x530 <i2c_read_multi_byte+0x166>

			i2c_get(&data[i]);		//getting required data
     500:	2f 81       	ldd	r18, Y+7	; 0x07
     502:	38 85       	ldd	r19, Y+8	; 0x08
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	9a 81       	ldd	r25, Y+2	; 0x02
     508:	82 0f       	add	r24, r18
     50a:	93 1f       	adc	r25, r19
     50c:	0e 94 0b 01 	call	0x216	; 0x216 <i2c_get>
	clear_twint();
	wait();
	if(i2c_getstatus()!=0x40)
		return SLAVER_ERR;

	for(i=0;i<n;i++)
     510:	89 81       	ldd	r24, Y+1	; 0x01
     512:	9a 81       	ldd	r25, Y+2	; 0x02
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	9a 83       	std	Y+2, r25	; 0x02
     518:	89 83       	std	Y+1, r24	; 0x01
     51a:	29 81       	ldd	r18, Y+1	; 0x01
     51c:	3a 81       	ldd	r19, Y+2	; 0x02
     51e:	8d 81       	ldd	r24, Y+5	; 0x05
     520:	9e 81       	ldd	r25, Y+6	; 0x06
     522:	28 17       	cp	r18, r24
     524:	39 07       	cpc	r19, r25
     526:	08 f4       	brcc	.+2      	; 0x52a <i2c_read_multi_byte+0x160>
     528:	b2 cf       	rjmp	.-156    	; 0x48e <i2c_read_multi_byte+0xc4>

			i2c_get(&data[i]);		//getting required data
		}
	}

	i2c_stop();						//stopping the transmission
     52a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <i2c_stop>

	return OK;	
     52e:	80 e0       	ldi	r24, 0x00	; 0
}
     530:	28 96       	adiw	r28, 0x08	; 8
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	f8 94       	cli
     536:	de bf       	out	0x3e, r29	; 62
     538:	0f be       	out	0x3f, r0	; 63
     53a:	cd bf       	out	0x3d, r28	; 61
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <lcd_set_4bit>:



//Function to Reset LCD
void lcd_set_4bit()
{
     542:	0f 93       	push	r16
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
     54e:	c0 57       	subi	r28, 0x70	; 112
     550:	d0 40       	sbci	r29, 0x00	; 0
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	f8 94       	cli
     556:	de bf       	out	0x3e, r29	; 62
     558:	0f be       	out	0x3f, r0	; 63
     55a:	cd bf       	out	0x3d, r28	; 61
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	a0 e8       	ldi	r26, 0x80	; 128
     562:	bf e3       	ldi	r27, 0x3F	; 63
     564:	89 83       	std	Y+1, r24	; 0x01
     566:	9a 83       	std	Y+2, r25	; 0x02
     568:	ab 83       	std	Y+3, r26	; 0x03
     56a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     56c:	69 81       	ldd	r22, Y+1	; 0x01
     56e:	7a 81       	ldd	r23, Y+2	; 0x02
     570:	8b 81       	ldd	r24, Y+3	; 0x03
     572:	9c 81       	ldd	r25, Y+4	; 0x04
     574:	26 e6       	ldi	r18, 0x66	; 102
     576:	36 e6       	ldi	r19, 0x66	; 102
     578:	46 e6       	ldi	r20, 0x66	; 102
     57a:	55 e4       	ldi	r21, 0x45	; 69
     57c:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
     584:	8d 83       	std	Y+5, r24	; 0x05
     586:	9e 83       	std	Y+6, r25	; 0x06
     588:	af 83       	std	Y+7, r26	; 0x07
     58a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     58c:	11 e0       	ldi	r17, 0x01	; 1
     58e:	6d 81       	ldd	r22, Y+5	; 0x05
     590:	7e 81       	ldd	r23, Y+6	; 0x06
     592:	8f 81       	ldd	r24, Y+7	; 0x07
     594:	98 85       	ldd	r25, Y+8	; 0x08
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	40 e8       	ldi	r20, 0x80	; 128
     59c:	5f e3       	ldi	r21, 0x3F	; 63
     59e:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
     5a2:	88 23       	and	r24, r24
     5a4:	0c f0       	brlt	.+2      	; 0x5a8 <lcd_set_4bit+0x66>
     5a6:	10 e0       	ldi	r17, 0x00	; 0
     5a8:	11 23       	and	r17, r17
     5aa:	29 f0       	breq	.+10     	; 0x5b6 <lcd_set_4bit+0x74>
		__ticks = 1;
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	9a 87       	std	Y+10, r25	; 0x0a
     5b2:	89 87       	std	Y+9, r24	; 0x09
     5b4:	46 c0       	rjmp	.+140    	; 0x642 <lcd_set_4bit+0x100>
	else if (__tmp > 65535)
     5b6:	11 e0       	ldi	r17, 0x01	; 1
     5b8:	6d 81       	ldd	r22, Y+5	; 0x05
     5ba:	7e 81       	ldd	r23, Y+6	; 0x06
     5bc:	8f 81       	ldd	r24, Y+7	; 0x07
     5be:	98 85       	ldd	r25, Y+8	; 0x08
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	3f ef       	ldi	r19, 0xFF	; 255
     5c4:	4f e7       	ldi	r20, 0x7F	; 127
     5c6:	57 e4       	ldi	r21, 0x47	; 71
     5c8:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
     5cc:	18 16       	cp	r1, r24
     5ce:	0c f0       	brlt	.+2      	; 0x5d2 <lcd_set_4bit+0x90>
     5d0:	10 e0       	ldi	r17, 0x00	; 0
     5d2:	11 23       	and	r17, r17
     5d4:	61 f1       	breq	.+88     	; 0x62e <lcd_set_4bit+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5d6:	69 81       	ldd	r22, Y+1	; 0x01
     5d8:	7a 81       	ldd	r23, Y+2	; 0x02
     5da:	8b 81       	ldd	r24, Y+3	; 0x03
     5dc:	9c 81       	ldd	r25, Y+4	; 0x04
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	40 e2       	ldi	r20, 0x20	; 32
     5e4:	51 e4       	ldi	r21, 0x41	; 65
     5e6:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
     5ea:	dc 01       	movw	r26, r24
     5ec:	cb 01       	movw	r24, r22
     5ee:	bc 01       	movw	r22, r24
     5f0:	cd 01       	movw	r24, r26
     5f2:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
     5f6:	dc 01       	movw	r26, r24
     5f8:	cb 01       	movw	r24, r22
     5fa:	9a 87       	std	Y+10, r25	; 0x0a
     5fc:	89 87       	std	Y+9, r24	; 0x09
     5fe:	12 c0       	rjmp	.+36     	; 0x624 <lcd_set_4bit+0xe2>
     600:	80 e7       	ldi	r24, 0x70	; 112
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	9c 87       	std	Y+12, r25	; 0x0c
     606:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     608:	8b 85       	ldd	r24, Y+11	; 0x0b
     60a:	9c 85       	ldd	r25, Y+12	; 0x0c
     60c:	8c 01       	movw	r16, r24
     60e:	c8 01       	movw	r24, r16
     610:	01 97       	sbiw	r24, 0x01	; 1
     612:	f1 f7       	brne	.-4      	; 0x610 <lcd_set_4bit+0xce>
     614:	8c 01       	movw	r16, r24
     616:	1c 87       	std	Y+12, r17	; 0x0c
     618:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     61a:	89 85       	ldd	r24, Y+9	; 0x09
     61c:	9a 85       	ldd	r25, Y+10	; 0x0a
     61e:	01 97       	sbiw	r24, 0x01	; 1
     620:	9a 87       	std	Y+10, r25	; 0x0a
     622:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     624:	89 85       	ldd	r24, Y+9	; 0x09
     626:	9a 85       	ldd	r25, Y+10	; 0x0a
     628:	00 97       	sbiw	r24, 0x00	; 0
     62a:	51 f7       	brne	.-44     	; 0x600 <lcd_set_4bit+0xbe>
     62c:	17 c0       	rjmp	.+46     	; 0x65c <lcd_set_4bit+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     62e:	6d 81       	ldd	r22, Y+5	; 0x05
     630:	7e 81       	ldd	r23, Y+6	; 0x06
     632:	8f 81       	ldd	r24, Y+7	; 0x07
     634:	98 85       	ldd	r25, Y+8	; 0x08
     636:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
     63a:	dc 01       	movw	r26, r24
     63c:	cb 01       	movw	r24, r22
     63e:	9a 87       	std	Y+10, r25	; 0x0a
     640:	89 87       	std	Y+9, r24	; 0x09
     642:	89 85       	ldd	r24, Y+9	; 0x09
     644:	9a 85       	ldd	r25, Y+10	; 0x0a
     646:	9e 87       	std	Y+14, r25	; 0x0e
     648:	8d 87       	std	Y+13, r24	; 0x0d
     64a:	8d 85       	ldd	r24, Y+13	; 0x0d
     64c:	9e 85       	ldd	r25, Y+14	; 0x0e
     64e:	8c 01       	movw	r16, r24
     650:	f8 01       	movw	r30, r16
     652:	31 97       	sbiw	r30, 0x01	; 1
     654:	f1 f7       	brne	.-4      	; 0x652 <lcd_set_4bit+0x110>
     656:	8f 01       	movw	r16, r30
     658:	1e 87       	std	Y+14, r17	; 0x0e
     65a:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     65c:	88 e2       	ldi	r24, 0x28	; 40
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	28 e2       	ldi	r18, 0x28	; 40
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	f9 01       	movw	r30, r18
     666:	20 81       	ld	r18, Z
     668:	2e 7f       	andi	r18, 0xFE	; 254
     66a:	fc 01       	movw	r30, r24
     66c:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     66e:	88 e2       	ldi	r24, 0x28	; 40
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	28 e2       	ldi	r18, 0x28	; 40
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	f9 01       	movw	r30, r18
     678:	20 81       	ld	r18, Z
     67a:	2d 7f       	andi	r18, 0xFD	; 253
     67c:	fc 01       	movw	r30, r24
     67e:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3
     680:	88 e2       	ldi	r24, 0x28	; 40
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	20 e3       	ldi	r18, 0x30	; 48
     686:	fc 01       	movw	r30, r24
     688:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     68a:	88 e2       	ldi	r24, 0x28	; 40
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	28 e2       	ldi	r18, 0x28	; 40
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	f9 01       	movw	r30, r18
     694:	20 81       	ld	r18, Z
     696:	24 60       	ori	r18, 0x04	; 4
     698:	fc 01       	movw	r30, r24
     69a:	20 83       	st	Z, r18
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	a0 ea       	ldi	r26, 0xA0	; 160
     6a2:	b0 e4       	ldi	r27, 0x40	; 64
     6a4:	8f 87       	std	Y+15, r24	; 0x0f
     6a6:	98 8b       	std	Y+16, r25	; 0x10
     6a8:	a9 8b       	std	Y+17, r26	; 0x11
     6aa:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     6ac:	6f 85       	ldd	r22, Y+15	; 0x0f
     6ae:	78 89       	ldd	r23, Y+16	; 0x10
     6b0:	89 89       	ldd	r24, Y+17	; 0x11
     6b2:	9a 89       	ldd	r25, Y+18	; 0x12
     6b4:	26 e6       	ldi	r18, 0x66	; 102
     6b6:	36 e6       	ldi	r19, 0x66	; 102
     6b8:	46 e6       	ldi	r20, 0x66	; 102
     6ba:	55 e4       	ldi	r21, 0x45	; 69
     6bc:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
     6c0:	dc 01       	movw	r26, r24
     6c2:	cb 01       	movw	r24, r22
     6c4:	8b 8b       	std	Y+19, r24	; 0x13
     6c6:	9c 8b       	std	Y+20, r25	; 0x14
     6c8:	ad 8b       	std	Y+21, r26	; 0x15
     6ca:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     6cc:	11 e0       	ldi	r17, 0x01	; 1
     6ce:	6b 89       	ldd	r22, Y+19	; 0x13
     6d0:	7c 89       	ldd	r23, Y+20	; 0x14
     6d2:	8d 89       	ldd	r24, Y+21	; 0x15
     6d4:	9e 89       	ldd	r25, Y+22	; 0x16
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	40 e8       	ldi	r20, 0x80	; 128
     6dc:	5f e3       	ldi	r21, 0x3F	; 63
     6de:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
     6e2:	88 23       	and	r24, r24
     6e4:	0c f0       	brlt	.+2      	; 0x6e8 <lcd_set_4bit+0x1a6>
     6e6:	10 e0       	ldi	r17, 0x00	; 0
     6e8:	11 23       	and	r17, r17
     6ea:	29 f0       	breq	.+10     	; 0x6f6 <lcd_set_4bit+0x1b4>
		__ticks = 1;
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	98 8f       	std	Y+24, r25	; 0x18
     6f2:	8f 8b       	std	Y+23, r24	; 0x17
     6f4:	46 c0       	rjmp	.+140    	; 0x782 <lcd_set_4bit+0x240>
	else if (__tmp > 65535)
     6f6:	11 e0       	ldi	r17, 0x01	; 1
     6f8:	6b 89       	ldd	r22, Y+19	; 0x13
     6fa:	7c 89       	ldd	r23, Y+20	; 0x14
     6fc:	8d 89       	ldd	r24, Y+21	; 0x15
     6fe:	9e 89       	ldd	r25, Y+22	; 0x16
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	3f ef       	ldi	r19, 0xFF	; 255
     704:	4f e7       	ldi	r20, 0x7F	; 127
     706:	57 e4       	ldi	r21, 0x47	; 71
     708:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
     70c:	18 16       	cp	r1, r24
     70e:	0c f0       	brlt	.+2      	; 0x712 <lcd_set_4bit+0x1d0>
     710:	10 e0       	ldi	r17, 0x00	; 0
     712:	11 23       	and	r17, r17
     714:	61 f1       	breq	.+88     	; 0x76e <lcd_set_4bit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     716:	6f 85       	ldd	r22, Y+15	; 0x0f
     718:	78 89       	ldd	r23, Y+16	; 0x10
     71a:	89 89       	ldd	r24, Y+17	; 0x11
     71c:	9a 89       	ldd	r25, Y+18	; 0x12
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	40 e2       	ldi	r20, 0x20	; 32
     724:	51 e4       	ldi	r21, 0x41	; 65
     726:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
     72a:	dc 01       	movw	r26, r24
     72c:	cb 01       	movw	r24, r22
     72e:	bc 01       	movw	r22, r24
     730:	cd 01       	movw	r24, r26
     732:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
     736:	dc 01       	movw	r26, r24
     738:	cb 01       	movw	r24, r22
     73a:	98 8f       	std	Y+24, r25	; 0x18
     73c:	8f 8b       	std	Y+23, r24	; 0x17
     73e:	12 c0       	rjmp	.+36     	; 0x764 <lcd_set_4bit+0x222>
     740:	80 e7       	ldi	r24, 0x70	; 112
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	9a 8f       	std	Y+26, r25	; 0x1a
     746:	89 8f       	std	Y+25, r24	; 0x19
     748:	89 8d       	ldd	r24, Y+25	; 0x19
     74a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     74c:	8c 01       	movw	r16, r24
     74e:	c8 01       	movw	r24, r16
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	f1 f7       	brne	.-4      	; 0x750 <lcd_set_4bit+0x20e>
     754:	8c 01       	movw	r16, r24
     756:	1a 8f       	std	Y+26, r17	; 0x1a
     758:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     75a:	8f 89       	ldd	r24, Y+23	; 0x17
     75c:	98 8d       	ldd	r25, Y+24	; 0x18
     75e:	01 97       	sbiw	r24, 0x01	; 1
     760:	98 8f       	std	Y+24, r25	; 0x18
     762:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     764:	8f 89       	ldd	r24, Y+23	; 0x17
     766:	98 8d       	ldd	r25, Y+24	; 0x18
     768:	00 97       	sbiw	r24, 0x00	; 0
     76a:	51 f7       	brne	.-44     	; 0x740 <lcd_set_4bit+0x1fe>
     76c:	17 c0       	rjmp	.+46     	; 0x79c <lcd_set_4bit+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     76e:	6b 89       	ldd	r22, Y+19	; 0x13
     770:	7c 89       	ldd	r23, Y+20	; 0x14
     772:	8d 89       	ldd	r24, Y+21	; 0x15
     774:	9e 89       	ldd	r25, Y+22	; 0x16
     776:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
     77a:	dc 01       	movw	r26, r24
     77c:	cb 01       	movw	r24, r22
     77e:	98 8f       	std	Y+24, r25	; 0x18
     780:	8f 8b       	std	Y+23, r24	; 0x17
     782:	8f 89       	ldd	r24, Y+23	; 0x17
     784:	98 8d       	ldd	r25, Y+24	; 0x18
     786:	9c 8f       	std	Y+28, r25	; 0x1c
     788:	8b 8f       	std	Y+27, r24	; 0x1b
     78a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     78c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     78e:	8c 01       	movw	r16, r24
     790:	f8 01       	movw	r30, r16
     792:	31 97       	sbiw	r30, 0x01	; 1
     794:	f1 f7       	brne	.-4      	; 0x792 <lcd_set_4bit+0x250>
     796:	8f 01       	movw	r16, r30
     798:	1c 8f       	std	Y+28, r17	; 0x1c
     79a:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     79c:	88 e2       	ldi	r24, 0x28	; 40
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	28 e2       	ldi	r18, 0x28	; 40
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	f9 01       	movw	r30, r18
     7a6:	20 81       	ld	r18, Z
     7a8:	2b 7f       	andi	r18, 0xFB	; 251
     7aa:	fc 01       	movw	r30, r24
     7ac:	20 83       	st	Z, r18
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	a0 e8       	ldi	r26, 0x80	; 128
     7b4:	bf e3       	ldi	r27, 0x3F	; 63
     7b6:	8d 8f       	std	Y+29, r24	; 0x1d
     7b8:	9e 8f       	std	Y+30, r25	; 0x1e
     7ba:	af 8f       	std	Y+31, r26	; 0x1f
     7bc:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     7be:	6d 8d       	ldd	r22, Y+29	; 0x1d
     7c0:	7e 8d       	ldd	r23, Y+30	; 0x1e
     7c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7c4:	98 a1       	lds	r25, 0x48
     7c6:	26 e6       	ldi	r18, 0x66	; 102
     7c8:	36 e6       	ldi	r19, 0x66	; 102
     7ca:	46 e6       	ldi	r20, 0x66	; 102
     7cc:	55 e4       	ldi	r21, 0x45	; 69
     7ce:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
     7d2:	dc 01       	movw	r26, r24
     7d4:	cb 01       	movw	r24, r22
     7d6:	89 a3       	lds	r24, 0x59
     7d8:	9a a3       	lds	r25, 0x5a
     7da:	ab a3       	lds	r26, 0x5b
     7dc:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
     7de:	11 e0       	ldi	r17, 0x01	; 1
     7e0:	69 a1       	lds	r22, 0x49
     7e2:	7a a1       	lds	r23, 0x4a
     7e4:	8b a1       	lds	r24, 0x4b
     7e6:	9c a1       	lds	r25, 0x4c
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	40 e8       	ldi	r20, 0x80	; 128
     7ee:	5f e3       	ldi	r21, 0x3F	; 63
     7f0:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
     7f4:	88 23       	and	r24, r24
     7f6:	0c f0       	brlt	.+2      	; 0x7fa <lcd_set_4bit+0x2b8>
     7f8:	10 e0       	ldi	r17, 0x00	; 0
     7fa:	11 23       	and	r17, r17
     7fc:	29 f0       	breq	.+10     	; 0x808 <lcd_set_4bit+0x2c6>
		__ticks = 1;
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	9e a3       	lds	r25, 0x5e
     804:	8d a3       	lds	r24, 0x5d
     806:	46 c0       	rjmp	.+140    	; 0x894 <lcd_set_4bit+0x352>
	else if (__tmp > 65535)
     808:	11 e0       	ldi	r17, 0x01	; 1
     80a:	69 a1       	lds	r22, 0x49
     80c:	7a a1       	lds	r23, 0x4a
     80e:	8b a1       	lds	r24, 0x4b
     810:	9c a1       	lds	r25, 0x4c
     812:	20 e0       	ldi	r18, 0x00	; 0
     814:	3f ef       	ldi	r19, 0xFF	; 255
     816:	4f e7       	ldi	r20, 0x7F	; 127
     818:	57 e4       	ldi	r21, 0x47	; 71
     81a:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
     81e:	18 16       	cp	r1, r24
     820:	0c f0       	brlt	.+2      	; 0x824 <lcd_set_4bit+0x2e2>
     822:	10 e0       	ldi	r17, 0x00	; 0
     824:	11 23       	and	r17, r17
     826:	61 f1       	breq	.+88     	; 0x880 <lcd_set_4bit+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     828:	6d 8d       	ldd	r22, Y+29	; 0x1d
     82a:	7e 8d       	ldd	r23, Y+30	; 0x1e
     82c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     82e:	98 a1       	lds	r25, 0x48
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	40 e2       	ldi	r20, 0x20	; 32
     836:	51 e4       	ldi	r21, 0x41	; 65
     838:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
     83c:	dc 01       	movw	r26, r24
     83e:	cb 01       	movw	r24, r22
     840:	bc 01       	movw	r22, r24
     842:	cd 01       	movw	r24, r26
     844:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
     848:	dc 01       	movw	r26, r24
     84a:	cb 01       	movw	r24, r22
     84c:	9e a3       	lds	r25, 0x5e
     84e:	8d a3       	lds	r24, 0x5d
     850:	12 c0       	rjmp	.+36     	; 0x876 <lcd_set_4bit+0x334>
     852:	80 e7       	ldi	r24, 0x70	; 112
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	98 a7       	lds	r25, 0x78
     858:	8f a3       	lds	r24, 0x5f
     85a:	8f a1       	lds	r24, 0x4f
     85c:	98 a5       	lds	r25, 0x68
     85e:	8c 01       	movw	r16, r24
     860:	c8 01       	movw	r24, r16
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	f1 f7       	brne	.-4      	; 0x862 <lcd_set_4bit+0x320>
     866:	8c 01       	movw	r16, r24
     868:	18 a7       	lds	r17, 0x78
     86a:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     86c:	8d a1       	lds	r24, 0x4d
     86e:	9e a1       	lds	r25, 0x4e
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	9e a3       	lds	r25, 0x5e
     874:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     876:	8d a1       	lds	r24, 0x4d
     878:	9e a1       	lds	r25, 0x4e
     87a:	00 97       	sbiw	r24, 0x00	; 0
     87c:	51 f7       	brne	.-44     	; 0x852 <lcd_set_4bit+0x310>
     87e:	17 c0       	rjmp	.+46     	; 0x8ae <lcd_set_4bit+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     880:	69 a1       	lds	r22, 0x49
     882:	7a a1       	lds	r23, 0x4a
     884:	8b a1       	lds	r24, 0x4b
     886:	9c a1       	lds	r25, 0x4c
     888:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
     88c:	dc 01       	movw	r26, r24
     88e:	cb 01       	movw	r24, r22
     890:	9e a3       	lds	r25, 0x5e
     892:	8d a3       	lds	r24, 0x5d
     894:	8d a1       	lds	r24, 0x4d
     896:	9e a1       	lds	r25, 0x4e
     898:	9a a7       	lds	r25, 0x7a
     89a:	89 a7       	lds	r24, 0x79
     89c:	89 a5       	lds	r24, 0x69
     89e:	9a a5       	lds	r25, 0x6a
     8a0:	8c 01       	movw	r16, r24
     8a2:	f8 01       	movw	r30, r16
     8a4:	31 97       	sbiw	r30, 0x01	; 1
     8a6:	f1 f7       	brne	.-4      	; 0x8a4 <lcd_set_4bit+0x362>
     8a8:	8f 01       	movw	r16, r30
     8aa:	1a a7       	lds	r17, 0x7a
     8ac:	09 a7       	lds	r16, 0x79

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     8ae:	88 e2       	ldi	r24, 0x28	; 40
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	28 e2       	ldi	r18, 0x28	; 40
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	f9 01       	movw	r30, r18
     8b8:	20 81       	ld	r18, Z
     8ba:	2e 7f       	andi	r18, 0xFE	; 254
     8bc:	fc 01       	movw	r30, r24
     8be:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     8c0:	88 e2       	ldi	r24, 0x28	; 40
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	28 e2       	ldi	r18, 0x28	; 40
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	f9 01       	movw	r30, r18
     8ca:	20 81       	ld	r18, Z
     8cc:	2d 7f       	andi	r18, 0xFD	; 253
     8ce:	fc 01       	movw	r30, r24
     8d0:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3
     8d2:	88 e2       	ldi	r24, 0x28	; 40
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	20 e3       	ldi	r18, 0x30	; 48
     8d8:	fc 01       	movw	r30, r24
     8da:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     8dc:	88 e2       	ldi	r24, 0x28	; 40
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	28 e2       	ldi	r18, 0x28	; 40
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	f9 01       	movw	r30, r18
     8e6:	20 81       	ld	r18, Z
     8e8:	24 60       	ori	r18, 0x04	; 4
     8ea:	fc 01       	movw	r30, r24
     8ec:	20 83       	st	Z, r18
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	a0 ea       	ldi	r26, 0xA0	; 160
     8f4:	b0 e4       	ldi	r27, 0x40	; 64
     8f6:	8b a7       	lds	r24, 0x7b
     8f8:	9c a7       	lds	r25, 0x7c
     8fa:	ad a7       	lds	r26, 0x7d
     8fc:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     8fe:	6b a5       	lds	r22, 0x6b
     900:	7c a5       	lds	r23, 0x6c
     902:	8d a5       	lds	r24, 0x6d
     904:	9e a5       	lds	r25, 0x6e
     906:	26 e6       	ldi	r18, 0x66	; 102
     908:	36 e6       	ldi	r19, 0x66	; 102
     90a:	46 e6       	ldi	r20, 0x66	; 102
     90c:	55 e4       	ldi	r21, 0x45	; 69
     90e:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
     912:	dc 01       	movw	r26, r24
     914:	cb 01       	movw	r24, r22
     916:	8f a7       	lds	r24, 0x7f
     918:	98 ab       	sts	0x58, r25
     91a:	a9 ab       	sts	0x59, r26
     91c:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
     91e:	11 e0       	ldi	r17, 0x01	; 1
     920:	6f a5       	lds	r22, 0x6f
     922:	78 a9       	sts	0x48, r23
     924:	89 a9       	sts	0x49, r24
     926:	9a a9       	sts	0x4a, r25
     928:	20 e0       	ldi	r18, 0x00	; 0
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	40 e8       	ldi	r20, 0x80	; 128
     92e:	5f e3       	ldi	r21, 0x3F	; 63
     930:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
     934:	88 23       	and	r24, r24
     936:	0c f0       	brlt	.+2      	; 0x93a <lcd_set_4bit+0x3f8>
     938:	10 e0       	ldi	r17, 0x00	; 0
     93a:	11 23       	and	r17, r17
     93c:	29 f0       	breq	.+10     	; 0x948 <lcd_set_4bit+0x406>
		__ticks = 1;
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	9c ab       	sts	0x5c, r25
     944:	8b ab       	sts	0x5b, r24
     946:	46 c0       	rjmp	.+140    	; 0x9d4 <lcd_set_4bit+0x492>
	else if (__tmp > 65535)
     948:	11 e0       	ldi	r17, 0x01	; 1
     94a:	6f a5       	lds	r22, 0x6f
     94c:	78 a9       	sts	0x48, r23
     94e:	89 a9       	sts	0x49, r24
     950:	9a a9       	sts	0x4a, r25
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	3f ef       	ldi	r19, 0xFF	; 255
     956:	4f e7       	ldi	r20, 0x7F	; 127
     958:	57 e4       	ldi	r21, 0x47	; 71
     95a:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
     95e:	18 16       	cp	r1, r24
     960:	0c f0       	brlt	.+2      	; 0x964 <lcd_set_4bit+0x422>
     962:	10 e0       	ldi	r17, 0x00	; 0
     964:	11 23       	and	r17, r17
     966:	61 f1       	breq	.+88     	; 0x9c0 <lcd_set_4bit+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     968:	6b a5       	lds	r22, 0x6b
     96a:	7c a5       	lds	r23, 0x6c
     96c:	8d a5       	lds	r24, 0x6d
     96e:	9e a5       	lds	r25, 0x6e
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	40 e2       	ldi	r20, 0x20	; 32
     976:	51 e4       	ldi	r21, 0x41	; 65
     978:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
     97c:	dc 01       	movw	r26, r24
     97e:	cb 01       	movw	r24, r22
     980:	bc 01       	movw	r22, r24
     982:	cd 01       	movw	r24, r26
     984:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
     988:	dc 01       	movw	r26, r24
     98a:	cb 01       	movw	r24, r22
     98c:	9c ab       	sts	0x5c, r25
     98e:	8b ab       	sts	0x5b, r24
     990:	12 c0       	rjmp	.+36     	; 0x9b6 <lcd_set_4bit+0x474>
     992:	80 e7       	ldi	r24, 0x70	; 112
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	9e ab       	sts	0x5e, r25
     998:	8d ab       	sts	0x5d, r24
     99a:	8d a9       	sts	0x4d, r24
     99c:	9e a9       	sts	0x4e, r25
     99e:	8c 01       	movw	r16, r24
     9a0:	c8 01       	movw	r24, r16
     9a2:	01 97       	sbiw	r24, 0x01	; 1
     9a4:	f1 f7       	brne	.-4      	; 0x9a2 <lcd_set_4bit+0x460>
     9a6:	8c 01       	movw	r16, r24
     9a8:	1e ab       	sts	0x5e, r17
     9aa:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9ac:	8b a9       	sts	0x4b, r24
     9ae:	9c a9       	sts	0x4c, r25
     9b0:	01 97       	sbiw	r24, 0x01	; 1
     9b2:	9c ab       	sts	0x5c, r25
     9b4:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9b6:	8b a9       	sts	0x4b, r24
     9b8:	9c a9       	sts	0x4c, r25
     9ba:	00 97       	sbiw	r24, 0x00	; 0
     9bc:	51 f7       	brne	.-44     	; 0x992 <lcd_set_4bit+0x450>
     9be:	17 c0       	rjmp	.+46     	; 0x9ee <lcd_set_4bit+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9c0:	6f a5       	lds	r22, 0x6f
     9c2:	78 a9       	sts	0x48, r23
     9c4:	89 a9       	sts	0x49, r24
     9c6:	9a a9       	sts	0x4a, r25
     9c8:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
     9cc:	dc 01       	movw	r26, r24
     9ce:	cb 01       	movw	r24, r22
     9d0:	9c ab       	sts	0x5c, r25
     9d2:	8b ab       	sts	0x5b, r24
     9d4:	8b a9       	sts	0x4b, r24
     9d6:	9c a9       	sts	0x4c, r25
     9d8:	98 af       	sts	0x78, r25
     9da:	8f ab       	sts	0x5f, r24
     9dc:	8f a9       	sts	0x4f, r24
     9de:	98 ad       	sts	0x68, r25
     9e0:	8c 01       	movw	r16, r24
     9e2:	f8 01       	movw	r30, r16
     9e4:	31 97       	sbiw	r30, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <lcd_set_4bit+0x4a2>
     9e8:	8f 01       	movw	r16, r30
     9ea:	18 af       	sts	0x78, r17
     9ec:	0f ab       	sts	0x5f, r16
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     9ee:	88 e2       	ldi	r24, 0x28	; 40
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	28 e2       	ldi	r18, 0x28	; 40
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	f9 01       	movw	r30, r18
     9f8:	20 81       	ld	r18, Z
     9fa:	2b 7f       	andi	r18, 0xFB	; 251
     9fc:	fc 01       	movw	r30, r24
     9fe:	20 83       	st	Z, r18
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	a0 e8       	ldi	r26, 0x80	; 128
     a06:	bf e3       	ldi	r27, 0x3F	; 63
     a08:	89 af       	sts	0x79, r24
     a0a:	9a af       	sts	0x7a, r25
     a0c:	ab af       	sts	0x7b, r26
     a0e:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     a10:	69 ad       	sts	0x69, r22
     a12:	7a ad       	sts	0x6a, r23
     a14:	8b ad       	sts	0x6b, r24
     a16:	9c ad       	sts	0x6c, r25
     a18:	26 e6       	ldi	r18, 0x66	; 102
     a1a:	36 e6       	ldi	r19, 0x66	; 102
     a1c:	46 e6       	ldi	r20, 0x66	; 102
     a1e:	55 e4       	ldi	r21, 0x45	; 69
     a20:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
     a24:	dc 01       	movw	r26, r24
     a26:	cb 01       	movw	r24, r22
     a28:	9e 01       	movw	r18, r28
     a2a:	23 5c       	subi	r18, 0xC3	; 195
     a2c:	3f 4f       	sbci	r19, 0xFF	; 255
     a2e:	f9 01       	movw	r30, r18
     a30:	80 83       	st	Z, r24
     a32:	91 83       	std	Z+1, r25	; 0x01
     a34:	a2 83       	std	Z+2, r26	; 0x02
     a36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a38:	11 e0       	ldi	r17, 0x01	; 1
     a3a:	ce 01       	movw	r24, r28
     a3c:	cd 96       	adiw	r24, 0x3d	; 61
     a3e:	fc 01       	movw	r30, r24
     a40:	60 81       	ld	r22, Z
     a42:	71 81       	ldd	r23, Z+1	; 0x01
     a44:	82 81       	ldd	r24, Z+2	; 0x02
     a46:	93 81       	ldd	r25, Z+3	; 0x03
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 e8       	ldi	r20, 0x80	; 128
     a4e:	5f e3       	ldi	r21, 0x3F	; 63
     a50:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
     a54:	88 23       	and	r24, r24
     a56:	0c f0       	brlt	.+2      	; 0xa5a <lcd_set_4bit+0x518>
     a58:	10 e0       	ldi	r17, 0x00	; 0
     a5a:	11 23       	and	r17, r17
     a5c:	49 f0       	breq	.+18     	; 0xa70 <lcd_set_4bit+0x52e>
		__ticks = 1;
     a5e:	ce 01       	movw	r24, r28
     a60:	8f 5b       	subi	r24, 0xBF	; 191
     a62:	9f 4f       	sbci	r25, 0xFF	; 255
     a64:	21 e0       	ldi	r18, 0x01	; 1
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	fc 01       	movw	r30, r24
     a6a:	31 83       	std	Z+1, r19	; 0x01
     a6c:	20 83       	st	Z, r18
     a6e:	6e c0       	rjmp	.+220    	; 0xb4c <lcd_set_4bit+0x60a>
	else if (__tmp > 65535)
     a70:	11 e0       	ldi	r17, 0x01	; 1
     a72:	ce 01       	movw	r24, r28
     a74:	cd 96       	adiw	r24, 0x3d	; 61
     a76:	fc 01       	movw	r30, r24
     a78:	60 81       	ld	r22, Z
     a7a:	71 81       	ldd	r23, Z+1	; 0x01
     a7c:	82 81       	ldd	r24, Z+2	; 0x02
     a7e:	93 81       	ldd	r25, Z+3	; 0x03
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	4f e7       	ldi	r20, 0x7F	; 127
     a86:	57 e4       	ldi	r21, 0x47	; 71
     a88:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
     a8c:	18 16       	cp	r1, r24
     a8e:	0c f0       	brlt	.+2      	; 0xa92 <lcd_set_4bit+0x550>
     a90:	10 e0       	ldi	r17, 0x00	; 0
     a92:	11 23       	and	r17, r17
     a94:	09 f4       	brne	.+2      	; 0xa98 <lcd_set_4bit+0x556>
     a96:	49 c0       	rjmp	.+146    	; 0xb2a <lcd_set_4bit+0x5e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a98:	69 ad       	sts	0x69, r22
     a9a:	7a ad       	sts	0x6a, r23
     a9c:	8b ad       	sts	0x6b, r24
     a9e:	9c ad       	sts	0x6c, r25
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	40 e2       	ldi	r20, 0x20	; 32
     aa6:	51 e4       	ldi	r21, 0x41	; 65
     aa8:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
     aac:	dc 01       	movw	r26, r24
     aae:	cb 01       	movw	r24, r22
     ab0:	8e 01       	movw	r16, r28
     ab2:	0f 5b       	subi	r16, 0xBF	; 191
     ab4:	1f 4f       	sbci	r17, 0xFF	; 255
     ab6:	bc 01       	movw	r22, r24
     ab8:	cd 01       	movw	r24, r26
     aba:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
     abe:	dc 01       	movw	r26, r24
     ac0:	cb 01       	movw	r24, r22
     ac2:	f8 01       	movw	r30, r16
     ac4:	91 83       	std	Z+1, r25	; 0x01
     ac6:	80 83       	st	Z, r24
     ac8:	27 c0       	rjmp	.+78     	; 0xb18 <lcd_set_4bit+0x5d6>
     aca:	ce 01       	movw	r24, r28
     acc:	8d 5b       	subi	r24, 0xBD	; 189
     ace:	9f 4f       	sbci	r25, 0xFF	; 255
     ad0:	20 e7       	ldi	r18, 0x70	; 112
     ad2:	31 e0       	ldi	r19, 0x01	; 1
     ad4:	fc 01       	movw	r30, r24
     ad6:	31 83       	std	Z+1, r19	; 0x01
     ad8:	20 83       	st	Z, r18
     ada:	ce 01       	movw	r24, r28
     adc:	8d 5b       	subi	r24, 0xBD	; 189
     ade:	9f 4f       	sbci	r25, 0xFF	; 255
     ae0:	fc 01       	movw	r30, r24
     ae2:	80 81       	ld	r24, Z
     ae4:	91 81       	ldd	r25, Z+1	; 0x01
     ae6:	8c 01       	movw	r16, r24
     ae8:	c8 01       	movw	r24, r16
     aea:	01 97       	sbiw	r24, 0x01	; 1
     aec:	f1 f7       	brne	.-4      	; 0xaea <lcd_set_4bit+0x5a8>
     aee:	8c 01       	movw	r16, r24
     af0:	ce 01       	movw	r24, r28
     af2:	8d 5b       	subi	r24, 0xBD	; 189
     af4:	9f 4f       	sbci	r25, 0xFF	; 255
     af6:	fc 01       	movw	r30, r24
     af8:	11 83       	std	Z+1, r17	; 0x01
     afa:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     afc:	ce 01       	movw	r24, r28
     afe:	8f 5b       	subi	r24, 0xBF	; 191
     b00:	9f 4f       	sbci	r25, 0xFF	; 255
     b02:	9e 01       	movw	r18, r28
     b04:	2f 5b       	subi	r18, 0xBF	; 191
     b06:	3f 4f       	sbci	r19, 0xFF	; 255
     b08:	f9 01       	movw	r30, r18
     b0a:	20 81       	ld	r18, Z
     b0c:	31 81       	ldd	r19, Z+1	; 0x01
     b0e:	21 50       	subi	r18, 0x01	; 1
     b10:	30 40       	sbci	r19, 0x00	; 0
     b12:	fc 01       	movw	r30, r24
     b14:	31 83       	std	Z+1, r19	; 0x01
     b16:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b18:	ce 01       	movw	r24, r28
     b1a:	8f 5b       	subi	r24, 0xBF	; 191
     b1c:	9f 4f       	sbci	r25, 0xFF	; 255
     b1e:	fc 01       	movw	r30, r24
     b20:	80 81       	ld	r24, Z
     b22:	91 81       	ldd	r25, Z+1	; 0x01
     b24:	00 97       	sbiw	r24, 0x00	; 0
     b26:	89 f6       	brne	.-94     	; 0xaca <lcd_set_4bit+0x588>
     b28:	2e c0       	rjmp	.+92     	; 0xb86 <lcd_set_4bit+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b2a:	8e 01       	movw	r16, r28
     b2c:	0f 5b       	subi	r16, 0xBF	; 191
     b2e:	1f 4f       	sbci	r17, 0xFF	; 255
     b30:	ce 01       	movw	r24, r28
     b32:	cd 96       	adiw	r24, 0x3d	; 61
     b34:	fc 01       	movw	r30, r24
     b36:	60 81       	ld	r22, Z
     b38:	71 81       	ldd	r23, Z+1	; 0x01
     b3a:	82 81       	ldd	r24, Z+2	; 0x02
     b3c:	93 81       	ldd	r25, Z+3	; 0x03
     b3e:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
     b42:	dc 01       	movw	r26, r24
     b44:	cb 01       	movw	r24, r22
     b46:	f8 01       	movw	r30, r16
     b48:	91 83       	std	Z+1, r25	; 0x01
     b4a:	80 83       	st	Z, r24
     b4c:	ce 01       	movw	r24, r28
     b4e:	8b 5b       	subi	r24, 0xBB	; 187
     b50:	9f 4f       	sbci	r25, 0xFF	; 255
     b52:	9e 01       	movw	r18, r28
     b54:	2f 5b       	subi	r18, 0xBF	; 191
     b56:	3f 4f       	sbci	r19, 0xFF	; 255
     b58:	f9 01       	movw	r30, r18
     b5a:	20 81       	ld	r18, Z
     b5c:	31 81       	ldd	r19, Z+1	; 0x01
     b5e:	fc 01       	movw	r30, r24
     b60:	31 83       	std	Z+1, r19	; 0x01
     b62:	20 83       	st	Z, r18
     b64:	ce 01       	movw	r24, r28
     b66:	8b 5b       	subi	r24, 0xBB	; 187
     b68:	9f 4f       	sbci	r25, 0xFF	; 255
     b6a:	fc 01       	movw	r30, r24
     b6c:	80 81       	ld	r24, Z
     b6e:	91 81       	ldd	r25, Z+1	; 0x01
     b70:	8c 01       	movw	r16, r24
     b72:	c8 01       	movw	r24, r16
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	f1 f7       	brne	.-4      	; 0xb74 <lcd_set_4bit+0x632>
     b78:	8c 01       	movw	r16, r24
     b7a:	ce 01       	movw	r24, r28
     b7c:	8b 5b       	subi	r24, 0xBB	; 187
     b7e:	9f 4f       	sbci	r25, 0xFF	; 255
     b80:	fc 01       	movw	r30, r24
     b82:	11 83       	std	Z+1, r17	; 0x01
     b84:	00 83       	st	Z, r16

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     b86:	88 e2       	ldi	r24, 0x28	; 40
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	28 e2       	ldi	r18, 0x28	; 40
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	f9 01       	movw	r30, r18
     b90:	20 81       	ld	r18, Z
     b92:	2e 7f       	andi	r18, 0xFE	; 254
     b94:	fc 01       	movw	r30, r24
     b96:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     b98:	88 e2       	ldi	r24, 0x28	; 40
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	28 e2       	ldi	r18, 0x28	; 40
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	f9 01       	movw	r30, r18
     ba2:	20 81       	ld	r18, Z
     ba4:	2d 7f       	andi	r18, 0xFD	; 253
     ba6:	fc 01       	movw	r30, r24
     ba8:	20 83       	st	Z, r18
	lcd_port = 0x30;				//Sending 3
     baa:	88 e2       	ldi	r24, 0x28	; 40
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	20 e3       	ldi	r18, 0x30	; 48
     bb0:	fc 01       	movw	r30, r24
     bb2:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     bb4:	88 e2       	ldi	r24, 0x28	; 40
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	28 e2       	ldi	r18, 0x28	; 40
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	f9 01       	movw	r30, r18
     bbe:	20 81       	ld	r18, Z
     bc0:	24 60       	ori	r18, 0x04	; 4
     bc2:	fc 01       	movw	r30, r24
     bc4:	20 83       	st	Z, r18
     bc6:	9e 01       	movw	r18, r28
     bc8:	29 5b       	subi	r18, 0xB9	; 185
     bca:	3f 4f       	sbci	r19, 0xFF	; 255
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 ea       	ldi	r26, 0xA0	; 160
     bd2:	b0 e4       	ldi	r27, 0x40	; 64
     bd4:	f9 01       	movw	r30, r18
     bd6:	80 83       	st	Z, r24
     bd8:	91 83       	std	Z+1, r25	; 0x01
     bda:	a2 83       	std	Z+2, r26	; 0x02
     bdc:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     bde:	8e 01       	movw	r16, r28
     be0:	05 5b       	subi	r16, 0xB5	; 181
     be2:	1f 4f       	sbci	r17, 0xFF	; 255
     be4:	ce 01       	movw	r24, r28
     be6:	89 5b       	subi	r24, 0xB9	; 185
     be8:	9f 4f       	sbci	r25, 0xFF	; 255
     bea:	fc 01       	movw	r30, r24
     bec:	60 81       	ld	r22, Z
     bee:	71 81       	ldd	r23, Z+1	; 0x01
     bf0:	82 81       	ldd	r24, Z+2	; 0x02
     bf2:	93 81       	ldd	r25, Z+3	; 0x03
     bf4:	26 e6       	ldi	r18, 0x66	; 102
     bf6:	36 e6       	ldi	r19, 0x66	; 102
     bf8:	46 e6       	ldi	r20, 0x66	; 102
     bfa:	55 e4       	ldi	r21, 0x45	; 69
     bfc:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	f8 01       	movw	r30, r16
     c06:	80 83       	st	Z, r24
     c08:	91 83       	std	Z+1, r25	; 0x01
     c0a:	a2 83       	std	Z+2, r26	; 0x02
     c0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c0e:	ce 01       	movw	r24, r28
     c10:	85 5b       	subi	r24, 0xB5	; 181
     c12:	9f 4f       	sbci	r25, 0xFF	; 255
     c14:	11 e0       	ldi	r17, 0x01	; 1
     c16:	fc 01       	movw	r30, r24
     c18:	60 81       	ld	r22, Z
     c1a:	71 81       	ldd	r23, Z+1	; 0x01
     c1c:	82 81       	ldd	r24, Z+2	; 0x02
     c1e:	93 81       	ldd	r25, Z+3	; 0x03
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	40 e8       	ldi	r20, 0x80	; 128
     c26:	5f e3       	ldi	r21, 0x3F	; 63
     c28:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
     c2c:	88 23       	and	r24, r24
     c2e:	0c f0       	brlt	.+2      	; 0xc32 <lcd_set_4bit+0x6f0>
     c30:	10 e0       	ldi	r17, 0x00	; 0
     c32:	11 23       	and	r17, r17
     c34:	49 f0       	breq	.+18     	; 0xc48 <lcd_set_4bit+0x706>
		__ticks = 1;
     c36:	ce 01       	movw	r24, r28
     c38:	81 5b       	subi	r24, 0xB1	; 177
     c3a:	9f 4f       	sbci	r25, 0xFF	; 255
     c3c:	21 e0       	ldi	r18, 0x01	; 1
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	fc 01       	movw	r30, r24
     c42:	31 83       	std	Z+1, r19	; 0x01
     c44:	20 83       	st	Z, r18
     c46:	74 c0       	rjmp	.+232    	; 0xd30 <lcd_set_4bit+0x7ee>
	else if (__tmp > 65535)
     c48:	ce 01       	movw	r24, r28
     c4a:	85 5b       	subi	r24, 0xB5	; 181
     c4c:	9f 4f       	sbci	r25, 0xFF	; 255
     c4e:	11 e0       	ldi	r17, 0x01	; 1
     c50:	fc 01       	movw	r30, r24
     c52:	60 81       	ld	r22, Z
     c54:	71 81       	ldd	r23, Z+1	; 0x01
     c56:	82 81       	ldd	r24, Z+2	; 0x02
     c58:	93 81       	ldd	r25, Z+3	; 0x03
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	3f ef       	ldi	r19, 0xFF	; 255
     c5e:	4f e7       	ldi	r20, 0x7F	; 127
     c60:	57 e4       	ldi	r21, 0x47	; 71
     c62:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
     c66:	18 16       	cp	r1, r24
     c68:	0c f0       	brlt	.+2      	; 0xc6c <lcd_set_4bit+0x72a>
     c6a:	10 e0       	ldi	r17, 0x00	; 0
     c6c:	11 23       	and	r17, r17
     c6e:	09 f4       	brne	.+2      	; 0xc72 <lcd_set_4bit+0x730>
     c70:	4d c0       	rjmp	.+154    	; 0xd0c <lcd_set_4bit+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c72:	ce 01       	movw	r24, r28
     c74:	89 5b       	subi	r24, 0xB9	; 185
     c76:	9f 4f       	sbci	r25, 0xFF	; 255
     c78:	fc 01       	movw	r30, r24
     c7a:	60 81       	ld	r22, Z
     c7c:	71 81       	ldd	r23, Z+1	; 0x01
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	40 e2       	ldi	r20, 0x20	; 32
     c88:	51 e4       	ldi	r21, 0x41	; 65
     c8a:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
     c8e:	dc 01       	movw	r26, r24
     c90:	cb 01       	movw	r24, r22
     c92:	8e 01       	movw	r16, r28
     c94:	01 5b       	subi	r16, 0xB1	; 177
     c96:	1f 4f       	sbci	r17, 0xFF	; 255
     c98:	bc 01       	movw	r22, r24
     c9a:	cd 01       	movw	r24, r26
     c9c:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
     ca0:	dc 01       	movw	r26, r24
     ca2:	cb 01       	movw	r24, r22
     ca4:	f8 01       	movw	r30, r16
     ca6:	91 83       	std	Z+1, r25	; 0x01
     ca8:	80 83       	st	Z, r24
     caa:	27 c0       	rjmp	.+78     	; 0xcfa <lcd_set_4bit+0x7b8>
     cac:	ce 01       	movw	r24, r28
     cae:	8f 5a       	subi	r24, 0xAF	; 175
     cb0:	9f 4f       	sbci	r25, 0xFF	; 255
     cb2:	20 e7       	ldi	r18, 0x70	; 112
     cb4:	31 e0       	ldi	r19, 0x01	; 1
     cb6:	fc 01       	movw	r30, r24
     cb8:	31 83       	std	Z+1, r19	; 0x01
     cba:	20 83       	st	Z, r18
     cbc:	ce 01       	movw	r24, r28
     cbe:	8f 5a       	subi	r24, 0xAF	; 175
     cc0:	9f 4f       	sbci	r25, 0xFF	; 255
     cc2:	fc 01       	movw	r30, r24
     cc4:	80 81       	ld	r24, Z
     cc6:	91 81       	ldd	r25, Z+1	; 0x01
     cc8:	8c 01       	movw	r16, r24
     cca:	c8 01       	movw	r24, r16
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	f1 f7       	brne	.-4      	; 0xccc <lcd_set_4bit+0x78a>
     cd0:	8c 01       	movw	r16, r24
     cd2:	ce 01       	movw	r24, r28
     cd4:	8f 5a       	subi	r24, 0xAF	; 175
     cd6:	9f 4f       	sbci	r25, 0xFF	; 255
     cd8:	fc 01       	movw	r30, r24
     cda:	11 83       	std	Z+1, r17	; 0x01
     cdc:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cde:	ce 01       	movw	r24, r28
     ce0:	81 5b       	subi	r24, 0xB1	; 177
     ce2:	9f 4f       	sbci	r25, 0xFF	; 255
     ce4:	9e 01       	movw	r18, r28
     ce6:	21 5b       	subi	r18, 0xB1	; 177
     ce8:	3f 4f       	sbci	r19, 0xFF	; 255
     cea:	f9 01       	movw	r30, r18
     cec:	20 81       	ld	r18, Z
     cee:	31 81       	ldd	r19, Z+1	; 0x01
     cf0:	21 50       	subi	r18, 0x01	; 1
     cf2:	30 40       	sbci	r19, 0x00	; 0
     cf4:	fc 01       	movw	r30, r24
     cf6:	31 83       	std	Z+1, r19	; 0x01
     cf8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cfa:	ce 01       	movw	r24, r28
     cfc:	81 5b       	subi	r24, 0xB1	; 177
     cfe:	9f 4f       	sbci	r25, 0xFF	; 255
     d00:	fc 01       	movw	r30, r24
     d02:	80 81       	ld	r24, Z
     d04:	91 81       	ldd	r25, Z+1	; 0x01
     d06:	00 97       	sbiw	r24, 0x00	; 0
     d08:	89 f6       	brne	.-94     	; 0xcac <lcd_set_4bit+0x76a>
     d0a:	2f c0       	rjmp	.+94     	; 0xd6a <lcd_set_4bit+0x828>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d0c:	8e 01       	movw	r16, r28
     d0e:	01 5b       	subi	r16, 0xB1	; 177
     d10:	1f 4f       	sbci	r17, 0xFF	; 255
     d12:	ce 01       	movw	r24, r28
     d14:	85 5b       	subi	r24, 0xB5	; 181
     d16:	9f 4f       	sbci	r25, 0xFF	; 255
     d18:	fc 01       	movw	r30, r24
     d1a:	60 81       	ld	r22, Z
     d1c:	71 81       	ldd	r23, Z+1	; 0x01
     d1e:	82 81       	ldd	r24, Z+2	; 0x02
     d20:	93 81       	ldd	r25, Z+3	; 0x03
     d22:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
     d26:	dc 01       	movw	r26, r24
     d28:	cb 01       	movw	r24, r22
     d2a:	f8 01       	movw	r30, r16
     d2c:	91 83       	std	Z+1, r25	; 0x01
     d2e:	80 83       	st	Z, r24
     d30:	ce 01       	movw	r24, r28
     d32:	8d 5a       	subi	r24, 0xAD	; 173
     d34:	9f 4f       	sbci	r25, 0xFF	; 255
     d36:	9e 01       	movw	r18, r28
     d38:	21 5b       	subi	r18, 0xB1	; 177
     d3a:	3f 4f       	sbci	r19, 0xFF	; 255
     d3c:	f9 01       	movw	r30, r18
     d3e:	20 81       	ld	r18, Z
     d40:	31 81       	ldd	r19, Z+1	; 0x01
     d42:	fc 01       	movw	r30, r24
     d44:	31 83       	std	Z+1, r19	; 0x01
     d46:	20 83       	st	Z, r18
     d48:	ce 01       	movw	r24, r28
     d4a:	8d 5a       	subi	r24, 0xAD	; 173
     d4c:	9f 4f       	sbci	r25, 0xFF	; 255
     d4e:	fc 01       	movw	r30, r24
     d50:	80 81       	ld	r24, Z
     d52:	91 81       	ldd	r25, Z+1	; 0x01
     d54:	8c 01       	movw	r16, r24
     d56:	c8 01       	movw	r24, r16
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <lcd_set_4bit+0x816>
     d5c:	8c 01       	movw	r16, r24
     d5e:	ce 01       	movw	r24, r28
     d60:	8d 5a       	subi	r24, 0xAD	; 173
     d62:	9f 4f       	sbci	r25, 0xFF	; 255
     d64:	fc 01       	movw	r30, r24
     d66:	11 83       	std	Z+1, r17	; 0x01
     d68:	00 83       	st	Z, r16
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     d6a:	88 e2       	ldi	r24, 0x28	; 40
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	28 e2       	ldi	r18, 0x28	; 40
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	f9 01       	movw	r30, r18
     d74:	20 81       	ld	r18, Z
     d76:	2b 7f       	andi	r18, 0xFB	; 251
     d78:	fc 01       	movw	r30, r24
     d7a:	20 83       	st	Z, r18
     d7c:	9e 01       	movw	r18, r28
     d7e:	2b 5a       	subi	r18, 0xAB	; 171
     d80:	3f 4f       	sbci	r19, 0xFF	; 255
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	a0 e8       	ldi	r26, 0x80	; 128
     d88:	bf e3       	ldi	r27, 0x3F	; 63
     d8a:	f9 01       	movw	r30, r18
     d8c:	80 83       	st	Z, r24
     d8e:	91 83       	std	Z+1, r25	; 0x01
     d90:	a2 83       	std	Z+2, r26	; 0x02
     d92:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     d94:	8e 01       	movw	r16, r28
     d96:	07 5a       	subi	r16, 0xA7	; 167
     d98:	1f 4f       	sbci	r17, 0xFF	; 255
     d9a:	ce 01       	movw	r24, r28
     d9c:	8b 5a       	subi	r24, 0xAB	; 171
     d9e:	9f 4f       	sbci	r25, 0xFF	; 255
     da0:	fc 01       	movw	r30, r24
     da2:	60 81       	ld	r22, Z
     da4:	71 81       	ldd	r23, Z+1	; 0x01
     da6:	82 81       	ldd	r24, Z+2	; 0x02
     da8:	93 81       	ldd	r25, Z+3	; 0x03
     daa:	26 e6       	ldi	r18, 0x66	; 102
     dac:	36 e6       	ldi	r19, 0x66	; 102
     dae:	46 e6       	ldi	r20, 0x66	; 102
     db0:	55 e4       	ldi	r21, 0x45	; 69
     db2:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
     db6:	dc 01       	movw	r26, r24
     db8:	cb 01       	movw	r24, r22
     dba:	f8 01       	movw	r30, r16
     dbc:	80 83       	st	Z, r24
     dbe:	91 83       	std	Z+1, r25	; 0x01
     dc0:	a2 83       	std	Z+2, r26	; 0x02
     dc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     dc4:	ce 01       	movw	r24, r28
     dc6:	87 5a       	subi	r24, 0xA7	; 167
     dc8:	9f 4f       	sbci	r25, 0xFF	; 255
     dca:	11 e0       	ldi	r17, 0x01	; 1
     dcc:	fc 01       	movw	r30, r24
     dce:	60 81       	ld	r22, Z
     dd0:	71 81       	ldd	r23, Z+1	; 0x01
     dd2:	82 81       	ldd	r24, Z+2	; 0x02
     dd4:	93 81       	ldd	r25, Z+3	; 0x03
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	40 e8       	ldi	r20, 0x80	; 128
     ddc:	5f e3       	ldi	r21, 0x3F	; 63
     dde:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
     de2:	88 23       	and	r24, r24
     de4:	0c f0       	brlt	.+2      	; 0xde8 <lcd_set_4bit+0x8a6>
     de6:	10 e0       	ldi	r17, 0x00	; 0
     de8:	11 23       	and	r17, r17
     dea:	49 f0       	breq	.+18     	; 0xdfe <lcd_set_4bit+0x8bc>
		__ticks = 1;
     dec:	ce 01       	movw	r24, r28
     dee:	83 5a       	subi	r24, 0xA3	; 163
     df0:	9f 4f       	sbci	r25, 0xFF	; 255
     df2:	21 e0       	ldi	r18, 0x01	; 1
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	fc 01       	movw	r30, r24
     df8:	31 83       	std	Z+1, r19	; 0x01
     dfa:	20 83       	st	Z, r18
     dfc:	74 c0       	rjmp	.+232    	; 0xee6 <lcd_set_4bit+0x9a4>
	else if (__tmp > 65535)
     dfe:	ce 01       	movw	r24, r28
     e00:	87 5a       	subi	r24, 0xA7	; 167
     e02:	9f 4f       	sbci	r25, 0xFF	; 255
     e04:	11 e0       	ldi	r17, 0x01	; 1
     e06:	fc 01       	movw	r30, r24
     e08:	60 81       	ld	r22, Z
     e0a:	71 81       	ldd	r23, Z+1	; 0x01
     e0c:	82 81       	ldd	r24, Z+2	; 0x02
     e0e:	93 81       	ldd	r25, Z+3	; 0x03
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	3f ef       	ldi	r19, 0xFF	; 255
     e14:	4f e7       	ldi	r20, 0x7F	; 127
     e16:	57 e4       	ldi	r21, 0x47	; 71
     e18:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
     e1c:	18 16       	cp	r1, r24
     e1e:	0c f0       	brlt	.+2      	; 0xe22 <lcd_set_4bit+0x8e0>
     e20:	10 e0       	ldi	r17, 0x00	; 0
     e22:	11 23       	and	r17, r17
     e24:	09 f4       	brne	.+2      	; 0xe28 <lcd_set_4bit+0x8e6>
     e26:	4d c0       	rjmp	.+154    	; 0xec2 <lcd_set_4bit+0x980>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e28:	ce 01       	movw	r24, r28
     e2a:	8b 5a       	subi	r24, 0xAB	; 171
     e2c:	9f 4f       	sbci	r25, 0xFF	; 255
     e2e:	fc 01       	movw	r30, r24
     e30:	60 81       	ld	r22, Z
     e32:	71 81       	ldd	r23, Z+1	; 0x01
     e34:	82 81       	ldd	r24, Z+2	; 0x02
     e36:	93 81       	ldd	r25, Z+3	; 0x03
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e2       	ldi	r20, 0x20	; 32
     e3e:	51 e4       	ldi	r21, 0x41	; 65
     e40:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	8e 01       	movw	r16, r28
     e4a:	03 5a       	subi	r16, 0xA3	; 163
     e4c:	1f 4f       	sbci	r17, 0xFF	; 255
     e4e:	bc 01       	movw	r22, r24
     e50:	cd 01       	movw	r24, r26
     e52:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
     e56:	dc 01       	movw	r26, r24
     e58:	cb 01       	movw	r24, r22
     e5a:	f8 01       	movw	r30, r16
     e5c:	91 83       	std	Z+1, r25	; 0x01
     e5e:	80 83       	st	Z, r24
     e60:	27 c0       	rjmp	.+78     	; 0xeb0 <lcd_set_4bit+0x96e>
     e62:	ce 01       	movw	r24, r28
     e64:	81 5a       	subi	r24, 0xA1	; 161
     e66:	9f 4f       	sbci	r25, 0xFF	; 255
     e68:	20 e7       	ldi	r18, 0x70	; 112
     e6a:	31 e0       	ldi	r19, 0x01	; 1
     e6c:	fc 01       	movw	r30, r24
     e6e:	31 83       	std	Z+1, r19	; 0x01
     e70:	20 83       	st	Z, r18
     e72:	ce 01       	movw	r24, r28
     e74:	81 5a       	subi	r24, 0xA1	; 161
     e76:	9f 4f       	sbci	r25, 0xFF	; 255
     e78:	fc 01       	movw	r30, r24
     e7a:	80 81       	ld	r24, Z
     e7c:	91 81       	ldd	r25, Z+1	; 0x01
     e7e:	8c 01       	movw	r16, r24
     e80:	c8 01       	movw	r24, r16
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	f1 f7       	brne	.-4      	; 0xe82 <lcd_set_4bit+0x940>
     e86:	8c 01       	movw	r16, r24
     e88:	ce 01       	movw	r24, r28
     e8a:	81 5a       	subi	r24, 0xA1	; 161
     e8c:	9f 4f       	sbci	r25, 0xFF	; 255
     e8e:	fc 01       	movw	r30, r24
     e90:	11 83       	std	Z+1, r17	; 0x01
     e92:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e94:	ce 01       	movw	r24, r28
     e96:	83 5a       	subi	r24, 0xA3	; 163
     e98:	9f 4f       	sbci	r25, 0xFF	; 255
     e9a:	9e 01       	movw	r18, r28
     e9c:	23 5a       	subi	r18, 0xA3	; 163
     e9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ea0:	f9 01       	movw	r30, r18
     ea2:	20 81       	ld	r18, Z
     ea4:	31 81       	ldd	r19, Z+1	; 0x01
     ea6:	21 50       	subi	r18, 0x01	; 1
     ea8:	30 40       	sbci	r19, 0x00	; 0
     eaa:	fc 01       	movw	r30, r24
     eac:	31 83       	std	Z+1, r19	; 0x01
     eae:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb0:	ce 01       	movw	r24, r28
     eb2:	83 5a       	subi	r24, 0xA3	; 163
     eb4:	9f 4f       	sbci	r25, 0xFF	; 255
     eb6:	fc 01       	movw	r30, r24
     eb8:	80 81       	ld	r24, Z
     eba:	91 81       	ldd	r25, Z+1	; 0x01
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	89 f6       	brne	.-94     	; 0xe62 <lcd_set_4bit+0x920>
     ec0:	2f c0       	rjmp	.+94     	; 0xf20 <lcd_set_4bit+0x9de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec2:	8e 01       	movw	r16, r28
     ec4:	03 5a       	subi	r16, 0xA3	; 163
     ec6:	1f 4f       	sbci	r17, 0xFF	; 255
     ec8:	ce 01       	movw	r24, r28
     eca:	87 5a       	subi	r24, 0xA7	; 167
     ecc:	9f 4f       	sbci	r25, 0xFF	; 255
     ece:	fc 01       	movw	r30, r24
     ed0:	60 81       	ld	r22, Z
     ed2:	71 81       	ldd	r23, Z+1	; 0x01
     ed4:	82 81       	ldd	r24, Z+2	; 0x02
     ed6:	93 81       	ldd	r25, Z+3	; 0x03
     ed8:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	f8 01       	movw	r30, r16
     ee2:	91 83       	std	Z+1, r25	; 0x01
     ee4:	80 83       	st	Z, r24
     ee6:	ce 01       	movw	r24, r28
     ee8:	8f 59       	subi	r24, 0x9F	; 159
     eea:	9f 4f       	sbci	r25, 0xFF	; 255
     eec:	9e 01       	movw	r18, r28
     eee:	23 5a       	subi	r18, 0xA3	; 163
     ef0:	3f 4f       	sbci	r19, 0xFF	; 255
     ef2:	f9 01       	movw	r30, r18
     ef4:	20 81       	ld	r18, Z
     ef6:	31 81       	ldd	r19, Z+1	; 0x01
     ef8:	fc 01       	movw	r30, r24
     efa:	31 83       	std	Z+1, r19	; 0x01
     efc:	20 83       	st	Z, r18
     efe:	ce 01       	movw	r24, r28
     f00:	8f 59       	subi	r24, 0x9F	; 159
     f02:	9f 4f       	sbci	r25, 0xFF	; 255
     f04:	fc 01       	movw	r30, r24
     f06:	80 81       	ld	r24, Z
     f08:	91 81       	ldd	r25, Z+1	; 0x01
     f0a:	8c 01       	movw	r16, r24
     f0c:	c8 01       	movw	r24, r16
     f0e:	01 97       	sbiw	r24, 0x01	; 1
     f10:	f1 f7       	brne	.-4      	; 0xf0e <lcd_set_4bit+0x9cc>
     f12:	8c 01       	movw	r16, r24
     f14:	ce 01       	movw	r24, r28
     f16:	8f 59       	subi	r24, 0x9F	; 159
     f18:	9f 4f       	sbci	r25, 0xFF	; 255
     f1a:	fc 01       	movw	r30, r24
     f1c:	11 83       	std	Z+1, r17	; 0x01
     f1e:	00 83       	st	Z, r16

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     f20:	88 e2       	ldi	r24, 0x28	; 40
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	28 e2       	ldi	r18, 0x28	; 40
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	f9 01       	movw	r30, r18
     f2a:	20 81       	ld	r18, Z
     f2c:	2e 7f       	andi	r18, 0xFE	; 254
     f2e:	fc 01       	movw	r30, r24
     f30:	20 83       	st	Z, r18
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     f32:	88 e2       	ldi	r24, 0x28	; 40
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	28 e2       	ldi	r18, 0x28	; 40
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	f9 01       	movw	r30, r18
     f3c:	20 81       	ld	r18, Z
     f3e:	2d 7f       	andi	r18, 0xFD	; 253
     f40:	fc 01       	movw	r30, r24
     f42:	20 83       	st	Z, r18
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     f44:	88 e2       	ldi	r24, 0x28	; 40
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	20 e2       	ldi	r18, 0x20	; 32
     f4a:	fc 01       	movw	r30, r24
     f4c:	20 83       	st	Z, r18
	sbit(lcd_port,EN);				//Set Enable Pin
     f4e:	88 e2       	ldi	r24, 0x28	; 40
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	28 e2       	ldi	r18, 0x28	; 40
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	f9 01       	movw	r30, r18
     f58:	20 81       	ld	r18, Z
     f5a:	24 60       	ori	r18, 0x04	; 4
     f5c:	fc 01       	movw	r30, r24
     f5e:	20 83       	st	Z, r18
     f60:	9e 01       	movw	r18, r28
     f62:	2d 59       	subi	r18, 0x9D	; 157
     f64:	3f 4f       	sbci	r19, 0xFF	; 255
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	a0 ea       	ldi	r26, 0xA0	; 160
     f6c:	b0 e4       	ldi	r27, 0x40	; 64
     f6e:	f9 01       	movw	r30, r18
     f70:	80 83       	st	Z, r24
     f72:	91 83       	std	Z+1, r25	; 0x01
     f74:	a2 83       	std	Z+2, r26	; 0x02
     f76:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     f78:	8e 01       	movw	r16, r28
     f7a:	09 59       	subi	r16, 0x99	; 153
     f7c:	1f 4f       	sbci	r17, 0xFF	; 255
     f7e:	ce 01       	movw	r24, r28
     f80:	8d 59       	subi	r24, 0x9D	; 157
     f82:	9f 4f       	sbci	r25, 0xFF	; 255
     f84:	fc 01       	movw	r30, r24
     f86:	60 81       	ld	r22, Z
     f88:	71 81       	ldd	r23, Z+1	; 0x01
     f8a:	82 81       	ldd	r24, Z+2	; 0x02
     f8c:	93 81       	ldd	r25, Z+3	; 0x03
     f8e:	26 e6       	ldi	r18, 0x66	; 102
     f90:	36 e6       	ldi	r19, 0x66	; 102
     f92:	46 e6       	ldi	r20, 0x66	; 102
     f94:	55 e4       	ldi	r21, 0x45	; 69
     f96:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	f8 01       	movw	r30, r16
     fa0:	80 83       	st	Z, r24
     fa2:	91 83       	std	Z+1, r25	; 0x01
     fa4:	a2 83       	std	Z+2, r26	; 0x02
     fa6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fa8:	ce 01       	movw	r24, r28
     faa:	89 59       	subi	r24, 0x99	; 153
     fac:	9f 4f       	sbci	r25, 0xFF	; 255
     fae:	11 e0       	ldi	r17, 0x01	; 1
     fb0:	fc 01       	movw	r30, r24
     fb2:	60 81       	ld	r22, Z
     fb4:	71 81       	ldd	r23, Z+1	; 0x01
     fb6:	82 81       	ldd	r24, Z+2	; 0x02
     fb8:	93 81       	ldd	r25, Z+3	; 0x03
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	40 e8       	ldi	r20, 0x80	; 128
     fc0:	5f e3       	ldi	r21, 0x3F	; 63
     fc2:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
     fc6:	88 23       	and	r24, r24
     fc8:	0c f0       	brlt	.+2      	; 0xfcc <lcd_set_4bit+0xa8a>
     fca:	10 e0       	ldi	r17, 0x00	; 0
     fcc:	11 23       	and	r17, r17
     fce:	49 f0       	breq	.+18     	; 0xfe2 <lcd_set_4bit+0xaa0>
		__ticks = 1;
     fd0:	ce 01       	movw	r24, r28
     fd2:	85 59       	subi	r24, 0x95	; 149
     fd4:	9f 4f       	sbci	r25, 0xFF	; 255
     fd6:	21 e0       	ldi	r18, 0x01	; 1
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	fc 01       	movw	r30, r24
     fdc:	31 83       	std	Z+1, r19	; 0x01
     fde:	20 83       	st	Z, r18
     fe0:	74 c0       	rjmp	.+232    	; 0x10ca <lcd_set_4bit+0xb88>
	else if (__tmp > 65535)
     fe2:	ce 01       	movw	r24, r28
     fe4:	89 59       	subi	r24, 0x99	; 153
     fe6:	9f 4f       	sbci	r25, 0xFF	; 255
     fe8:	11 e0       	ldi	r17, 0x01	; 1
     fea:	fc 01       	movw	r30, r24
     fec:	60 81       	ld	r22, Z
     fee:	71 81       	ldd	r23, Z+1	; 0x01
     ff0:	82 81       	ldd	r24, Z+2	; 0x02
     ff2:	93 81       	ldd	r25, Z+3	; 0x03
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	3f ef       	ldi	r19, 0xFF	; 255
     ff8:	4f e7       	ldi	r20, 0x7F	; 127
     ffa:	57 e4       	ldi	r21, 0x47	; 71
     ffc:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    1000:	18 16       	cp	r1, r24
    1002:	0c f0       	brlt	.+2      	; 0x1006 <lcd_set_4bit+0xac4>
    1004:	10 e0       	ldi	r17, 0x00	; 0
    1006:	11 23       	and	r17, r17
    1008:	09 f4       	brne	.+2      	; 0x100c <lcd_set_4bit+0xaca>
    100a:	4d c0       	rjmp	.+154    	; 0x10a6 <lcd_set_4bit+0xb64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    100c:	ce 01       	movw	r24, r28
    100e:	8d 59       	subi	r24, 0x9D	; 157
    1010:	9f 4f       	sbci	r25, 0xFF	; 255
    1012:	fc 01       	movw	r30, r24
    1014:	60 81       	ld	r22, Z
    1016:	71 81       	ldd	r23, Z+1	; 0x01
    1018:	82 81       	ldd	r24, Z+2	; 0x02
    101a:	93 81       	ldd	r25, Z+3	; 0x03
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	40 e2       	ldi	r20, 0x20	; 32
    1022:	51 e4       	ldi	r21, 0x41	; 65
    1024:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	8e 01       	movw	r16, r28
    102e:	05 59       	subi	r16, 0x95	; 149
    1030:	1f 4f       	sbci	r17, 0xFF	; 255
    1032:	bc 01       	movw	r22, r24
    1034:	cd 01       	movw	r24, r26
    1036:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    103a:	dc 01       	movw	r26, r24
    103c:	cb 01       	movw	r24, r22
    103e:	f8 01       	movw	r30, r16
    1040:	91 83       	std	Z+1, r25	; 0x01
    1042:	80 83       	st	Z, r24
    1044:	27 c0       	rjmp	.+78     	; 0x1094 <lcd_set_4bit+0xb52>
    1046:	ce 01       	movw	r24, r28
    1048:	83 59       	subi	r24, 0x93	; 147
    104a:	9f 4f       	sbci	r25, 0xFF	; 255
    104c:	20 e7       	ldi	r18, 0x70	; 112
    104e:	31 e0       	ldi	r19, 0x01	; 1
    1050:	fc 01       	movw	r30, r24
    1052:	31 83       	std	Z+1, r19	; 0x01
    1054:	20 83       	st	Z, r18
    1056:	ce 01       	movw	r24, r28
    1058:	83 59       	subi	r24, 0x93	; 147
    105a:	9f 4f       	sbci	r25, 0xFF	; 255
    105c:	fc 01       	movw	r30, r24
    105e:	80 81       	ld	r24, Z
    1060:	91 81       	ldd	r25, Z+1	; 0x01
    1062:	8c 01       	movw	r16, r24
    1064:	c8 01       	movw	r24, r16
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	f1 f7       	brne	.-4      	; 0x1066 <lcd_set_4bit+0xb24>
    106a:	8c 01       	movw	r16, r24
    106c:	ce 01       	movw	r24, r28
    106e:	83 59       	subi	r24, 0x93	; 147
    1070:	9f 4f       	sbci	r25, 0xFF	; 255
    1072:	fc 01       	movw	r30, r24
    1074:	11 83       	std	Z+1, r17	; 0x01
    1076:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1078:	ce 01       	movw	r24, r28
    107a:	85 59       	subi	r24, 0x95	; 149
    107c:	9f 4f       	sbci	r25, 0xFF	; 255
    107e:	9e 01       	movw	r18, r28
    1080:	25 59       	subi	r18, 0x95	; 149
    1082:	3f 4f       	sbci	r19, 0xFF	; 255
    1084:	f9 01       	movw	r30, r18
    1086:	20 81       	ld	r18, Z
    1088:	31 81       	ldd	r19, Z+1	; 0x01
    108a:	21 50       	subi	r18, 0x01	; 1
    108c:	30 40       	sbci	r19, 0x00	; 0
    108e:	fc 01       	movw	r30, r24
    1090:	31 83       	std	Z+1, r19	; 0x01
    1092:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1094:	ce 01       	movw	r24, r28
    1096:	85 59       	subi	r24, 0x95	; 149
    1098:	9f 4f       	sbci	r25, 0xFF	; 255
    109a:	fc 01       	movw	r30, r24
    109c:	80 81       	ld	r24, Z
    109e:	91 81       	ldd	r25, Z+1	; 0x01
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	89 f6       	brne	.-94     	; 0x1046 <lcd_set_4bit+0xb04>
    10a4:	2f c0       	rjmp	.+94     	; 0x1104 <lcd_set_4bit+0xbc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a6:	8e 01       	movw	r16, r28
    10a8:	05 59       	subi	r16, 0x95	; 149
    10aa:	1f 4f       	sbci	r17, 0xFF	; 255
    10ac:	ce 01       	movw	r24, r28
    10ae:	89 59       	subi	r24, 0x99	; 153
    10b0:	9f 4f       	sbci	r25, 0xFF	; 255
    10b2:	fc 01       	movw	r30, r24
    10b4:	60 81       	ld	r22, Z
    10b6:	71 81       	ldd	r23, Z+1	; 0x01
    10b8:	82 81       	ldd	r24, Z+2	; 0x02
    10ba:	93 81       	ldd	r25, Z+3	; 0x03
    10bc:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    10c0:	dc 01       	movw	r26, r24
    10c2:	cb 01       	movw	r24, r22
    10c4:	f8 01       	movw	r30, r16
    10c6:	91 83       	std	Z+1, r25	; 0x01
    10c8:	80 83       	st	Z, r24
    10ca:	ce 01       	movw	r24, r28
    10cc:	81 59       	subi	r24, 0x91	; 145
    10ce:	9f 4f       	sbci	r25, 0xFF	; 255
    10d0:	9e 01       	movw	r18, r28
    10d2:	25 59       	subi	r18, 0x95	; 149
    10d4:	3f 4f       	sbci	r19, 0xFF	; 255
    10d6:	f9 01       	movw	r30, r18
    10d8:	20 81       	ld	r18, Z
    10da:	31 81       	ldd	r19, Z+1	; 0x01
    10dc:	fc 01       	movw	r30, r24
    10de:	31 83       	std	Z+1, r19	; 0x01
    10e0:	20 83       	st	Z, r18
    10e2:	ce 01       	movw	r24, r28
    10e4:	81 59       	subi	r24, 0x91	; 145
    10e6:	9f 4f       	sbci	r25, 0xFF	; 255
    10e8:	fc 01       	movw	r30, r24
    10ea:	80 81       	ld	r24, Z
    10ec:	91 81       	ldd	r25, Z+1	; 0x01
    10ee:	8c 01       	movw	r16, r24
    10f0:	c8 01       	movw	r24, r16
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	f1 f7       	brne	.-4      	; 0x10f2 <lcd_set_4bit+0xbb0>
    10f6:	8c 01       	movw	r16, r24
    10f8:	ce 01       	movw	r24, r28
    10fa:	81 59       	subi	r24, 0x91	; 145
    10fc:	9f 4f       	sbci	r25, 0xFF	; 255
    10fe:	fc 01       	movw	r30, r24
    1100:	11 83       	std	Z+1, r17	; 0x01
    1102:	00 83       	st	Z, r16
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
    1104:	88 e2       	ldi	r24, 0x28	; 40
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	28 e2       	ldi	r18, 0x28	; 40
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	f9 01       	movw	r30, r18
    110e:	20 81       	ld	r18, Z
    1110:	2b 7f       	andi	r18, 0xFB	; 251
    1112:	fc 01       	movw	r30, r24
    1114:	20 83       	st	Z, r18

	
}
    1116:	c0 59       	subi	r28, 0x90	; 144
    1118:	df 4f       	sbci	r29, 0xFF	; 255
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	08 95       	ret

0000112e <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
    112e:	0f 93       	push	r16
    1130:	1f 93       	push	r17
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	2e 97       	sbiw	r28, 0x0e	; 14
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
	lcd_set_4bit();
    1146:	0e 94 a1 02 	call	0x542	; 0x542 <lcd_set_4bit>
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	a0 e8       	ldi	r26, 0x80	; 128
    1150:	bf e3       	ldi	r27, 0x3F	; 63
    1152:	89 83       	std	Y+1, r24	; 0x01
    1154:	9a 83       	std	Y+2, r25	; 0x02
    1156:	ab 83       	std	Y+3, r26	; 0x03
    1158:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    115a:	69 81       	ldd	r22, Y+1	; 0x01
    115c:	7a 81       	ldd	r23, Y+2	; 0x02
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	9c 81       	ldd	r25, Y+4	; 0x04
    1162:	26 e6       	ldi	r18, 0x66	; 102
    1164:	36 e6       	ldi	r19, 0x66	; 102
    1166:	46 e6       	ldi	r20, 0x66	; 102
    1168:	55 e4       	ldi	r21, 0x45	; 69
    116a:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	8d 83       	std	Y+5, r24	; 0x05
    1174:	9e 83       	std	Y+6, r25	; 0x06
    1176:	af 83       	std	Y+7, r26	; 0x07
    1178:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    117a:	11 e0       	ldi	r17, 0x01	; 1
    117c:	6d 81       	ldd	r22, Y+5	; 0x05
    117e:	7e 81       	ldd	r23, Y+6	; 0x06
    1180:	8f 81       	ldd	r24, Y+7	; 0x07
    1182:	98 85       	ldd	r25, Y+8	; 0x08
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	40 e8       	ldi	r20, 0x80	; 128
    118a:	5f e3       	ldi	r21, 0x3F	; 63
    118c:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    1190:	88 23       	and	r24, r24
    1192:	0c f0       	brlt	.+2      	; 0x1196 <lcd_init+0x68>
    1194:	10 e0       	ldi	r17, 0x00	; 0
    1196:	11 23       	and	r17, r17
    1198:	29 f0       	breq	.+10     	; 0x11a4 <lcd_init+0x76>
		__ticks = 1;
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	9a 87       	std	Y+10, r25	; 0x0a
    11a0:	89 87       	std	Y+9, r24	; 0x09
    11a2:	46 c0       	rjmp	.+140    	; 0x1230 <lcd_init+0x102>
	else if (__tmp > 65535)
    11a4:	11 e0       	ldi	r17, 0x01	; 1
    11a6:	6d 81       	ldd	r22, Y+5	; 0x05
    11a8:	7e 81       	ldd	r23, Y+6	; 0x06
    11aa:	8f 81       	ldd	r24, Y+7	; 0x07
    11ac:	98 85       	ldd	r25, Y+8	; 0x08
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	3f ef       	ldi	r19, 0xFF	; 255
    11b2:	4f e7       	ldi	r20, 0x7F	; 127
    11b4:	57 e4       	ldi	r21, 0x47	; 71
    11b6:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    11ba:	18 16       	cp	r1, r24
    11bc:	0c f0       	brlt	.+2      	; 0x11c0 <lcd_init+0x92>
    11be:	10 e0       	ldi	r17, 0x00	; 0
    11c0:	11 23       	and	r17, r17
    11c2:	61 f1       	breq	.+88     	; 0x121c <lcd_init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c4:	69 81       	ldd	r22, Y+1	; 0x01
    11c6:	7a 81       	ldd	r23, Y+2	; 0x02
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	40 e2       	ldi	r20, 0x20	; 32
    11d2:	51 e4       	ldi	r21, 0x41	; 65
    11d4:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    11d8:	dc 01       	movw	r26, r24
    11da:	cb 01       	movw	r24, r22
    11dc:	bc 01       	movw	r22, r24
    11de:	cd 01       	movw	r24, r26
    11e0:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	9a 87       	std	Y+10, r25	; 0x0a
    11ea:	89 87       	std	Y+9, r24	; 0x09
    11ec:	12 c0       	rjmp	.+36     	; 0x1212 <lcd_init+0xe4>
    11ee:	80 e7       	ldi	r24, 0x70	; 112
    11f0:	91 e0       	ldi	r25, 0x01	; 1
    11f2:	9c 87       	std	Y+12, r25	; 0x0c
    11f4:	8b 87       	std	Y+11, r24	; 0x0b
    11f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    11f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    11fa:	8c 01       	movw	r16, r24
    11fc:	c8 01       	movw	r24, r16
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	f1 f7       	brne	.-4      	; 0x11fe <lcd_init+0xd0>
    1202:	8c 01       	movw	r16, r24
    1204:	1c 87       	std	Y+12, r17	; 0x0c
    1206:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1208:	89 85       	ldd	r24, Y+9	; 0x09
    120a:	9a 85       	ldd	r25, Y+10	; 0x0a
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	9a 87       	std	Y+10, r25	; 0x0a
    1210:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1212:	89 85       	ldd	r24, Y+9	; 0x09
    1214:	9a 85       	ldd	r25, Y+10	; 0x0a
    1216:	00 97       	sbiw	r24, 0x00	; 0
    1218:	51 f7       	brne	.-44     	; 0x11ee <lcd_init+0xc0>
    121a:	17 c0       	rjmp	.+46     	; 0x124a <lcd_init+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    121c:	6d 81       	ldd	r22, Y+5	; 0x05
    121e:	7e 81       	ldd	r23, Y+6	; 0x06
    1220:	8f 81       	ldd	r24, Y+7	; 0x07
    1222:	98 85       	ldd	r25, Y+8	; 0x08
    1224:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	9a 87       	std	Y+10, r25	; 0x0a
    122e:	89 87       	std	Y+9, r24	; 0x09
    1230:	89 85       	ldd	r24, Y+9	; 0x09
    1232:	9a 85       	ldd	r25, Y+10	; 0x0a
    1234:	9e 87       	std	Y+14, r25	; 0x0e
    1236:	8d 87       	std	Y+13, r24	; 0x0d
    1238:	8d 85       	ldd	r24, Y+13	; 0x0d
    123a:	9e 85       	ldd	r25, Y+14	; 0x0e
    123c:	8c 01       	movw	r16, r24
    123e:	c8 01       	movw	r24, r16
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	f1 f7       	brne	.-4      	; 0x1240 <lcd_init+0x112>
    1244:	8c 01       	movw	r16, r24
    1246:	1e 87       	std	Y+14, r17	; 0x0e
    1248:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
    124a:	88 e2       	ldi	r24, 0x28	; 40
    124c:	0e 94 3f 09 	call	0x127e	; 0x127e <lcd_wr_command>
	lcd_wr_command(0x01);
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	0e 94 3f 09 	call	0x127e	; 0x127e <lcd_wr_command>
	lcd_wr_command(0x06);
    1256:	86 e0       	ldi	r24, 0x06	; 6
    1258:	0e 94 3f 09 	call	0x127e	; 0x127e <lcd_wr_command>
	lcd_wr_command(0x0E);
    125c:	8e e0       	ldi	r24, 0x0E	; 14
    125e:	0e 94 3f 09 	call	0x127e	; 0x127e <lcd_wr_command>
	lcd_wr_command(0x80);
    1262:	80 e8       	ldi	r24, 0x80	; 128
    1264:	0e 94 3f 09 	call	0x127e	; 0x127e <lcd_wr_command>
		
}
    1268:	2e 96       	adiw	r28, 0x0e	; 14
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	08 95       	ret

0000127e <lcd_wr_command>:

	 
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	6e 97       	sbiw	r28, 0x1e	; 30
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	f8 94       	cli
    1290:	de bf       	out	0x3e, r29	; 62
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	cd bf       	out	0x3d, r28	; 61
    1296:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
    1298:	8e 8d       	ldd	r24, Y+30	; 0x1e
    129a:	89 83       	std	Y+1, r24	; 0x01
	temp = temp & 0xF0;
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	80 7f       	andi	r24, 0xF0	; 240
    12a0:	89 83       	std	Y+1, r24	; 0x01
	lcd_port &= 0x0F;
    12a2:	88 e2       	ldi	r24, 0x28	; 40
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	28 e2       	ldi	r18, 0x28	; 40
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	f9 01       	movw	r30, r18
    12ac:	20 81       	ld	r18, Z
    12ae:	2f 70       	andi	r18, 0x0F	; 15
    12b0:	fc 01       	movw	r30, r24
    12b2:	20 83       	st	Z, r18
	lcd_port |= temp;
    12b4:	88 e2       	ldi	r24, 0x28	; 40
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	28 e2       	ldi	r18, 0x28	; 40
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	f9 01       	movw	r30, r18
    12be:	30 81       	ld	r19, Z
    12c0:	29 81       	ldd	r18, Y+1	; 0x01
    12c2:	23 2b       	or	r18, r19
    12c4:	fc 01       	movw	r30, r24
    12c6:	20 83       	st	Z, r18
	cbit(lcd_port,RS);
    12c8:	88 e2       	ldi	r24, 0x28	; 40
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	28 e2       	ldi	r18, 0x28	; 40
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	f9 01       	movw	r30, r18
    12d2:	20 81       	ld	r18, Z
    12d4:	2e 7f       	andi	r18, 0xFE	; 254
    12d6:	fc 01       	movw	r30, r24
    12d8:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    12da:	88 e2       	ldi	r24, 0x28	; 40
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	28 e2       	ldi	r18, 0x28	; 40
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	f9 01       	movw	r30, r18
    12e4:	20 81       	ld	r18, Z
    12e6:	2d 7f       	andi	r18, 0xFD	; 253
    12e8:	fc 01       	movw	r30, r24
    12ea:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    12ec:	88 e2       	ldi	r24, 0x28	; 40
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	28 e2       	ldi	r18, 0x28	; 40
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	f9 01       	movw	r30, r18
    12f6:	20 81       	ld	r18, Z
    12f8:	24 60       	ori	r18, 0x04	; 4
    12fa:	fc 01       	movw	r30, r24
    12fc:	20 83       	st	Z, r18
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	a0 ea       	ldi	r26, 0xA0	; 160
    1304:	b0 e4       	ldi	r27, 0x40	; 64
    1306:	8a 83       	std	Y+2, r24	; 0x02
    1308:	9b 83       	std	Y+3, r25	; 0x03
    130a:	ac 83       	std	Y+4, r26	; 0x04
    130c:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    130e:	6a 81       	ldd	r22, Y+2	; 0x02
    1310:	7b 81       	ldd	r23, Y+3	; 0x03
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	9d 81       	ldd	r25, Y+5	; 0x05
    1316:	26 e6       	ldi	r18, 0x66	; 102
    1318:	36 e6       	ldi	r19, 0x66	; 102
    131a:	46 e6       	ldi	r20, 0x66	; 102
    131c:	55 e4       	ldi	r21, 0x45	; 69
    131e:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	8e 83       	std	Y+6, r24	; 0x06
    1328:	9f 83       	std	Y+7, r25	; 0x07
    132a:	a8 87       	std	Y+8, r26	; 0x08
    132c:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    132e:	11 e0       	ldi	r17, 0x01	; 1
    1330:	6e 81       	ldd	r22, Y+6	; 0x06
    1332:	7f 81       	ldd	r23, Y+7	; 0x07
    1334:	88 85       	ldd	r24, Y+8	; 0x08
    1336:	99 85       	ldd	r25, Y+9	; 0x09
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	40 e8       	ldi	r20, 0x80	; 128
    133e:	5f e3       	ldi	r21, 0x3F	; 63
    1340:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    1344:	88 23       	and	r24, r24
    1346:	0c f0       	brlt	.+2      	; 0x134a <lcd_wr_command+0xcc>
    1348:	10 e0       	ldi	r17, 0x00	; 0
    134a:	11 23       	and	r17, r17
    134c:	29 f0       	breq	.+10     	; 0x1358 <lcd_wr_command+0xda>
		__ticks = 1;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	9b 87       	std	Y+11, r25	; 0x0b
    1354:	8a 87       	std	Y+10, r24	; 0x0a
    1356:	46 c0       	rjmp	.+140    	; 0x13e4 <lcd_wr_command+0x166>
	else if (__tmp > 65535)
    1358:	11 e0       	ldi	r17, 0x01	; 1
    135a:	6e 81       	ldd	r22, Y+6	; 0x06
    135c:	7f 81       	ldd	r23, Y+7	; 0x07
    135e:	88 85       	ldd	r24, Y+8	; 0x08
    1360:	99 85       	ldd	r25, Y+9	; 0x09
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	3f ef       	ldi	r19, 0xFF	; 255
    1366:	4f e7       	ldi	r20, 0x7F	; 127
    1368:	57 e4       	ldi	r21, 0x47	; 71
    136a:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    136e:	18 16       	cp	r1, r24
    1370:	0c f0       	brlt	.+2      	; 0x1374 <lcd_wr_command+0xf6>
    1372:	10 e0       	ldi	r17, 0x00	; 0
    1374:	11 23       	and	r17, r17
    1376:	61 f1       	breq	.+88     	; 0x13d0 <lcd_wr_command+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1378:	6a 81       	ldd	r22, Y+2	; 0x02
    137a:	7b 81       	ldd	r23, Y+3	; 0x03
    137c:	8c 81       	ldd	r24, Y+4	; 0x04
    137e:	9d 81       	ldd	r25, Y+5	; 0x05
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	40 e2       	ldi	r20, 0x20	; 32
    1386:	51 e4       	ldi	r21, 0x41	; 65
    1388:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	bc 01       	movw	r22, r24
    1392:	cd 01       	movw	r24, r26
    1394:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
    139c:	9b 87       	std	Y+11, r25	; 0x0b
    139e:	8a 87       	std	Y+10, r24	; 0x0a
    13a0:	12 c0       	rjmp	.+36     	; 0x13c6 <lcd_wr_command+0x148>
    13a2:	80 e7       	ldi	r24, 0x70	; 112
    13a4:	91 e0       	ldi	r25, 0x01	; 1
    13a6:	9d 87       	std	Y+13, r25	; 0x0d
    13a8:	8c 87       	std	Y+12, r24	; 0x0c
    13aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    13ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    13ae:	8c 01       	movw	r16, r24
    13b0:	c8 01       	movw	r24, r16
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	f1 f7       	brne	.-4      	; 0x13b2 <lcd_wr_command+0x134>
    13b6:	8c 01       	movw	r16, r24
    13b8:	1d 87       	std	Y+13, r17	; 0x0d
    13ba:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    13be:	9b 85       	ldd	r25, Y+11	; 0x0b
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	9b 87       	std	Y+11, r25	; 0x0b
    13c4:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    13c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	51 f7       	brne	.-44     	; 0x13a2 <lcd_wr_command+0x124>
    13ce:	17 c0       	rjmp	.+46     	; 0x13fe <lcd_wr_command+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13d0:	6e 81       	ldd	r22, Y+6	; 0x06
    13d2:	7f 81       	ldd	r23, Y+7	; 0x07
    13d4:	88 85       	ldd	r24, Y+8	; 0x08
    13d6:	99 85       	ldd	r25, Y+9	; 0x09
    13d8:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	9b 87       	std	Y+11, r25	; 0x0b
    13e2:	8a 87       	std	Y+10, r24	; 0x0a
    13e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    13e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    13e8:	9f 87       	std	Y+15, r25	; 0x0f
    13ea:	8e 87       	std	Y+14, r24	; 0x0e
    13ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    13ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    13f0:	8c 01       	movw	r16, r24
    13f2:	f8 01       	movw	r30, r16
    13f4:	31 97       	sbiw	r30, 0x01	; 1
    13f6:	f1 f7       	brne	.-4      	; 0x13f4 <lcd_wr_command+0x176>
    13f8:	8f 01       	movw	r16, r30
    13fa:	1f 87       	std	Y+15, r17	; 0x0f
    13fc:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(5);
	cbit(lcd_port,EN);
    13fe:	88 e2       	ldi	r24, 0x28	; 40
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	28 e2       	ldi	r18, 0x28	; 40
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	f9 01       	movw	r30, r18
    1408:	20 81       	ld	r18, Z
    140a:	2b 7f       	andi	r18, 0xFB	; 251
    140c:	fc 01       	movw	r30, r24
    140e:	20 83       	st	Z, r18
	
	cmd = cmd & 0x0F;
    1410:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1412:	8f 70       	andi	r24, 0x0F	; 15
    1414:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
    1416:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1418:	82 95       	swap	r24
    141a:	80 7f       	andi	r24, 0xF0	; 240
    141c:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    141e:	88 e2       	ldi	r24, 0x28	; 40
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	28 e2       	ldi	r18, 0x28	; 40
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	f9 01       	movw	r30, r18
    1428:	20 81       	ld	r18, Z
    142a:	2f 70       	andi	r18, 0x0F	; 15
    142c:	fc 01       	movw	r30, r24
    142e:	20 83       	st	Z, r18
	lcd_port |= cmd;
    1430:	88 e2       	ldi	r24, 0x28	; 40
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	28 e2       	ldi	r18, 0x28	; 40
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	f9 01       	movw	r30, r18
    143a:	30 81       	ld	r19, Z
    143c:	2e 8d       	ldd	r18, Y+30	; 0x1e
    143e:	23 2b       	or	r18, r19
    1440:	fc 01       	movw	r30, r24
    1442:	20 83       	st	Z, r18
	cbit(lcd_port,RS);
    1444:	88 e2       	ldi	r24, 0x28	; 40
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	28 e2       	ldi	r18, 0x28	; 40
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	f9 01       	movw	r30, r18
    144e:	20 81       	ld	r18, Z
    1450:	2e 7f       	andi	r18, 0xFE	; 254
    1452:	fc 01       	movw	r30, r24
    1454:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    1456:	88 e2       	ldi	r24, 0x28	; 40
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	28 e2       	ldi	r18, 0x28	; 40
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	f9 01       	movw	r30, r18
    1460:	20 81       	ld	r18, Z
    1462:	2d 7f       	andi	r18, 0xFD	; 253
    1464:	fc 01       	movw	r30, r24
    1466:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    1468:	88 e2       	ldi	r24, 0x28	; 40
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	28 e2       	ldi	r18, 0x28	; 40
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	f9 01       	movw	r30, r18
    1472:	20 81       	ld	r18, Z
    1474:	24 60       	ori	r18, 0x04	; 4
    1476:	fc 01       	movw	r30, r24
    1478:	20 83       	st	Z, r18
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	a0 ea       	ldi	r26, 0xA0	; 160
    1480:	b0 e4       	ldi	r27, 0x40	; 64
    1482:	88 8b       	std	Y+16, r24	; 0x10
    1484:	99 8b       	std	Y+17, r25	; 0x11
    1486:	aa 8b       	std	Y+18, r26	; 0x12
    1488:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    148a:	68 89       	ldd	r22, Y+16	; 0x10
    148c:	79 89       	ldd	r23, Y+17	; 0x11
    148e:	8a 89       	ldd	r24, Y+18	; 0x12
    1490:	9b 89       	ldd	r25, Y+19	; 0x13
    1492:	26 e6       	ldi	r18, 0x66	; 102
    1494:	36 e6       	ldi	r19, 0x66	; 102
    1496:	46 e6       	ldi	r20, 0x66	; 102
    1498:	55 e4       	ldi	r21, 0x45	; 69
    149a:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    149e:	dc 01       	movw	r26, r24
    14a0:	cb 01       	movw	r24, r22
    14a2:	8c 8b       	std	Y+20, r24	; 0x14
    14a4:	9d 8b       	std	Y+21, r25	; 0x15
    14a6:	ae 8b       	std	Y+22, r26	; 0x16
    14a8:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    14aa:	11 e0       	ldi	r17, 0x01	; 1
    14ac:	6c 89       	ldd	r22, Y+20	; 0x14
    14ae:	7d 89       	ldd	r23, Y+21	; 0x15
    14b0:	8e 89       	ldd	r24, Y+22	; 0x16
    14b2:	9f 89       	ldd	r25, Y+23	; 0x17
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e8       	ldi	r20, 0x80	; 128
    14ba:	5f e3       	ldi	r21, 0x3F	; 63
    14bc:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    14c0:	88 23       	and	r24, r24
    14c2:	0c f0       	brlt	.+2      	; 0x14c6 <lcd_wr_command+0x248>
    14c4:	10 e0       	ldi	r17, 0x00	; 0
    14c6:	11 23       	and	r17, r17
    14c8:	29 f0       	breq	.+10     	; 0x14d4 <lcd_wr_command+0x256>
		__ticks = 1;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	99 8f       	std	Y+25, r25	; 0x19
    14d0:	88 8f       	std	Y+24, r24	; 0x18
    14d2:	46 c0       	rjmp	.+140    	; 0x1560 <lcd_wr_command+0x2e2>
	else if (__tmp > 65535)
    14d4:	11 e0       	ldi	r17, 0x01	; 1
    14d6:	6c 89       	ldd	r22, Y+20	; 0x14
    14d8:	7d 89       	ldd	r23, Y+21	; 0x15
    14da:	8e 89       	ldd	r24, Y+22	; 0x16
    14dc:	9f 89       	ldd	r25, Y+23	; 0x17
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	3f ef       	ldi	r19, 0xFF	; 255
    14e2:	4f e7       	ldi	r20, 0x7F	; 127
    14e4:	57 e4       	ldi	r21, 0x47	; 71
    14e6:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    14ea:	18 16       	cp	r1, r24
    14ec:	0c f0       	brlt	.+2      	; 0x14f0 <lcd_wr_command+0x272>
    14ee:	10 e0       	ldi	r17, 0x00	; 0
    14f0:	11 23       	and	r17, r17
    14f2:	61 f1       	breq	.+88     	; 0x154c <lcd_wr_command+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f4:	68 89       	ldd	r22, Y+16	; 0x10
    14f6:	79 89       	ldd	r23, Y+17	; 0x11
    14f8:	8a 89       	ldd	r24, Y+18	; 0x12
    14fa:	9b 89       	ldd	r25, Y+19	; 0x13
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e2       	ldi	r20, 0x20	; 32
    1502:	51 e4       	ldi	r21, 0x41	; 65
    1504:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    1508:	dc 01       	movw	r26, r24
    150a:	cb 01       	movw	r24, r22
    150c:	bc 01       	movw	r22, r24
    150e:	cd 01       	movw	r24, r26
    1510:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	99 8f       	std	Y+25, r25	; 0x19
    151a:	88 8f       	std	Y+24, r24	; 0x18
    151c:	12 c0       	rjmp	.+36     	; 0x1542 <lcd_wr_command+0x2c4>
    151e:	80 e7       	ldi	r24, 0x70	; 112
    1520:	91 e0       	ldi	r25, 0x01	; 1
    1522:	9b 8f       	std	Y+27, r25	; 0x1b
    1524:	8a 8f       	std	Y+26, r24	; 0x1a
    1526:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1528:	9b 8d       	ldd	r25, Y+27	; 0x1b
    152a:	8c 01       	movw	r16, r24
    152c:	c8 01       	movw	r24, r16
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	f1 f7       	brne	.-4      	; 0x152e <lcd_wr_command+0x2b0>
    1532:	8c 01       	movw	r16, r24
    1534:	1b 8f       	std	Y+27, r17	; 0x1b
    1536:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1538:	88 8d       	ldd	r24, Y+24	; 0x18
    153a:	99 8d       	ldd	r25, Y+25	; 0x19
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	99 8f       	std	Y+25, r25	; 0x19
    1540:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1542:	88 8d       	ldd	r24, Y+24	; 0x18
    1544:	99 8d       	ldd	r25, Y+25	; 0x19
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	51 f7       	brne	.-44     	; 0x151e <lcd_wr_command+0x2a0>
    154a:	17 c0       	rjmp	.+46     	; 0x157a <lcd_wr_command+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    154c:	6c 89       	ldd	r22, Y+20	; 0x14
    154e:	7d 89       	ldd	r23, Y+21	; 0x15
    1550:	8e 89       	ldd	r24, Y+22	; 0x16
    1552:	9f 89       	ldd	r25, Y+23	; 0x17
    1554:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	99 8f       	std	Y+25, r25	; 0x19
    155e:	88 8f       	std	Y+24, r24	; 0x18
    1560:	88 8d       	ldd	r24, Y+24	; 0x18
    1562:	99 8d       	ldd	r25, Y+25	; 0x19
    1564:	9d 8f       	std	Y+29, r25	; 0x1d
    1566:	8c 8f       	std	Y+28, r24	; 0x1c
    1568:	8c 8d       	ldd	r24, Y+28	; 0x1c
    156a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    156c:	8c 01       	movw	r16, r24
    156e:	f8 01       	movw	r30, r16
    1570:	31 97       	sbiw	r30, 0x01	; 1
    1572:	f1 f7       	brne	.-4      	; 0x1570 <lcd_wr_command+0x2f2>
    1574:	8f 01       	movw	r16, r30
    1576:	1d 8f       	std	Y+29, r17	; 0x1d
    1578:	0c 8f       	std	Y+28, r16	; 0x1c
	_delay_ms(5);
	cbit(lcd_port,EN);
    157a:	88 e2       	ldi	r24, 0x28	; 40
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	28 e2       	ldi	r18, 0x28	; 40
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	f9 01       	movw	r30, r18
    1584:	20 81       	ld	r18, Z
    1586:	2b 7f       	andi	r18, 0xFB	; 251
    1588:	fc 01       	movw	r30, r24
    158a:	20 83       	st	Z, r18
}
    158c:	6e 96       	adiw	r28, 0x1e	; 30
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	1f 91       	pop	r17
    159e:	0f 91       	pop	r16
    15a0:	08 95       	ret

000015a2 <lcd_wr_char>:

//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
    15a2:	0f 93       	push	r16
    15a4:	1f 93       	push	r17
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	6e 97       	sbiw	r28, 0x1e	; 30
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	de bf       	out	0x3e, r29	; 62
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	cd bf       	out	0x3d, r28	; 61
    15ba:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    15bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15be:	89 83       	std	Y+1, r24	; 0x01
	temp = (temp & 0xF0);
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	80 7f       	andi	r24, 0xF0	; 240
    15c4:	89 83       	std	Y+1, r24	; 0x01
	lcd_port &= 0x0F;
    15c6:	88 e2       	ldi	r24, 0x28	; 40
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	28 e2       	ldi	r18, 0x28	; 40
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	f9 01       	movw	r30, r18
    15d0:	20 81       	ld	r18, Z
    15d2:	2f 70       	andi	r18, 0x0F	; 15
    15d4:	fc 01       	movw	r30, r24
    15d6:	20 83       	st	Z, r18
	lcd_port |= temp;
    15d8:	88 e2       	ldi	r24, 0x28	; 40
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	28 e2       	ldi	r18, 0x28	; 40
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	f9 01       	movw	r30, r18
    15e2:	30 81       	ld	r19, Z
    15e4:	29 81       	ldd	r18, Y+1	; 0x01
    15e6:	23 2b       	or	r18, r19
    15e8:	fc 01       	movw	r30, r24
    15ea:	20 83       	st	Z, r18
	sbit(lcd_port,RS);
    15ec:	88 e2       	ldi	r24, 0x28	; 40
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	28 e2       	ldi	r18, 0x28	; 40
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	f9 01       	movw	r30, r18
    15f6:	20 81       	ld	r18, Z
    15f8:	21 60       	ori	r18, 0x01	; 1
    15fa:	fc 01       	movw	r30, r24
    15fc:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    15fe:	88 e2       	ldi	r24, 0x28	; 40
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	28 e2       	ldi	r18, 0x28	; 40
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	f9 01       	movw	r30, r18
    1608:	20 81       	ld	r18, Z
    160a:	2d 7f       	andi	r18, 0xFD	; 253
    160c:	fc 01       	movw	r30, r24
    160e:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    1610:	88 e2       	ldi	r24, 0x28	; 40
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	28 e2       	ldi	r18, 0x28	; 40
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	f9 01       	movw	r30, r18
    161a:	20 81       	ld	r18, Z
    161c:	24 60       	ori	r18, 0x04	; 4
    161e:	fc 01       	movw	r30, r24
    1620:	20 83       	st	Z, r18
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	a0 ea       	ldi	r26, 0xA0	; 160
    1628:	b0 e4       	ldi	r27, 0x40	; 64
    162a:	8a 83       	std	Y+2, r24	; 0x02
    162c:	9b 83       	std	Y+3, r25	; 0x03
    162e:	ac 83       	std	Y+4, r26	; 0x04
    1630:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1632:	6a 81       	ldd	r22, Y+2	; 0x02
    1634:	7b 81       	ldd	r23, Y+3	; 0x03
    1636:	8c 81       	ldd	r24, Y+4	; 0x04
    1638:	9d 81       	ldd	r25, Y+5	; 0x05
    163a:	26 e6       	ldi	r18, 0x66	; 102
    163c:	36 e6       	ldi	r19, 0x66	; 102
    163e:	46 e6       	ldi	r20, 0x66	; 102
    1640:	55 e4       	ldi	r21, 0x45	; 69
    1642:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	8e 83       	std	Y+6, r24	; 0x06
    164c:	9f 83       	std	Y+7, r25	; 0x07
    164e:	a8 87       	std	Y+8, r26	; 0x08
    1650:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1652:	11 e0       	ldi	r17, 0x01	; 1
    1654:	6e 81       	ldd	r22, Y+6	; 0x06
    1656:	7f 81       	ldd	r23, Y+7	; 0x07
    1658:	88 85       	ldd	r24, Y+8	; 0x08
    165a:	99 85       	ldd	r25, Y+9	; 0x09
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 e8       	ldi	r20, 0x80	; 128
    1662:	5f e3       	ldi	r21, 0x3F	; 63
    1664:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    1668:	88 23       	and	r24, r24
    166a:	0c f0       	brlt	.+2      	; 0x166e <lcd_wr_char+0xcc>
    166c:	10 e0       	ldi	r17, 0x00	; 0
    166e:	11 23       	and	r17, r17
    1670:	29 f0       	breq	.+10     	; 0x167c <lcd_wr_char+0xda>
		__ticks = 1;
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	9b 87       	std	Y+11, r25	; 0x0b
    1678:	8a 87       	std	Y+10, r24	; 0x0a
    167a:	46 c0       	rjmp	.+140    	; 0x1708 <lcd_wr_char+0x166>
	else if (__tmp > 65535)
    167c:	11 e0       	ldi	r17, 0x01	; 1
    167e:	6e 81       	ldd	r22, Y+6	; 0x06
    1680:	7f 81       	ldd	r23, Y+7	; 0x07
    1682:	88 85       	ldd	r24, Y+8	; 0x08
    1684:	99 85       	ldd	r25, Y+9	; 0x09
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	3f ef       	ldi	r19, 0xFF	; 255
    168a:	4f e7       	ldi	r20, 0x7F	; 127
    168c:	57 e4       	ldi	r21, 0x47	; 71
    168e:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    1692:	18 16       	cp	r1, r24
    1694:	0c f0       	brlt	.+2      	; 0x1698 <lcd_wr_char+0xf6>
    1696:	10 e0       	ldi	r17, 0x00	; 0
    1698:	11 23       	and	r17, r17
    169a:	61 f1       	breq	.+88     	; 0x16f4 <lcd_wr_char+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    169c:	6a 81       	ldd	r22, Y+2	; 0x02
    169e:	7b 81       	ldd	r23, Y+3	; 0x03
    16a0:	8c 81       	ldd	r24, Y+4	; 0x04
    16a2:	9d 81       	ldd	r25, Y+5	; 0x05
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e2       	ldi	r20, 0x20	; 32
    16aa:	51 e4       	ldi	r21, 0x41	; 65
    16ac:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	bc 01       	movw	r22, r24
    16b6:	cd 01       	movw	r24, r26
    16b8:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	9b 87       	std	Y+11, r25	; 0x0b
    16c2:	8a 87       	std	Y+10, r24	; 0x0a
    16c4:	12 c0       	rjmp	.+36     	; 0x16ea <lcd_wr_char+0x148>
    16c6:	80 e7       	ldi	r24, 0x70	; 112
    16c8:	91 e0       	ldi	r25, 0x01	; 1
    16ca:	9d 87       	std	Y+13, r25	; 0x0d
    16cc:	8c 87       	std	Y+12, r24	; 0x0c
    16ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    16d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    16d2:	8c 01       	movw	r16, r24
    16d4:	c8 01       	movw	r24, r16
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	f1 f7       	brne	.-4      	; 0x16d6 <lcd_wr_char+0x134>
    16da:	8c 01       	movw	r16, r24
    16dc:	1d 87       	std	Y+13, r17	; 0x0d
    16de:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    16e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	9b 87       	std	Y+11, r25	; 0x0b
    16e8:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    16ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	51 f7       	brne	.-44     	; 0x16c6 <lcd_wr_char+0x124>
    16f2:	17 c0       	rjmp	.+46     	; 0x1722 <lcd_wr_char+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f4:	6e 81       	ldd	r22, Y+6	; 0x06
    16f6:	7f 81       	ldd	r23, Y+7	; 0x07
    16f8:	88 85       	ldd	r24, Y+8	; 0x08
    16fa:	99 85       	ldd	r25, Y+9	; 0x09
    16fc:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	9b 87       	std	Y+11, r25	; 0x0b
    1706:	8a 87       	std	Y+10, r24	; 0x0a
    1708:	8a 85       	ldd	r24, Y+10	; 0x0a
    170a:	9b 85       	ldd	r25, Y+11	; 0x0b
    170c:	9f 87       	std	Y+15, r25	; 0x0f
    170e:	8e 87       	std	Y+14, r24	; 0x0e
    1710:	8e 85       	ldd	r24, Y+14	; 0x0e
    1712:	9f 85       	ldd	r25, Y+15	; 0x0f
    1714:	8c 01       	movw	r16, r24
    1716:	f8 01       	movw	r30, r16
    1718:	31 97       	sbiw	r30, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <lcd_wr_char+0x176>
    171c:	8f 01       	movw	r16, r30
    171e:	1f 87       	std	Y+15, r17	; 0x0f
    1720:	0e 87       	std	Y+14, r16	; 0x0e
	_delay_ms(5);
	cbit(lcd_port,EN);
    1722:	88 e2       	ldi	r24, 0x28	; 40
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	28 e2       	ldi	r18, 0x28	; 40
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	f9 01       	movw	r30, r18
    172c:	20 81       	ld	r18, Z
    172e:	2b 7f       	andi	r18, 0xFB	; 251
    1730:	fc 01       	movw	r30, r24
    1732:	20 83       	st	Z, r18

	letter = letter & 0x0F;
    1734:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1736:	8f 70       	andi	r24, 0x0F	; 15
    1738:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    173a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    173c:	82 95       	swap	r24
    173e:	80 7f       	andi	r24, 0xF0	; 240
    1740:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1742:	88 e2       	ldi	r24, 0x28	; 40
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	28 e2       	ldi	r18, 0x28	; 40
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	f9 01       	movw	r30, r18
    174c:	20 81       	ld	r18, Z
    174e:	2f 70       	andi	r18, 0x0F	; 15
    1750:	fc 01       	movw	r30, r24
    1752:	20 83       	st	Z, r18
	lcd_port |= letter;
    1754:	88 e2       	ldi	r24, 0x28	; 40
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	28 e2       	ldi	r18, 0x28	; 40
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	f9 01       	movw	r30, r18
    175e:	30 81       	ld	r19, Z
    1760:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1762:	23 2b       	or	r18, r19
    1764:	fc 01       	movw	r30, r24
    1766:	20 83       	st	Z, r18
	sbit(lcd_port,RS);
    1768:	88 e2       	ldi	r24, 0x28	; 40
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	28 e2       	ldi	r18, 0x28	; 40
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	f9 01       	movw	r30, r18
    1772:	20 81       	ld	r18, Z
    1774:	21 60       	ori	r18, 0x01	; 1
    1776:	fc 01       	movw	r30, r24
    1778:	20 83       	st	Z, r18
	cbit(lcd_port,RW);
    177a:	88 e2       	ldi	r24, 0x28	; 40
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	28 e2       	ldi	r18, 0x28	; 40
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	f9 01       	movw	r30, r18
    1784:	20 81       	ld	r18, Z
    1786:	2d 7f       	andi	r18, 0xFD	; 253
    1788:	fc 01       	movw	r30, r24
    178a:	20 83       	st	Z, r18
	sbit(lcd_port,EN);
    178c:	88 e2       	ldi	r24, 0x28	; 40
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	28 e2       	ldi	r18, 0x28	; 40
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	f9 01       	movw	r30, r18
    1796:	20 81       	ld	r18, Z
    1798:	24 60       	ori	r18, 0x04	; 4
    179a:	fc 01       	movw	r30, r24
    179c:	20 83       	st	Z, r18
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	a0 ea       	ldi	r26, 0xA0	; 160
    17a4:	b0 e4       	ldi	r27, 0x40	; 64
    17a6:	88 8b       	std	Y+16, r24	; 0x10
    17a8:	99 8b       	std	Y+17, r25	; 0x11
    17aa:	aa 8b       	std	Y+18, r26	; 0x12
    17ac:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    17ae:	68 89       	ldd	r22, Y+16	; 0x10
    17b0:	79 89       	ldd	r23, Y+17	; 0x11
    17b2:	8a 89       	ldd	r24, Y+18	; 0x12
    17b4:	9b 89       	ldd	r25, Y+19	; 0x13
    17b6:	26 e6       	ldi	r18, 0x66	; 102
    17b8:	36 e6       	ldi	r19, 0x66	; 102
    17ba:	46 e6       	ldi	r20, 0x66	; 102
    17bc:	55 e4       	ldi	r21, 0x45	; 69
    17be:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	8c 8b       	std	Y+20, r24	; 0x14
    17c8:	9d 8b       	std	Y+21, r25	; 0x15
    17ca:	ae 8b       	std	Y+22, r26	; 0x16
    17cc:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    17ce:	11 e0       	ldi	r17, 0x01	; 1
    17d0:	6c 89       	ldd	r22, Y+20	; 0x14
    17d2:	7d 89       	ldd	r23, Y+21	; 0x15
    17d4:	8e 89       	ldd	r24, Y+22	; 0x16
    17d6:	9f 89       	ldd	r25, Y+23	; 0x17
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	40 e8       	ldi	r20, 0x80	; 128
    17de:	5f e3       	ldi	r21, 0x3F	; 63
    17e0:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    17e4:	88 23       	and	r24, r24
    17e6:	0c f0       	brlt	.+2      	; 0x17ea <lcd_wr_char+0x248>
    17e8:	10 e0       	ldi	r17, 0x00	; 0
    17ea:	11 23       	and	r17, r17
    17ec:	29 f0       	breq	.+10     	; 0x17f8 <lcd_wr_char+0x256>
		__ticks = 1;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	99 8f       	std	Y+25, r25	; 0x19
    17f4:	88 8f       	std	Y+24, r24	; 0x18
    17f6:	46 c0       	rjmp	.+140    	; 0x1884 <lcd_wr_char+0x2e2>
	else if (__tmp > 65535)
    17f8:	11 e0       	ldi	r17, 0x01	; 1
    17fa:	6c 89       	ldd	r22, Y+20	; 0x14
    17fc:	7d 89       	ldd	r23, Y+21	; 0x15
    17fe:	8e 89       	ldd	r24, Y+22	; 0x16
    1800:	9f 89       	ldd	r25, Y+23	; 0x17
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	3f ef       	ldi	r19, 0xFF	; 255
    1806:	4f e7       	ldi	r20, 0x7F	; 127
    1808:	57 e4       	ldi	r21, 0x47	; 71
    180a:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    180e:	18 16       	cp	r1, r24
    1810:	0c f0       	brlt	.+2      	; 0x1814 <lcd_wr_char+0x272>
    1812:	10 e0       	ldi	r17, 0x00	; 0
    1814:	11 23       	and	r17, r17
    1816:	61 f1       	breq	.+88     	; 0x1870 <lcd_wr_char+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1818:	68 89       	ldd	r22, Y+16	; 0x10
    181a:	79 89       	ldd	r23, Y+17	; 0x11
    181c:	8a 89       	ldd	r24, Y+18	; 0x12
    181e:	9b 89       	ldd	r25, Y+19	; 0x13
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e2       	ldi	r20, 0x20	; 32
    1826:	51 e4       	ldi	r21, 0x41	; 65
    1828:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	bc 01       	movw	r22, r24
    1832:	cd 01       	movw	r24, r26
    1834:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	99 8f       	std	Y+25, r25	; 0x19
    183e:	88 8f       	std	Y+24, r24	; 0x18
    1840:	12 c0       	rjmp	.+36     	; 0x1866 <lcd_wr_char+0x2c4>
    1842:	80 e7       	ldi	r24, 0x70	; 112
    1844:	91 e0       	ldi	r25, 0x01	; 1
    1846:	9b 8f       	std	Y+27, r25	; 0x1b
    1848:	8a 8f       	std	Y+26, r24	; 0x1a
    184a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    184c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    184e:	8c 01       	movw	r16, r24
    1850:	c8 01       	movw	r24, r16
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	f1 f7       	brne	.-4      	; 0x1852 <lcd_wr_char+0x2b0>
    1856:	8c 01       	movw	r16, r24
    1858:	1b 8f       	std	Y+27, r17	; 0x1b
    185a:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    185c:	88 8d       	ldd	r24, Y+24	; 0x18
    185e:	99 8d       	ldd	r25, Y+25	; 0x19
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	99 8f       	std	Y+25, r25	; 0x19
    1864:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1866:	88 8d       	ldd	r24, Y+24	; 0x18
    1868:	99 8d       	ldd	r25, Y+25	; 0x19
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	51 f7       	brne	.-44     	; 0x1842 <lcd_wr_char+0x2a0>
    186e:	17 c0       	rjmp	.+46     	; 0x189e <lcd_wr_char+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1870:	6c 89       	ldd	r22, Y+20	; 0x14
    1872:	7d 89       	ldd	r23, Y+21	; 0x15
    1874:	8e 89       	ldd	r24, Y+22	; 0x16
    1876:	9f 89       	ldd	r25, Y+23	; 0x17
    1878:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	99 8f       	std	Y+25, r25	; 0x19
    1882:	88 8f       	std	Y+24, r24	; 0x18
    1884:	88 8d       	ldd	r24, Y+24	; 0x18
    1886:	99 8d       	ldd	r25, Y+25	; 0x19
    1888:	9d 8f       	std	Y+29, r25	; 0x1d
    188a:	8c 8f       	std	Y+28, r24	; 0x1c
    188c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    188e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1890:	8c 01       	movw	r16, r24
    1892:	f8 01       	movw	r30, r16
    1894:	31 97       	sbiw	r30, 0x01	; 1
    1896:	f1 f7       	brne	.-4      	; 0x1894 <lcd_wr_char+0x2f2>
    1898:	8f 01       	movw	r16, r30
    189a:	1d 8f       	std	Y+29, r17	; 0x1d
    189c:	0c 8f       	std	Y+28, r16	; 0x1c
	_delay_ms(5);
	cbit(lcd_port,EN);
    189e:	88 e2       	ldi	r24, 0x28	; 40
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	28 e2       	ldi	r18, 0x28	; 40
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	f9 01       	movw	r30, r18
    18a8:	20 81       	ld	r18, Z
    18aa:	2b 7f       	andi	r18, 0xFB	; 251
    18ac:	fc 01       	movw	r30, r24
    18ae:	20 83       	st	Z, r18
}
    18b0:	6e 96       	adiw	r28, 0x1e	; 30
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	1f 91       	pop	r17
    18c2:	0f 91       	pop	r16
    18c4:	08 95       	ret

000018c6 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
    18c6:	cf 93       	push	r28
    18c8:	df 93       	push	r29
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    18ce:	80 e8       	ldi	r24, 0x80	; 128
    18d0:	0e 94 3f 09 	call	0x127e	; 0x127e <lcd_wr_command>
}
    18d4:	df 91       	pop	r29
    18d6:	cf 91       	pop	r28
    18d8:	08 95       	ret

000018da <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	0f 92       	push	r0
    18e0:	0f 92       	push	r0
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	9a 83       	std	Y+2, r25	; 0x02
    18e8:	89 83       	std	Y+1, r24	; 0x01
	while(*str != '\0')
    18ea:	0b c0       	rjmp	.+22     	; 0x1902 <lcd_string+0x28>
	{
		lcd_wr_char(*str);
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	9a 81       	ldd	r25, Y+2	; 0x02
    18f0:	fc 01       	movw	r30, r24
    18f2:	80 81       	ld	r24, Z
    18f4:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <lcd_wr_char>
		str++;
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	9a 81       	ldd	r25, Y+2	; 0x02
    18fc:	01 96       	adiw	r24, 0x01	; 1
    18fe:	9a 83       	std	Y+2, r25	; 0x02
    1900:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	9a 81       	ldd	r25, Y+2	; 0x02
    1906:	fc 01       	movw	r30, r24
    1908:	80 81       	ld	r24, Z
    190a:	88 23       	and	r24, r24
    190c:	79 f7       	brne	.-34     	; 0x18ec <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	08 95       	ret

00001918 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	0f 92       	push	r0
    191e:	0f 92       	push	r0
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	88 2f       	mov	r24, r24
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	82 30       	cpi	r24, 0x02	; 2
    1930:	91 05       	cpc	r25, r1
    1932:	99 f0       	breq	.+38     	; 0x195a <lcd_cursor+0x42>
    1934:	83 30       	cpi	r24, 0x03	; 3
    1936:	91 05       	cpc	r25, r1
    1938:	24 f4       	brge	.+8      	; 0x1942 <lcd_cursor+0x2a>
    193a:	81 30       	cpi	r24, 0x01	; 1
    193c:	91 05       	cpc	r25, r1
    193e:	41 f0       	breq	.+16     	; 0x1950 <lcd_cursor+0x38>
    1940:	1b c0       	rjmp	.+54     	; 0x1978 <lcd_cursor+0x60>
    1942:	83 30       	cpi	r24, 0x03	; 3
    1944:	91 05       	cpc	r25, r1
    1946:	71 f0       	breq	.+28     	; 0x1964 <lcd_cursor+0x4c>
    1948:	84 30       	cpi	r24, 0x04	; 4
    194a:	91 05       	cpc	r25, r1
    194c:	81 f0       	breq	.+32     	; 0x196e <lcd_cursor+0x56>
    194e:	14 c0       	rjmp	.+40     	; 0x1978 <lcd_cursor+0x60>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	81 58       	subi	r24, 0x81	; 129
    1954:	0e 94 3f 09 	call	0x127e	; 0x127e <lcd_wr_command>
    1958:	10 c0       	rjmp	.+32     	; 0x197a <lcd_cursor+0x62>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	81 54       	subi	r24, 0x41	; 65
    195e:	0e 94 3f 09 	call	0x127e	; 0x127e <lcd_wr_command>
    1962:	0b c0       	rjmp	.+22     	; 0x197a <lcd_cursor+0x62>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	8d 56       	subi	r24, 0x6D	; 109
    1968:	0e 94 3f 09 	call	0x127e	; 0x127e <lcd_wr_command>
    196c:	06 c0       	rjmp	.+12     	; 0x197a <lcd_cursor+0x62>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	8d 52       	subi	r24, 0x2D	; 45
    1972:	0e 94 3f 09 	call	0x127e	; 0x127e <lcd_wr_command>
    1976:	01 c0       	rjmp	.+2      	; 0x197a <lcd_cursor+0x62>
		default: break;
    1978:	00 00       	nop
	}
}
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	08 95       	ret

00001984 <lcd_print>:

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	27 97       	sbiw	r28, 0x07	; 7
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	f8 94       	cli
    1992:	de bf       	out	0x3e, r29	; 62
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	cd bf       	out	0x3d, r28	; 61
    1998:	8a 83       	std	Y+2, r24	; 0x02
    199a:	6b 83       	std	Y+3, r22	; 0x03
    199c:	5d 83       	std	Y+5, r21	; 0x05
    199e:	4c 83       	std	Y+4, r20	; 0x04
    19a0:	3f 83       	std	Y+7, r19	; 0x07
    19a2:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    19a4:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	88 23       	and	r24, r24
    19aa:	19 f0       	breq	.+6      	; 0x19b2 <lcd_print+0x2e>
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	88 23       	and	r24, r24
    19b0:	19 f4       	brne	.+6      	; 0x19b8 <lcd_print+0x34>
	{
		lcd_home();
    19b2:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <lcd_home>
    19b6:	04 c0       	rjmp	.+8      	; 0x19c0 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	6b 81       	ldd	r22, Y+3	; 0x03
    19bc:	0e 94 8c 0c 	call	0x1918	; 0x1918 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    19c0:	8e 81       	ldd	r24, Y+6	; 0x06
    19c2:	9f 81       	ldd	r25, Y+7	; 0x07
    19c4:	85 30       	cpi	r24, 0x05	; 5
    19c6:	91 05       	cpc	r25, r1
    19c8:	19 f0       	breq	.+6      	; 0x19d0 <lcd_print+0x4c>
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	81 30       	cpi	r24, 0x01	; 1
    19ce:	b1 f4       	brne	.+44     	; 0x19fc <lcd_print+0x78>
	{
		million=value/10000+48;
    19d0:	8c 81       	ldd	r24, Y+4	; 0x04
    19d2:	9d 81       	ldd	r25, Y+5	; 0x05
    19d4:	20 e1       	ldi	r18, 0x10	; 16
    19d6:	37 e2       	ldi	r19, 0x27	; 39
    19d8:	b9 01       	movw	r22, r18
    19da:	0e 94 e5 49 	call	0x93ca	; 0x93ca <__udivmodhi4>
    19de:	9b 01       	movw	r18, r22
    19e0:	c9 01       	movw	r24, r18
    19e2:	c0 96       	adiw	r24, 0x30	; 48
    19e4:	90 93 81 02 	sts	0x0281, r25
    19e8:	80 93 80 02 	sts	0x0280, r24
		lcd_wr_char(million);
    19ec:	80 91 80 02 	lds	r24, 0x0280
    19f0:	90 91 81 02 	lds	r25, 0x0281
    19f4:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <lcd_wr_char>
		flag=1;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    19fc:	8e 81       	ldd	r24, Y+6	; 0x06
    19fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1a00:	84 30       	cpi	r24, 0x04	; 4
    1a02:	91 05       	cpc	r25, r1
    1a04:	19 f0       	breq	.+6      	; 0x1a0c <lcd_print+0x88>
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	81 30       	cpi	r24, 0x01	; 1
    1a0a:	19 f5       	brne	.+70     	; 0x1a52 <lcd_print+0xce>
	{
		temp = value/1000;
    1a0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a10:	28 ee       	ldi	r18, 0xE8	; 232
    1a12:	33 e0       	ldi	r19, 0x03	; 3
    1a14:	b9 01       	movw	r22, r18
    1a16:	0e 94 e5 49 	call	0x93ca	; 0x93ca <__udivmodhi4>
    1a1a:	9b 01       	movw	r18, r22
    1a1c:	c9 01       	movw	r24, r18
    1a1e:	90 93 83 02 	sts	0x0283, r25
    1a22:	80 93 82 02 	sts	0x0282, r24
		thousand = temp%10 + 48;
    1a26:	80 91 82 02 	lds	r24, 0x0282
    1a2a:	90 91 83 02 	lds	r25, 0x0283
    1a2e:	2a e0       	ldi	r18, 0x0A	; 10
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	b9 01       	movw	r22, r18
    1a34:	0e 94 e5 49 	call	0x93ca	; 0x93ca <__udivmodhi4>
    1a38:	c0 96       	adiw	r24, 0x30	; 48
    1a3a:	90 93 9b 02 	sts	0x029B, r25
    1a3e:	80 93 9a 02 	sts	0x029A, r24
		lcd_wr_char(thousand);
    1a42:	80 91 9a 02 	lds	r24, 0x029A
    1a46:	90 91 9b 02 	lds	r25, 0x029B
    1a4a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <lcd_wr_char>
		flag=1;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1a52:	8e 81       	ldd	r24, Y+6	; 0x06
    1a54:	9f 81       	ldd	r25, Y+7	; 0x07
    1a56:	83 30       	cpi	r24, 0x03	; 3
    1a58:	91 05       	cpc	r25, r1
    1a5a:	19 f0       	breq	.+6      	; 0x1a62 <lcd_print+0xde>
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	19 f5       	brne	.+70     	; 0x1aa8 <lcd_print+0x124>
	{
		temp = value/100;
    1a62:	8c 81       	ldd	r24, Y+4	; 0x04
    1a64:	9d 81       	ldd	r25, Y+5	; 0x05
    1a66:	24 e6       	ldi	r18, 0x64	; 100
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	b9 01       	movw	r22, r18
    1a6c:	0e 94 e5 49 	call	0x93ca	; 0x93ca <__udivmodhi4>
    1a70:	9b 01       	movw	r18, r22
    1a72:	c9 01       	movw	r24, r18
    1a74:	90 93 83 02 	sts	0x0283, r25
    1a78:	80 93 82 02 	sts	0x0282, r24
		hundred = temp%10 + 48;
    1a7c:	80 91 82 02 	lds	r24, 0x0282
    1a80:	90 91 83 02 	lds	r25, 0x0283
    1a84:	2a e0       	ldi	r18, 0x0A	; 10
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	b9 01       	movw	r22, r18
    1a8a:	0e 94 e5 49 	call	0x93ca	; 0x93ca <__udivmodhi4>
    1a8e:	c0 96       	adiw	r24, 0x30	; 48
    1a90:	90 93 95 02 	sts	0x0295, r25
    1a94:	80 93 94 02 	sts	0x0294, r24
		lcd_wr_char(hundred);
    1a98:	80 91 94 02 	lds	r24, 0x0294
    1a9c:	90 91 95 02 	lds	r25, 0x0295
    1aa0:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <lcd_wr_char>
		flag=1;
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    1aa8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aaa:	9f 81       	ldd	r25, Y+7	; 0x07
    1aac:	82 30       	cpi	r24, 0x02	; 2
    1aae:	91 05       	cpc	r25, r1
    1ab0:	19 f0       	breq	.+6      	; 0x1ab8 <lcd_print+0x134>
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	81 30       	cpi	r24, 0x01	; 1
    1ab6:	19 f5       	brne	.+70     	; 0x1afe <lcd_print+0x17a>
	{
		temp = value/10;
    1ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aba:	9d 81       	ldd	r25, Y+5	; 0x05
    1abc:	2a e0       	ldi	r18, 0x0A	; 10
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	b9 01       	movw	r22, r18
    1ac2:	0e 94 e5 49 	call	0x93ca	; 0x93ca <__udivmodhi4>
    1ac6:	9b 01       	movw	r18, r22
    1ac8:	c9 01       	movw	r24, r18
    1aca:	90 93 83 02 	sts	0x0283, r25
    1ace:	80 93 82 02 	sts	0x0282, r24
		tens = temp%10 + 48;
    1ad2:	80 91 82 02 	lds	r24, 0x0282
    1ad6:	90 91 83 02 	lds	r25, 0x0283
    1ada:	2a e0       	ldi	r18, 0x0A	; 10
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	b9 01       	movw	r22, r18
    1ae0:	0e 94 e5 49 	call	0x93ca	; 0x93ca <__udivmodhi4>
    1ae4:	c0 96       	adiw	r24, 0x30	; 48
    1ae6:	90 93 90 02 	sts	0x0290, r25
    1aea:	80 93 8f 02 	sts	0x028F, r24
		lcd_wr_char(tens);
    1aee:	80 91 8f 02 	lds	r24, 0x028F
    1af2:	90 91 90 02 	lds	r25, 0x0290
    1af6:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <lcd_wr_char>
		flag=1;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    1afe:	8e 81       	ldd	r24, Y+6	; 0x06
    1b00:	9f 81       	ldd	r25, Y+7	; 0x07
    1b02:	81 30       	cpi	r24, 0x01	; 1
    1b04:	91 05       	cpc	r25, r1
    1b06:	19 f0       	breq	.+6      	; 0x1b0e <lcd_print+0x18a>
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	81 30       	cpi	r24, 0x01	; 1
    1b0c:	91 f4       	brne	.+36     	; 0x1b32 <lcd_print+0x1ae>
	{
		unit = value%10 + 48;
    1b0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b10:	9d 81       	ldd	r25, Y+5	; 0x05
    1b12:	2a e0       	ldi	r18, 0x0A	; 10
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	b9 01       	movw	r22, r18
    1b18:	0e 94 e5 49 	call	0x93ca	; 0x93ca <__udivmodhi4>
    1b1c:	c0 96       	adiw	r24, 0x30	; 48
    1b1e:	90 93 99 02 	sts	0x0299, r25
    1b22:	80 93 98 02 	sts	0x0298, r24
		lcd_wr_char(unit);
    1b26:	80 91 98 02 	lds	r24, 0x0298
    1b2a:	90 91 99 02 	lds	r25, 0x0299
    1b2e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <lcd_wr_char>
	}
	if(digits>5)
    1b32:	8e 81       	ldd	r24, Y+6	; 0x06
    1b34:	9f 81       	ldd	r25, Y+7	; 0x07
    1b36:	86 30       	cpi	r24, 0x06	; 6
    1b38:	91 05       	cpc	r25, r1
    1b3a:	1c f0       	brlt	.+6      	; 0x1b42 <lcd_print+0x1be>
	{
		lcd_wr_char('E');
    1b3c:	85 e4       	ldi	r24, 0x45	; 69
    1b3e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <lcd_wr_char>
	}
	
}
    1b42:	27 96       	adiw	r28, 0x07	; 7
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	08 95       	ret

00001b54 <buzzer_pin_config>:

/************************************************************************** PORT Initialization **********************************************************************/

//Function to initialize Buzzer
void buzzer_pin_config (void)
{
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
    1b5c:	87 e2       	ldi	r24, 0x27	; 39
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	27 e2       	ldi	r18, 0x27	; 39
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	f9 01       	movw	r30, r18
    1b66:	20 81       	ld	r18, Z
    1b68:	28 60       	ori	r18, 0x08	; 8
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	20 83       	st	Z, r18
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    1b6e:	88 e2       	ldi	r24, 0x28	; 40
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	28 e2       	ldi	r18, 0x28	; 40
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	f9 01       	movw	r30, r18
    1b78:	20 81       	ld	r18, Z
    1b7a:	27 7f       	andi	r18, 0xF7	; 247
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	20 83       	st	Z, r18
}
    1b80:	df 91       	pop	r29
    1b82:	cf 91       	pop	r28
    1b84:	08 95       	ret

00001b86 <left_encoder_pin_config>:

void left_encoder_pin_config (void)
{
    1b86:	cf 93       	push	r28
    1b88:	df 93       	push	r29
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    1b8e:	8d e2       	ldi	r24, 0x2D	; 45
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	2d e2       	ldi	r18, 0x2D	; 45
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	f9 01       	movw	r30, r18
    1b98:	20 81       	ld	r18, Z
    1b9a:	2f 7e       	andi	r18, 0xEF	; 239
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	20 83       	st	Z, r18
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    1ba0:	8e e2       	ldi	r24, 0x2E	; 46
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	2e e2       	ldi	r18, 0x2E	; 46
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	f9 01       	movw	r30, r18
    1baa:	20 81       	ld	r18, Z
    1bac:	20 61       	ori	r18, 0x10	; 16
    1bae:	fc 01       	movw	r30, r24
    1bb0:	20 83       	st	Z, r18
}
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	08 95       	ret

00001bb8 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 5 pin as input
    1bc0:	8d e2       	ldi	r24, 0x2D	; 45
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	2d e2       	ldi	r18, 0x2D	; 45
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	f9 01       	movw	r30, r18
    1bca:	20 81       	ld	r18, Z
    1bcc:	2f 7d       	andi	r18, 0xDF	; 223
    1bce:	fc 01       	movw	r30, r24
    1bd0:	20 83       	st	Z, r18
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    1bd2:	8e e2       	ldi	r24, 0x2E	; 46
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	2e e2       	ldi	r18, 0x2E	; 46
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	f9 01       	movw	r30, r18
    1bdc:	20 81       	ld	r18, Z
    1bde:	20 62       	ori	r18, 0x20	; 32
    1be0:	fc 01       	movw	r30, r24
    1be2:	20 83       	st	Z, r18
}
    1be4:	df 91       	pop	r29
    1be6:	cf 91       	pop	r28
    1be8:	08 95       	ret

00001bea <lcd_port_config>:

//Function to configure LCD port
void lcd_port_config (void)
{
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    1bf2:	87 e2       	ldi	r24, 0x27	; 39
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	27 e2       	ldi	r18, 0x27	; 39
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	f9 01       	movw	r30, r18
    1bfc:	20 81       	ld	r18, Z
    1bfe:	27 6f       	ori	r18, 0xF7	; 247
    1c00:	fc 01       	movw	r30, r24
    1c02:	20 83       	st	Z, r18
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    1c04:	88 e2       	ldi	r24, 0x28	; 40
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	28 e2       	ldi	r18, 0x28	; 40
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	f9 01       	movw	r30, r18
    1c0e:	20 81       	ld	r18, Z
    1c10:	20 78       	andi	r18, 0x80	; 128
    1c12:	fc 01       	movw	r30, r24
    1c14:	20 83       	st	Z, r18
}
    1c16:	df 91       	pop	r29
    1c18:	cf 91       	pop	r28
    1c1a:	08 95       	ret

00001c1c <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00; 
    1c24:	80 e3       	ldi	r24, 0x30	; 48
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	fc 01       	movw	r30, r24
    1c2a:	10 82       	st	Z, r1
 PORTF = 0x00;
    1c2c:	81 e3       	ldi	r24, 0x31	; 49
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	fc 01       	movw	r30, r24
    1c32:	10 82       	st	Z, r1
 DDRK = 0x00;
    1c34:	87 e0       	ldi	r24, 0x07	; 7
    1c36:	91 e0       	ldi	r25, 0x01	; 1
    1c38:	fc 01       	movw	r30, r24
    1c3a:	10 82       	st	Z, r1
 PORTK = 0x00;
    1c3c:	88 e0       	ldi	r24, 0x08	; 8
    1c3e:	91 e0       	ldi	r25, 0x01	; 1
    1c40:	fc 01       	movw	r30, r24
    1c42:	10 82       	st	Z, r1
}
    1c44:	df 91       	pop	r29
    1c46:	cf 91       	pop	r28
    1c48:	08 95       	ret

00001c4a <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
    1c4a:	cf 93       	push	r28
    1c4c:	df 93       	push	r29
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;
    1c52:	81 e2       	ldi	r24, 0x21	; 33
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	21 e2       	ldi	r18, 0x21	; 33
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	f9 01       	movw	r30, r18
    1c5c:	20 81       	ld	r18, Z
    1c5e:	2f 60       	ori	r18, 0x0F	; 15
    1c60:	fc 01       	movw	r30, r24
    1c62:	20 83       	st	Z, r18
 PORTA = PORTA & 0xF0;
    1c64:	82 e2       	ldi	r24, 0x22	; 34
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	22 e2       	ldi	r18, 0x22	; 34
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	f9 01       	movw	r30, r18
    1c6e:	20 81       	ld	r18, Z
    1c70:	20 7f       	andi	r18, 0xF0	; 240
    1c72:	fc 01       	movw	r30, r24
    1c74:	20 83       	st	Z, r18
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    1c76:	8a e0       	ldi	r24, 0x0A	; 10
    1c78:	91 e0       	ldi	r25, 0x01	; 1
    1c7a:	2a e0       	ldi	r18, 0x0A	; 10
    1c7c:	31 e0       	ldi	r19, 0x01	; 1
    1c7e:	f9 01       	movw	r30, r18
    1c80:	20 81       	ld	r18, Z
    1c82:	28 61       	ori	r18, 0x18	; 24
    1c84:	fc 01       	movw	r30, r24
    1c86:	20 83       	st	Z, r18
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    1c88:	8b e0       	ldi	r24, 0x0B	; 11
    1c8a:	91 e0       	ldi	r25, 0x01	; 1
    1c8c:	2b e0       	ldi	r18, 0x0B	; 11
    1c8e:	31 e0       	ldi	r19, 0x01	; 1
    1c90:	f9 01       	movw	r30, r18
    1c92:	20 81       	ld	r18, Z
    1c94:	28 61       	ori	r18, 0x18	; 24
    1c96:	fc 01       	movw	r30, r24
    1c98:	20 83       	st	Z, r18
}
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	08 95       	ret

00001ca0 <color_sensor_pin_config>:

void color_sensor_pin_config(void)
{
    1ca0:	cf 93       	push	r28
    1ca2:	df 93       	push	r29
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
	DDRD  = DDRD | 0xF7;   //set PD3 as input for color sensor output
    1ca8:	8a e2       	ldi	r24, 0x2A	; 42
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	2a e2       	ldi	r18, 0x2A	; 42
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	f9 01       	movw	r30, r18
    1cb2:	20 81       	ld	r18, Z
    1cb4:	27 6f       	ori	r18, 0xF7	; 247
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	20 83       	st	Z, r18
	PORTD = PORTD | 0x08;  //Enable internal pull-up for PD3 pin
    1cba:	8b e2       	ldi	r24, 0x2B	; 43
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	2b e2       	ldi	r18, 0x2B	; 43
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	f9 01       	movw	r30, r18
    1cc4:	20 81       	ld	r18, Z
    1cc6:	28 60       	ori	r18, 0x08	; 8
    1cc8:	fc 01       	movw	r30, r24
    1cca:	20 83       	st	Z, r18
}
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
    1cd0:	08 95       	ret

00001cd2 <servo1_pin_config>:

//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
	DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
    1cda:	84 e2       	ldi	r24, 0x24	; 36
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	24 e2       	ldi	r18, 0x24	; 36
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	f9 01       	movw	r30, r18
    1ce4:	20 81       	ld	r18, Z
    1ce6:	20 62       	ori	r18, 0x20	; 32
    1ce8:	fc 01       	movw	r30, r24
    1cea:	20 83       	st	Z, r18
	PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    1cec:	85 e2       	ldi	r24, 0x25	; 37
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	25 e2       	ldi	r18, 0x25	; 37
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	f9 01       	movw	r30, r18
    1cf6:	20 81       	ld	r18, Z
    1cf8:	20 62       	ori	r18, 0x20	; 32
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	20 83       	st	Z, r18
}
    1cfe:	df 91       	pop	r29
    1d00:	cf 91       	pop	r28
    1d02:	08 95       	ret

00001d04 <port_init>:

//Function to Initialize PORTS
void port_init()
{
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
	lcd_port_config();         //lcd pin configuration
    1d0c:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <lcd_port_config>
	buzzer_pin_config ();
    1d10:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <buzzer_pin_config>
	lcd_port_config();
    1d14:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <lcd_port_config>
	adc_pin_config();
    1d18:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <adc_pin_config>
	motion_pin_config();	
    1d1c:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <motion_pin_config>
	left_encoder_pin_config();   //left encoder pin config
    1d20:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <left_encoder_pin_config>
	right_encoder_pin_config();  //right encoder pin config
    1d24:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <right_encoder_pin_config>
    color_sensor_pin_config(); //color sensor pin configuration
    1d28:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <color_sensor_pin_config>
	servo1_pin_config();       //Configure PORTB 5 pin for servo motor 1 operation 
    1d2c:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <servo1_pin_config>
}
    1d30:	df 91       	pop	r29
    1d32:	cf 91       	pop	r28
    1d34:	08 95       	ret

00001d36 <uart0_init>:

/****************************************************** Other Initializations ***************************************************************************/
void uart0_init(void)
{
    1d36:	cf 93       	push	r28
    1d38:	df 93       	push	r29
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
	UCSR0B = 0x00; //disable while setting baud rate
    1d3e:	81 ec       	ldi	r24, 0xC1	; 193
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	fc 01       	movw	r30, r24
    1d44:	10 82       	st	Z, r1
	UCSR0A = 0x00;
    1d46:	80 ec       	ldi	r24, 0xC0	; 192
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	10 82       	st	Z, r1
	UCSR0C = 0x06;
    1d4e:	82 ec       	ldi	r24, 0xC2	; 194
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	26 e0       	ldi	r18, 0x06	; 6
    1d54:	fc 01       	movw	r30, r24
    1d56:	20 83       	st	Z, r18
	// UBRR0L = 0x47; //11059200 Hz
	UBRR0L = 0x5F; // 14745600 Hzset baud rate lo
    1d58:	84 ec       	ldi	r24, 0xC4	; 196
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	2f e5       	ldi	r18, 0x5F	; 95
    1d5e:	fc 01       	movw	r30, r24
    1d60:	20 83       	st	Z, r18
	UBRR0H = 0x00;       //set baud rate hi
    1d62:	85 ec       	ldi	r24, 0xC5	; 197
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	fc 01       	movw	r30, r24
    1d68:	10 82       	st	Z, r1
	UCSR0B = 0x18;
    1d6a:	81 ec       	ldi	r24, 0xC1	; 193
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	28 e1       	ldi	r18, 0x18	; 24
    1d70:	fc 01       	movw	r30, r24
    1d72:	20 83       	st	Z, r18
}
    1d74:	df 91       	pop	r29
    1d76:	cf 91       	pop	r28
    1d78:	08 95       	ret

00001d7a <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
    1d7a:	cf 93       	push	r28
    1d7c:	df 93       	push	r29
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
    1d82:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    1d84:	8a e6       	ldi	r24, 0x6A	; 106
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	2a e6       	ldi	r18, 0x6A	; 106
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	f9 01       	movw	r30, r18
    1d8e:	20 81       	ld	r18, Z
    1d90:	22 60       	ori	r18, 0x02	; 2
    1d92:	fc 01       	movw	r30, r24
    1d94:	20 83       	st	Z, r18
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    1d96:	8d e3       	ldi	r24, 0x3D	; 61
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	2d e3       	ldi	r18, 0x3D	; 61
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	f9 01       	movw	r30, r18
    1da0:	20 81       	ld	r18, Z
    1da2:	20 61       	ori	r18, 0x10	; 16
    1da4:	fc 01       	movw	r30, r24
    1da6:	20 83       	st	Z, r18
	sei();   // Enables the global interrupt
    1da8:	78 94       	sei
}
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	08 95       	ret

00001db0 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
    1db0:	cf 93       	push	r28
    1db2:	df 93       	push	r29
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
    1db8:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    1dba:	8a e6       	ldi	r24, 0x6A	; 106
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	2a e6       	ldi	r18, 0x6A	; 106
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	f9 01       	movw	r30, r18
    1dc4:	20 81       	ld	r18, Z
    1dc6:	28 60       	ori	r18, 0x08	; 8
    1dc8:	fc 01       	movw	r30, r24
    1dca:	20 83       	st	Z, r18
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    1dcc:	8d e3       	ldi	r24, 0x3D	; 61
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	2d e3       	ldi	r18, 0x3D	; 61
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	f9 01       	movw	r30, r18
    1dd6:	20 81       	ld	r18, Z
    1dd8:	20 62       	ori	r18, 0x20	; 32
    1dda:	fc 01       	movw	r30, r24
    1ddc:	20 83       	st	Z, r18
	sei();   // Enables the global interrupt
    1dde:	78 94       	sei
}
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	08 95       	ret

00001de6 <timer5_init>:
// Timer 5 initialized in PWM mode for velocity control
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
    1de6:	cf 93       	push	r28
    1de8:	df 93       	push	r29
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
    1dee:	81 e2       	ldi	r24, 0x21	; 33
    1df0:	91 e0       	ldi	r25, 0x01	; 1
    1df2:	fc 01       	movw	r30, r24
    1df4:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
    1df6:	85 e2       	ldi	r24, 0x25	; 37
    1df8:	91 e0       	ldi	r25, 0x01	; 1
    1dfa:	2f ef       	ldi	r18, 0xFF	; 255
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	20 83       	st	Z, r18
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
    1e00:	84 e2       	ldi	r24, 0x24	; 36
    1e02:	91 e0       	ldi	r25, 0x01	; 1
    1e04:	21 e0       	ldi	r18, 0x01	; 1
    1e06:	fc 01       	movw	r30, r24
    1e08:	20 83       	st	Z, r18
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
    1e0a:	89 e2       	ldi	r24, 0x29	; 41
    1e0c:	91 e0       	ldi	r25, 0x01	; 1
    1e0e:	fc 01       	movw	r30, r24
    1e10:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
    1e12:	88 e2       	ldi	r24, 0x28	; 40
    1e14:	91 e0       	ldi	r25, 0x01	; 1
    1e16:	2f ef       	ldi	r18, 0xFF	; 255
    1e18:	fc 01       	movw	r30, r24
    1e1a:	20 83       	st	Z, r18
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
    1e1c:	8b e2       	ldi	r24, 0x2B	; 43
    1e1e:	91 e0       	ldi	r25, 0x01	; 1
    1e20:	fc 01       	movw	r30, r24
    1e22:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
    1e24:	8a e2       	ldi	r24, 0x2A	; 42
    1e26:	91 e0       	ldi	r25, 0x01	; 1
    1e28:	2f ef       	ldi	r18, 0xFF	; 255
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	20 83       	st	Z, r18
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
    1e2e:	8d e2       	ldi	r24, 0x2D	; 45
    1e30:	91 e0       	ldi	r25, 0x01	; 1
    1e32:	fc 01       	movw	r30, r24
    1e34:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
    1e36:	8c e2       	ldi	r24, 0x2C	; 44
    1e38:	91 e0       	ldi	r25, 0x01	; 1
    1e3a:	2f ef       	ldi	r18, 0xFF	; 255
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	20 83       	st	Z, r18
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    1e40:	80 e2       	ldi	r24, 0x20	; 32
    1e42:	91 e0       	ldi	r25, 0x01	; 1
    1e44:	29 ea       	ldi	r18, 0xA9	; 169
    1e46:	fc 01       	movw	r30, r24
    1e48:	20 83       	st	Z, r18
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    1e4a:	81 e2       	ldi	r24, 0x21	; 33
    1e4c:	91 e0       	ldi	r25, 0x01	; 1
    1e4e:	2b e0       	ldi	r18, 0x0B	; 11
    1e50:	fc 01       	movw	r30, r24
    1e52:	20 83       	st	Z, r18
}
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	08 95       	ret

00001e5a <timer1_init>:

// Timer 1 initialized in PWM mode for servo motor control
void timer1_init(void)
{
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
    1e62:	81 e8       	ldi	r24, 0x81	; 129
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	fc 01       	movw	r30, r24
    1e68:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
    1e6a:	85 e8       	ldi	r24, 0x85	; 133
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	2c ef       	ldi	r18, 0xFC	; 252
    1e70:	fc 01       	movw	r30, r24
    1e72:	20 83       	st	Z, r18
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
    1e74:	84 e8       	ldi	r24, 0x84	; 132
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	21 e0       	ldi	r18, 0x01	; 1
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	20 83       	st	Z, r18
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
    1e7e:	89 e8       	ldi	r24, 0x89	; 137
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	23 e0       	ldi	r18, 0x03	; 3
    1e84:	fc 01       	movw	r30, r24
    1e86:	20 83       	st	Z, r18
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
    1e88:	88 e8       	ldi	r24, 0x88	; 136
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	2f ef       	ldi	r18, 0xFF	; 255
    1e8e:	fc 01       	movw	r30, r24
    1e90:	20 83       	st	Z, r18
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
    1e92:	8b e8       	ldi	r24, 0x8B	; 139
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	23 e0       	ldi	r18, 0x03	; 3
    1e98:	fc 01       	movw	r30, r24
    1e9a:	20 83       	st	Z, r18
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
    1e9c:	8a e8       	ldi	r24, 0x8A	; 138
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	2f ef       	ldi	r18, 0xFF	; 255
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	20 83       	st	Z, r18
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
    1ea6:	8d e8       	ldi	r24, 0x8D	; 141
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	23 e0       	ldi	r18, 0x03	; 3
    1eac:	fc 01       	movw	r30, r24
    1eae:	20 83       	st	Z, r18
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
    1eb0:	8c e8       	ldi	r24, 0x8C	; 140
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	2f ef       	ldi	r18, 0xFF	; 255
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	20 83       	st	Z, r18
 ICR1H  = 0x03;	
    1eba:	87 e8       	ldi	r24, 0x87	; 135
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	23 e0       	ldi	r18, 0x03	; 3
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	20 83       	st	Z, r18
 ICR1L  = 0xFF;
    1ec4:	86 e8       	ldi	r24, 0x86	; 134
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	2f ef       	ldi	r18, 0xFF	; 255
    1eca:	fc 01       	movw	r30, r24
    1ecc:	20 83       	st	Z, r18
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
    1ece:	80 e8       	ldi	r24, 0x80	; 128
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	2b ea       	ldi	r18, 0xAB	; 171
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	20 83       	st	Z, r18
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
    1ed8:	82 e8       	ldi	r24, 0x82	; 130
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	fc 01       	movw	r30, r24
    1ede:	10 82       	st	Z, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
    1ee0:	81 e8       	ldi	r24, 0x81	; 129
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	2c e0       	ldi	r18, 0x0C	; 12
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	20 83       	st	Z, r18
}
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	08 95       	ret

00001ef0 <adc_init>:

void adc_init()
{
    1ef0:	cf 93       	push	r28
    1ef2:	df 93       	push	r29
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
    1ef8:	8a e7       	ldi	r24, 0x7A	; 122
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	fc 01       	movw	r30, r24
    1efe:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    1f00:	8b e7       	ldi	r24, 0x7B	; 123
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	fc 01       	movw	r30, r24
    1f06:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    1f08:	8c e7       	ldi	r24, 0x7C	; 124
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	20 e2       	ldi	r18, 0x20	; 32
    1f0e:	fc 01       	movw	r30, r24
    1f10:	20 83       	st	Z, r18
	ACSR = 0x80;
    1f12:	80 e5       	ldi	r24, 0x50	; 80
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	20 e8       	ldi	r18, 0x80	; 128
    1f18:	fc 01       	movw	r30, r24
    1f1a:	20 83       	st	Z, r18
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    1f1c:	8a e7       	ldi	r24, 0x7A	; 122
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	26 e8       	ldi	r18, 0x86	; 134
    1f22:	fc 01       	movw	r30, r24
    1f24:	20 83       	st	Z, r18
}
    1f26:	df 91       	pop	r29
    1f28:	cf 91       	pop	r28
    1f2a:	08 95       	ret

00001f2c <color_sensor_pin_interrupt_init>:

void color_sensor_pin_interrupt_init(void) //Interrupt 3 enable
{
    1f2c:	cf 93       	push	r28
    1f2e:	df 93       	push	r29
    1f30:	cd b7       	in	r28, 0x3d	; 61
    1f32:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
    1f34:	f8 94       	cli
	EICRA = EICRA | 0x80; // INT3 is set to trigger with falling edge
    1f36:	89 e6       	ldi	r24, 0x69	; 105
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	29 e6       	ldi	r18, 0x69	; 105
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	f9 01       	movw	r30, r18
    1f40:	20 81       	ld	r18, Z
    1f42:	20 68       	ori	r18, 0x80	; 128
    1f44:	fc 01       	movw	r30, r24
    1f46:	20 83       	st	Z, r18
	EIMSK = EIMSK | 0x08; // Unmask Interrupt INT3 for color sensor
    1f48:	8d e3       	ldi	r24, 0x3D	; 61
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	2d e3       	ldi	r18, 0x3D	; 61
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	f9 01       	movw	r30, r18
    1f52:	20 81       	ld	r18, Z
    1f54:	28 60       	ori	r18, 0x08	; 8
    1f56:	fc 01       	movw	r30, r24
    1f58:	20 83       	st	Z, r18
	sei(); // Enables the global interrupt
    1f5a:	78 94       	sei
}
    1f5c:	df 91       	pop	r29
    1f5e:	cf 91       	pop	r28
    1f60:	08 95       	ret

00001f62 <init_devices>:

void init_devices (void)
{
    1f62:	cf 93       	push	r28
    1f64:	df 93       	push	r29
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
	cli();                  //Clears the global interrupts
    1f6a:	f8 94       	cli
	port_init();
    1f6c:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <port_init>
	uart0_init();
    1f70:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <uart0_init>
	left_position_encoder_interrupt_init();
    1f74:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
    1f78:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <right_position_encoder_interrupt_init>
	timer5_init();
    1f7c:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <timer5_init>
	timer1_init();
    1f80:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <timer1_init>
	adc_init();
    1f84:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <adc_init>
	color_sensor_pin_interrupt_init();
    1f88:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <color_sensor_pin_interrupt_init>
	sei();                  //Enables the global interrupts
    1f8c:	78 94       	sei
}
    1f8e:	df 91       	pop	r29
    1f90:	cf 91       	pop	r28
    1f92:	08 95       	ret

00001f94 <__vector_6>:

/******************************* ISR *****************************************/

//ISR for right position encoder
ISR(INT5_vect)
{
    1f94:	1f 92       	push	r1
    1f96:	0f 92       	push	r0
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	0f 92       	push	r0
    1f9c:	11 24       	eor	r1, r1
    1f9e:	8f 93       	push	r24
    1fa0:	9f 93       	push	r25
    1fa2:	af 93       	push	r26
    1fa4:	bf 93       	push	r27
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
	ShaftCountRight++;  //increment right shaft position count
    1fae:	80 91 45 02 	lds	r24, 0x0245
    1fb2:	90 91 46 02 	lds	r25, 0x0246
    1fb6:	a0 91 47 02 	lds	r26, 0x0247
    1fba:	b0 91 48 02 	lds	r27, 0x0248
    1fbe:	01 96       	adiw	r24, 0x01	; 1
    1fc0:	a1 1d       	adc	r26, r1
    1fc2:	b1 1d       	adc	r27, r1
    1fc4:	80 93 45 02 	sts	0x0245, r24
    1fc8:	90 93 46 02 	sts	0x0246, r25
    1fcc:	a0 93 47 02 	sts	0x0247, r26
    1fd0:	b0 93 48 02 	sts	0x0248, r27
	pathR++;
    1fd4:	80 91 36 02 	lds	r24, 0x0236
    1fd8:	8f 5f       	subi	r24, 0xFF	; 255
    1fda:	80 93 36 02 	sts	0x0236, r24
}
    1fde:	df 91       	pop	r29
    1fe0:	cf 91       	pop	r28
    1fe2:	bf 91       	pop	r27
    1fe4:	af 91       	pop	r26
    1fe6:	9f 91       	pop	r25
    1fe8:	8f 91       	pop	r24
    1fea:	0f 90       	pop	r0
    1fec:	0f be       	out	0x3f, r0	; 63
    1fee:	0f 90       	pop	r0
    1ff0:	1f 90       	pop	r1
    1ff2:	18 95       	reti

00001ff4 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
    1ff4:	1f 92       	push	r1
    1ff6:	0f 92       	push	r0
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	0f 92       	push	r0
    1ffc:	11 24       	eor	r1, r1
    1ffe:	8f 93       	push	r24
    2000:	9f 93       	push	r25
    2002:	af 93       	push	r26
    2004:	bf 93       	push	r27
    2006:	cf 93       	push	r28
    2008:	df 93       	push	r29
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
	ShaftCountLeft++;  //increment left shaft position count
    200e:	80 91 41 02 	lds	r24, 0x0241
    2012:	90 91 42 02 	lds	r25, 0x0242
    2016:	a0 91 43 02 	lds	r26, 0x0243
    201a:	b0 91 44 02 	lds	r27, 0x0244
    201e:	01 96       	adiw	r24, 0x01	; 1
    2020:	a1 1d       	adc	r26, r1
    2022:	b1 1d       	adc	r27, r1
    2024:	80 93 41 02 	sts	0x0241, r24
    2028:	90 93 42 02 	sts	0x0242, r25
    202c:	a0 93 43 02 	sts	0x0243, r26
    2030:	b0 93 44 02 	sts	0x0244, r27
	pathL++;
    2034:	80 91 35 02 	lds	r24, 0x0235
    2038:	8f 5f       	subi	r24, 0xFF	; 255
    203a:	80 93 35 02 	sts	0x0235, r24
}
    203e:	df 91       	pop	r29
    2040:	cf 91       	pop	r28
    2042:	bf 91       	pop	r27
    2044:	af 91       	pop	r26
    2046:	9f 91       	pop	r25
    2048:	8f 91       	pop	r24
    204a:	0f 90       	pop	r0
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	0f 90       	pop	r0
    2050:	1f 90       	pop	r1
    2052:	18 95       	reti

00002054 <__vector_4>:

//ISR for color sensor
ISR(INT3_vect)
{
    2054:	1f 92       	push	r1
    2056:	0f 92       	push	r0
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	0f 92       	push	r0
    205c:	11 24       	eor	r1, r1
    205e:	8f 93       	push	r24
    2060:	9f 93       	push	r25
    2062:	af 93       	push	r26
    2064:	bf 93       	push	r27
    2066:	cf 93       	push	r28
    2068:	df 93       	push	r29
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
	pulse++; //increment on receiving pulse from the color sensor
    206e:	80 91 4b 02 	lds	r24, 0x024B
    2072:	90 91 4c 02 	lds	r25, 0x024C
    2076:	a0 91 4d 02 	lds	r26, 0x024D
    207a:	b0 91 4e 02 	lds	r27, 0x024E
    207e:	01 96       	adiw	r24, 0x01	; 1
    2080:	a1 1d       	adc	r26, r1
    2082:	b1 1d       	adc	r27, r1
    2084:	80 93 4b 02 	sts	0x024B, r24
    2088:	90 93 4c 02 	sts	0x024C, r25
    208c:	a0 93 4d 02 	sts	0x024D, r26
    2090:	b0 93 4e 02 	sts	0x024E, r27
}
    2094:	df 91       	pop	r29
    2096:	cf 91       	pop	r28
    2098:	bf 91       	pop	r27
    209a:	af 91       	pop	r26
    209c:	9f 91       	pop	r25
    209e:	8f 91       	pop	r24
    20a0:	0f 90       	pop	r0
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	0f 90       	pop	r0
    20a6:	1f 90       	pop	r1
    20a8:	18 95       	reti

000020aa <buzzer_beep>:

/******************************* ********************************** Functions *********************************************************/
// Function to beep buzzer for short time.
void buzzer_beep (void) 
{
    20aa:	0f 93       	push	r16
    20ac:	1f 93       	push	r17
    20ae:	cf 93       	push	r28
    20b0:	df 93       	push	r29
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
    20b6:	2e 97       	sbiw	r28, 0x0e	; 14
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	de bf       	out	0x3e, r29	; 62
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	cd bf       	out	0x3d, r28	; 61
	PORTC =PORTC | 0x08;    //turns on the buzzer PC3=1
    20c2:	88 e2       	ldi	r24, 0x28	; 40
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	28 e2       	ldi	r18, 0x28	; 40
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	f9 01       	movw	r30, r18
    20cc:	20 81       	ld	r18, Z
    20ce:	28 60       	ori	r18, 0x08	; 8
    20d0:	fc 01       	movw	r30, r24
    20d2:	20 83       	st	Z, r18
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	a8 e4       	ldi	r26, 0x48	; 72
    20da:	b2 e4       	ldi	r27, 0x42	; 66
    20dc:	89 83       	std	Y+1, r24	; 0x01
    20de:	9a 83       	std	Y+2, r25	; 0x02
    20e0:	ab 83       	std	Y+3, r26	; 0x03
    20e2:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    20e4:	69 81       	ldd	r22, Y+1	; 0x01
    20e6:	7a 81       	ldd	r23, Y+2	; 0x02
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	9c 81       	ldd	r25, Y+4	; 0x04
    20ec:	26 e6       	ldi	r18, 0x66	; 102
    20ee:	36 e6       	ldi	r19, 0x66	; 102
    20f0:	46 e6       	ldi	r20, 0x66	; 102
    20f2:	55 e4       	ldi	r21, 0x45	; 69
    20f4:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	8d 83       	std	Y+5, r24	; 0x05
    20fe:	9e 83       	std	Y+6, r25	; 0x06
    2100:	af 83       	std	Y+7, r26	; 0x07
    2102:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2104:	11 e0       	ldi	r17, 0x01	; 1
    2106:	6d 81       	ldd	r22, Y+5	; 0x05
    2108:	7e 81       	ldd	r23, Y+6	; 0x06
    210a:	8f 81       	ldd	r24, Y+7	; 0x07
    210c:	98 85       	ldd	r25, Y+8	; 0x08
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e8       	ldi	r20, 0x80	; 128
    2114:	5f e3       	ldi	r21, 0x3F	; 63
    2116:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    211a:	88 23       	and	r24, r24
    211c:	0c f0       	brlt	.+2      	; 0x2120 <buzzer_beep+0x76>
    211e:	10 e0       	ldi	r17, 0x00	; 0
    2120:	11 23       	and	r17, r17
    2122:	29 f0       	breq	.+10     	; 0x212e <buzzer_beep+0x84>
		__ticks = 1;
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	9a 87       	std	Y+10, r25	; 0x0a
    212a:	89 87       	std	Y+9, r24	; 0x09
    212c:	46 c0       	rjmp	.+140    	; 0x21ba <buzzer_beep+0x110>
	else if (__tmp > 65535)
    212e:	11 e0       	ldi	r17, 0x01	; 1
    2130:	6d 81       	ldd	r22, Y+5	; 0x05
    2132:	7e 81       	ldd	r23, Y+6	; 0x06
    2134:	8f 81       	ldd	r24, Y+7	; 0x07
    2136:	98 85       	ldd	r25, Y+8	; 0x08
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	3f ef       	ldi	r19, 0xFF	; 255
    213c:	4f e7       	ldi	r20, 0x7F	; 127
    213e:	57 e4       	ldi	r21, 0x47	; 71
    2140:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    2144:	18 16       	cp	r1, r24
    2146:	0c f0       	brlt	.+2      	; 0x214a <buzzer_beep+0xa0>
    2148:	10 e0       	ldi	r17, 0x00	; 0
    214a:	11 23       	and	r17, r17
    214c:	61 f1       	breq	.+88     	; 0x21a6 <buzzer_beep+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214e:	69 81       	ldd	r22, Y+1	; 0x01
    2150:	7a 81       	ldd	r23, Y+2	; 0x02
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	9c 81       	ldd	r25, Y+4	; 0x04
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	40 e2       	ldi	r20, 0x20	; 32
    215c:	51 e4       	ldi	r21, 0x41	; 65
    215e:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	bc 01       	movw	r22, r24
    2168:	cd 01       	movw	r24, r26
    216a:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	9a 87       	std	Y+10, r25	; 0x0a
    2174:	89 87       	std	Y+9, r24	; 0x09
    2176:	12 c0       	rjmp	.+36     	; 0x219c <buzzer_beep+0xf2>
    2178:	80 e7       	ldi	r24, 0x70	; 112
    217a:	91 e0       	ldi	r25, 0x01	; 1
    217c:	9c 87       	std	Y+12, r25	; 0x0c
    217e:	8b 87       	std	Y+11, r24	; 0x0b
    2180:	8b 85       	ldd	r24, Y+11	; 0x0b
    2182:	9c 85       	ldd	r25, Y+12	; 0x0c
    2184:	8c 01       	movw	r16, r24
    2186:	c8 01       	movw	r24, r16
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	f1 f7       	brne	.-4      	; 0x2188 <buzzer_beep+0xde>
    218c:	8c 01       	movw	r16, r24
    218e:	1c 87       	std	Y+12, r17	; 0x0c
    2190:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2192:	89 85       	ldd	r24, Y+9	; 0x09
    2194:	9a 85       	ldd	r25, Y+10	; 0x0a
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	9a 87       	std	Y+10, r25	; 0x0a
    219a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219c:	89 85       	ldd	r24, Y+9	; 0x09
    219e:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	51 f7       	brne	.-44     	; 0x2178 <buzzer_beep+0xce>
    21a4:	17 c0       	rjmp	.+46     	; 0x21d4 <buzzer_beep+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a6:	6d 81       	ldd	r22, Y+5	; 0x05
    21a8:	7e 81       	ldd	r23, Y+6	; 0x06
    21aa:	8f 81       	ldd	r24, Y+7	; 0x07
    21ac:	98 85       	ldd	r25, Y+8	; 0x08
    21ae:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	9a 87       	std	Y+10, r25	; 0x0a
    21b8:	89 87       	std	Y+9, r24	; 0x09
    21ba:	89 85       	ldd	r24, Y+9	; 0x09
    21bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21be:	9e 87       	std	Y+14, r25	; 0x0e
    21c0:	8d 87       	std	Y+13, r24	; 0x0d
    21c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c6:	8c 01       	movw	r16, r24
    21c8:	f8 01       	movw	r30, r16
    21ca:	31 97       	sbiw	r30, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <buzzer_beep+0x120>
    21ce:	8f 01       	movw	r16, r30
    21d0:	1e 87       	std	Y+14, r17	; 0x0e
    21d2:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(50);
	PORTC =PORTC & 0xF7;    //turns off the buzzer PC3=0
    21d4:	88 e2       	ldi	r24, 0x28	; 40
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	28 e2       	ldi	r18, 0x28	; 40
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	f9 01       	movw	r30, r18
    21de:	20 81       	ld	r18, Z
    21e0:	27 7f       	andi	r18, 0xF7	; 247
    21e2:	fc 01       	movw	r30, r24
    21e4:	20 83       	st	Z, r18
}
    21e6:	2e 96       	adiw	r28, 0x0e	; 14
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	de bf       	out	0x3e, r29	; 62
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	cd bf       	out	0x3d, r28	; 61
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	1f 91       	pop	r17
    21f8:	0f 91       	pop	r16
    21fa:	08 95       	ret

000021fc <buzzer_beep_long>:

//Function to beep buzzer for 10s and mar the end of scanning.
void buzzer_beep_long(void)
{
    21fc:	0f 93       	push	r16
    21fe:	1f 93       	push	r17
    2200:	cf 93       	push	r28
    2202:	df 93       	push	r29
    2204:	0f 92       	push	r0
    2206:	0f 92       	push	r0
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
	PORTC =PORTC | 0x08;    //turns on the buzzer PC3=1
    220c:	88 e2       	ldi	r24, 0x28	; 40
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	28 e2       	ldi	r18, 0x28	; 40
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	f9 01       	movw	r30, r18
    2216:	20 81       	ld	r18, Z
    2218:	28 60       	ori	r18, 0x08	; 8
    221a:	fc 01       	movw	r30, r24
    221c:	20 83       	st	Z, r18
    221e:	8a e0       	ldi	r24, 0x0A	; 10
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	9a 83       	std	Y+2, r25	; 0x02
    2224:	89 83       	std	Y+1, r24	; 0x01
    2226:	89 81       	ldd	r24, Y+1	; 0x01
    2228:	9a 81       	ldd	r25, Y+2	; 0x02
    222a:	8c 01       	movw	r16, r24
    222c:	c8 01       	movw	r24, r16
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	f1 f7       	brne	.-4      	; 0x222e <__stack+0x2f>
    2232:	8c 01       	movw	r16, r24
    2234:	1a 83       	std	Y+2, r17	; 0x02
    2236:	09 83       	std	Y+1, r16	; 0x01
	_delay_loop_2(10);
}
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	1f 91       	pop	r17
    2242:	0f 91       	pop	r16
    2244:	08 95       	ret

00002246 <servo_1>:

//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
    2246:	0f 93       	push	r16
    2248:	1f 93       	push	r17
    224a:	cf 93       	push	r28
    224c:	df 93       	push	r29
    224e:	00 d0       	rcall	.+0      	; 0x2250 <servo_1+0xa>
    2250:	0f 92       	push	r0
    2252:	0f 92       	push	r0
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	8d 83       	std	Y+5, r24	; 0x05
	float PositionPanServo = 0;
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	dc 01       	movw	r26, r24
    2260:	89 83       	std	Y+1, r24	; 0x01
    2262:	9a 83       	std	Y+2, r25	; 0x02
    2264:	ab 83       	std	Y+3, r26	; 0x03
    2266:	bc 83       	std	Y+4, r27	; 0x04
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
    2268:	8d 81       	ldd	r24, Y+5	; 0x05
    226a:	88 2f       	mov	r24, r24
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	a0 e0       	ldi	r26, 0x00	; 0
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	bc 01       	movw	r22, r24
    2274:	cd 01       	movw	r24, r26
    2276:	0e 94 cc 48 	call	0x9198	; 0x9198 <__floatunsisf>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	bc 01       	movw	r22, r24
    2280:	cd 01       	movw	r24, r26
    2282:	2b e7       	ldi	r18, 0x7B	; 123
    2284:	34 e1       	ldi	r19, 0x14	; 20
    2286:	4e ee       	ldi	r20, 0xEE	; 238
    2288:	5f e3       	ldi	r21, 0x3F	; 63
    228a:	0e 94 38 48 	call	0x9070	; 0x9070 <__divsf3>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	bc 01       	movw	r22, r24
    2294:	cd 01       	movw	r24, r26
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	4c e0       	ldi	r20, 0x0C	; 12
    229c:	52 e4       	ldi	r21, 0x42	; 66
    229e:	0e 94 d0 47 	call	0x8fa0	; 0x8fa0 <__addsf3>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	89 83       	std	Y+1, r24	; 0x01
    22a8:	9a 83       	std	Y+2, r25	; 0x02
    22aa:	ab 83       	std	Y+3, r26	; 0x03
    22ac:	bc 83       	std	Y+4, r27	; 0x04
	OCR1AH = 0x00;
    22ae:	89 e8       	ldi	r24, 0x89	; 137
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	fc 01       	movw	r30, r24
    22b4:	10 82       	st	Z, r1
	OCR1AL = (unsigned char) PositionPanServo;
    22b6:	08 e8       	ldi	r16, 0x88	; 136
    22b8:	10 e0       	ldi	r17, 0x00	; 0
    22ba:	69 81       	ldd	r22, Y+1	; 0x01
    22bc:	7a 81       	ldd	r23, Y+2	; 0x02
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	9c 81       	ldd	r25, Y+4	; 0x04
    22c2:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	f8 01       	movw	r30, r16
    22cc:	80 83       	st	Z, r24
}
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	df 91       	pop	r29
    22da:	cf 91       	pop	r28
    22dc:	1f 91       	pop	r17
    22de:	0f 91       	pop	r16
    22e0:	08 95       	ret

000022e2 <servo_1_free>:

void servo_1_free (void) //makes servo 1 free rotating for saving power
{
    22e2:	cf 93       	push	r28
    22e4:	df 93       	push	r29
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
	OCR1AH = 0x03;
    22ea:	89 e8       	ldi	r24, 0x89	; 137
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	23 e0       	ldi	r18, 0x03	; 3
    22f0:	fc 01       	movw	r30, r24
    22f2:	20 83       	st	Z, r18
	OCR1AL = 0xFF; //Servo 1 off
    22f4:	88 e8       	ldi	r24, 0x88	; 136
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	2f ef       	ldi	r18, 0xFF	; 255
    22fa:	fc 01       	movw	r30, r24
    22fc:	20 83       	st	Z, r18
}
    22fe:	df 91       	pop	r29
    2300:	cf 91       	pop	r28
    2302:	08 95       	ret

00002304 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	0f 92       	push	r0
    230a:	0f 92       	push	r0
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(Ch>7)
    2312:	8a 81       	ldd	r24, Y+2	; 0x02
    2314:	88 30       	cpi	r24, 0x08	; 8
    2316:	28 f0       	brcs	.+10     	; 0x2322 <ADC_Conversion+0x1e>
	{
		ADCSRB = 0x08;
    2318:	8b e7       	ldi	r24, 0x7B	; 123
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	28 e0       	ldi	r18, 0x08	; 8
    231e:	fc 01       	movw	r30, r24
    2320:	20 83       	st	Z, r18
	}
	Ch = Ch & 0x07;  			
    2322:	8a 81       	ldd	r24, Y+2	; 0x02
    2324:	87 70       	andi	r24, 0x07	; 7
    2326:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20| Ch;	   		
    2328:	8c e7       	ldi	r24, 0x7C	; 124
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	2a 81       	ldd	r18, Y+2	; 0x02
    232e:	20 62       	ori	r18, 0x20	; 32
    2330:	fc 01       	movw	r30, r24
    2332:	20 83       	st	Z, r18
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    2334:	8a e7       	ldi	r24, 0x7A	; 122
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	2a e7       	ldi	r18, 0x7A	; 122
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	f9 01       	movw	r30, r18
    233e:	20 81       	ld	r18, Z
    2340:	20 64       	ori	r18, 0x40	; 64
    2342:	fc 01       	movw	r30, r24
    2344:	20 83       	st	Z, r18
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    2346:	00 00       	nop
    2348:	8a e7       	ldi	r24, 0x7A	; 122
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	fc 01       	movw	r30, r24
    234e:	80 81       	ld	r24, Z
    2350:	88 2f       	mov	r24, r24
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	80 71       	andi	r24, 0x10	; 16
    2356:	90 70       	andi	r25, 0x00	; 0
    2358:	00 97       	sbiw	r24, 0x00	; 0
    235a:	b1 f3       	breq	.-20     	; 0x2348 <ADC_Conversion+0x44>
	a=ADCH;
    235c:	89 e7       	ldi	r24, 0x79	; 121
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	fc 01       	movw	r30, r24
    2362:	80 81       	ld	r24, Z
    2364:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    2366:	8a e7       	ldi	r24, 0x7A	; 122
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	2a e7       	ldi	r18, 0x7A	; 122
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	f9 01       	movw	r30, r18
    2370:	20 81       	ld	r18, Z
    2372:	20 61       	ori	r18, 0x10	; 16
    2374:	fc 01       	movw	r30, r24
    2376:	20 83       	st	Z, r18
	ADCSRB = 0x00;
    2378:	8b e7       	ldi	r24, 0x7B	; 123
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	fc 01       	movw	r30, r24
    237e:	10 82       	st	Z, r1
	return a;
    2380:	89 81       	ldd	r24, Y+1	; 0x01
}
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	df 91       	pop	r29
    2388:	cf 91       	pop	r28
    238a:	08 95       	ret

0000238c <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
    238c:	cf 93       	push	r28
    238e:	df 93       	push	r29
    2390:	0f 92       	push	r0
    2392:	0f 92       	push	r0
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
    2398:	89 83       	std	Y+1, r24	; 0x01
    239a:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
    239c:	88 e2       	ldi	r24, 0x28	; 40
    239e:	91 e0       	ldi	r25, 0x01	; 1
    23a0:	29 81       	ldd	r18, Y+1	; 0x01
    23a2:	fc 01       	movw	r30, r24
    23a4:	20 83       	st	Z, r18
	OCR5BL = (unsigned char)right_motor;
    23a6:	8a e2       	ldi	r24, 0x2A	; 42
    23a8:	91 e0       	ldi	r25, 0x01	; 1
    23aa:	2a 81       	ldd	r18, Y+2	; 0x02
    23ac:	fc 01       	movw	r30, r24
    23ae:	20 83       	st	Z, r18
}
    23b0:	0f 90       	pop	r0
    23b2:	0f 90       	pop	r0
    23b4:	df 91       	pop	r29
    23b6:	cf 91       	pop	r28
    23b8:	08 95       	ret

000023ba <motion_set>:

//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
    23ba:	cf 93       	push	r28
    23bc:	df 93       	push	r29
    23be:	0f 92       	push	r0
    23c0:	0f 92       	push	r0
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
    23c6:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char PortARestore = 0;
    23c8:	19 82       	std	Y+1, r1	; 0x01

 Direction &= 0x0F; 		// removing upper nibbel for the protection
    23ca:	8a 81       	ldd	r24, Y+2	; 0x02
    23cc:	8f 70       	andi	r24, 0x0F	; 15
    23ce:	8a 83       	std	Y+2, r24	; 0x02
 PortARestore = PORTA; 		// reading the PORTA original status
    23d0:	82 e2       	ldi	r24, 0x22	; 34
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	fc 01       	movw	r30, r24
    23d6:	80 81       	ld	r24, Z
    23d8:	89 83       	std	Y+1, r24	; 0x01
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	80 7f       	andi	r24, 0xF0	; 240
    23de:	89 83       	std	Y+1, r24	; 0x01
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    23e0:	99 81       	ldd	r25, Y+1	; 0x01
    23e2:	8a 81       	ldd	r24, Y+2	; 0x02
    23e4:	89 2b       	or	r24, r25
    23e6:	89 83       	std	Y+1, r24	; 0x01
 PORTA = PortARestore; 		// executing the command
    23e8:	82 e2       	ldi	r24, 0x22	; 34
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	29 81       	ldd	r18, Y+1	; 0x01
    23ee:	fc 01       	movw	r30, r24
    23f0:	20 83       	st	Z, r18
}
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	df 91       	pop	r29
    23f8:	cf 91       	pop	r28
    23fa:	08 95       	ret

000023fc <forward>:

void forward (void)
{
    23fc:	cf 93       	push	r28
    23fe:	df 93       	push	r29
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
	motion_set (0x06);
    2404:	86 e0       	ldi	r24, 0x06	; 6
    2406:	0e 94 dd 11 	call	0x23ba	; 0x23ba <motion_set>
}
    240a:	df 91       	pop	r29
    240c:	cf 91       	pop	r28
    240e:	08 95       	ret

00002410 <left>:

void left (void) //Left wheel backward, Right wheel forward
{
    2410:	cf 93       	push	r28
    2412:	df 93       	push	r29
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x05);
    2418:	85 e0       	ldi	r24, 0x05	; 5
    241a:	0e 94 dd 11 	call	0x23ba	; 0x23ba <motion_set>
}
    241e:	df 91       	pop	r29
    2420:	cf 91       	pop	r28
    2422:	08 95       	ret

00002424 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
    2424:	cf 93       	push	r28
    2426:	df 93       	push	r29
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
	motion_set(0x0A);
    242c:	8a e0       	ldi	r24, 0x0A	; 10
    242e:	0e 94 dd 11 	call	0x23ba	; 0x23ba <motion_set>
}
    2432:	df 91       	pop	r29
    2434:	cf 91       	pop	r28
    2436:	08 95       	ret

00002438 <back>:

void back (void)
{
    2438:	cf 93       	push	r28
    243a:	df 93       	push	r29
    243c:	cd b7       	in	r28, 0x3d	; 61
    243e:	de b7       	in	r29, 0x3e	; 62
	motion_set (0x09);
    2440:	89 e0       	ldi	r24, 0x09	; 9
    2442:	0e 94 dd 11 	call	0x23ba	; 0x23ba <motion_set>
}
    2446:	df 91       	pop	r29
    2448:	cf 91       	pop	r28
    244a:	08 95       	ret

0000244c <stop_bot>:

void stop_bot(void)
{
    244c:	cf 93       	push	r28
    244e:	df 93       	push	r29
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
  motion_set (0x00);
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	0e 94 dd 11 	call	0x23ba	; 0x23ba <motion_set>
}
    245a:	df 91       	pop	r29
    245c:	cf 91       	pop	r28
    245e:	08 95       	ret

00002460 <angle_rotate>:

//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	2a 97       	sbiw	r28, 0x0a	; 10
    246a:	0f b6       	in	r0, 0x3f	; 63
    246c:	f8 94       	cli
    246e:	de bf       	out	0x3e, r29	; 62
    2470:	0f be       	out	0x3f, r0	; 63
    2472:	cd bf       	out	0x3d, r28	; 61
    2474:	9a 87       	std	Y+10, r25	; 0x0a
    2476:	89 87       	std	Y+9, r24	; 0x09
	float ReqdShaftCount = 0;
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	dc 01       	movw	r26, r24
    247e:	89 83       	std	Y+1, r24	; 0x01
    2480:	9a 83       	std	Y+2, r25	; 0x02
    2482:	ab 83       	std	Y+3, r26	; 0x03
    2484:	bc 83       	std	Y+4, r27	; 0x04
	unsigned long int ReqdShaftCountInt = 0;
    2486:	1d 82       	std	Y+5, r1	; 0x05
    2488:	1e 82       	std	Y+6, r1	; 0x06
    248a:	1f 82       	std	Y+7, r1	; 0x07
    248c:	18 86       	std	Y+8, r1	; 0x08

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    248e:	89 85       	ldd	r24, Y+9	; 0x09
    2490:	9a 85       	ldd	r25, Y+10	; 0x0a
    2492:	cc 01       	movw	r24, r24
    2494:	a0 e0       	ldi	r26, 0x00	; 0
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	bc 01       	movw	r22, r24
    249a:	cd 01       	movw	r24, r26
    249c:	0e 94 cc 48 	call	0x9198	; 0x9198 <__floatunsisf>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	bc 01       	movw	r22, r24
    24a6:	cd 01       	movw	r24, r26
    24a8:	28 e4       	ldi	r18, 0x48	; 72
    24aa:	31 ee       	ldi	r19, 0xE1	; 225
    24ac:	42 e8       	ldi	r20, 0x82	; 130
    24ae:	50 e4       	ldi	r21, 0x40	; 64
    24b0:	0e 94 38 48 	call	0x9070	; 0x9070 <__divsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	89 83       	std	Y+1, r24	; 0x01
    24ba:	9a 83       	std	Y+2, r25	; 0x02
    24bc:	ab 83       	std	Y+3, r26	; 0x03
    24be:	bc 83       	std	Y+4, r27	; 0x04
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    24c0:	69 81       	ldd	r22, Y+1	; 0x01
    24c2:	7a 81       	ldd	r23, Y+2	; 0x02
    24c4:	8b 81       	ldd	r24, Y+3	; 0x03
    24c6:	9c 81       	ldd	r25, Y+4	; 0x04
    24c8:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	cc 01       	movw	r24, r24
    24d2:	a0 e0       	ldi	r26, 0x00	; 0
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	8d 83       	std	Y+5, r24	; 0x05
    24d8:	9e 83       	std	Y+6, r25	; 0x06
    24da:	af 83       	std	Y+7, r26	; 0x07
    24dc:	b8 87       	std	Y+8, r27	; 0x08
	ShaftCountRight = 0;
    24de:	10 92 45 02 	sts	0x0245, r1
    24e2:	10 92 46 02 	sts	0x0246, r1
    24e6:	10 92 47 02 	sts	0x0247, r1
    24ea:	10 92 48 02 	sts	0x0248, r1
	ShaftCountLeft = 0;
    24ee:	10 92 41 02 	sts	0x0241, r1
    24f2:	10 92 42 02 	sts	0x0242, r1
    24f6:	10 92 43 02 	sts	0x0243, r1
    24fa:	10 92 44 02 	sts	0x0244, r1
    24fe:	01 c0       	rjmp	.+2      	; 0x2502 <angle_rotate+0xa2>

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) || (ShaftCountLeft >= ReqdShaftCountInt))
		break;
	}
    2500:	00 00       	nop
	ShaftCountRight = 0;
	ShaftCountLeft = 0;

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) || (ShaftCountLeft >= ReqdShaftCountInt))
    2502:	20 91 45 02 	lds	r18, 0x0245
    2506:	30 91 46 02 	lds	r19, 0x0246
    250a:	40 91 47 02 	lds	r20, 0x0247
    250e:	50 91 48 02 	lds	r21, 0x0248
    2512:	8d 81       	ldd	r24, Y+5	; 0x05
    2514:	9e 81       	ldd	r25, Y+6	; 0x06
    2516:	af 81       	ldd	r26, Y+7	; 0x07
    2518:	b8 85       	ldd	r27, Y+8	; 0x08
    251a:	28 17       	cp	r18, r24
    251c:	39 07       	cpc	r19, r25
    251e:	4a 07       	cpc	r20, r26
    2520:	5b 07       	cpc	r21, r27
    2522:	88 f4       	brcc	.+34     	; 0x2546 <angle_rotate+0xe6>
    2524:	20 91 41 02 	lds	r18, 0x0241
    2528:	30 91 42 02 	lds	r19, 0x0242
    252c:	40 91 43 02 	lds	r20, 0x0243
    2530:	50 91 44 02 	lds	r21, 0x0244
    2534:	8d 81       	ldd	r24, Y+5	; 0x05
    2536:	9e 81       	ldd	r25, Y+6	; 0x06
    2538:	af 81       	ldd	r26, Y+7	; 0x07
    253a:	b8 85       	ldd	r27, Y+8	; 0x08
    253c:	28 17       	cp	r18, r24
    253e:	39 07       	cpc	r19, r25
    2540:	4a 07       	cpc	r20, r26
    2542:	5b 07       	cpc	r21, r27
    2544:	e8 f2       	brcs	.-70     	; 0x2500 <angle_rotate+0xa0>
		break;
	}
	stop_bot(); //Stop robot
    2546:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
}
    254a:	2a 96       	adiw	r28, 0x0a	; 10
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	df 91       	pop	r29
    2558:	cf 91       	pop	r28
    255a:	08 95       	ret

0000255c <left_degrees>:

void left_degrees(unsigned int Degrees)
{
    255c:	cf 93       	push	r28
    255e:	df 93       	push	r29
    2560:	0f 92       	push	r0
    2562:	0f 92       	push	r0
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
    2568:	9a 83       	std	Y+2, r25	; 0x02
    256a:	89 83       	std	Y+1, r24	; 0x01
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
    256c:	0e 94 08 12 	call	0x2410	; 0x2410 <left>
	angle_rotate(Degrees);
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	9a 81       	ldd	r25, Y+2	; 0x02
    2574:	0e 94 30 12 	call	0x2460	; 0x2460 <angle_rotate>
}
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	df 91       	pop	r29
    257e:	cf 91       	pop	r28
    2580:	08 95       	ret

00002582 <right_degrees>:

void right_degrees(unsigned int Degrees)
{
    2582:	cf 93       	push	r28
    2584:	df 93       	push	r29
    2586:	0f 92       	push	r0
    2588:	0f 92       	push	r0
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	9a 83       	std	Y+2, r25	; 0x02
    2590:	89 83       	std	Y+1, r24	; 0x01
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
    2592:	0e 94 12 12 	call	0x2424	; 0x2424 <right>
	angle_rotate(Degrees);
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	9a 81       	ldd	r25, Y+2	; 0x02
    259a:	0e 94 30 12 	call	0x2460	; 0x2460 <angle_rotate>
}
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	df 91       	pop	r29
    25a4:	cf 91       	pop	r28
    25a6:	08 95       	ret

000025a8 <linear_distance_mm>:

//Function used for moving robot forward by specified length
void linear_distance_mm(unsigned int DistanceInMM)
{
    25a8:	cf 93       	push	r28
    25aa:	df 93       	push	r29
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
    25b0:	2a 97       	sbiw	r28, 0x0a	; 10
    25b2:	0f b6       	in	r0, 0x3f	; 63
    25b4:	f8 94       	cli
    25b6:	de bf       	out	0x3e, r29	; 62
    25b8:	0f be       	out	0x3f, r0	; 63
    25ba:	cd bf       	out	0x3d, r28	; 61
    25bc:	9a 87       	std	Y+10, r25	; 0x0a
    25be:	89 87       	std	Y+9, r24	; 0x09
	float ReqdShaftCount = 0;
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	dc 01       	movw	r26, r24
    25c6:	89 83       	std	Y+1, r24	; 0x01
    25c8:	9a 83       	std	Y+2, r25	; 0x02
    25ca:	ab 83       	std	Y+3, r26	; 0x03
    25cc:	bc 83       	std	Y+4, r27	; 0x04
	unsigned long int ReqdShaftCountInt = 0;
    25ce:	1d 82       	std	Y+5, r1	; 0x05
    25d0:	1e 82       	std	Y+6, r1	; 0x06
    25d2:	1f 82       	std	Y+7, r1	; 0x07
    25d4:	18 86       	std	Y+8, r1	; 0x08

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    25d6:	89 85       	ldd	r24, Y+9	; 0x09
    25d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25da:	cc 01       	movw	r24, r24
    25dc:	a0 e0       	ldi	r26, 0x00	; 0
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	bc 01       	movw	r22, r24
    25e2:	cd 01       	movw	r24, r26
    25e4:	0e 94 cc 48 	call	0x9198	; 0x9198 <__floatunsisf>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	bc 01       	movw	r22, r24
    25ee:	cd 01       	movw	r24, r26
    25f0:	25 ee       	ldi	r18, 0xE5	; 229
    25f2:	30 ed       	ldi	r19, 0xD0	; 208
    25f4:	4a ea       	ldi	r20, 0xAA	; 170
    25f6:	50 e4       	ldi	r21, 0x40	; 64
    25f8:	0e 94 38 48 	call	0x9070	; 0x9070 <__divsf3>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	89 83       	std	Y+1, r24	; 0x01
    2602:	9a 83       	std	Y+2, r25	; 0x02
    2604:	ab 83       	std	Y+3, r26	; 0x03
    2606:	bc 83       	std	Y+4, r27	; 0x04
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    2608:	69 81       	ldd	r22, Y+1	; 0x01
    260a:	7a 81       	ldd	r23, Y+2	; 0x02
    260c:	8b 81       	ldd	r24, Y+3	; 0x03
    260e:	9c 81       	ldd	r25, Y+4	; 0x04
    2610:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	8d 83       	std	Y+5, r24	; 0x05
    261a:	9e 83       	std	Y+6, r25	; 0x06
    261c:	af 83       	std	Y+7, r26	; 0x07
    261e:	b8 87       	std	Y+8, r27	; 0x08
	
	ShaftCountRight = 0;
    2620:	10 92 45 02 	sts	0x0245, r1
    2624:	10 92 46 02 	sts	0x0246, r1
    2628:	10 92 47 02 	sts	0x0247, r1
    262c:	10 92 48 02 	sts	0x0248, r1
	ShaftCountLeft = 0;
    2630:	10 92 41 02 	sts	0x0241, r1
    2634:	10 92 42 02 	sts	0x0242, r1
    2638:	10 92 43 02 	sts	0x0243, r1
    263c:	10 92 44 02 	sts	0x0244, r1
    2640:	01 c0       	rjmp	.+2      	; 0x2644 <linear_distance_mm+0x9c>
	{
		if((ShaftCountRight > ReqdShaftCountInt)||(ShaftCountLeft > ReqdShaftCountInt))
		{
			break;
		}
	}
    2642:	00 00       	nop
	
	ShaftCountRight = 0;
	ShaftCountLeft = 0;
	while(1)
	{
		if((ShaftCountRight > ReqdShaftCountInt)||(ShaftCountLeft > ReqdShaftCountInt))
    2644:	20 91 45 02 	lds	r18, 0x0245
    2648:	30 91 46 02 	lds	r19, 0x0246
    264c:	40 91 47 02 	lds	r20, 0x0247
    2650:	50 91 48 02 	lds	r21, 0x0248
    2654:	8d 81       	ldd	r24, Y+5	; 0x05
    2656:	9e 81       	ldd	r25, Y+6	; 0x06
    2658:	af 81       	ldd	r26, Y+7	; 0x07
    265a:	b8 85       	ldd	r27, Y+8	; 0x08
    265c:	82 17       	cp	r24, r18
    265e:	93 07       	cpc	r25, r19
    2660:	a4 07       	cpc	r26, r20
    2662:	b5 07       	cpc	r27, r21
    2664:	88 f0       	brcs	.+34     	; 0x2688 <linear_distance_mm+0xe0>
    2666:	20 91 41 02 	lds	r18, 0x0241
    266a:	30 91 42 02 	lds	r19, 0x0242
    266e:	40 91 43 02 	lds	r20, 0x0243
    2672:	50 91 44 02 	lds	r21, 0x0244
    2676:	8d 81       	ldd	r24, Y+5	; 0x05
    2678:	9e 81       	ldd	r25, Y+6	; 0x06
    267a:	af 81       	ldd	r26, Y+7	; 0x07
    267c:	b8 85       	ldd	r27, Y+8	; 0x08
    267e:	82 17       	cp	r24, r18
    2680:	93 07       	cpc	r25, r19
    2682:	a4 07       	cpc	r26, r20
    2684:	b5 07       	cpc	r27, r21
    2686:	e8 f6       	brcc	.-70     	; 0x2642 <linear_distance_mm+0x9a>
		{
			break;
		}
	}
	//stop(); //Stop robot
}
    2688:	2a 96       	adiw	r28, 0x0a	; 10
    268a:	0f b6       	in	r0, 0x3f	; 63
    268c:	f8 94       	cli
    268e:	de bf       	out	0x3e, r29	; 62
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	cd bf       	out	0x3d, r28	; 61
    2694:	df 91       	pop	r29
    2696:	cf 91       	pop	r28
    2698:	08 95       	ret

0000269a <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
    269a:	cf 93       	push	r28
    269c:	df 93       	push	r29
    269e:	0f 92       	push	r0
    26a0:	0f 92       	push	r0
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	9a 83       	std	Y+2, r25	; 0x02
    26a8:	89 83       	std	Y+1, r24	; 0x01
	forward();
    26aa:	0e 94 fe 11 	call	0x23fc	; 0x23fc <forward>
	linear_distance_mm(DistanceInMM);
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	9a 81       	ldd	r25, Y+2	; 0x02
    26b2:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <linear_distance_mm>
}
    26b6:	0f 90       	pop	r0
    26b8:	0f 90       	pop	r0
    26ba:	df 91       	pop	r29
    26bc:	cf 91       	pop	r28
    26be:	08 95       	ret

000026c0 <back_mm>:

void back_mm(unsigned int DistanceInMM)
{
    26c0:	cf 93       	push	r28
    26c2:	df 93       	push	r29
    26c4:	0f 92       	push	r0
    26c6:	0f 92       	push	r0
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
    26cc:	9a 83       	std	Y+2, r25	; 0x02
    26ce:	89 83       	std	Y+1, r24	; 0x01
	back();
    26d0:	0e 94 1c 12 	call	0x2438	; 0x2438 <back>
	linear_distance_mm(DistanceInMM);
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	9a 81       	ldd	r25, Y+2	; 0x02
    26d8:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <linear_distance_mm>
}
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	df 91       	pop	r29
    26e2:	cf 91       	pop	r28
    26e4:	08 95       	ret

000026e6 <filter_red>:

//Filter Selection
void filter_red(void)    //Used to select red filter
{
    26e6:	cf 93       	push	r28
    26e8:	df 93       	push	r29
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
	//Filter Select - red filter
	PORTD = PORTD & 0xBF; //set S2 low
    26ee:	8b e2       	ldi	r24, 0x2B	; 43
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	2b e2       	ldi	r18, 0x2B	; 43
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	f9 01       	movw	r30, r18
    26f8:	20 81       	ld	r18, Z
    26fa:	2f 7b       	andi	r18, 0xBF	; 191
    26fc:	fc 01       	movw	r30, r24
    26fe:	20 83       	st	Z, r18
	PORTD = PORTD & 0x7F; //set S3 low
    2700:	8b e2       	ldi	r24, 0x2B	; 43
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	2b e2       	ldi	r18, 0x2B	; 43
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	f9 01       	movw	r30, r18
    270a:	20 81       	ld	r18, Z
    270c:	2f 77       	andi	r18, 0x7F	; 127
    270e:	fc 01       	movw	r30, r24
    2710:	20 83       	st	Z, r18
}
    2712:	df 91       	pop	r29
    2714:	cf 91       	pop	r28
    2716:	08 95       	ret

00002718 <filter_green>:

void filter_green(void)	//Used to select green filter
{
    2718:	cf 93       	push	r28
    271a:	df 93       	push	r29
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
	//Filter Select - green filter
	PORTD = PORTD | 0x40; //set S2 High
    2720:	8b e2       	ldi	r24, 0x2B	; 43
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	2b e2       	ldi	r18, 0x2B	; 43
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	f9 01       	movw	r30, r18
    272a:	20 81       	ld	r18, Z
    272c:	20 64       	ori	r18, 0x40	; 64
    272e:	fc 01       	movw	r30, r24
    2730:	20 83       	st	Z, r18
	PORTD = PORTD | 0x80; //set S3 High
    2732:	8b e2       	ldi	r24, 0x2B	; 43
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	2b e2       	ldi	r18, 0x2B	; 43
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	f9 01       	movw	r30, r18
    273c:	20 81       	ld	r18, Z
    273e:	20 68       	ori	r18, 0x80	; 128
    2740:	fc 01       	movw	r30, r24
    2742:	20 83       	st	Z, r18
}
    2744:	df 91       	pop	r29
    2746:	cf 91       	pop	r28
    2748:	08 95       	ret

0000274a <filter_blue>:

void filter_blue(void)	//Used to select blue filter
{
    274a:	cf 93       	push	r28
    274c:	df 93       	push	r29
    274e:	cd b7       	in	r28, 0x3d	; 61
    2750:	de b7       	in	r29, 0x3e	; 62
	//Filter Select - blue filter
	PORTD = PORTD & 0xBF; //set S2 low
    2752:	8b e2       	ldi	r24, 0x2B	; 43
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	2b e2       	ldi	r18, 0x2B	; 43
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	f9 01       	movw	r30, r18
    275c:	20 81       	ld	r18, Z
    275e:	2f 7b       	andi	r18, 0xBF	; 191
    2760:	fc 01       	movw	r30, r24
    2762:	20 83       	st	Z, r18
	PORTD = PORTD | 0x80; //set S3 High
    2764:	8b e2       	ldi	r24, 0x2B	; 43
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	2b e2       	ldi	r18, 0x2B	; 43
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	f9 01       	movw	r30, r18
    276e:	20 81       	ld	r18, Z
    2770:	20 68       	ori	r18, 0x80	; 128
    2772:	fc 01       	movw	r30, r24
    2774:	20 83       	st	Z, r18
}
    2776:	df 91       	pop	r29
    2778:	cf 91       	pop	r28
    277a:	08 95       	ret

0000277c <filter_clear>:

void filter_clear(void)	//select no filter
{
    277c:	cf 93       	push	r28
    277e:	df 93       	push	r29
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
	//Filter Select - no filter
	PORTD = PORTD | 0x40; //set S2 High
    2784:	8b e2       	ldi	r24, 0x2B	; 43
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	2b e2       	ldi	r18, 0x2B	; 43
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	f9 01       	movw	r30, r18
    278e:	20 81       	ld	r18, Z
    2790:	20 64       	ori	r18, 0x40	; 64
    2792:	fc 01       	movw	r30, r24
    2794:	20 83       	st	Z, r18
	PORTD = PORTD & 0x7F; //set S3 Low
    2796:	8b e2       	ldi	r24, 0x2B	; 43
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	2b e2       	ldi	r18, 0x2B	; 43
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	f9 01       	movw	r30, r18
    27a0:	20 81       	ld	r18, Z
    27a2:	2f 77       	andi	r18, 0x7F	; 127
    27a4:	fc 01       	movw	r30, r24
    27a6:	20 83       	st	Z, r18
}
    27a8:	df 91       	pop	r29
    27aa:	cf 91       	pop	r28
    27ac:	08 95       	ret

000027ae <color_sensor_scaling>:

//Color Sensing Scaling - 20% 
void color_sensor_scaling()		
{
    27ae:	cf 93       	push	r28
    27b0:	df 93       	push	r29
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
	//PORTD = PORTD & 0xEF;
	PORTD = PORTD | 0x10; //set S0 high
    27b6:	8b e2       	ldi	r24, 0x2B	; 43
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	2b e2       	ldi	r18, 0x2B	; 43
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	f9 01       	movw	r30, r18
    27c0:	20 81       	ld	r18, Z
    27c2:	20 61       	ori	r18, 0x10	; 16
    27c4:	fc 01       	movw	r30, r24
    27c6:	20 83       	st	Z, r18
	//PORTD = PORTD & 0xDF; //set S1 low
	PORTD = PORTD | 0x20; //set S1 high
    27c8:	8b e2       	ldi	r24, 0x2B	; 43
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	2b e2       	ldi	r18, 0x2B	; 43
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	f9 01       	movw	r30, r18
    27d2:	20 81       	ld	r18, Z
    27d4:	20 62       	ori	r18, 0x20	; 32
    27d6:	fc 01       	movw	r30, r24
    27d8:	20 83       	st	Z, r18
}
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	08 95       	ret

000027e0 <red_read>:

void red_read(void) // function to select red filter 
{
    27e0:	0f 93       	push	r16
    27e2:	1f 93       	push	r17
    27e4:	cf 93       	push	r28
    27e6:	df 93       	push	r29
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	2e 97       	sbiw	r28, 0x0e	; 14
    27ee:	0f b6       	in	r0, 0x3f	; 63
    27f0:	f8 94       	cli
    27f2:	de bf       	out	0x3e, r29	; 62
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	cd bf       	out	0x3d, r28	; 61
	filter_red(); //select red filter
    27f8:	0e 94 73 13 	call	0x26e6	; 0x26e6 <filter_red>
	pulse=0;
    27fc:	10 92 4b 02 	sts	0x024B, r1
    2800:	10 92 4c 02 	sts	0x024C, r1
    2804:	10 92 4d 02 	sts	0x024D, r1
    2808:	10 92 4e 02 	sts	0x024E, r1
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	a8 ec       	ldi	r26, 0xC8	; 200
    2812:	b2 e4       	ldi	r27, 0x42	; 66
    2814:	89 83       	std	Y+1, r24	; 0x01
    2816:	9a 83       	std	Y+2, r25	; 0x02
    2818:	ab 83       	std	Y+3, r26	; 0x03
    281a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    281c:	69 81       	ldd	r22, Y+1	; 0x01
    281e:	7a 81       	ldd	r23, Y+2	; 0x02
    2820:	8b 81       	ldd	r24, Y+3	; 0x03
    2822:	9c 81       	ldd	r25, Y+4	; 0x04
    2824:	26 e6       	ldi	r18, 0x66	; 102
    2826:	36 e6       	ldi	r19, 0x66	; 102
    2828:	46 e6       	ldi	r20, 0x66	; 102
    282a:	55 e4       	ldi	r21, 0x45	; 69
    282c:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	8d 83       	std	Y+5, r24	; 0x05
    2836:	9e 83       	std	Y+6, r25	; 0x06
    2838:	af 83       	std	Y+7, r26	; 0x07
    283a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    283c:	11 e0       	ldi	r17, 0x01	; 1
    283e:	6d 81       	ldd	r22, Y+5	; 0x05
    2840:	7e 81       	ldd	r23, Y+6	; 0x06
    2842:	8f 81       	ldd	r24, Y+7	; 0x07
    2844:	98 85       	ldd	r25, Y+8	; 0x08
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	40 e8       	ldi	r20, 0x80	; 128
    284c:	5f e3       	ldi	r21, 0x3F	; 63
    284e:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    2852:	88 23       	and	r24, r24
    2854:	0c f0       	brlt	.+2      	; 0x2858 <red_read+0x78>
    2856:	10 e0       	ldi	r17, 0x00	; 0
    2858:	11 23       	and	r17, r17
    285a:	29 f0       	breq	.+10     	; 0x2866 <red_read+0x86>
		__ticks = 1;
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	9a 87       	std	Y+10, r25	; 0x0a
    2862:	89 87       	std	Y+9, r24	; 0x09
    2864:	46 c0       	rjmp	.+140    	; 0x28f2 <red_read+0x112>
	else if (__tmp > 65535)
    2866:	11 e0       	ldi	r17, 0x01	; 1
    2868:	6d 81       	ldd	r22, Y+5	; 0x05
    286a:	7e 81       	ldd	r23, Y+6	; 0x06
    286c:	8f 81       	ldd	r24, Y+7	; 0x07
    286e:	98 85       	ldd	r25, Y+8	; 0x08
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	3f ef       	ldi	r19, 0xFF	; 255
    2874:	4f e7       	ldi	r20, 0x7F	; 127
    2876:	57 e4       	ldi	r21, 0x47	; 71
    2878:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    287c:	18 16       	cp	r1, r24
    287e:	0c f0       	brlt	.+2      	; 0x2882 <red_read+0xa2>
    2880:	10 e0       	ldi	r17, 0x00	; 0
    2882:	11 23       	and	r17, r17
    2884:	61 f1       	breq	.+88     	; 0x28de <red_read+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2886:	69 81       	ldd	r22, Y+1	; 0x01
    2888:	7a 81       	ldd	r23, Y+2	; 0x02
    288a:	8b 81       	ldd	r24, Y+3	; 0x03
    288c:	9c 81       	ldd	r25, Y+4	; 0x04
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e2       	ldi	r20, 0x20	; 32
    2894:	51 e4       	ldi	r21, 0x41	; 65
    2896:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	bc 01       	movw	r22, r24
    28a0:	cd 01       	movw	r24, r26
    28a2:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	9a 87       	std	Y+10, r25	; 0x0a
    28ac:	89 87       	std	Y+9, r24	; 0x09
    28ae:	12 c0       	rjmp	.+36     	; 0x28d4 <red_read+0xf4>
    28b0:	80 e7       	ldi	r24, 0x70	; 112
    28b2:	91 e0       	ldi	r25, 0x01	; 1
    28b4:	9c 87       	std	Y+12, r25	; 0x0c
    28b6:	8b 87       	std	Y+11, r24	; 0x0b
    28b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    28ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    28bc:	8c 01       	movw	r16, r24
    28be:	c8 01       	movw	r24, r16
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	f1 f7       	brne	.-4      	; 0x28c0 <red_read+0xe0>
    28c4:	8c 01       	movw	r16, r24
    28c6:	1c 87       	std	Y+12, r17	; 0x0c
    28c8:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ca:	89 85       	ldd	r24, Y+9	; 0x09
    28cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	9a 87       	std	Y+10, r25	; 0x0a
    28d2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d4:	89 85       	ldd	r24, Y+9	; 0x09
    28d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d8:	00 97       	sbiw	r24, 0x00	; 0
    28da:	51 f7       	brne	.-44     	; 0x28b0 <red_read+0xd0>
    28dc:	17 c0       	rjmp	.+46     	; 0x290c <red_read+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28de:	6d 81       	ldd	r22, Y+5	; 0x05
    28e0:	7e 81       	ldd	r23, Y+6	; 0x06
    28e2:	8f 81       	ldd	r24, Y+7	; 0x07
    28e4:	98 85       	ldd	r25, Y+8	; 0x08
    28e6:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	9a 87       	std	Y+10, r25	; 0x0a
    28f0:	89 87       	std	Y+9, r24	; 0x09
    28f2:	89 85       	ldd	r24, Y+9	; 0x09
    28f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f6:	9e 87       	std	Y+14, r25	; 0x0e
    28f8:	8d 87       	std	Y+13, r24	; 0x0d
    28fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    28fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    28fe:	8c 01       	movw	r16, r24
    2900:	c8 01       	movw	r24, r16
    2902:	01 97       	sbiw	r24, 0x01	; 1
    2904:	f1 f7       	brne	.-4      	; 0x2902 <red_read+0x122>
    2906:	8c 01       	movw	r16, r24
    2908:	1e 87       	std	Y+14, r17	; 0x0e
    290a:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	red = pulse;  
    290c:	80 91 4b 02 	lds	r24, 0x024B
    2910:	90 91 4c 02 	lds	r25, 0x024C
    2914:	a0 91 4d 02 	lds	r26, 0x024D
    2918:	b0 91 4e 02 	lds	r27, 0x024E
    291c:	80 93 88 02 	sts	0x0288, r24
    2920:	90 93 89 02 	sts	0x0289, r25
    2924:	a0 93 8a 02 	sts	0x028A, r26
    2928:	b0 93 8b 02 	sts	0x028B, r27
}
    292c:	2e 96       	adiw	r28, 0x0e	; 14
    292e:	0f b6       	in	r0, 0x3f	; 63
    2930:	f8 94       	cli
    2932:	de bf       	out	0x3e, r29	; 62
    2934:	0f be       	out	0x3f, r0	; 63
    2936:	cd bf       	out	0x3d, r28	; 61
    2938:	df 91       	pop	r29
    293a:	cf 91       	pop	r28
    293c:	1f 91       	pop	r17
    293e:	0f 91       	pop	r16
    2940:	08 95       	ret

00002942 <green_read>:

void green_read(void) // function to select green filter 
{
    2942:	0f 93       	push	r16
    2944:	1f 93       	push	r17
    2946:	cf 93       	push	r28
    2948:	df 93       	push	r29
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
    294e:	2e 97       	sbiw	r28, 0x0e	; 14
    2950:	0f b6       	in	r0, 0x3f	; 63
    2952:	f8 94       	cli
    2954:	de bf       	out	0x3e, r29	; 62
    2956:	0f be       	out	0x3f, r0	; 63
    2958:	cd bf       	out	0x3d, r28	; 61
	filter_green(); //select green filter
    295a:	0e 94 8c 13 	call	0x2718	; 0x2718 <filter_green>
	pulse=0; 
    295e:	10 92 4b 02 	sts	0x024B, r1
    2962:	10 92 4c 02 	sts	0x024C, r1
    2966:	10 92 4d 02 	sts	0x024D, r1
    296a:	10 92 4e 02 	sts	0x024E, r1
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	a8 ec       	ldi	r26, 0xC8	; 200
    2974:	b2 e4       	ldi	r27, 0x42	; 66
    2976:	89 83       	std	Y+1, r24	; 0x01
    2978:	9a 83       	std	Y+2, r25	; 0x02
    297a:	ab 83       	std	Y+3, r26	; 0x03
    297c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    297e:	69 81       	ldd	r22, Y+1	; 0x01
    2980:	7a 81       	ldd	r23, Y+2	; 0x02
    2982:	8b 81       	ldd	r24, Y+3	; 0x03
    2984:	9c 81       	ldd	r25, Y+4	; 0x04
    2986:	26 e6       	ldi	r18, 0x66	; 102
    2988:	36 e6       	ldi	r19, 0x66	; 102
    298a:	46 e6       	ldi	r20, 0x66	; 102
    298c:	55 e4       	ldi	r21, 0x45	; 69
    298e:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	8d 83       	std	Y+5, r24	; 0x05
    2998:	9e 83       	std	Y+6, r25	; 0x06
    299a:	af 83       	std	Y+7, r26	; 0x07
    299c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    299e:	11 e0       	ldi	r17, 0x01	; 1
    29a0:	6d 81       	ldd	r22, Y+5	; 0x05
    29a2:	7e 81       	ldd	r23, Y+6	; 0x06
    29a4:	8f 81       	ldd	r24, Y+7	; 0x07
    29a6:	98 85       	ldd	r25, Y+8	; 0x08
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	40 e8       	ldi	r20, 0x80	; 128
    29ae:	5f e3       	ldi	r21, 0x3F	; 63
    29b0:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    29b4:	88 23       	and	r24, r24
    29b6:	0c f0       	brlt	.+2      	; 0x29ba <green_read+0x78>
    29b8:	10 e0       	ldi	r17, 0x00	; 0
    29ba:	11 23       	and	r17, r17
    29bc:	29 f0       	breq	.+10     	; 0x29c8 <green_read+0x86>
		__ticks = 1;
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	9a 87       	std	Y+10, r25	; 0x0a
    29c4:	89 87       	std	Y+9, r24	; 0x09
    29c6:	46 c0       	rjmp	.+140    	; 0x2a54 <green_read+0x112>
	else if (__tmp > 65535)
    29c8:	11 e0       	ldi	r17, 0x01	; 1
    29ca:	6d 81       	ldd	r22, Y+5	; 0x05
    29cc:	7e 81       	ldd	r23, Y+6	; 0x06
    29ce:	8f 81       	ldd	r24, Y+7	; 0x07
    29d0:	98 85       	ldd	r25, Y+8	; 0x08
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	3f ef       	ldi	r19, 0xFF	; 255
    29d6:	4f e7       	ldi	r20, 0x7F	; 127
    29d8:	57 e4       	ldi	r21, 0x47	; 71
    29da:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    29de:	18 16       	cp	r1, r24
    29e0:	0c f0       	brlt	.+2      	; 0x29e4 <green_read+0xa2>
    29e2:	10 e0       	ldi	r17, 0x00	; 0
    29e4:	11 23       	and	r17, r17
    29e6:	61 f1       	breq	.+88     	; 0x2a40 <green_read+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e8:	69 81       	ldd	r22, Y+1	; 0x01
    29ea:	7a 81       	ldd	r23, Y+2	; 0x02
    29ec:	8b 81       	ldd	r24, Y+3	; 0x03
    29ee:	9c 81       	ldd	r25, Y+4	; 0x04
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	40 e2       	ldi	r20, 0x20	; 32
    29f6:	51 e4       	ldi	r21, 0x41	; 65
    29f8:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	bc 01       	movw	r22, r24
    2a02:	cd 01       	movw	r24, r26
    2a04:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	9a 87       	std	Y+10, r25	; 0x0a
    2a0e:	89 87       	std	Y+9, r24	; 0x09
    2a10:	12 c0       	rjmp	.+36     	; 0x2a36 <green_read+0xf4>
    2a12:	80 e7       	ldi	r24, 0x70	; 112
    2a14:	91 e0       	ldi	r25, 0x01	; 1
    2a16:	9c 87       	std	Y+12, r25	; 0x0c
    2a18:	8b 87       	std	Y+11, r24	; 0x0b
    2a1a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a1c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a1e:	8c 01       	movw	r16, r24
    2a20:	c8 01       	movw	r24, r16
    2a22:	01 97       	sbiw	r24, 0x01	; 1
    2a24:	f1 f7       	brne	.-4      	; 0x2a22 <green_read+0xe0>
    2a26:	8c 01       	movw	r16, r24
    2a28:	1c 87       	std	Y+12, r17	; 0x0c
    2a2a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a2c:	89 85       	ldd	r24, Y+9	; 0x09
    2a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	9a 87       	std	Y+10, r25	; 0x0a
    2a34:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a36:	89 85       	ldd	r24, Y+9	; 0x09
    2a38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a3a:	00 97       	sbiw	r24, 0x00	; 0
    2a3c:	51 f7       	brne	.-44     	; 0x2a12 <green_read+0xd0>
    2a3e:	17 c0       	rjmp	.+46     	; 0x2a6e <green_read+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a40:	6d 81       	ldd	r22, Y+5	; 0x05
    2a42:	7e 81       	ldd	r23, Y+6	; 0x06
    2a44:	8f 81       	ldd	r24, Y+7	; 0x07
    2a46:	98 85       	ldd	r25, Y+8	; 0x08
    2a48:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	9a 87       	std	Y+10, r25	; 0x0a
    2a52:	89 87       	std	Y+9, r24	; 0x09
    2a54:	89 85       	ldd	r24, Y+9	; 0x09
    2a56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a58:	9e 87       	std	Y+14, r25	; 0x0e
    2a5a:	8d 87       	std	Y+13, r24	; 0x0d
    2a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a60:	8c 01       	movw	r16, r24
    2a62:	c8 01       	movw	r24, r16
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	f1 f7       	brne	.-4      	; 0x2a64 <green_read+0x122>
    2a68:	8c 01       	movw	r16, r24
    2a6a:	1e 87       	std	Y+14, r17	; 0x0e
    2a6c:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	green = pulse; 
    2a6e:	80 91 4b 02 	lds	r24, 0x024B
    2a72:	90 91 4c 02 	lds	r25, 0x024C
    2a76:	a0 91 4d 02 	lds	r26, 0x024D
    2a7a:	b0 91 4e 02 	lds	r27, 0x024E
    2a7e:	80 93 84 02 	sts	0x0284, r24
    2a82:	90 93 85 02 	sts	0x0285, r25
    2a86:	a0 93 86 02 	sts	0x0286, r26
    2a8a:	b0 93 87 02 	sts	0x0287, r27
}
    2a8e:	2e 96       	adiw	r28, 0x0e	; 14
    2a90:	0f b6       	in	r0, 0x3f	; 63
    2a92:	f8 94       	cli
    2a94:	de bf       	out	0x3e, r29	; 62
    2a96:	0f be       	out	0x3f, r0	; 63
    2a98:	cd bf       	out	0x3d, r28	; 61
    2a9a:	df 91       	pop	r29
    2a9c:	cf 91       	pop	r28
    2a9e:	1f 91       	pop	r17
    2aa0:	0f 91       	pop	r16
    2aa2:	08 95       	ret

00002aa4 <blue_read>:

void blue_read(void) // function to select blue filter 
{
    2aa4:	0f 93       	push	r16
    2aa6:	1f 93       	push	r17
    2aa8:	cf 93       	push	r28
    2aaa:	df 93       	push	r29
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
    2ab0:	2e 97       	sbiw	r28, 0x0e	; 14
    2ab2:	0f b6       	in	r0, 0x3f	; 63
    2ab4:	f8 94       	cli
    2ab6:	de bf       	out	0x3e, r29	; 62
    2ab8:	0f be       	out	0x3f, r0	; 63
    2aba:	cd bf       	out	0x3d, r28	; 61
	filter_blue(); //select blue filter
    2abc:	0e 94 a5 13 	call	0x274a	; 0x274a <filter_blue>
	pulse=0; 
    2ac0:	10 92 4b 02 	sts	0x024B, r1
    2ac4:	10 92 4c 02 	sts	0x024C, r1
    2ac8:	10 92 4d 02 	sts	0x024D, r1
    2acc:	10 92 4e 02 	sts	0x024E, r1
    2ad0:	80 e0       	ldi	r24, 0x00	; 0
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	a8 ec       	ldi	r26, 0xC8	; 200
    2ad6:	b2 e4       	ldi	r27, 0x42	; 66
    2ad8:	89 83       	std	Y+1, r24	; 0x01
    2ada:	9a 83       	std	Y+2, r25	; 0x02
    2adc:	ab 83       	std	Y+3, r26	; 0x03
    2ade:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2ae0:	69 81       	ldd	r22, Y+1	; 0x01
    2ae2:	7a 81       	ldd	r23, Y+2	; 0x02
    2ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae8:	26 e6       	ldi	r18, 0x66	; 102
    2aea:	36 e6       	ldi	r19, 0x66	; 102
    2aec:	46 e6       	ldi	r20, 0x66	; 102
    2aee:	55 e4       	ldi	r21, 0x45	; 69
    2af0:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	8d 83       	std	Y+5, r24	; 0x05
    2afa:	9e 83       	std	Y+6, r25	; 0x06
    2afc:	af 83       	std	Y+7, r26	; 0x07
    2afe:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2b00:	11 e0       	ldi	r17, 0x01	; 1
    2b02:	6d 81       	ldd	r22, Y+5	; 0x05
    2b04:	7e 81       	ldd	r23, Y+6	; 0x06
    2b06:	8f 81       	ldd	r24, Y+7	; 0x07
    2b08:	98 85       	ldd	r25, Y+8	; 0x08
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	40 e8       	ldi	r20, 0x80	; 128
    2b10:	5f e3       	ldi	r21, 0x3F	; 63
    2b12:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    2b16:	88 23       	and	r24, r24
    2b18:	0c f0       	brlt	.+2      	; 0x2b1c <blue_read+0x78>
    2b1a:	10 e0       	ldi	r17, 0x00	; 0
    2b1c:	11 23       	and	r17, r17
    2b1e:	29 f0       	breq	.+10     	; 0x2b2a <blue_read+0x86>
		__ticks = 1;
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	9a 87       	std	Y+10, r25	; 0x0a
    2b26:	89 87       	std	Y+9, r24	; 0x09
    2b28:	46 c0       	rjmp	.+140    	; 0x2bb6 <blue_read+0x112>
	else if (__tmp > 65535)
    2b2a:	11 e0       	ldi	r17, 0x01	; 1
    2b2c:	6d 81       	ldd	r22, Y+5	; 0x05
    2b2e:	7e 81       	ldd	r23, Y+6	; 0x06
    2b30:	8f 81       	ldd	r24, Y+7	; 0x07
    2b32:	98 85       	ldd	r25, Y+8	; 0x08
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	3f ef       	ldi	r19, 0xFF	; 255
    2b38:	4f e7       	ldi	r20, 0x7F	; 127
    2b3a:	57 e4       	ldi	r21, 0x47	; 71
    2b3c:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    2b40:	18 16       	cp	r1, r24
    2b42:	0c f0       	brlt	.+2      	; 0x2b46 <blue_read+0xa2>
    2b44:	10 e0       	ldi	r17, 0x00	; 0
    2b46:	11 23       	and	r17, r17
    2b48:	61 f1       	breq	.+88     	; 0x2ba2 <blue_read+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b4a:	69 81       	ldd	r22, Y+1	; 0x01
    2b4c:	7a 81       	ldd	r23, Y+2	; 0x02
    2b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b50:	9c 81       	ldd	r25, Y+4	; 0x04
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	40 e2       	ldi	r20, 0x20	; 32
    2b58:	51 e4       	ldi	r21, 0x41	; 65
    2b5a:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	bc 01       	movw	r22, r24
    2b64:	cd 01       	movw	r24, r26
    2b66:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	9a 87       	std	Y+10, r25	; 0x0a
    2b70:	89 87       	std	Y+9, r24	; 0x09
    2b72:	12 c0       	rjmp	.+36     	; 0x2b98 <blue_read+0xf4>
    2b74:	80 e7       	ldi	r24, 0x70	; 112
    2b76:	91 e0       	ldi	r25, 0x01	; 1
    2b78:	9c 87       	std	Y+12, r25	; 0x0c
    2b7a:	8b 87       	std	Y+11, r24	; 0x0b
    2b7c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b7e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b80:	8c 01       	movw	r16, r24
    2b82:	c8 01       	movw	r24, r16
    2b84:	01 97       	sbiw	r24, 0x01	; 1
    2b86:	f1 f7       	brne	.-4      	; 0x2b84 <blue_read+0xe0>
    2b88:	8c 01       	movw	r16, r24
    2b8a:	1c 87       	std	Y+12, r17	; 0x0c
    2b8c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b8e:	89 85       	ldd	r24, Y+9	; 0x09
    2b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b92:	01 97       	sbiw	r24, 0x01	; 1
    2b94:	9a 87       	std	Y+10, r25	; 0x0a
    2b96:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b98:	89 85       	ldd	r24, Y+9	; 0x09
    2b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b9c:	00 97       	sbiw	r24, 0x00	; 0
    2b9e:	51 f7       	brne	.-44     	; 0x2b74 <blue_read+0xd0>
    2ba0:	17 c0       	rjmp	.+46     	; 0x2bd0 <blue_read+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba2:	6d 81       	ldd	r22, Y+5	; 0x05
    2ba4:	7e 81       	ldd	r23, Y+6	; 0x06
    2ba6:	8f 81       	ldd	r24, Y+7	; 0x07
    2ba8:	98 85       	ldd	r25, Y+8	; 0x08
    2baa:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	9a 87       	std	Y+10, r25	; 0x0a
    2bb4:	89 87       	std	Y+9, r24	; 0x09
    2bb6:	89 85       	ldd	r24, Y+9	; 0x09
    2bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bba:	9e 87       	std	Y+14, r25	; 0x0e
    2bbc:	8d 87       	std	Y+13, r24	; 0x0d
    2bbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bc2:	8c 01       	movw	r16, r24
    2bc4:	c8 01       	movw	r24, r16
    2bc6:	01 97       	sbiw	r24, 0x01	; 1
    2bc8:	f1 f7       	brne	.-4      	; 0x2bc6 <blue_read+0x122>
    2bca:	8c 01       	movw	r16, r24
    2bcc:	1e 87       	std	Y+14, r17	; 0x0e
    2bce:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	blue = pulse;  
    2bd0:	80 91 4b 02 	lds	r24, 0x024B
    2bd4:	90 91 4c 02 	lds	r25, 0x024C
    2bd8:	a0 91 4d 02 	lds	r26, 0x024D
    2bdc:	b0 91 4e 02 	lds	r27, 0x024E
    2be0:	80 93 61 02 	sts	0x0261, r24
    2be4:	90 93 62 02 	sts	0x0262, r25
    2be8:	a0 93 63 02 	sts	0x0263, r26
    2bec:	b0 93 64 02 	sts	0x0264, r27
}
    2bf0:	2e 96       	adiw	r28, 0x0e	; 14
    2bf2:	0f b6       	in	r0, 0x3f	; 63
    2bf4:	f8 94       	cli
    2bf6:	de bf       	out	0x3e, r29	; 62
    2bf8:	0f be       	out	0x3f, r0	; 63
    2bfa:	cd bf       	out	0x3d, r28	; 61
    2bfc:	df 91       	pop	r29
    2bfe:	cf 91       	pop	r28
    2c00:	1f 91       	pop	r17
    2c02:	0f 91       	pop	r16
    2c04:	08 95       	ret

00002c06 <sensor_refresh>:


void sensor_refresh()
{
    2c06:	cf 93       	push	r28
    2c08:	df 93       	push	r29
    2c0a:	cd b7       	in	r28, 0x3d	; 61
    2c0c:	de b7       	in	r29, 0x3e	; 62
	L= ADC_Conversion(3);	//Getting data of White Line Sensors
    2c0e:	83 e0       	ldi	r24, 0x03	; 3
    2c10:	0e 94 82 11 	call	0x2304	; 0x2304 <ADC_Conversion>
    2c14:	80 93 37 02 	sts	0x0237, r24
	C= ADC_Conversion(2);	
    2c18:	82 e0       	ldi	r24, 0x02	; 2
    2c1a:	0e 94 82 11 	call	0x2304	; 0x2304 <ADC_Conversion>
    2c1e:	80 93 38 02 	sts	0x0238, r24
	R= ADC_Conversion(1);	
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	0e 94 82 11 	call	0x2304	; 0x2304 <ADC_Conversion>
    2c28:	80 93 39 02 	sts	0x0239, r24
	
	IR1=ADC_Conversion(4);
    2c2c:	84 e0       	ldi	r24, 0x04	; 4
    2c2e:	0e 94 82 11 	call	0x2304	; 0x2304 <ADC_Conversion>
    2c32:	80 93 3a 02 	sts	0x023A, r24
	IR3=ADC_Conversion(6);  //Getting data of IR proximity Sensors
    2c36:	86 e0       	ldi	r24, 0x06	; 6
    2c38:	0e 94 82 11 	call	0x2304	; 0x2304 <ADC_Conversion>
    2c3c:	80 93 3c 02 	sts	0x023C, r24
	IR5=ADC_Conversion(8);
    2c40:	88 e0       	ldi	r24, 0x08	; 8
    2c42:	0e 94 82 11 	call	0x2304	; 0x2304 <ADC_Conversion>
    2c46:	80 93 3e 02 	sts	0x023E, r24
	
	SHARP1=ADC_Conversion(9); //Getting data of Sharp Sensors
    2c4a:	89 e0       	ldi	r24, 0x09	; 9
    2c4c:	0e 94 82 11 	call	0x2304	; 0x2304 <ADC_Conversion>
    2c50:	80 93 3f 02 	sts	0x023F, r24
	SHARP5=ADC_Conversion(13); 
    2c54:	8d e0       	ldi	r24, 0x0D	; 13
    2c56:	0e 94 82 11 	call	0x2304	; 0x2304 <ADC_Conversion>
    2c5a:	80 93 40 02 	sts	0x0240, r24
}
    2c5e:	df 91       	pop	r29
    2c60:	cf 91       	pop	r28
    2c62:	08 95       	ret

00002c64 <I2C_read>:

//function to read the sensor values from GY-87 module
void I2C_read()
{
    2c64:	cf 93       	push	r28
    2c66:	df 93       	push	r29
    2c68:	cd b7       	in	r28, 0x3d	; 61
    2c6a:	de b7       	in	r29, 0x3e	; 62
	i2c_read_multi_byte(DEV_ADD, X_ACC,2,acc_data_x);   //reading 2 data bytes and storing it into acc_data[2] array
    2c6c:	2d e8       	ldi	r18, 0x8D	; 141
    2c6e:	32 e0       	ldi	r19, 0x02	; 2
    2c70:	80 ed       	ldi	r24, 0xD0	; 208
    2c72:	6b e3       	ldi	r22, 0x3B	; 59
    2c74:	42 e0       	ldi	r20, 0x02	; 2
    2c76:	50 e0       	ldi	r21, 0x00	; 0
    2c78:	0e 94 e5 01 	call	0x3ca	; 0x3ca <i2c_read_multi_byte>
	i2c_read_multi_byte(DEV_ADD, Y_GYRO,2,gyro_data_y);   //reading 4 data bytes and storing it into gyro_data[2] array
    2c7c:	26 e9       	ldi	r18, 0x96	; 150
    2c7e:	32 e0       	ldi	r19, 0x02	; 2
    2c80:	80 ed       	ldi	r24, 0xD0	; 208
    2c82:	65 e4       	ldi	r22, 0x45	; 69
    2c84:	42 e0       	ldi	r20, 0x02	; 2
    2c86:	50 e0       	ldi	r21, 0x00	; 0
    2c88:	0e 94 e5 01 	call	0x3ca	; 0x3ca <i2c_read_multi_byte>
	i2c_read_multi_byte(DEV_ADD, Z_GYRO,2,gyro_data_z);   //reading 4 data bytes and storing it into gyro_data[2] array
    2c8c:	21 e9       	ldi	r18, 0x91	; 145
    2c8e:	32 e0       	ldi	r19, 0x02	; 2
    2c90:	80 ed       	ldi	r24, 0xD0	; 208
    2c92:	67 e4       	ldi	r22, 0x47	; 71
    2c94:	42 e0       	ldi	r20, 0x02	; 2
    2c96:	50 e0       	ldi	r21, 0x00	; 0
    2c98:	0e 94 e5 01 	call	0x3ca	; 0x3ca <i2c_read_multi_byte>
    
	acc_x = acc_data_x[0];
    2c9c:	80 91 8d 02 	lds	r24, 0x028D
    2ca0:	99 27       	eor	r25, r25
    2ca2:	87 fd       	sbrc	r24, 7
    2ca4:	90 95       	com	r25
    2ca6:	90 93 50 02 	sts	0x0250, r25
    2caa:	80 93 4f 02 	sts	0x024F, r24
    acc_x = (acc_x << 8);
    2cae:	80 91 4f 02 	lds	r24, 0x024F
    2cb2:	90 91 50 02 	lds	r25, 0x0250
    2cb6:	98 2f       	mov	r25, r24
    2cb8:	88 27       	eor	r24, r24
    2cba:	90 93 50 02 	sts	0x0250, r25
    2cbe:	80 93 4f 02 	sts	0x024F, r24
    acc_x += acc_data_x[1];
    2cc2:	80 91 8e 02 	lds	r24, 0x028E
    2cc6:	28 2f       	mov	r18, r24
    2cc8:	33 27       	eor	r19, r19
    2cca:	27 fd       	sbrc	r18, 7
    2ccc:	30 95       	com	r19
    2cce:	80 91 4f 02 	lds	r24, 0x024F
    2cd2:	90 91 50 02 	lds	r25, 0x0250
    2cd6:	82 0f       	add	r24, r18
    2cd8:	93 1f       	adc	r25, r19
    2cda:	90 93 50 02 	sts	0x0250, r25
    2cde:	80 93 4f 02 	sts	0x024F, r24
    force_x = acc_x;
    2ce2:	80 91 4f 02 	lds	r24, 0x024F
    2ce6:	90 91 50 02 	lds	r25, 0x0250
    2cea:	aa 27       	eor	r26, r26
    2cec:	97 fd       	sbrc	r25, 7
    2cee:	a0 95       	com	r26
    2cf0:	ba 2f       	mov	r27, r26
    2cf2:	bc 01       	movw	r22, r24
    2cf4:	cd 01       	movw	r24, r26
    2cf6:	0e 94 ce 48 	call	0x919c	; 0x919c <__floatsisf>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	80 93 55 02 	sts	0x0255, r24
    2d02:	90 93 56 02 	sts	0x0256, r25
    2d06:	a0 93 57 02 	sts	0x0257, r26
    2d0a:	b0 93 58 02 	sts	0x0258, r27
  
    gyro_y = gyro_data_y[0];
    2d0e:	80 91 96 02 	lds	r24, 0x0296
    2d12:	99 27       	eor	r25, r25
    2d14:	87 fd       	sbrc	r24, 7
    2d16:	90 95       	com	r25
    2d18:	90 93 52 02 	sts	0x0252, r25
    2d1c:	80 93 51 02 	sts	0x0251, r24
    gyro_y = (gyro_y << 8);
    2d20:	80 91 51 02 	lds	r24, 0x0251
    2d24:	90 91 52 02 	lds	r25, 0x0252
    2d28:	98 2f       	mov	r25, r24
    2d2a:	88 27       	eor	r24, r24
    2d2c:	90 93 52 02 	sts	0x0252, r25
    2d30:	80 93 51 02 	sts	0x0251, r24
    gyro_y += gyro_data_y[1];
    2d34:	80 91 97 02 	lds	r24, 0x0297
    2d38:	28 2f       	mov	r18, r24
    2d3a:	33 27       	eor	r19, r19
    2d3c:	27 fd       	sbrc	r18, 7
    2d3e:	30 95       	com	r19
    2d40:	80 91 51 02 	lds	r24, 0x0251
    2d44:	90 91 52 02 	lds	r25, 0x0252
    2d48:	82 0f       	add	r24, r18
    2d4a:	93 1f       	adc	r25, r19
    2d4c:	90 93 52 02 	sts	0x0252, r25
    2d50:	80 93 51 02 	sts	0x0251, r24
    rotation_y = gyro_y;
    2d54:	80 91 51 02 	lds	r24, 0x0251
    2d58:	90 91 52 02 	lds	r25, 0x0252
    2d5c:	aa 27       	eor	r26, r26
    2d5e:	97 fd       	sbrc	r25, 7
    2d60:	a0 95       	com	r26
    2d62:	ba 2f       	mov	r27, r26
    2d64:	bc 01       	movw	r22, r24
    2d66:	cd 01       	movw	r24, r26
    2d68:	0e 94 ce 48 	call	0x919c	; 0x919c <__floatsisf>
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	cb 01       	movw	r24, r22
    2d70:	80 93 59 02 	sts	0x0259, r24
    2d74:	90 93 5a 02 	sts	0x025A, r25
    2d78:	a0 93 5b 02 	sts	0x025B, r26
    2d7c:	b0 93 5c 02 	sts	0x025C, r27
	
	
    gyro_z = gyro_data_z[0];
    2d80:	80 91 91 02 	lds	r24, 0x0291
    2d84:	99 27       	eor	r25, r25
    2d86:	87 fd       	sbrc	r24, 7
    2d88:	90 95       	com	r25
    2d8a:	90 93 54 02 	sts	0x0254, r25
    2d8e:	80 93 53 02 	sts	0x0253, r24
    gyro_z = (gyro_z << 8);
    2d92:	80 91 53 02 	lds	r24, 0x0253
    2d96:	90 91 54 02 	lds	r25, 0x0254
    2d9a:	98 2f       	mov	r25, r24
    2d9c:	88 27       	eor	r24, r24
    2d9e:	90 93 54 02 	sts	0x0254, r25
    2da2:	80 93 53 02 	sts	0x0253, r24
    gyro_z += gyro_data_z[1];
    2da6:	80 91 92 02 	lds	r24, 0x0292
    2daa:	28 2f       	mov	r18, r24
    2dac:	33 27       	eor	r19, r19
    2dae:	27 fd       	sbrc	r18, 7
    2db0:	30 95       	com	r19
    2db2:	80 91 53 02 	lds	r24, 0x0253
    2db6:	90 91 54 02 	lds	r25, 0x0254
    2dba:	82 0f       	add	r24, r18
    2dbc:	93 1f       	adc	r25, r19
    2dbe:	90 93 54 02 	sts	0x0254, r25
    2dc2:	80 93 53 02 	sts	0x0253, r24
    rotation_z = gyro_z;
    2dc6:	80 91 53 02 	lds	r24, 0x0253
    2dca:	90 91 54 02 	lds	r25, 0x0254
    2dce:	aa 27       	eor	r26, r26
    2dd0:	97 fd       	sbrc	r25, 7
    2dd2:	a0 95       	com	r26
    2dd4:	ba 2f       	mov	r27, r26
    2dd6:	bc 01       	movw	r22, r24
    2dd8:	cd 01       	movw	r24, r26
    2dda:	0e 94 ce 48 	call	0x919c	; 0x919c <__floatsisf>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	80 93 5d 02 	sts	0x025D, r24
    2de6:	90 93 5e 02 	sts	0x025E, r25
    2dea:	a0 93 5f 02 	sts	0x025F, r26
    2dee:	b0 93 60 02 	sts	0x0260, r27
}
    2df2:	df 91       	pop	r29
    2df4:	cf 91       	pop	r28
    2df6:	08 95       	ret

00002df8 <colour_detector>:

//function to identify the colour of the object
unsigned char colour_detector()
{
    2df8:	cf 93       	push	r28
    2dfa:	df 93       	push	r29
    2dfc:	cd b7       	in	r28, 0x3d	; 61
    2dfe:	de b7       	in	r29, 0x3e	; 62
	red_read(); //read the pulse count when red filter is selected
    2e00:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <red_read>
	green_read(); //read the pulse count when green filter is selected
    2e04:	0e 94 a1 14 	call	0x2942	; 0x2942 <green_read>
	blue_read(); //read the pulse count when blue filter is selected
    2e08:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <blue_read>
	
	if(red>450 && green>450 && blue>450)
    2e0c:	80 91 88 02 	lds	r24, 0x0288
    2e10:	90 91 89 02 	lds	r25, 0x0289
    2e14:	a0 91 8a 02 	lds	r26, 0x028A
    2e18:	b0 91 8b 02 	lds	r27, 0x028B
    2e1c:	83 3c       	cpi	r24, 0xC3	; 195
    2e1e:	21 e0       	ldi	r18, 0x01	; 1
    2e20:	92 07       	cpc	r25, r18
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	a2 07       	cpc	r26, r18
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	b2 07       	cpc	r27, r18
    2e2a:	08 f4       	brcc	.+2      	; 0x2e2e <colour_detector+0x36>
    2e2c:	a6 c0       	rjmp	.+332    	; 0x2f7a <colour_detector+0x182>
    2e2e:	80 91 84 02 	lds	r24, 0x0284
    2e32:	90 91 85 02 	lds	r25, 0x0285
    2e36:	a0 91 86 02 	lds	r26, 0x0286
    2e3a:	b0 91 87 02 	lds	r27, 0x0287
    2e3e:	83 3c       	cpi	r24, 0xC3	; 195
    2e40:	21 e0       	ldi	r18, 0x01	; 1
    2e42:	92 07       	cpc	r25, r18
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	a2 07       	cpc	r26, r18
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	b2 07       	cpc	r27, r18
    2e4c:	08 f4       	brcc	.+2      	; 0x2e50 <colour_detector+0x58>
    2e4e:	95 c0       	rjmp	.+298    	; 0x2f7a <colour_detector+0x182>
    2e50:	80 91 61 02 	lds	r24, 0x0261
    2e54:	90 91 62 02 	lds	r25, 0x0262
    2e58:	a0 91 63 02 	lds	r26, 0x0263
    2e5c:	b0 91 64 02 	lds	r27, 0x0264
    2e60:	83 3c       	cpi	r24, 0xC3	; 195
    2e62:	21 e0       	ldi	r18, 0x01	; 1
    2e64:	92 07       	cpc	r25, r18
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	a2 07       	cpc	r26, r18
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	b2 07       	cpc	r27, r18
    2e6e:	08 f4       	brcc	.+2      	; 0x2e72 <colour_detector+0x7a>
    2e70:	84 c0       	rjmp	.+264    	; 0x2f7a <colour_detector+0x182>
	{
		if(red>green && red>blue)
    2e72:	20 91 88 02 	lds	r18, 0x0288
    2e76:	30 91 89 02 	lds	r19, 0x0289
    2e7a:	40 91 8a 02 	lds	r20, 0x028A
    2e7e:	50 91 8b 02 	lds	r21, 0x028B
    2e82:	80 91 84 02 	lds	r24, 0x0284
    2e86:	90 91 85 02 	lds	r25, 0x0285
    2e8a:	a0 91 86 02 	lds	r26, 0x0286
    2e8e:	b0 91 87 02 	lds	r27, 0x0287
    2e92:	82 17       	cp	r24, r18
    2e94:	93 07       	cpc	r25, r19
    2e96:	a4 07       	cpc	r26, r20
    2e98:	b5 07       	cpc	r27, r21
    2e9a:	b8 f4       	brcc	.+46     	; 0x2eca <colour_detector+0xd2>
    2e9c:	20 91 88 02 	lds	r18, 0x0288
    2ea0:	30 91 89 02 	lds	r19, 0x0289
    2ea4:	40 91 8a 02 	lds	r20, 0x028A
    2ea8:	50 91 8b 02 	lds	r21, 0x028B
    2eac:	80 91 61 02 	lds	r24, 0x0261
    2eb0:	90 91 62 02 	lds	r25, 0x0262
    2eb4:	a0 91 63 02 	lds	r26, 0x0263
    2eb8:	b0 91 64 02 	lds	r27, 0x0264
    2ebc:	82 17       	cp	r24, r18
    2ebe:	93 07       	cpc	r25, r19
    2ec0:	a4 07       	cpc	r26, r20
    2ec2:	b5 07       	cpc	r27, r21
    2ec4:	10 f4       	brcc	.+4      	; 0x2eca <colour_detector+0xd2>
		{
			return 'R';
    2ec6:	82 e5       	ldi	r24, 0x52	; 82
    2ec8:	5c c0       	rjmp	.+184    	; 0x2f82 <colour_detector+0x18a>
		}
		else if(green>red && green>blue)
    2eca:	20 91 84 02 	lds	r18, 0x0284
    2ece:	30 91 85 02 	lds	r19, 0x0285
    2ed2:	40 91 86 02 	lds	r20, 0x0286
    2ed6:	50 91 87 02 	lds	r21, 0x0287
    2eda:	80 91 88 02 	lds	r24, 0x0288
    2ede:	90 91 89 02 	lds	r25, 0x0289
    2ee2:	a0 91 8a 02 	lds	r26, 0x028A
    2ee6:	b0 91 8b 02 	lds	r27, 0x028B
    2eea:	82 17       	cp	r24, r18
    2eec:	93 07       	cpc	r25, r19
    2eee:	a4 07       	cpc	r26, r20
    2ef0:	b5 07       	cpc	r27, r21
    2ef2:	b8 f4       	brcc	.+46     	; 0x2f22 <colour_detector+0x12a>
    2ef4:	20 91 84 02 	lds	r18, 0x0284
    2ef8:	30 91 85 02 	lds	r19, 0x0285
    2efc:	40 91 86 02 	lds	r20, 0x0286
    2f00:	50 91 87 02 	lds	r21, 0x0287
    2f04:	80 91 61 02 	lds	r24, 0x0261
    2f08:	90 91 62 02 	lds	r25, 0x0262
    2f0c:	a0 91 63 02 	lds	r26, 0x0263
    2f10:	b0 91 64 02 	lds	r27, 0x0264
    2f14:	82 17       	cp	r24, r18
    2f16:	93 07       	cpc	r25, r19
    2f18:	a4 07       	cpc	r26, r20
    2f1a:	b5 07       	cpc	r27, r21
    2f1c:	10 f4       	brcc	.+4      	; 0x2f22 <colour_detector+0x12a>
		{
			return 'G';
    2f1e:	87 e4       	ldi	r24, 0x47	; 71
    2f20:	30 c0       	rjmp	.+96     	; 0x2f82 <colour_detector+0x18a>
		}
		else if(blue>green && blue>red)
    2f22:	20 91 61 02 	lds	r18, 0x0261
    2f26:	30 91 62 02 	lds	r19, 0x0262
    2f2a:	40 91 63 02 	lds	r20, 0x0263
    2f2e:	50 91 64 02 	lds	r21, 0x0264
    2f32:	80 91 84 02 	lds	r24, 0x0284
    2f36:	90 91 85 02 	lds	r25, 0x0285
    2f3a:	a0 91 86 02 	lds	r26, 0x0286
    2f3e:	b0 91 87 02 	lds	r27, 0x0287
    2f42:	82 17       	cp	r24, r18
    2f44:	93 07       	cpc	r25, r19
    2f46:	a4 07       	cpc	r26, r20
    2f48:	b5 07       	cpc	r27, r21
    2f4a:	c8 f4       	brcc	.+50     	; 0x2f7e <colour_detector+0x186>
    2f4c:	20 91 61 02 	lds	r18, 0x0261
    2f50:	30 91 62 02 	lds	r19, 0x0262
    2f54:	40 91 63 02 	lds	r20, 0x0263
    2f58:	50 91 64 02 	lds	r21, 0x0264
    2f5c:	80 91 88 02 	lds	r24, 0x0288
    2f60:	90 91 89 02 	lds	r25, 0x0289
    2f64:	a0 91 8a 02 	lds	r26, 0x028A
    2f68:	b0 91 8b 02 	lds	r27, 0x028B
    2f6c:	82 17       	cp	r24, r18
    2f6e:	93 07       	cpc	r25, r19
    2f70:	a4 07       	cpc	r26, r20
    2f72:	b5 07       	cpc	r27, r21
    2f74:	20 f4       	brcc	.+8      	; 0x2f7e <colour_detector+0x186>
		{
			return 'B';
    2f76:	82 e4       	ldi	r24, 0x42	; 66
    2f78:	04 c0       	rjmp	.+8      	; 0x2f82 <colour_detector+0x18a>
		}
	}
	else
	{
		return '0';
    2f7a:	80 e3       	ldi	r24, 0x30	; 48
    2f7c:	02 c0       	rjmp	.+4      	; 0x2f82 <colour_detector+0x18a>
	green_read(); //read the pulse count when green filter is selected
	blue_read(); //read the pulse count when blue filter is selected
	
	if(red>450 && green>450 && blue>450)
	{
		if(red>green && red>blue)
    2f7e:	00 00       	nop
    2f80:	00 c0       	rjmp	.+0      	; 0x2f82 <colour_detector+0x18a>
	}
	else
	{
		return '0';
	}
}
    2f82:	df 91       	pop	r29
    2f84:	cf 91       	pop	r28
    2f86:	08 95       	ret

00002f88 <object_detector>:

//function to detect the type of object
void object_detector()  
{
    2f88:	0f 93       	push	r16
    2f8a:	1f 93       	push	r17
    2f8c:	cf 93       	push	r28
    2f8e:	df 93       	push	r29
    2f90:	cd b7       	in	r28, 0x3d	; 61
    2f92:	de b7       	in	r29, 0x3e	; 62
    2f94:	e8 97       	sbiw	r28, 0x38	; 56
    2f96:	0f b6       	in	r0, 0x3f	; 63
    2f98:	f8 94       	cli
    2f9a:	de bf       	out	0x3e, r29	; 62
    2f9c:	0f be       	out	0x3f, r0	; 63
    2f9e:	cd bf       	out	0x3d, r28	; 61
	if(flag_left_object==1)                     //when object is present only in left
    2fa0:	80 91 33 02 	lds	r24, 0x0233
    2fa4:	81 30       	cpi	r24, 0x01	; 1
    2fa6:	09 f0       	breq	.+2      	; 0x2faa <object_detector+0x22>
    2fa8:	11 c1       	rjmp	.+546    	; 0x31cc <object_detector+0x244>
	{
		servo_1(15);
    2faa:	8f e0       	ldi	r24, 0x0F	; 15
    2fac:	0e 94 23 11 	call	0x2246	; 0x2246 <servo_1>
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	aa e7       	ldi	r26, 0x7A	; 122
    2fb6:	b4 e4       	ldi	r27, 0x44	; 68
    2fb8:	89 83       	std	Y+1, r24	; 0x01
    2fba:	9a 83       	std	Y+2, r25	; 0x02
    2fbc:	ab 83       	std	Y+3, r26	; 0x03
    2fbe:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    2fc0:	69 81       	ldd	r22, Y+1	; 0x01
    2fc2:	7a 81       	ldd	r23, Y+2	; 0x02
    2fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc8:	26 e6       	ldi	r18, 0x66	; 102
    2fca:	36 e6       	ldi	r19, 0x66	; 102
    2fcc:	46 e6       	ldi	r20, 0x66	; 102
    2fce:	55 e4       	ldi	r21, 0x45	; 69
    2fd0:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	8d 83       	std	Y+5, r24	; 0x05
    2fda:	9e 83       	std	Y+6, r25	; 0x06
    2fdc:	af 83       	std	Y+7, r26	; 0x07
    2fde:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2fe0:	11 e0       	ldi	r17, 0x01	; 1
    2fe2:	6d 81       	ldd	r22, Y+5	; 0x05
    2fe4:	7e 81       	ldd	r23, Y+6	; 0x06
    2fe6:	8f 81       	ldd	r24, Y+7	; 0x07
    2fe8:	98 85       	ldd	r25, Y+8	; 0x08
    2fea:	20 e0       	ldi	r18, 0x00	; 0
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	40 e8       	ldi	r20, 0x80	; 128
    2ff0:	5f e3       	ldi	r21, 0x3F	; 63
    2ff2:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    2ff6:	88 23       	and	r24, r24
    2ff8:	0c f0       	brlt	.+2      	; 0x2ffc <object_detector+0x74>
    2ffa:	10 e0       	ldi	r17, 0x00	; 0
    2ffc:	11 23       	and	r17, r17
    2ffe:	29 f0       	breq	.+10     	; 0x300a <object_detector+0x82>
		__ticks = 1;
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	9a 87       	std	Y+10, r25	; 0x0a
    3006:	89 87       	std	Y+9, r24	; 0x09
    3008:	46 c0       	rjmp	.+140    	; 0x3096 <object_detector+0x10e>
	else if (__tmp > 65535)
    300a:	11 e0       	ldi	r17, 0x01	; 1
    300c:	6d 81       	ldd	r22, Y+5	; 0x05
    300e:	7e 81       	ldd	r23, Y+6	; 0x06
    3010:	8f 81       	ldd	r24, Y+7	; 0x07
    3012:	98 85       	ldd	r25, Y+8	; 0x08
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	3f ef       	ldi	r19, 0xFF	; 255
    3018:	4f e7       	ldi	r20, 0x7F	; 127
    301a:	57 e4       	ldi	r21, 0x47	; 71
    301c:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    3020:	18 16       	cp	r1, r24
    3022:	0c f0       	brlt	.+2      	; 0x3026 <object_detector+0x9e>
    3024:	10 e0       	ldi	r17, 0x00	; 0
    3026:	11 23       	and	r17, r17
    3028:	61 f1       	breq	.+88     	; 0x3082 <object_detector+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    302a:	69 81       	ldd	r22, Y+1	; 0x01
    302c:	7a 81       	ldd	r23, Y+2	; 0x02
    302e:	8b 81       	ldd	r24, Y+3	; 0x03
    3030:	9c 81       	ldd	r25, Y+4	; 0x04
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	40 e2       	ldi	r20, 0x20	; 32
    3038:	51 e4       	ldi	r21, 0x41	; 65
    303a:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	bc 01       	movw	r22, r24
    3044:	cd 01       	movw	r24, r26
    3046:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	9a 87       	std	Y+10, r25	; 0x0a
    3050:	89 87       	std	Y+9, r24	; 0x09
    3052:	12 c0       	rjmp	.+36     	; 0x3078 <object_detector+0xf0>
    3054:	80 e7       	ldi	r24, 0x70	; 112
    3056:	91 e0       	ldi	r25, 0x01	; 1
    3058:	9c 87       	std	Y+12, r25	; 0x0c
    305a:	8b 87       	std	Y+11, r24	; 0x0b
    305c:	8b 85       	ldd	r24, Y+11	; 0x0b
    305e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3060:	8c 01       	movw	r16, r24
    3062:	c8 01       	movw	r24, r16
    3064:	01 97       	sbiw	r24, 0x01	; 1
    3066:	f1 f7       	brne	.-4      	; 0x3064 <object_detector+0xdc>
    3068:	8c 01       	movw	r16, r24
    306a:	1c 87       	std	Y+12, r17	; 0x0c
    306c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    306e:	89 85       	ldd	r24, Y+9	; 0x09
    3070:	9a 85       	ldd	r25, Y+10	; 0x0a
    3072:	01 97       	sbiw	r24, 0x01	; 1
    3074:	9a 87       	std	Y+10, r25	; 0x0a
    3076:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3078:	89 85       	ldd	r24, Y+9	; 0x09
    307a:	9a 85       	ldd	r25, Y+10	; 0x0a
    307c:	00 97       	sbiw	r24, 0x00	; 0
    307e:	51 f7       	brne	.-44     	; 0x3054 <object_detector+0xcc>
    3080:	17 c0       	rjmp	.+46     	; 0x30b0 <object_detector+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3082:	6d 81       	ldd	r22, Y+5	; 0x05
    3084:	7e 81       	ldd	r23, Y+6	; 0x06
    3086:	8f 81       	ldd	r24, Y+7	; 0x07
    3088:	98 85       	ldd	r25, Y+8	; 0x08
    308a:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    308e:	dc 01       	movw	r26, r24
    3090:	cb 01       	movw	r24, r22
    3092:	9a 87       	std	Y+10, r25	; 0x0a
    3094:	89 87       	std	Y+9, r24	; 0x09
    3096:	89 85       	ldd	r24, Y+9	; 0x09
    3098:	9a 85       	ldd	r25, Y+10	; 0x0a
    309a:	9e 87       	std	Y+14, r25	; 0x0e
    309c:	8d 87       	std	Y+13, r24	; 0x0d
    309e:	8d 85       	ldd	r24, Y+13	; 0x0d
    30a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    30a2:	8c 01       	movw	r16, r24
    30a4:	c8 01       	movw	r24, r16
    30a6:	01 97       	sbiw	r24, 0x01	; 1
    30a8:	f1 f7       	brne	.-4      	; 0x30a6 <object_detector+0x11e>
    30aa:	8c 01       	movw	r16, r24
    30ac:	1e 87       	std	Y+14, r17	; 0x0e
    30ae:	0d 87       	std	Y+13, r16	; 0x0d
		_delay_ms(1000);
		left_object_type=colour_detector();    //scanning left side
    30b0:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <colour_detector>
    30b4:	88 2f       	mov	r24, r24
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	90 93 07 02 	sts	0x0207, r25
    30bc:	80 93 06 02 	sts	0x0206, r24
		
		servo_1(70);
    30c0:	86 e4       	ldi	r24, 0x46	; 70
    30c2:	0e 94 23 11 	call	0x2246	; 0x2246 <servo_1>
    30c6:	80 e0       	ldi	r24, 0x00	; 0
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	aa ef       	ldi	r26, 0xFA	; 250
    30cc:	b3 e4       	ldi	r27, 0x43	; 67
    30ce:	8f 87       	std	Y+15, r24	; 0x0f
    30d0:	98 8b       	std	Y+16, r25	; 0x10
    30d2:	a9 8b       	std	Y+17, r26	; 0x11
    30d4:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    30d6:	6f 85       	ldd	r22, Y+15	; 0x0f
    30d8:	78 89       	ldd	r23, Y+16	; 0x10
    30da:	89 89       	ldd	r24, Y+17	; 0x11
    30dc:	9a 89       	ldd	r25, Y+18	; 0x12
    30de:	26 e6       	ldi	r18, 0x66	; 102
    30e0:	36 e6       	ldi	r19, 0x66	; 102
    30e2:	46 e6       	ldi	r20, 0x66	; 102
    30e4:	55 e4       	ldi	r21, 0x45	; 69
    30e6:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	8b 8b       	std	Y+19, r24	; 0x13
    30f0:	9c 8b       	std	Y+20, r25	; 0x14
    30f2:	ad 8b       	std	Y+21, r26	; 0x15
    30f4:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    30f6:	11 e0       	ldi	r17, 0x01	; 1
    30f8:	6b 89       	ldd	r22, Y+19	; 0x13
    30fa:	7c 89       	ldd	r23, Y+20	; 0x14
    30fc:	8d 89       	ldd	r24, Y+21	; 0x15
    30fe:	9e 89       	ldd	r25, Y+22	; 0x16
    3100:	20 e0       	ldi	r18, 0x00	; 0
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	40 e8       	ldi	r20, 0x80	; 128
    3106:	5f e3       	ldi	r21, 0x3F	; 63
    3108:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    310c:	88 23       	and	r24, r24
    310e:	0c f0       	brlt	.+2      	; 0x3112 <object_detector+0x18a>
    3110:	10 e0       	ldi	r17, 0x00	; 0
    3112:	11 23       	and	r17, r17
    3114:	29 f0       	breq	.+10     	; 0x3120 <object_detector+0x198>
		__ticks = 1;
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	98 8f       	std	Y+24, r25	; 0x18
    311c:	8f 8b       	std	Y+23, r24	; 0x17
    311e:	46 c0       	rjmp	.+140    	; 0x31ac <object_detector+0x224>
	else if (__tmp > 65535)
    3120:	11 e0       	ldi	r17, 0x01	; 1
    3122:	6b 89       	ldd	r22, Y+19	; 0x13
    3124:	7c 89       	ldd	r23, Y+20	; 0x14
    3126:	8d 89       	ldd	r24, Y+21	; 0x15
    3128:	9e 89       	ldd	r25, Y+22	; 0x16
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	3f ef       	ldi	r19, 0xFF	; 255
    312e:	4f e7       	ldi	r20, 0x7F	; 127
    3130:	57 e4       	ldi	r21, 0x47	; 71
    3132:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    3136:	18 16       	cp	r1, r24
    3138:	0c f0       	brlt	.+2      	; 0x313c <object_detector+0x1b4>
    313a:	10 e0       	ldi	r17, 0x00	; 0
    313c:	11 23       	and	r17, r17
    313e:	61 f1       	breq	.+88     	; 0x3198 <object_detector+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3140:	6f 85       	ldd	r22, Y+15	; 0x0f
    3142:	78 89       	ldd	r23, Y+16	; 0x10
    3144:	89 89       	ldd	r24, Y+17	; 0x11
    3146:	9a 89       	ldd	r25, Y+18	; 0x12
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	40 e2       	ldi	r20, 0x20	; 32
    314e:	51 e4       	ldi	r21, 0x41	; 65
    3150:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	bc 01       	movw	r22, r24
    315a:	cd 01       	movw	r24, r26
    315c:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	98 8f       	std	Y+24, r25	; 0x18
    3166:	8f 8b       	std	Y+23, r24	; 0x17
    3168:	12 c0       	rjmp	.+36     	; 0x318e <object_detector+0x206>
    316a:	80 e7       	ldi	r24, 0x70	; 112
    316c:	91 e0       	ldi	r25, 0x01	; 1
    316e:	9a 8f       	std	Y+26, r25	; 0x1a
    3170:	89 8f       	std	Y+25, r24	; 0x19
    3172:	89 8d       	ldd	r24, Y+25	; 0x19
    3174:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3176:	8c 01       	movw	r16, r24
    3178:	c8 01       	movw	r24, r16
    317a:	01 97       	sbiw	r24, 0x01	; 1
    317c:	f1 f7       	brne	.-4      	; 0x317a <object_detector+0x1f2>
    317e:	8c 01       	movw	r16, r24
    3180:	1a 8f       	std	Y+26, r17	; 0x1a
    3182:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3184:	8f 89       	ldd	r24, Y+23	; 0x17
    3186:	98 8d       	ldd	r25, Y+24	; 0x18
    3188:	01 97       	sbiw	r24, 0x01	; 1
    318a:	98 8f       	std	Y+24, r25	; 0x18
    318c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    318e:	8f 89       	ldd	r24, Y+23	; 0x17
    3190:	98 8d       	ldd	r25, Y+24	; 0x18
    3192:	00 97       	sbiw	r24, 0x00	; 0
    3194:	51 f7       	brne	.-44     	; 0x316a <object_detector+0x1e2>
    3196:	17 c0       	rjmp	.+46     	; 0x31c6 <object_detector+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3198:	6b 89       	ldd	r22, Y+19	; 0x13
    319a:	7c 89       	ldd	r23, Y+20	; 0x14
    319c:	8d 89       	ldd	r24, Y+21	; 0x15
    319e:	9e 89       	ldd	r25, Y+22	; 0x16
    31a0:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    31a4:	dc 01       	movw	r26, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	98 8f       	std	Y+24, r25	; 0x18
    31aa:	8f 8b       	std	Y+23, r24	; 0x17
    31ac:	8f 89       	ldd	r24, Y+23	; 0x17
    31ae:	98 8d       	ldd	r25, Y+24	; 0x18
    31b0:	9c 8f       	std	Y+28, r25	; 0x1c
    31b2:	8b 8f       	std	Y+27, r24	; 0x1b
    31b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31b8:	8c 01       	movw	r16, r24
    31ba:	c8 01       	movw	r24, r16
    31bc:	01 97       	sbiw	r24, 0x01	; 1
    31be:	f1 f7       	brne	.-4      	; 0x31bc <object_detector+0x234>
    31c0:	8c 01       	movw	r16, r24
    31c2:	1c 8f       	std	Y+28, r17	; 0x1c
    31c4:	0b 8f       	std	Y+27, r16	; 0x1b
		_delay_ms(500);                        //repositioning the servo at default angle
		servo_1_free();
    31c6:	0e 94 71 11 	call	0x22e2	; 0x22e2 <servo_1_free>
    31ca:	15 c1       	rjmp	.+554    	; 0x33f6 <object_detector+0x46e>
	}
	else if(flag_right_object==1)              //when object is present only in right
    31cc:	80 91 34 02 	lds	r24, 0x0234
    31d0:	81 30       	cpi	r24, 0x01	; 1
    31d2:	09 f0       	breq	.+2      	; 0x31d6 <object_detector+0x24e>
    31d4:	10 c1       	rjmp	.+544    	; 0x33f6 <object_detector+0x46e>
	{
		servo_1(193);
    31d6:	81 ec       	ldi	r24, 0xC1	; 193
    31d8:	0e 94 23 11 	call	0x2246	; 0x2246 <servo_1>
    31dc:	80 e0       	ldi	r24, 0x00	; 0
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	a6 e9       	ldi	r26, 0x96	; 150
    31e2:	b4 e4       	ldi	r27, 0x44	; 68
    31e4:	8d 8f       	std	Y+29, r24	; 0x1d
    31e6:	9e 8f       	std	Y+30, r25	; 0x1e
    31e8:	af 8f       	std	Y+31, r26	; 0x1f
    31ea:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    31ec:	6d 8d       	ldd	r22, Y+29	; 0x1d
    31ee:	7e 8d       	ldd	r23, Y+30	; 0x1e
    31f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31f2:	98 a1       	lds	r25, 0x48
    31f4:	26 e6       	ldi	r18, 0x66	; 102
    31f6:	36 e6       	ldi	r19, 0x66	; 102
    31f8:	46 e6       	ldi	r20, 0x66	; 102
    31fa:	55 e4       	ldi	r21, 0x45	; 69
    31fc:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	89 a3       	lds	r24, 0x59
    3206:	9a a3       	lds	r25, 0x5a
    3208:	ab a3       	lds	r26, 0x5b
    320a:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    320c:	11 e0       	ldi	r17, 0x01	; 1
    320e:	69 a1       	lds	r22, 0x49
    3210:	7a a1       	lds	r23, 0x4a
    3212:	8b a1       	lds	r24, 0x4b
    3214:	9c a1       	lds	r25, 0x4c
    3216:	20 e0       	ldi	r18, 0x00	; 0
    3218:	30 e0       	ldi	r19, 0x00	; 0
    321a:	40 e8       	ldi	r20, 0x80	; 128
    321c:	5f e3       	ldi	r21, 0x3F	; 63
    321e:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    3222:	88 23       	and	r24, r24
    3224:	0c f0       	brlt	.+2      	; 0x3228 <object_detector+0x2a0>
    3226:	10 e0       	ldi	r17, 0x00	; 0
    3228:	11 23       	and	r17, r17
    322a:	29 f0       	breq	.+10     	; 0x3236 <object_detector+0x2ae>
		__ticks = 1;
    322c:	81 e0       	ldi	r24, 0x01	; 1
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	9e a3       	lds	r25, 0x5e
    3232:	8d a3       	lds	r24, 0x5d
    3234:	46 c0       	rjmp	.+140    	; 0x32c2 <object_detector+0x33a>
	else if (__tmp > 65535)
    3236:	11 e0       	ldi	r17, 0x01	; 1
    3238:	69 a1       	lds	r22, 0x49
    323a:	7a a1       	lds	r23, 0x4a
    323c:	8b a1       	lds	r24, 0x4b
    323e:	9c a1       	lds	r25, 0x4c
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	3f ef       	ldi	r19, 0xFF	; 255
    3244:	4f e7       	ldi	r20, 0x7F	; 127
    3246:	57 e4       	ldi	r21, 0x47	; 71
    3248:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    324c:	18 16       	cp	r1, r24
    324e:	0c f0       	brlt	.+2      	; 0x3252 <object_detector+0x2ca>
    3250:	10 e0       	ldi	r17, 0x00	; 0
    3252:	11 23       	and	r17, r17
    3254:	61 f1       	breq	.+88     	; 0x32ae <object_detector+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3256:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3258:	7e 8d       	ldd	r23, Y+30	; 0x1e
    325a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    325c:	98 a1       	lds	r25, 0x48
    325e:	20 e0       	ldi	r18, 0x00	; 0
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	40 e2       	ldi	r20, 0x20	; 32
    3264:	51 e4       	ldi	r21, 0x41	; 65
    3266:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    326a:	dc 01       	movw	r26, r24
    326c:	cb 01       	movw	r24, r22
    326e:	bc 01       	movw	r22, r24
    3270:	cd 01       	movw	r24, r26
    3272:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    3276:	dc 01       	movw	r26, r24
    3278:	cb 01       	movw	r24, r22
    327a:	9e a3       	lds	r25, 0x5e
    327c:	8d a3       	lds	r24, 0x5d
    327e:	12 c0       	rjmp	.+36     	; 0x32a4 <object_detector+0x31c>
    3280:	80 e7       	ldi	r24, 0x70	; 112
    3282:	91 e0       	ldi	r25, 0x01	; 1
    3284:	98 a7       	lds	r25, 0x78
    3286:	8f a3       	lds	r24, 0x5f
    3288:	8f a1       	lds	r24, 0x4f
    328a:	98 a5       	lds	r25, 0x68
    328c:	8c 01       	movw	r16, r24
    328e:	c8 01       	movw	r24, r16
    3290:	01 97       	sbiw	r24, 0x01	; 1
    3292:	f1 f7       	brne	.-4      	; 0x3290 <object_detector+0x308>
    3294:	8c 01       	movw	r16, r24
    3296:	18 a7       	lds	r17, 0x78
    3298:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    329a:	8d a1       	lds	r24, 0x4d
    329c:	9e a1       	lds	r25, 0x4e
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	9e a3       	lds	r25, 0x5e
    32a2:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a4:	8d a1       	lds	r24, 0x4d
    32a6:	9e a1       	lds	r25, 0x4e
    32a8:	00 97       	sbiw	r24, 0x00	; 0
    32aa:	51 f7       	brne	.-44     	; 0x3280 <object_detector+0x2f8>
    32ac:	17 c0       	rjmp	.+46     	; 0x32dc <object_detector+0x354>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ae:	69 a1       	lds	r22, 0x49
    32b0:	7a a1       	lds	r23, 0x4a
    32b2:	8b a1       	lds	r24, 0x4b
    32b4:	9c a1       	lds	r25, 0x4c
    32b6:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    32ba:	dc 01       	movw	r26, r24
    32bc:	cb 01       	movw	r24, r22
    32be:	9e a3       	lds	r25, 0x5e
    32c0:	8d a3       	lds	r24, 0x5d
    32c2:	8d a1       	lds	r24, 0x4d
    32c4:	9e a1       	lds	r25, 0x4e
    32c6:	9a a7       	lds	r25, 0x7a
    32c8:	89 a7       	lds	r24, 0x79
    32ca:	89 a5       	lds	r24, 0x69
    32cc:	9a a5       	lds	r25, 0x6a
    32ce:	8c 01       	movw	r16, r24
    32d0:	c8 01       	movw	r24, r16
    32d2:	01 97       	sbiw	r24, 0x01	; 1
    32d4:	f1 f7       	brne	.-4      	; 0x32d2 <object_detector+0x34a>
    32d6:	8c 01       	movw	r16, r24
    32d8:	1a a7       	lds	r17, 0x7a
    32da:	09 a7       	lds	r16, 0x79
		_delay_ms(1200);
		right_object_type=colour_detector();   //scanning right side
    32dc:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <colour_detector>
    32e0:	88 2f       	mov	r24, r24
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	90 93 09 02 	sts	0x0209, r25
    32e8:	80 93 08 02 	sts	0x0208, r24
		
		servo_1(70);
    32ec:	86 e4       	ldi	r24, 0x46	; 70
    32ee:	0e 94 23 11 	call	0x2246	; 0x2246 <servo_1>
    32f2:	80 e0       	ldi	r24, 0x00	; 0
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	a8 e4       	ldi	r26, 0x48	; 72
    32f8:	b4 e4       	ldi	r27, 0x44	; 68
    32fa:	8b a7       	lds	r24, 0x7b
    32fc:	9c a7       	lds	r25, 0x7c
    32fe:	ad a7       	lds	r26, 0x7d
    3300:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3302:	6b a5       	lds	r22, 0x6b
    3304:	7c a5       	lds	r23, 0x6c
    3306:	8d a5       	lds	r24, 0x6d
    3308:	9e a5       	lds	r25, 0x6e
    330a:	26 e6       	ldi	r18, 0x66	; 102
    330c:	36 e6       	ldi	r19, 0x66	; 102
    330e:	46 e6       	ldi	r20, 0x66	; 102
    3310:	55 e4       	ldi	r21, 0x45	; 69
    3312:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    3316:	dc 01       	movw	r26, r24
    3318:	cb 01       	movw	r24, r22
    331a:	8f a7       	lds	r24, 0x7f
    331c:	98 ab       	sts	0x58, r25
    331e:	a9 ab       	sts	0x59, r26
    3320:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    3322:	11 e0       	ldi	r17, 0x01	; 1
    3324:	6f a5       	lds	r22, 0x6f
    3326:	78 a9       	sts	0x48, r23
    3328:	89 a9       	sts	0x49, r24
    332a:	9a a9       	sts	0x4a, r25
    332c:	20 e0       	ldi	r18, 0x00	; 0
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	40 e8       	ldi	r20, 0x80	; 128
    3332:	5f e3       	ldi	r21, 0x3F	; 63
    3334:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    3338:	88 23       	and	r24, r24
    333a:	0c f0       	brlt	.+2      	; 0x333e <object_detector+0x3b6>
    333c:	10 e0       	ldi	r17, 0x00	; 0
    333e:	11 23       	and	r17, r17
    3340:	29 f0       	breq	.+10     	; 0x334c <object_detector+0x3c4>
		__ticks = 1;
    3342:	81 e0       	ldi	r24, 0x01	; 1
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	9c ab       	sts	0x5c, r25
    3348:	8b ab       	sts	0x5b, r24
    334a:	46 c0       	rjmp	.+140    	; 0x33d8 <object_detector+0x450>
	else if (__tmp > 65535)
    334c:	11 e0       	ldi	r17, 0x01	; 1
    334e:	6f a5       	lds	r22, 0x6f
    3350:	78 a9       	sts	0x48, r23
    3352:	89 a9       	sts	0x49, r24
    3354:	9a a9       	sts	0x4a, r25
    3356:	20 e0       	ldi	r18, 0x00	; 0
    3358:	3f ef       	ldi	r19, 0xFF	; 255
    335a:	4f e7       	ldi	r20, 0x7F	; 127
    335c:	57 e4       	ldi	r21, 0x47	; 71
    335e:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    3362:	18 16       	cp	r1, r24
    3364:	0c f0       	brlt	.+2      	; 0x3368 <object_detector+0x3e0>
    3366:	10 e0       	ldi	r17, 0x00	; 0
    3368:	11 23       	and	r17, r17
    336a:	61 f1       	breq	.+88     	; 0x33c4 <object_detector+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    336c:	6b a5       	lds	r22, 0x6b
    336e:	7c a5       	lds	r23, 0x6c
    3370:	8d a5       	lds	r24, 0x6d
    3372:	9e a5       	lds	r25, 0x6e
    3374:	20 e0       	ldi	r18, 0x00	; 0
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	40 e2       	ldi	r20, 0x20	; 32
    337a:	51 e4       	ldi	r21, 0x41	; 65
    337c:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    3380:	dc 01       	movw	r26, r24
    3382:	cb 01       	movw	r24, r22
    3384:	bc 01       	movw	r22, r24
    3386:	cd 01       	movw	r24, r26
    3388:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    338c:	dc 01       	movw	r26, r24
    338e:	cb 01       	movw	r24, r22
    3390:	9c ab       	sts	0x5c, r25
    3392:	8b ab       	sts	0x5b, r24
    3394:	12 c0       	rjmp	.+36     	; 0x33ba <object_detector+0x432>
    3396:	80 e7       	ldi	r24, 0x70	; 112
    3398:	91 e0       	ldi	r25, 0x01	; 1
    339a:	9e ab       	sts	0x5e, r25
    339c:	8d ab       	sts	0x5d, r24
    339e:	8d a9       	sts	0x4d, r24
    33a0:	9e a9       	sts	0x4e, r25
    33a2:	8c 01       	movw	r16, r24
    33a4:	c8 01       	movw	r24, r16
    33a6:	01 97       	sbiw	r24, 0x01	; 1
    33a8:	f1 f7       	brne	.-4      	; 0x33a6 <object_detector+0x41e>
    33aa:	8c 01       	movw	r16, r24
    33ac:	1e ab       	sts	0x5e, r17
    33ae:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33b0:	8b a9       	sts	0x4b, r24
    33b2:	9c a9       	sts	0x4c, r25
    33b4:	01 97       	sbiw	r24, 0x01	; 1
    33b6:	9c ab       	sts	0x5c, r25
    33b8:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ba:	8b a9       	sts	0x4b, r24
    33bc:	9c a9       	sts	0x4c, r25
    33be:	00 97       	sbiw	r24, 0x00	; 0
    33c0:	51 f7       	brne	.-44     	; 0x3396 <object_detector+0x40e>
    33c2:	17 c0       	rjmp	.+46     	; 0x33f2 <object_detector+0x46a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33c4:	6f a5       	lds	r22, 0x6f
    33c6:	78 a9       	sts	0x48, r23
    33c8:	89 a9       	sts	0x49, r24
    33ca:	9a a9       	sts	0x4a, r25
    33cc:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    33d0:	dc 01       	movw	r26, r24
    33d2:	cb 01       	movw	r24, r22
    33d4:	9c ab       	sts	0x5c, r25
    33d6:	8b ab       	sts	0x5b, r24
    33d8:	8b a9       	sts	0x4b, r24
    33da:	9c a9       	sts	0x4c, r25
    33dc:	98 af       	sts	0x78, r25
    33de:	8f ab       	sts	0x5f, r24
    33e0:	8f a9       	sts	0x4f, r24
    33e2:	98 ad       	sts	0x68, r25
    33e4:	8c 01       	movw	r16, r24
    33e6:	c8 01       	movw	r24, r16
    33e8:	01 97       	sbiw	r24, 0x01	; 1
    33ea:	f1 f7       	brne	.-4      	; 0x33e8 <object_detector+0x460>
    33ec:	8c 01       	movw	r16, r24
    33ee:	18 af       	sts	0x78, r17
    33f0:	0f ab       	sts	0x5f, r16
		_delay_ms(800);                        //repositioning the servo at default angle
		servo_1_free();
    33f2:	0e 94 71 11 	call	0x22e2	; 0x22e2 <servo_1_free>
	}
}
    33f6:	e8 96       	adiw	r28, 0x38	; 56
    33f8:	0f b6       	in	r0, 0x3f	; 63
    33fa:	f8 94       	cli
    33fc:	de bf       	out	0x3e, r29	; 62
    33fe:	0f be       	out	0x3f, r0	; 63
    3400:	cd bf       	out	0x3d, r28	; 61
    3402:	df 91       	pop	r29
    3404:	cf 91       	pop	r28
    3406:	1f 91       	pop	r17
    3408:	0f 91       	pop	r16
    340a:	08 95       	ret

0000340c <tunnel_traveller>:

void tunnel_traveller()                       //this function is used to navigate through, when tunnel is detected.
{
    340c:	0f 93       	push	r16
    340e:	1f 93       	push	r17
    3410:	cf 93       	push	r28
    3412:	df 93       	push	r29
    3414:	cd b7       	in	r28, 0x3d	; 61
    3416:	de b7       	in	r29, 0x3e	; 62
    3418:	2e 97       	sbiw	r28, 0x0e	; 14
    341a:	0f b6       	in	r0, 0x3f	; 63
    341c:	f8 94       	cli
    341e:	de bf       	out	0x3e, r29	; 62
    3420:	0f be       	out	0x3f, r0	; 63
    3422:	cd bf       	out	0x3d, r28	; 61
	sensor_refresh();
    3424:	0e 94 03 16 	call	0x2c06	; 0x2c06 <sensor_refresh>
	while((L < 0x17) && (C < 0x17) && (R < 0x17))
    3428:	32 c0       	rjmp	.+100    	; 0x348e <tunnel_traveller+0x82>
	{
		if(IR1>30 && IR5>30)
    342a:	80 91 3a 02 	lds	r24, 0x023A
    342e:	8f 31       	cpi	r24, 0x1F	; 31
    3430:	60 f0       	brcs	.+24     	; 0x344a <tunnel_traveller+0x3e>
    3432:	80 91 3e 02 	lds	r24, 0x023E
    3436:	8f 31       	cpi	r24, 0x1F	; 31
    3438:	40 f0       	brcs	.+16     	; 0x344a <tunnel_traveller+0x3e>
		{
			velocity(140,140);
    343a:	8c e8       	ldi	r24, 0x8C	; 140
    343c:	6c e8       	ldi	r22, 0x8C	; 140
    343e:	0e 94 c6 11 	call	0x238c	; 0x238c <velocity>
			forward_mm(6);
    3442:	86 e0       	ldi	r24, 0x06	; 6
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	0e 94 4d 13 	call	0x269a	; 0x269a <forward_mm>
		}
		if(IR1<30)
    344a:	80 91 3a 02 	lds	r24, 0x023A
    344e:	8e 31       	cpi	r24, 0x1E	; 30
    3450:	60 f4       	brcc	.+24     	; 0x346a <tunnel_traveller+0x5e>
		{
			right_degrees(6);  //soft right
    3452:	86 e0       	ldi	r24, 0x06	; 6
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	0e 94 c1 12 	call	0x2582	; 0x2582 <right_degrees>
			velocity(140,140);
    345a:	8c e8       	ldi	r24, 0x8C	; 140
    345c:	6c e8       	ldi	r22, 0x8C	; 140
    345e:	0e 94 c6 11 	call	0x238c	; 0x238c <velocity>
			forward_mm(10);
    3462:	8a e0       	ldi	r24, 0x0A	; 10
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	0e 94 4d 13 	call	0x269a	; 0x269a <forward_mm>
		}
		if(IR5<30)
    346a:	80 91 3e 02 	lds	r24, 0x023E
    346e:	8e 31       	cpi	r24, 0x1E	; 30
    3470:	60 f4       	brcc	.+24     	; 0x348a <tunnel_traveller+0x7e>
		{
			left_degrees(6);  //soft left
    3472:	86 e0       	ldi	r24, 0x06	; 6
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	0e 94 ae 12 	call	0x255c	; 0x255c <left_degrees>
			velocity(140,140);
    347a:	8c e8       	ldi	r24, 0x8C	; 140
    347c:	6c e8       	ldi	r22, 0x8C	; 140
    347e:	0e 94 c6 11 	call	0x238c	; 0x238c <velocity>
			forward_mm(10);
    3482:	8a e0       	ldi	r24, 0x0A	; 10
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	0e 94 4d 13 	call	0x269a	; 0x269a <forward_mm>
		}
		sensor_refresh();
    348a:	0e 94 03 16 	call	0x2c06	; 0x2c06 <sensor_refresh>
}

void tunnel_traveller()                       //this function is used to navigate through, when tunnel is detected.
{
	sensor_refresh();
	while((L < 0x17) && (C < 0x17) && (R < 0x17))
    348e:	80 91 37 02 	lds	r24, 0x0237
    3492:	87 31       	cpi	r24, 0x17	; 23
    3494:	40 f4       	brcc	.+16     	; 0x34a6 <tunnel_traveller+0x9a>
    3496:	80 91 38 02 	lds	r24, 0x0238
    349a:	87 31       	cpi	r24, 0x17	; 23
    349c:	20 f4       	brcc	.+8      	; 0x34a6 <tunnel_traveller+0x9a>
    349e:	80 91 39 02 	lds	r24, 0x0239
    34a2:	87 31       	cpi	r24, 0x17	; 23
    34a4:	10 f2       	brcs	.-124    	; 0x342a <tunnel_traveller+0x1e>
			velocity(140,140);
			forward_mm(10);
		}
		sensor_refresh();
	}
	servo_1(70);
    34a6:	86 e4       	ldi	r24, 0x46	; 70
    34a8:	0e 94 23 11 	call	0x2246	; 0x2246 <servo_1>
    34ac:	80 e0       	ldi	r24, 0x00	; 0
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	a8 ec       	ldi	r26, 0xC8	; 200
    34b2:	b2 e4       	ldi	r27, 0x42	; 66
    34b4:	89 83       	std	Y+1, r24	; 0x01
    34b6:	9a 83       	std	Y+2, r25	; 0x02
    34b8:	ab 83       	std	Y+3, r26	; 0x03
    34ba:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    34bc:	69 81       	ldd	r22, Y+1	; 0x01
    34be:	7a 81       	ldd	r23, Y+2	; 0x02
    34c0:	8b 81       	ldd	r24, Y+3	; 0x03
    34c2:	9c 81       	ldd	r25, Y+4	; 0x04
    34c4:	26 e6       	ldi	r18, 0x66	; 102
    34c6:	36 e6       	ldi	r19, 0x66	; 102
    34c8:	46 e6       	ldi	r20, 0x66	; 102
    34ca:	55 e4       	ldi	r21, 0x45	; 69
    34cc:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    34d0:	dc 01       	movw	r26, r24
    34d2:	cb 01       	movw	r24, r22
    34d4:	8d 83       	std	Y+5, r24	; 0x05
    34d6:	9e 83       	std	Y+6, r25	; 0x06
    34d8:	af 83       	std	Y+7, r26	; 0x07
    34da:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    34dc:	11 e0       	ldi	r17, 0x01	; 1
    34de:	6d 81       	ldd	r22, Y+5	; 0x05
    34e0:	7e 81       	ldd	r23, Y+6	; 0x06
    34e2:	8f 81       	ldd	r24, Y+7	; 0x07
    34e4:	98 85       	ldd	r25, Y+8	; 0x08
    34e6:	20 e0       	ldi	r18, 0x00	; 0
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	40 e8       	ldi	r20, 0x80	; 128
    34ec:	5f e3       	ldi	r21, 0x3F	; 63
    34ee:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    34f2:	88 23       	and	r24, r24
    34f4:	0c f0       	brlt	.+2      	; 0x34f8 <tunnel_traveller+0xec>
    34f6:	10 e0       	ldi	r17, 0x00	; 0
    34f8:	11 23       	and	r17, r17
    34fa:	29 f0       	breq	.+10     	; 0x3506 <tunnel_traveller+0xfa>
		__ticks = 1;
    34fc:	81 e0       	ldi	r24, 0x01	; 1
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	9a 87       	std	Y+10, r25	; 0x0a
    3502:	89 87       	std	Y+9, r24	; 0x09
    3504:	46 c0       	rjmp	.+140    	; 0x3592 <tunnel_traveller+0x186>
	else if (__tmp > 65535)
    3506:	11 e0       	ldi	r17, 0x01	; 1
    3508:	6d 81       	ldd	r22, Y+5	; 0x05
    350a:	7e 81       	ldd	r23, Y+6	; 0x06
    350c:	8f 81       	ldd	r24, Y+7	; 0x07
    350e:	98 85       	ldd	r25, Y+8	; 0x08
    3510:	20 e0       	ldi	r18, 0x00	; 0
    3512:	3f ef       	ldi	r19, 0xFF	; 255
    3514:	4f e7       	ldi	r20, 0x7F	; 127
    3516:	57 e4       	ldi	r21, 0x47	; 71
    3518:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    351c:	18 16       	cp	r1, r24
    351e:	0c f0       	brlt	.+2      	; 0x3522 <tunnel_traveller+0x116>
    3520:	10 e0       	ldi	r17, 0x00	; 0
    3522:	11 23       	and	r17, r17
    3524:	61 f1       	breq	.+88     	; 0x357e <tunnel_traveller+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3526:	69 81       	ldd	r22, Y+1	; 0x01
    3528:	7a 81       	ldd	r23, Y+2	; 0x02
    352a:	8b 81       	ldd	r24, Y+3	; 0x03
    352c:	9c 81       	ldd	r25, Y+4	; 0x04
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	40 e2       	ldi	r20, 0x20	; 32
    3534:	51 e4       	ldi	r21, 0x41	; 65
    3536:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	bc 01       	movw	r22, r24
    3540:	cd 01       	movw	r24, r26
    3542:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    3546:	dc 01       	movw	r26, r24
    3548:	cb 01       	movw	r24, r22
    354a:	9a 87       	std	Y+10, r25	; 0x0a
    354c:	89 87       	std	Y+9, r24	; 0x09
    354e:	12 c0       	rjmp	.+36     	; 0x3574 <tunnel_traveller+0x168>
    3550:	80 e7       	ldi	r24, 0x70	; 112
    3552:	91 e0       	ldi	r25, 0x01	; 1
    3554:	9c 87       	std	Y+12, r25	; 0x0c
    3556:	8b 87       	std	Y+11, r24	; 0x0b
    3558:	8b 85       	ldd	r24, Y+11	; 0x0b
    355a:	9c 85       	ldd	r25, Y+12	; 0x0c
    355c:	8c 01       	movw	r16, r24
    355e:	c8 01       	movw	r24, r16
    3560:	01 97       	sbiw	r24, 0x01	; 1
    3562:	f1 f7       	brne	.-4      	; 0x3560 <tunnel_traveller+0x154>
    3564:	8c 01       	movw	r16, r24
    3566:	1c 87       	std	Y+12, r17	; 0x0c
    3568:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    356a:	89 85       	ldd	r24, Y+9	; 0x09
    356c:	9a 85       	ldd	r25, Y+10	; 0x0a
    356e:	01 97       	sbiw	r24, 0x01	; 1
    3570:	9a 87       	std	Y+10, r25	; 0x0a
    3572:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3574:	89 85       	ldd	r24, Y+9	; 0x09
    3576:	9a 85       	ldd	r25, Y+10	; 0x0a
    3578:	00 97       	sbiw	r24, 0x00	; 0
    357a:	51 f7       	brne	.-44     	; 0x3550 <tunnel_traveller+0x144>
    357c:	17 c0       	rjmp	.+46     	; 0x35ac <tunnel_traveller+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    357e:	6d 81       	ldd	r22, Y+5	; 0x05
    3580:	7e 81       	ldd	r23, Y+6	; 0x06
    3582:	8f 81       	ldd	r24, Y+7	; 0x07
    3584:	98 85       	ldd	r25, Y+8	; 0x08
    3586:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    358a:	dc 01       	movw	r26, r24
    358c:	cb 01       	movw	r24, r22
    358e:	9a 87       	std	Y+10, r25	; 0x0a
    3590:	89 87       	std	Y+9, r24	; 0x09
    3592:	89 85       	ldd	r24, Y+9	; 0x09
    3594:	9a 85       	ldd	r25, Y+10	; 0x0a
    3596:	9e 87       	std	Y+14, r25	; 0x0e
    3598:	8d 87       	std	Y+13, r24	; 0x0d
    359a:	8d 85       	ldd	r24, Y+13	; 0x0d
    359c:	9e 85       	ldd	r25, Y+14	; 0x0e
    359e:	8c 01       	movw	r16, r24
    35a0:	c8 01       	movw	r24, r16
    35a2:	01 97       	sbiw	r24, 0x01	; 1
    35a4:	f1 f7       	brne	.-4      	; 0x35a2 <tunnel_traveller+0x196>
    35a6:	8c 01       	movw	r16, r24
    35a8:	1e 87       	std	Y+14, r17	; 0x0e
    35aa:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(100);
	servo_1_free();
    35ac:	0e 94 71 11 	call	0x22e2	; 0x22e2 <servo_1_free>
	node_detector();
    35b0:	0e 94 8c 37 	call	0x6f18	; 0x6f18 <node_detector>
	flag_node=1;
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	80 93 26 02 	sts	0x0226, r24
}
    35ba:	2e 96       	adiw	r28, 0x0e	; 14
    35bc:	0f b6       	in	r0, 0x3f	; 63
    35be:	f8 94       	cli
    35c0:	de bf       	out	0x3e, r29	; 62
    35c2:	0f be       	out	0x3f, r0	; 63
    35c4:	cd bf       	out	0x3d, r28	; 61
    35c6:	df 91       	pop	r29
    35c8:	cf 91       	pop	r28
    35ca:	1f 91       	pop	r17
    35cc:	0f 91       	pop	r16
    35ce:	08 95       	ret

000035d0 <check_status>:

//to check the status of the I2C communication
void check_status(STAT status)
{
    35d0:	0f 93       	push	r16
    35d2:	1f 93       	push	r17
    35d4:	cf 93       	push	r28
    35d6:	df 93       	push	r29
    35d8:	cd b7       	in	r28, 0x3d	; 61
    35da:	de b7       	in	r29, 0x3e	; 62
    35dc:	6d 97       	sbiw	r28, 0x1d	; 29
    35de:	0f b6       	in	r0, 0x3f	; 63
    35e0:	f8 94       	cli
    35e2:	de bf       	out	0x3e, r29	; 62
    35e4:	0f be       	out	0x3f, r0	; 63
    35e6:	cd bf       	out	0x3d, r28	; 61
    35e8:	8d 8f       	std	Y+29, r24	; 0x1d
	if(status != OK)
    35ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35ec:	88 23       	and	r24, r24
    35ee:	09 f4       	brne	.+2      	; 0x35f2 <check_status+0x22>
    35f0:	09 c1       	rjmp	.+530    	; 0x3804 <check_status+0x234>
	{
		lcd_cursor(1,2);
    35f2:	81 e0       	ldi	r24, 0x01	; 1
    35f4:	62 e0       	ldi	r22, 0x02	; 2
    35f6:	0e 94 8c 0c 	call	0x1918	; 0x1918 <lcd_cursor>
    35fa:	80 e0       	ldi	r24, 0x00	; 0
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	a8 e4       	ldi	r26, 0x48	; 72
    3600:	b2 e4       	ldi	r27, 0x42	; 66
    3602:	89 83       	std	Y+1, r24	; 0x01
    3604:	9a 83       	std	Y+2, r25	; 0x02
    3606:	ab 83       	std	Y+3, r26	; 0x03
    3608:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    360a:	69 81       	ldd	r22, Y+1	; 0x01
    360c:	7a 81       	ldd	r23, Y+2	; 0x02
    360e:	8b 81       	ldd	r24, Y+3	; 0x03
    3610:	9c 81       	ldd	r25, Y+4	; 0x04
    3612:	26 e6       	ldi	r18, 0x66	; 102
    3614:	36 e6       	ldi	r19, 0x66	; 102
    3616:	46 e6       	ldi	r20, 0x66	; 102
    3618:	55 e4       	ldi	r21, 0x45	; 69
    361a:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    361e:	dc 01       	movw	r26, r24
    3620:	cb 01       	movw	r24, r22
    3622:	8d 83       	std	Y+5, r24	; 0x05
    3624:	9e 83       	std	Y+6, r25	; 0x06
    3626:	af 83       	std	Y+7, r26	; 0x07
    3628:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    362a:	11 e0       	ldi	r17, 0x01	; 1
    362c:	6d 81       	ldd	r22, Y+5	; 0x05
    362e:	7e 81       	ldd	r23, Y+6	; 0x06
    3630:	8f 81       	ldd	r24, Y+7	; 0x07
    3632:	98 85       	ldd	r25, Y+8	; 0x08
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	40 e8       	ldi	r20, 0x80	; 128
    363a:	5f e3       	ldi	r21, 0x3F	; 63
    363c:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    3640:	88 23       	and	r24, r24
    3642:	0c f0       	brlt	.+2      	; 0x3646 <check_status+0x76>
    3644:	10 e0       	ldi	r17, 0x00	; 0
    3646:	11 23       	and	r17, r17
    3648:	29 f0       	breq	.+10     	; 0x3654 <check_status+0x84>
		__ticks = 1;
    364a:	81 e0       	ldi	r24, 0x01	; 1
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	9a 87       	std	Y+10, r25	; 0x0a
    3650:	89 87       	std	Y+9, r24	; 0x09
    3652:	46 c0       	rjmp	.+140    	; 0x36e0 <check_status+0x110>
	else if (__tmp > 65535)
    3654:	11 e0       	ldi	r17, 0x01	; 1
    3656:	6d 81       	ldd	r22, Y+5	; 0x05
    3658:	7e 81       	ldd	r23, Y+6	; 0x06
    365a:	8f 81       	ldd	r24, Y+7	; 0x07
    365c:	98 85       	ldd	r25, Y+8	; 0x08
    365e:	20 e0       	ldi	r18, 0x00	; 0
    3660:	3f ef       	ldi	r19, 0xFF	; 255
    3662:	4f e7       	ldi	r20, 0x7F	; 127
    3664:	57 e4       	ldi	r21, 0x47	; 71
    3666:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    366a:	18 16       	cp	r1, r24
    366c:	0c f0       	brlt	.+2      	; 0x3670 <check_status+0xa0>
    366e:	10 e0       	ldi	r17, 0x00	; 0
    3670:	11 23       	and	r17, r17
    3672:	61 f1       	breq	.+88     	; 0x36cc <check_status+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3674:	69 81       	ldd	r22, Y+1	; 0x01
    3676:	7a 81       	ldd	r23, Y+2	; 0x02
    3678:	8b 81       	ldd	r24, Y+3	; 0x03
    367a:	9c 81       	ldd	r25, Y+4	; 0x04
    367c:	20 e0       	ldi	r18, 0x00	; 0
    367e:	30 e0       	ldi	r19, 0x00	; 0
    3680:	40 e2       	ldi	r20, 0x20	; 32
    3682:	51 e4       	ldi	r21, 0x41	; 65
    3684:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    3688:	dc 01       	movw	r26, r24
    368a:	cb 01       	movw	r24, r22
    368c:	bc 01       	movw	r22, r24
    368e:	cd 01       	movw	r24, r26
    3690:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    3694:	dc 01       	movw	r26, r24
    3696:	cb 01       	movw	r24, r22
    3698:	9a 87       	std	Y+10, r25	; 0x0a
    369a:	89 87       	std	Y+9, r24	; 0x09
    369c:	12 c0       	rjmp	.+36     	; 0x36c2 <check_status+0xf2>
    369e:	80 e7       	ldi	r24, 0x70	; 112
    36a0:	91 e0       	ldi	r25, 0x01	; 1
    36a2:	9c 87       	std	Y+12, r25	; 0x0c
    36a4:	8b 87       	std	Y+11, r24	; 0x0b
    36a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    36a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    36aa:	8c 01       	movw	r16, r24
    36ac:	c8 01       	movw	r24, r16
    36ae:	01 97       	sbiw	r24, 0x01	; 1
    36b0:	f1 f7       	brne	.-4      	; 0x36ae <check_status+0xde>
    36b2:	8c 01       	movw	r16, r24
    36b4:	1c 87       	std	Y+12, r17	; 0x0c
    36b6:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b8:	89 85       	ldd	r24, Y+9	; 0x09
    36ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    36bc:	01 97       	sbiw	r24, 0x01	; 1
    36be:	9a 87       	std	Y+10, r25	; 0x0a
    36c0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36c2:	89 85       	ldd	r24, Y+9	; 0x09
    36c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    36c6:	00 97       	sbiw	r24, 0x00	; 0
    36c8:	51 f7       	brne	.-44     	; 0x369e <check_status+0xce>
    36ca:	17 c0       	rjmp	.+46     	; 0x36fa <check_status+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36cc:	6d 81       	ldd	r22, Y+5	; 0x05
    36ce:	7e 81       	ldd	r23, Y+6	; 0x06
    36d0:	8f 81       	ldd	r24, Y+7	; 0x07
    36d2:	98 85       	ldd	r25, Y+8	; 0x08
    36d4:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    36d8:	dc 01       	movw	r26, r24
    36da:	cb 01       	movw	r24, r22
    36dc:	9a 87       	std	Y+10, r25	; 0x0a
    36de:	89 87       	std	Y+9, r24	; 0x09
    36e0:	89 85       	ldd	r24, Y+9	; 0x09
    36e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    36e4:	9e 87       	std	Y+14, r25	; 0x0e
    36e6:	8d 87       	std	Y+13, r24	; 0x0d
    36e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    36ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    36ec:	8c 01       	movw	r16, r24
    36ee:	c8 01       	movw	r24, r16
    36f0:	01 97       	sbiw	r24, 0x01	; 1
    36f2:	f1 f7       	brne	.-4      	; 0x36f0 <check_status+0x120>
    36f4:	8c 01       	movw	r16, r24
    36f6:	1e 87       	std	Y+14, r17	; 0x0e
    36f8:	0d 87       	std	Y+13, r16	; 0x0d
		_delay_ms(50);
		lcd_string("Status Not OK");
    36fa:	8c e0       	ldi	r24, 0x0C	; 12
    36fc:	92 e0       	ldi	r25, 0x02	; 2
    36fe:	0e 94 6d 0c 	call	0x18da	; 0x18da <lcd_string>
    3702:	80 e0       	ldi	r24, 0x00	; 0
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	a8 e4       	ldi	r26, 0x48	; 72
    3708:	b2 e4       	ldi	r27, 0x42	; 66
    370a:	8f 87       	std	Y+15, r24	; 0x0f
    370c:	98 8b       	std	Y+16, r25	; 0x10
    370e:	a9 8b       	std	Y+17, r26	; 0x11
    3710:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3712:	6f 85       	ldd	r22, Y+15	; 0x0f
    3714:	78 89       	ldd	r23, Y+16	; 0x10
    3716:	89 89       	ldd	r24, Y+17	; 0x11
    3718:	9a 89       	ldd	r25, Y+18	; 0x12
    371a:	26 e6       	ldi	r18, 0x66	; 102
    371c:	36 e6       	ldi	r19, 0x66	; 102
    371e:	46 e6       	ldi	r20, 0x66	; 102
    3720:	55 e4       	ldi	r21, 0x45	; 69
    3722:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    3726:	dc 01       	movw	r26, r24
    3728:	cb 01       	movw	r24, r22
    372a:	8b 8b       	std	Y+19, r24	; 0x13
    372c:	9c 8b       	std	Y+20, r25	; 0x14
    372e:	ad 8b       	std	Y+21, r26	; 0x15
    3730:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    3732:	11 e0       	ldi	r17, 0x01	; 1
    3734:	6b 89       	ldd	r22, Y+19	; 0x13
    3736:	7c 89       	ldd	r23, Y+20	; 0x14
    3738:	8d 89       	ldd	r24, Y+21	; 0x15
    373a:	9e 89       	ldd	r25, Y+22	; 0x16
    373c:	20 e0       	ldi	r18, 0x00	; 0
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	40 e8       	ldi	r20, 0x80	; 128
    3742:	5f e3       	ldi	r21, 0x3F	; 63
    3744:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    3748:	88 23       	and	r24, r24
    374a:	0c f0       	brlt	.+2      	; 0x374e <check_status+0x17e>
    374c:	10 e0       	ldi	r17, 0x00	; 0
    374e:	11 23       	and	r17, r17
    3750:	29 f0       	breq	.+10     	; 0x375c <check_status+0x18c>
		__ticks = 1;
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	98 8f       	std	Y+24, r25	; 0x18
    3758:	8f 8b       	std	Y+23, r24	; 0x17
    375a:	46 c0       	rjmp	.+140    	; 0x37e8 <check_status+0x218>
	else if (__tmp > 65535)
    375c:	11 e0       	ldi	r17, 0x01	; 1
    375e:	6b 89       	ldd	r22, Y+19	; 0x13
    3760:	7c 89       	ldd	r23, Y+20	; 0x14
    3762:	8d 89       	ldd	r24, Y+21	; 0x15
    3764:	9e 89       	ldd	r25, Y+22	; 0x16
    3766:	20 e0       	ldi	r18, 0x00	; 0
    3768:	3f ef       	ldi	r19, 0xFF	; 255
    376a:	4f e7       	ldi	r20, 0x7F	; 127
    376c:	57 e4       	ldi	r21, 0x47	; 71
    376e:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    3772:	18 16       	cp	r1, r24
    3774:	0c f0       	brlt	.+2      	; 0x3778 <check_status+0x1a8>
    3776:	10 e0       	ldi	r17, 0x00	; 0
    3778:	11 23       	and	r17, r17
    377a:	61 f1       	breq	.+88     	; 0x37d4 <check_status+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    377c:	6f 85       	ldd	r22, Y+15	; 0x0f
    377e:	78 89       	ldd	r23, Y+16	; 0x10
    3780:	89 89       	ldd	r24, Y+17	; 0x11
    3782:	9a 89       	ldd	r25, Y+18	; 0x12
    3784:	20 e0       	ldi	r18, 0x00	; 0
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	40 e2       	ldi	r20, 0x20	; 32
    378a:	51 e4       	ldi	r21, 0x41	; 65
    378c:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    3790:	dc 01       	movw	r26, r24
    3792:	cb 01       	movw	r24, r22
    3794:	bc 01       	movw	r22, r24
    3796:	cd 01       	movw	r24, r26
    3798:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    379c:	dc 01       	movw	r26, r24
    379e:	cb 01       	movw	r24, r22
    37a0:	98 8f       	std	Y+24, r25	; 0x18
    37a2:	8f 8b       	std	Y+23, r24	; 0x17
    37a4:	12 c0       	rjmp	.+36     	; 0x37ca <check_status+0x1fa>
    37a6:	80 e7       	ldi	r24, 0x70	; 112
    37a8:	91 e0       	ldi	r25, 0x01	; 1
    37aa:	9a 8f       	std	Y+26, r25	; 0x1a
    37ac:	89 8f       	std	Y+25, r24	; 0x19
    37ae:	89 8d       	ldd	r24, Y+25	; 0x19
    37b0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    37b2:	8c 01       	movw	r16, r24
    37b4:	c8 01       	movw	r24, r16
    37b6:	01 97       	sbiw	r24, 0x01	; 1
    37b8:	f1 f7       	brne	.-4      	; 0x37b6 <check_status+0x1e6>
    37ba:	8c 01       	movw	r16, r24
    37bc:	1a 8f       	std	Y+26, r17	; 0x1a
    37be:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37c0:	8f 89       	ldd	r24, Y+23	; 0x17
    37c2:	98 8d       	ldd	r25, Y+24	; 0x18
    37c4:	01 97       	sbiw	r24, 0x01	; 1
    37c6:	98 8f       	std	Y+24, r25	; 0x18
    37c8:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ca:	8f 89       	ldd	r24, Y+23	; 0x17
    37cc:	98 8d       	ldd	r25, Y+24	; 0x18
    37ce:	00 97       	sbiw	r24, 0x00	; 0
    37d0:	51 f7       	brne	.-44     	; 0x37a6 <check_status+0x1d6>
    37d2:	17 c0       	rjmp	.+46     	; 0x3802 <check_status+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d4:	6b 89       	ldd	r22, Y+19	; 0x13
    37d6:	7c 89       	ldd	r23, Y+20	; 0x14
    37d8:	8d 89       	ldd	r24, Y+21	; 0x15
    37da:	9e 89       	ldd	r25, Y+22	; 0x16
    37dc:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    37e0:	dc 01       	movw	r26, r24
    37e2:	cb 01       	movw	r24, r22
    37e4:	98 8f       	std	Y+24, r25	; 0x18
    37e6:	8f 8b       	std	Y+23, r24	; 0x17
    37e8:	8f 89       	ldd	r24, Y+23	; 0x17
    37ea:	98 8d       	ldd	r25, Y+24	; 0x18
    37ec:	9c 8f       	std	Y+28, r25	; 0x1c
    37ee:	8b 8f       	std	Y+27, r24	; 0x1b
    37f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37f4:	8c 01       	movw	r16, r24
    37f6:	c8 01       	movw	r24, r16
    37f8:	01 97       	sbiw	r24, 0x01	; 1
    37fa:	f1 f7       	brne	.-4      	; 0x37f8 <check_status+0x228>
    37fc:	8c 01       	movw	r16, r24
    37fe:	1c 8f       	std	Y+28, r17	; 0x1c
    3800:	0b 8f       	std	Y+27, r16	; 0x1b
		_delay_ms(50);
		while(1);		//error in transmission using i2c
    3802:	ff cf       	rjmp	.-2      	; 0x3802 <check_status+0x232>
	}
}
    3804:	6d 96       	adiw	r28, 0x1d	; 29
    3806:	0f b6       	in	r0, 0x3f	; 63
    3808:	f8 94       	cli
    380a:	de bf       	out	0x3e, r29	; 62
    380c:	0f be       	out	0x3f, r0	; 63
    380e:	cd bf       	out	0x3d, r28	; 61
    3810:	df 91       	pop	r29
    3812:	cf 91       	pop	r28
    3814:	1f 91       	pop	r17
    3816:	0f 91       	pop	r16
    3818:	08 95       	ret

0000381a <right_turn>:
/*************************************************************** Algorithm ********************************************************/

void right_turn()   //to turn 90 degree right
{
    381a:	0f 93       	push	r16
    381c:	1f 93       	push	r17
    381e:	cf 93       	push	r28
    3820:	df 93       	push	r29
    3822:	cd b7       	in	r28, 0x3d	; 61
    3824:	de b7       	in	r29, 0x3e	; 62
    3826:	2e 97       	sbiw	r28, 0x0e	; 14
    3828:	0f b6       	in	r0, 0x3f	; 63
    382a:	f8 94       	cli
    382c:	de bf       	out	0x3e, r29	; 62
    382e:	0f be       	out	0x3f, r0	; 63
    3830:	cd bf       	out	0x3d, r28	; 61
	velocity(180,180);
    3832:	84 eb       	ldi	r24, 0xB4	; 180
    3834:	64 eb       	ldi	r22, 0xB4	; 180
    3836:	0e 94 c6 11 	call	0x238c	; 0x238c <velocity>
	right_degrees(85);
    383a:	85 e5       	ldi	r24, 0x55	; 85
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	0e 94 c1 12 	call	0x2582	; 0x2582 <right_degrees>
	stop_bot();    	
    3842:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    3846:	80 e0       	ldi	r24, 0x00	; 0
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	aa ef       	ldi	r26, 0xFA	; 250
    384c:	b3 e4       	ldi	r27, 0x43	; 67
    384e:	89 83       	std	Y+1, r24	; 0x01
    3850:	9a 83       	std	Y+2, r25	; 0x02
    3852:	ab 83       	std	Y+3, r26	; 0x03
    3854:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3856:	69 81       	ldd	r22, Y+1	; 0x01
    3858:	7a 81       	ldd	r23, Y+2	; 0x02
    385a:	8b 81       	ldd	r24, Y+3	; 0x03
    385c:	9c 81       	ldd	r25, Y+4	; 0x04
    385e:	26 e6       	ldi	r18, 0x66	; 102
    3860:	36 e6       	ldi	r19, 0x66	; 102
    3862:	46 e6       	ldi	r20, 0x66	; 102
    3864:	55 e4       	ldi	r21, 0x45	; 69
    3866:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    386a:	dc 01       	movw	r26, r24
    386c:	cb 01       	movw	r24, r22
    386e:	8d 83       	std	Y+5, r24	; 0x05
    3870:	9e 83       	std	Y+6, r25	; 0x06
    3872:	af 83       	std	Y+7, r26	; 0x07
    3874:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3876:	11 e0       	ldi	r17, 0x01	; 1
    3878:	6d 81       	ldd	r22, Y+5	; 0x05
    387a:	7e 81       	ldd	r23, Y+6	; 0x06
    387c:	8f 81       	ldd	r24, Y+7	; 0x07
    387e:	98 85       	ldd	r25, Y+8	; 0x08
    3880:	20 e0       	ldi	r18, 0x00	; 0
    3882:	30 e0       	ldi	r19, 0x00	; 0
    3884:	40 e8       	ldi	r20, 0x80	; 128
    3886:	5f e3       	ldi	r21, 0x3F	; 63
    3888:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    388c:	88 23       	and	r24, r24
    388e:	0c f0       	brlt	.+2      	; 0x3892 <right_turn+0x78>
    3890:	10 e0       	ldi	r17, 0x00	; 0
    3892:	11 23       	and	r17, r17
    3894:	29 f0       	breq	.+10     	; 0x38a0 <right_turn+0x86>
		__ticks = 1;
    3896:	81 e0       	ldi	r24, 0x01	; 1
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	9a 87       	std	Y+10, r25	; 0x0a
    389c:	89 87       	std	Y+9, r24	; 0x09
    389e:	46 c0       	rjmp	.+140    	; 0x392c <right_turn+0x112>
	else if (__tmp > 65535)
    38a0:	11 e0       	ldi	r17, 0x01	; 1
    38a2:	6d 81       	ldd	r22, Y+5	; 0x05
    38a4:	7e 81       	ldd	r23, Y+6	; 0x06
    38a6:	8f 81       	ldd	r24, Y+7	; 0x07
    38a8:	98 85       	ldd	r25, Y+8	; 0x08
    38aa:	20 e0       	ldi	r18, 0x00	; 0
    38ac:	3f ef       	ldi	r19, 0xFF	; 255
    38ae:	4f e7       	ldi	r20, 0x7F	; 127
    38b0:	57 e4       	ldi	r21, 0x47	; 71
    38b2:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    38b6:	18 16       	cp	r1, r24
    38b8:	0c f0       	brlt	.+2      	; 0x38bc <right_turn+0xa2>
    38ba:	10 e0       	ldi	r17, 0x00	; 0
    38bc:	11 23       	and	r17, r17
    38be:	61 f1       	breq	.+88     	; 0x3918 <right_turn+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38c0:	69 81       	ldd	r22, Y+1	; 0x01
    38c2:	7a 81       	ldd	r23, Y+2	; 0x02
    38c4:	8b 81       	ldd	r24, Y+3	; 0x03
    38c6:	9c 81       	ldd	r25, Y+4	; 0x04
    38c8:	20 e0       	ldi	r18, 0x00	; 0
    38ca:	30 e0       	ldi	r19, 0x00	; 0
    38cc:	40 e2       	ldi	r20, 0x20	; 32
    38ce:	51 e4       	ldi	r21, 0x41	; 65
    38d0:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    38d4:	dc 01       	movw	r26, r24
    38d6:	cb 01       	movw	r24, r22
    38d8:	bc 01       	movw	r22, r24
    38da:	cd 01       	movw	r24, r26
    38dc:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    38e0:	dc 01       	movw	r26, r24
    38e2:	cb 01       	movw	r24, r22
    38e4:	9a 87       	std	Y+10, r25	; 0x0a
    38e6:	89 87       	std	Y+9, r24	; 0x09
    38e8:	12 c0       	rjmp	.+36     	; 0x390e <right_turn+0xf4>
    38ea:	80 e7       	ldi	r24, 0x70	; 112
    38ec:	91 e0       	ldi	r25, 0x01	; 1
    38ee:	9c 87       	std	Y+12, r25	; 0x0c
    38f0:	8b 87       	std	Y+11, r24	; 0x0b
    38f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    38f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    38f6:	8c 01       	movw	r16, r24
    38f8:	c8 01       	movw	r24, r16
    38fa:	01 97       	sbiw	r24, 0x01	; 1
    38fc:	f1 f7       	brne	.-4      	; 0x38fa <right_turn+0xe0>
    38fe:	8c 01       	movw	r16, r24
    3900:	1c 87       	std	Y+12, r17	; 0x0c
    3902:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3904:	89 85       	ldd	r24, Y+9	; 0x09
    3906:	9a 85       	ldd	r25, Y+10	; 0x0a
    3908:	01 97       	sbiw	r24, 0x01	; 1
    390a:	9a 87       	std	Y+10, r25	; 0x0a
    390c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    390e:	89 85       	ldd	r24, Y+9	; 0x09
    3910:	9a 85       	ldd	r25, Y+10	; 0x0a
    3912:	00 97       	sbiw	r24, 0x00	; 0
    3914:	51 f7       	brne	.-44     	; 0x38ea <right_turn+0xd0>
    3916:	17 c0       	rjmp	.+46     	; 0x3946 <right_turn+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3918:	6d 81       	ldd	r22, Y+5	; 0x05
    391a:	7e 81       	ldd	r23, Y+6	; 0x06
    391c:	8f 81       	ldd	r24, Y+7	; 0x07
    391e:	98 85       	ldd	r25, Y+8	; 0x08
    3920:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    3924:	dc 01       	movw	r26, r24
    3926:	cb 01       	movw	r24, r22
    3928:	9a 87       	std	Y+10, r25	; 0x0a
    392a:	89 87       	std	Y+9, r24	; 0x09
    392c:	89 85       	ldd	r24, Y+9	; 0x09
    392e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3930:	9e 87       	std	Y+14, r25	; 0x0e
    3932:	8d 87       	std	Y+13, r24	; 0x0d
    3934:	8d 85       	ldd	r24, Y+13	; 0x0d
    3936:	9e 85       	ldd	r25, Y+14	; 0x0e
    3938:	8c 01       	movw	r16, r24
    393a:	c8 01       	movw	r24, r16
    393c:	01 97       	sbiw	r24, 0x01	; 1
    393e:	f1 f7       	brne	.-4      	; 0x393c <right_turn+0x122>
    3940:	8c 01       	movw	r16, r24
    3942:	1e 87       	std	Y+14, r17	; 0x0e
    3944:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(500);
	velocity(170,170);
    3946:	8a ea       	ldi	r24, 0xAA	; 170
    3948:	6a ea       	ldi	r22, 0xAA	; 170
    394a:	0e 94 c6 11 	call	0x238c	; 0x238c <velocity>
	pathL=4;
    394e:	84 e0       	ldi	r24, 0x04	; 4
    3950:	80 93 35 02 	sts	0x0235, r24
	pathR=4;
    3954:	84 e0       	ldi	r24, 0x04	; 4
    3956:	80 93 36 02 	sts	0x0236, r24
}
    395a:	2e 96       	adiw	r28, 0x0e	; 14
    395c:	0f b6       	in	r0, 0x3f	; 63
    395e:	f8 94       	cli
    3960:	de bf       	out	0x3e, r29	; 62
    3962:	0f be       	out	0x3f, r0	; 63
    3964:	cd bf       	out	0x3d, r28	; 61
    3966:	df 91       	pop	r29
    3968:	cf 91       	pop	r28
    396a:	1f 91       	pop	r17
    396c:	0f 91       	pop	r16
    396e:	08 95       	ret

00003970 <left_turn>:

void left_turn()   //to turn 90 degree left
{
    3970:	0f 93       	push	r16
    3972:	1f 93       	push	r17
    3974:	cf 93       	push	r28
    3976:	df 93       	push	r29
    3978:	cd b7       	in	r28, 0x3d	; 61
    397a:	de b7       	in	r29, 0x3e	; 62
    397c:	2e 97       	sbiw	r28, 0x0e	; 14
    397e:	0f b6       	in	r0, 0x3f	; 63
    3980:	f8 94       	cli
    3982:	de bf       	out	0x3e, r29	; 62
    3984:	0f be       	out	0x3f, r0	; 63
    3986:	cd bf       	out	0x3d, r28	; 61
	velocity(180,180);
    3988:	84 eb       	ldi	r24, 0xB4	; 180
    398a:	64 eb       	ldi	r22, 0xB4	; 180
    398c:	0e 94 c6 11 	call	0x238c	; 0x238c <velocity>
	left_degrees(85);
    3990:	85 e5       	ldi	r24, 0x55	; 85
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	0e 94 ae 12 	call	0x255c	; 0x255c <left_degrees>
	stop_bot();
    3998:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    399c:	80 e0       	ldi	r24, 0x00	; 0
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	aa ef       	ldi	r26, 0xFA	; 250
    39a2:	b3 e4       	ldi	r27, 0x43	; 67
    39a4:	89 83       	std	Y+1, r24	; 0x01
    39a6:	9a 83       	std	Y+2, r25	; 0x02
    39a8:	ab 83       	std	Y+3, r26	; 0x03
    39aa:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    39ac:	69 81       	ldd	r22, Y+1	; 0x01
    39ae:	7a 81       	ldd	r23, Y+2	; 0x02
    39b0:	8b 81       	ldd	r24, Y+3	; 0x03
    39b2:	9c 81       	ldd	r25, Y+4	; 0x04
    39b4:	26 e6       	ldi	r18, 0x66	; 102
    39b6:	36 e6       	ldi	r19, 0x66	; 102
    39b8:	46 e6       	ldi	r20, 0x66	; 102
    39ba:	55 e4       	ldi	r21, 0x45	; 69
    39bc:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    39c0:	dc 01       	movw	r26, r24
    39c2:	cb 01       	movw	r24, r22
    39c4:	8d 83       	std	Y+5, r24	; 0x05
    39c6:	9e 83       	std	Y+6, r25	; 0x06
    39c8:	af 83       	std	Y+7, r26	; 0x07
    39ca:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    39cc:	11 e0       	ldi	r17, 0x01	; 1
    39ce:	6d 81       	ldd	r22, Y+5	; 0x05
    39d0:	7e 81       	ldd	r23, Y+6	; 0x06
    39d2:	8f 81       	ldd	r24, Y+7	; 0x07
    39d4:	98 85       	ldd	r25, Y+8	; 0x08
    39d6:	20 e0       	ldi	r18, 0x00	; 0
    39d8:	30 e0       	ldi	r19, 0x00	; 0
    39da:	40 e8       	ldi	r20, 0x80	; 128
    39dc:	5f e3       	ldi	r21, 0x3F	; 63
    39de:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    39e2:	88 23       	and	r24, r24
    39e4:	0c f0       	brlt	.+2      	; 0x39e8 <left_turn+0x78>
    39e6:	10 e0       	ldi	r17, 0x00	; 0
    39e8:	11 23       	and	r17, r17
    39ea:	29 f0       	breq	.+10     	; 0x39f6 <left_turn+0x86>
		__ticks = 1;
    39ec:	81 e0       	ldi	r24, 0x01	; 1
    39ee:	90 e0       	ldi	r25, 0x00	; 0
    39f0:	9a 87       	std	Y+10, r25	; 0x0a
    39f2:	89 87       	std	Y+9, r24	; 0x09
    39f4:	46 c0       	rjmp	.+140    	; 0x3a82 <left_turn+0x112>
	else if (__tmp > 65535)
    39f6:	11 e0       	ldi	r17, 0x01	; 1
    39f8:	6d 81       	ldd	r22, Y+5	; 0x05
    39fa:	7e 81       	ldd	r23, Y+6	; 0x06
    39fc:	8f 81       	ldd	r24, Y+7	; 0x07
    39fe:	98 85       	ldd	r25, Y+8	; 0x08
    3a00:	20 e0       	ldi	r18, 0x00	; 0
    3a02:	3f ef       	ldi	r19, 0xFF	; 255
    3a04:	4f e7       	ldi	r20, 0x7F	; 127
    3a06:	57 e4       	ldi	r21, 0x47	; 71
    3a08:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    3a0c:	18 16       	cp	r1, r24
    3a0e:	0c f0       	brlt	.+2      	; 0x3a12 <left_turn+0xa2>
    3a10:	10 e0       	ldi	r17, 0x00	; 0
    3a12:	11 23       	and	r17, r17
    3a14:	61 f1       	breq	.+88     	; 0x3a6e <left_turn+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a16:	69 81       	ldd	r22, Y+1	; 0x01
    3a18:	7a 81       	ldd	r23, Y+2	; 0x02
    3a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a1e:	20 e0       	ldi	r18, 0x00	; 0
    3a20:	30 e0       	ldi	r19, 0x00	; 0
    3a22:	40 e2       	ldi	r20, 0x20	; 32
    3a24:	51 e4       	ldi	r21, 0x41	; 65
    3a26:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    3a2a:	dc 01       	movw	r26, r24
    3a2c:	cb 01       	movw	r24, r22
    3a2e:	bc 01       	movw	r22, r24
    3a30:	cd 01       	movw	r24, r26
    3a32:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    3a36:	dc 01       	movw	r26, r24
    3a38:	cb 01       	movw	r24, r22
    3a3a:	9a 87       	std	Y+10, r25	; 0x0a
    3a3c:	89 87       	std	Y+9, r24	; 0x09
    3a3e:	12 c0       	rjmp	.+36     	; 0x3a64 <left_turn+0xf4>
    3a40:	80 e7       	ldi	r24, 0x70	; 112
    3a42:	91 e0       	ldi	r25, 0x01	; 1
    3a44:	9c 87       	std	Y+12, r25	; 0x0c
    3a46:	8b 87       	std	Y+11, r24	; 0x0b
    3a48:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a4a:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a4c:	8c 01       	movw	r16, r24
    3a4e:	c8 01       	movw	r24, r16
    3a50:	01 97       	sbiw	r24, 0x01	; 1
    3a52:	f1 f7       	brne	.-4      	; 0x3a50 <left_turn+0xe0>
    3a54:	8c 01       	movw	r16, r24
    3a56:	1c 87       	std	Y+12, r17	; 0x0c
    3a58:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a5a:	89 85       	ldd	r24, Y+9	; 0x09
    3a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a5e:	01 97       	sbiw	r24, 0x01	; 1
    3a60:	9a 87       	std	Y+10, r25	; 0x0a
    3a62:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a64:	89 85       	ldd	r24, Y+9	; 0x09
    3a66:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a68:	00 97       	sbiw	r24, 0x00	; 0
    3a6a:	51 f7       	brne	.-44     	; 0x3a40 <left_turn+0xd0>
    3a6c:	17 c0       	rjmp	.+46     	; 0x3a9c <left_turn+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a6e:	6d 81       	ldd	r22, Y+5	; 0x05
    3a70:	7e 81       	ldd	r23, Y+6	; 0x06
    3a72:	8f 81       	ldd	r24, Y+7	; 0x07
    3a74:	98 85       	ldd	r25, Y+8	; 0x08
    3a76:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    3a7a:	dc 01       	movw	r26, r24
    3a7c:	cb 01       	movw	r24, r22
    3a7e:	9a 87       	std	Y+10, r25	; 0x0a
    3a80:	89 87       	std	Y+9, r24	; 0x09
    3a82:	89 85       	ldd	r24, Y+9	; 0x09
    3a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a86:	9e 87       	std	Y+14, r25	; 0x0e
    3a88:	8d 87       	std	Y+13, r24	; 0x0d
    3a8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a8e:	8c 01       	movw	r16, r24
    3a90:	c8 01       	movw	r24, r16
    3a92:	01 97       	sbiw	r24, 0x01	; 1
    3a94:	f1 f7       	brne	.-4      	; 0x3a92 <left_turn+0x122>
    3a96:	8c 01       	movw	r16, r24
    3a98:	1e 87       	std	Y+14, r17	; 0x0e
    3a9a:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(500);
	velocity(170,170);
    3a9c:	8a ea       	ldi	r24, 0xAA	; 170
    3a9e:	6a ea       	ldi	r22, 0xAA	; 170
    3aa0:	0e 94 c6 11 	call	0x238c	; 0x238c <velocity>
	pathL=4;
    3aa4:	84 e0       	ldi	r24, 0x04	; 4
    3aa6:	80 93 35 02 	sts	0x0235, r24
	pathR=4;
    3aaa:	84 e0       	ldi	r24, 0x04	; 4
    3aac:	80 93 36 02 	sts	0x0236, r24
}
    3ab0:	2e 96       	adiw	r28, 0x0e	; 14
    3ab2:	0f b6       	in	r0, 0x3f	; 63
    3ab4:	f8 94       	cli
    3ab6:	de bf       	out	0x3e, r29	; 62
    3ab8:	0f be       	out	0x3f, r0	; 63
    3aba:	cd bf       	out	0x3d, r28	; 61
    3abc:	df 91       	pop	r29
    3abe:	cf 91       	pop	r28
    3ac0:	1f 91       	pop	r17
    3ac2:	0f 91       	pop	r16
    3ac4:	08 95       	ret

00003ac6 <move_forward>:

void move_forward()       //to move forward until node is detected.
{
    3ac6:	0f 93       	push	r16
    3ac8:	1f 93       	push	r17
    3aca:	cf 93       	push	r28
    3acc:	df 93       	push	r29
    3ace:	cd b7       	in	r28, 0x3d	; 61
    3ad0:	de b7       	in	r29, 0x3e	; 62
    3ad2:	2e 97       	sbiw	r28, 0x0e	; 14
    3ad4:	0f b6       	in	r0, 0x3f	; 63
    3ad6:	f8 94       	cli
    3ad8:	de bf       	out	0x3e, r29	; 62
    3ada:	0f be       	out	0x3f, r0	; 63
    3adc:	cd bf       	out	0x3d, r28	; 61
	sensor_refresh();
    3ade:	0e 94 03 16 	call	0x2c06	; 0x2c06 <sensor_refresh>
	while(!((L>0x17 && C>0x17 && R>0x17) || (L<0x17 && C>0x17 && R>0x17) || (L>0x17 && C>0x17 && R<0x17) || (IR3 < 0x70)))
    3ae2:	49 c0       	rjmp	.+146    	; 0x3b76 <move_forward+0xb0>
	{
		if((L<0x17 && C>0x17 && R<0x17))        // 010
    3ae4:	80 91 37 02 	lds	r24, 0x0237
    3ae8:	87 31       	cpi	r24, 0x17	; 23
    3aea:	88 f4       	brcc	.+34     	; 0x3b0e <move_forward+0x48>
    3aec:	80 91 38 02 	lds	r24, 0x0238
    3af0:	88 31       	cpi	r24, 0x18	; 24
    3af2:	68 f0       	brcs	.+26     	; 0x3b0e <move_forward+0x48>
    3af4:	80 91 39 02 	lds	r24, 0x0239
    3af8:	87 31       	cpi	r24, 0x17	; 23
    3afa:	48 f4       	brcc	.+18     	; 0x3b0e <move_forward+0x48>
		{
			forward_mm(5);
    3afc:	85 e0       	ldi	r24, 0x05	; 5
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	0e 94 4d 13 	call	0x269a	; 0x269a <forward_mm>
			velocity(170,170);
    3b04:	8a ea       	ldi	r24, 0xAA	; 170
    3b06:	6a ea       	ldi	r22, 0xAA	; 170
    3b08:	0e 94 c6 11 	call	0x238c	; 0x238c <velocity>
    3b0c:	32 c0       	rjmp	.+100    	; 0x3b72 <move_forward+0xac>
		}
		else if((L<0x17 && C<0x17 && R>0x17))   // 001 0r 011
    3b0e:	80 91 37 02 	lds	r24, 0x0237
    3b12:	87 31       	cpi	r24, 0x17	; 23
    3b14:	88 f4       	brcc	.+34     	; 0x3b38 <move_forward+0x72>
    3b16:	80 91 38 02 	lds	r24, 0x0238
    3b1a:	87 31       	cpi	r24, 0x17	; 23
    3b1c:	68 f4       	brcc	.+26     	; 0x3b38 <move_forward+0x72>
    3b1e:	80 91 39 02 	lds	r24, 0x0239
    3b22:	88 31       	cpi	r24, 0x18	; 24
    3b24:	48 f0       	brcs	.+18     	; 0x3b38 <move_forward+0x72>
		{
			right_degrees(6);  //soft right}
    3b26:	86 e0       	ldi	r24, 0x06	; 6
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	0e 94 c1 12 	call	0x2582	; 0x2582 <right_degrees>
			velocity(150,150);
    3b2e:	86 e9       	ldi	r24, 0x96	; 150
    3b30:	66 e9       	ldi	r22, 0x96	; 150
    3b32:	0e 94 c6 11 	call	0x238c	; 0x238c <velocity>
    3b36:	1d c0       	rjmp	.+58     	; 0x3b72 <move_forward+0xac>
		}
	
		else if((L>0x17 && C<0x17 && R<0x17))   // 100
    3b38:	80 91 37 02 	lds	r24, 0x0237
    3b3c:	88 31       	cpi	r24, 0x18	; 24
    3b3e:	88 f0       	brcs	.+34     	; 0x3b62 <move_forward+0x9c>
    3b40:	80 91 38 02 	lds	r24, 0x0238
    3b44:	87 31       	cpi	r24, 0x17	; 23
    3b46:	68 f4       	brcc	.+26     	; 0x3b62 <move_forward+0x9c>
    3b48:	80 91 39 02 	lds	r24, 0x0239
    3b4c:	87 31       	cpi	r24, 0x17	; 23
    3b4e:	48 f4       	brcc	.+18     	; 0x3b62 <move_forward+0x9c>
		{
			left_degrees(6);    //soft left
    3b50:	86 e0       	ldi	r24, 0x06	; 6
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	0e 94 ae 12 	call	0x255c	; 0x255c <left_degrees>
			velocity(150,150);
    3b58:	86 e9       	ldi	r24, 0x96	; 150
    3b5a:	66 e9       	ldi	r22, 0x96	; 150
    3b5c:	0e 94 c6 11 	call	0x238c	; 0x238c <velocity>
    3b60:	08 c0       	rjmp	.+16     	; 0x3b72 <move_forward+0xac>
		}
		else
		{
			forward_mm(10);
    3b62:	8a e0       	ldi	r24, 0x0A	; 10
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	0e 94 4d 13 	call	0x269a	; 0x269a <forward_mm>
			velocity(170,170);
    3b6a:	8a ea       	ldi	r24, 0xAA	; 170
    3b6c:	6a ea       	ldi	r22, 0xAA	; 170
    3b6e:	0e 94 c6 11 	call	0x238c	; 0x238c <velocity>
		}
		sensor_refresh();
    3b72:	0e 94 03 16 	call	0x2c06	; 0x2c06 <sensor_refresh>
}

void move_forward()       //to move forward until node is detected.
{
	sensor_refresh();
	while(!((L>0x17 && C>0x17 && R>0x17) || (L<0x17 && C>0x17 && R>0x17) || (L>0x17 && C>0x17 && R<0x17) || (IR3 < 0x70)))
    3b76:	80 91 37 02 	lds	r24, 0x0237
    3b7a:	88 31       	cpi	r24, 0x18	; 24
    3b7c:	40 f0       	brcs	.+16     	; 0x3b8e <move_forward+0xc8>
    3b7e:	80 91 38 02 	lds	r24, 0x0238
    3b82:	88 31       	cpi	r24, 0x18	; 24
    3b84:	20 f0       	brcs	.+8      	; 0x3b8e <move_forward+0xc8>
    3b86:	80 91 39 02 	lds	r24, 0x0239
    3b8a:	88 31       	cpi	r24, 0x18	; 24
    3b8c:	e8 f4       	brcc	.+58     	; 0x3bc8 <move_forward+0x102>
    3b8e:	80 91 37 02 	lds	r24, 0x0237
    3b92:	87 31       	cpi	r24, 0x17	; 23
    3b94:	40 f4       	brcc	.+16     	; 0x3ba6 <move_forward+0xe0>
    3b96:	80 91 38 02 	lds	r24, 0x0238
    3b9a:	88 31       	cpi	r24, 0x18	; 24
    3b9c:	20 f0       	brcs	.+8      	; 0x3ba6 <move_forward+0xe0>
    3b9e:	80 91 39 02 	lds	r24, 0x0239
    3ba2:	88 31       	cpi	r24, 0x18	; 24
    3ba4:	88 f4       	brcc	.+34     	; 0x3bc8 <move_forward+0x102>
    3ba6:	80 91 37 02 	lds	r24, 0x0237
    3baa:	88 31       	cpi	r24, 0x18	; 24
    3bac:	40 f0       	brcs	.+16     	; 0x3bbe <move_forward+0xf8>
    3bae:	80 91 38 02 	lds	r24, 0x0238
    3bb2:	88 31       	cpi	r24, 0x18	; 24
    3bb4:	20 f0       	brcs	.+8      	; 0x3bbe <move_forward+0xf8>
    3bb6:	80 91 39 02 	lds	r24, 0x0239
    3bba:	87 31       	cpi	r24, 0x17	; 23
    3bbc:	28 f0       	brcs	.+10     	; 0x3bc8 <move_forward+0x102>
    3bbe:	80 91 3c 02 	lds	r24, 0x023C
    3bc2:	80 37       	cpi	r24, 0x70	; 112
    3bc4:	08 f0       	brcs	.+2      	; 0x3bc8 <move_forward+0x102>
    3bc6:	8e cf       	rjmp	.-228    	; 0x3ae4 <move_forward+0x1e>
			forward_mm(10);
			velocity(170,170);
		}
		sensor_refresh();
	}
	if (IR3 < 0x70)
    3bc8:	80 91 3c 02 	lds	r24, 0x023C
    3bcc:	80 37       	cpi	r24, 0x70	; 112
    3bce:	08 f0       	brcs	.+2      	; 0x3bd2 <move_forward+0x10c>
    3bd0:	88 c0       	rjmp	.+272    	; 0x3ce2 <move_forward+0x21c>
	{
		stop_bot();
    3bd2:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    3bd6:	80 e0       	ldi	r24, 0x00	; 0
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	a6 e9       	ldi	r26, 0x96	; 150
    3bdc:	b3 e4       	ldi	r27, 0x43	; 67
    3bde:	89 83       	std	Y+1, r24	; 0x01
    3be0:	9a 83       	std	Y+2, r25	; 0x02
    3be2:	ab 83       	std	Y+3, r26	; 0x03
    3be4:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    3be6:	69 81       	ldd	r22, Y+1	; 0x01
    3be8:	7a 81       	ldd	r23, Y+2	; 0x02
    3bea:	8b 81       	ldd	r24, Y+3	; 0x03
    3bec:	9c 81       	ldd	r25, Y+4	; 0x04
    3bee:	26 e6       	ldi	r18, 0x66	; 102
    3bf0:	36 e6       	ldi	r19, 0x66	; 102
    3bf2:	46 e6       	ldi	r20, 0x66	; 102
    3bf4:	55 e4       	ldi	r21, 0x45	; 69
    3bf6:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    3bfa:	dc 01       	movw	r26, r24
    3bfc:	cb 01       	movw	r24, r22
    3bfe:	8d 83       	std	Y+5, r24	; 0x05
    3c00:	9e 83       	std	Y+6, r25	; 0x06
    3c02:	af 83       	std	Y+7, r26	; 0x07
    3c04:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    3c06:	11 e0       	ldi	r17, 0x01	; 1
    3c08:	6d 81       	ldd	r22, Y+5	; 0x05
    3c0a:	7e 81       	ldd	r23, Y+6	; 0x06
    3c0c:	8f 81       	ldd	r24, Y+7	; 0x07
    3c0e:	98 85       	ldd	r25, Y+8	; 0x08
    3c10:	20 e0       	ldi	r18, 0x00	; 0
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	40 e8       	ldi	r20, 0x80	; 128
    3c16:	5f e3       	ldi	r21, 0x3F	; 63
    3c18:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    3c1c:	88 23       	and	r24, r24
    3c1e:	0c f0       	brlt	.+2      	; 0x3c22 <move_forward+0x15c>
    3c20:	10 e0       	ldi	r17, 0x00	; 0
    3c22:	11 23       	and	r17, r17
    3c24:	29 f0       	breq	.+10     	; 0x3c30 <move_forward+0x16a>
		__ticks = 1;
    3c26:	81 e0       	ldi	r24, 0x01	; 1
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	9a 87       	std	Y+10, r25	; 0x0a
    3c2c:	89 87       	std	Y+9, r24	; 0x09
    3c2e:	46 c0       	rjmp	.+140    	; 0x3cbc <move_forward+0x1f6>
	else if (__tmp > 65535)
    3c30:	11 e0       	ldi	r17, 0x01	; 1
    3c32:	6d 81       	ldd	r22, Y+5	; 0x05
    3c34:	7e 81       	ldd	r23, Y+6	; 0x06
    3c36:	8f 81       	ldd	r24, Y+7	; 0x07
    3c38:	98 85       	ldd	r25, Y+8	; 0x08
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	3f ef       	ldi	r19, 0xFF	; 255
    3c3e:	4f e7       	ldi	r20, 0x7F	; 127
    3c40:	57 e4       	ldi	r21, 0x47	; 71
    3c42:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    3c46:	18 16       	cp	r1, r24
    3c48:	0c f0       	brlt	.+2      	; 0x3c4c <move_forward+0x186>
    3c4a:	10 e0       	ldi	r17, 0x00	; 0
    3c4c:	11 23       	and	r17, r17
    3c4e:	61 f1       	breq	.+88     	; 0x3ca8 <move_forward+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c50:	69 81       	ldd	r22, Y+1	; 0x01
    3c52:	7a 81       	ldd	r23, Y+2	; 0x02
    3c54:	8b 81       	ldd	r24, Y+3	; 0x03
    3c56:	9c 81       	ldd	r25, Y+4	; 0x04
    3c58:	20 e0       	ldi	r18, 0x00	; 0
    3c5a:	30 e0       	ldi	r19, 0x00	; 0
    3c5c:	40 e2       	ldi	r20, 0x20	; 32
    3c5e:	51 e4       	ldi	r21, 0x41	; 65
    3c60:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    3c64:	dc 01       	movw	r26, r24
    3c66:	cb 01       	movw	r24, r22
    3c68:	bc 01       	movw	r22, r24
    3c6a:	cd 01       	movw	r24, r26
    3c6c:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    3c70:	dc 01       	movw	r26, r24
    3c72:	cb 01       	movw	r24, r22
    3c74:	9a 87       	std	Y+10, r25	; 0x0a
    3c76:	89 87       	std	Y+9, r24	; 0x09
    3c78:	12 c0       	rjmp	.+36     	; 0x3c9e <move_forward+0x1d8>
    3c7a:	80 e7       	ldi	r24, 0x70	; 112
    3c7c:	91 e0       	ldi	r25, 0x01	; 1
    3c7e:	9c 87       	std	Y+12, r25	; 0x0c
    3c80:	8b 87       	std	Y+11, r24	; 0x0b
    3c82:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c84:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c86:	8c 01       	movw	r16, r24
    3c88:	c8 01       	movw	r24, r16
    3c8a:	01 97       	sbiw	r24, 0x01	; 1
    3c8c:	f1 f7       	brne	.-4      	; 0x3c8a <move_forward+0x1c4>
    3c8e:	8c 01       	movw	r16, r24
    3c90:	1c 87       	std	Y+12, r17	; 0x0c
    3c92:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c94:	89 85       	ldd	r24, Y+9	; 0x09
    3c96:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c98:	01 97       	sbiw	r24, 0x01	; 1
    3c9a:	9a 87       	std	Y+10, r25	; 0x0a
    3c9c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c9e:	89 85       	ldd	r24, Y+9	; 0x09
    3ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ca2:	00 97       	sbiw	r24, 0x00	; 0
    3ca4:	51 f7       	brne	.-44     	; 0x3c7a <move_forward+0x1b4>
    3ca6:	17 c0       	rjmp	.+46     	; 0x3cd6 <move_forward+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ca8:	6d 81       	ldd	r22, Y+5	; 0x05
    3caa:	7e 81       	ldd	r23, Y+6	; 0x06
    3cac:	8f 81       	ldd	r24, Y+7	; 0x07
    3cae:	98 85       	ldd	r25, Y+8	; 0x08
    3cb0:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    3cb4:	dc 01       	movw	r26, r24
    3cb6:	cb 01       	movw	r24, r22
    3cb8:	9a 87       	std	Y+10, r25	; 0x0a
    3cba:	89 87       	std	Y+9, r24	; 0x09
    3cbc:	89 85       	ldd	r24, Y+9	; 0x09
    3cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc0:	9e 87       	std	Y+14, r25	; 0x0e
    3cc2:	8d 87       	std	Y+13, r24	; 0x0d
    3cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cc8:	8c 01       	movw	r16, r24
    3cca:	c8 01       	movw	r24, r16
    3ccc:	01 97       	sbiw	r24, 0x01	; 1
    3cce:	f1 f7       	brne	.-4      	; 0x3ccc <move_forward+0x206>
    3cd0:	8c 01       	movw	r16, r24
    3cd2:	1e 87       	std	Y+14, r17	; 0x0e
    3cd4:	0d 87       	std	Y+13, r16	; 0x0d
		_delay_ms(300);
		obstacle_found='1';
    3cd6:	81 e3       	ldi	r24, 0x31	; 49
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
    3cda:	90 93 0b 02 	sts	0x020B, r25
    3cde:	80 93 0a 02 	sts	0x020A, r24
	}
	buzzer_beep();	
    3ce2:	0e 94 55 10 	call	0x20aa	; 0x20aa <buzzer_beep>
}
    3ce6:	2e 96       	adiw	r28, 0x0e	; 14
    3ce8:	0f b6       	in	r0, 0x3f	; 63
    3cea:	f8 94       	cli
    3cec:	de bf       	out	0x3e, r29	; 62
    3cee:	0f be       	out	0x3f, r0	; 63
    3cf0:	cd bf       	out	0x3d, r28	; 61
    3cf2:	df 91       	pop	r29
    3cf4:	cf 91       	pop	r28
    3cf6:	1f 91       	pop	r17
    3cf8:	0f 91       	pop	r16
    3cfa:	08 95       	ret

00003cfc <direction_calculator>:

unsigned char direction_calculator()      //to calculate the direction in the path previous to current node
{
    3cfc:	cf 93       	push	r28
    3cfe:	df 93       	push	r29
    3d00:	cd b7       	in	r28, 0x3d	; 61
    3d02:	de b7       	in	r29, 0x3e	; 62
	rmnder=node_count % 6;
    3d04:	80 91 00 02 	lds	r24, 0x0200
    3d08:	90 91 01 02 	lds	r25, 0x0201
    3d0c:	26 e0       	ldi	r18, 0x06	; 6
    3d0e:	30 e0       	ldi	r19, 0x00	; 0
    3d10:	b9 01       	movw	r22, r18
    3d12:	0e 94 e5 49 	call	0x93ca	; 0x93ca <__udivmodhi4>
    3d16:	90 93 31 02 	sts	0x0231, r25
    3d1a:	80 93 30 02 	sts	0x0230, r24
	if (run == 1)
    3d1e:	80 91 27 02 	lds	r24, 0x0227
    3d22:	81 30       	cpi	r24, 0x01	; 1
    3d24:	09 f0       	breq	.+2      	; 0x3d28 <direction_calculator+0x2c>
    3d26:	3f c0       	rjmp	.+126    	; 0x3da6 <direction_calculator+0xaa>
	{
		if(node_count == 0)
    3d28:	80 91 00 02 	lds	r24, 0x0200
    3d2c:	90 91 01 02 	lds	r25, 0x0201
    3d30:	00 97       	sbiw	r24, 0x00	; 0
    3d32:	11 f4       	brne	.+4      	; 0x3d38 <direction_calculator+0x3c>
		{
			return 'N';
    3d34:	8e e4       	ldi	r24, 0x4E	; 78
    3d36:	7b c0       	rjmp	.+246    	; 0x3e2e <direction_calculator+0x132>
		}
		else if(rmnder == 0)
    3d38:	80 91 30 02 	lds	r24, 0x0230
    3d3c:	90 91 31 02 	lds	r25, 0x0231
    3d40:	00 97       	sbiw	r24, 0x00	; 0
    3d42:	11 f4       	brne	.+4      	; 0x3d48 <direction_calculator+0x4c>
		{
			return 'E';
    3d44:	85 e4       	ldi	r24, 0x45	; 69
    3d46:	73 c0       	rjmp	.+230    	; 0x3e2e <direction_calculator+0x132>
		}
		else if((line_no == 1) || (line_no == 3) || (line_no == 5))
    3d48:	80 91 02 02 	lds	r24, 0x0202
    3d4c:	90 91 03 02 	lds	r25, 0x0203
    3d50:	81 30       	cpi	r24, 0x01	; 1
    3d52:	91 05       	cpc	r25, r1
    3d54:	71 f0       	breq	.+28     	; 0x3d72 <direction_calculator+0x76>
    3d56:	80 91 02 02 	lds	r24, 0x0202
    3d5a:	90 91 03 02 	lds	r25, 0x0203
    3d5e:	83 30       	cpi	r24, 0x03	; 3
    3d60:	91 05       	cpc	r25, r1
    3d62:	39 f0       	breq	.+14     	; 0x3d72 <direction_calculator+0x76>
    3d64:	80 91 02 02 	lds	r24, 0x0202
    3d68:	90 91 03 02 	lds	r25, 0x0203
    3d6c:	85 30       	cpi	r24, 0x05	; 5
    3d6e:	91 05       	cpc	r25, r1
    3d70:	11 f4       	brne	.+4      	; 0x3d76 <direction_calculator+0x7a>
		{
			return 'N';
    3d72:	8e e4       	ldi	r24, 0x4E	; 78
    3d74:	5c c0       	rjmp	.+184    	; 0x3e2e <direction_calculator+0x132>
		}
		else if((line_no == 2) || (line_no == 4) || (line_no == 6))
    3d76:	80 91 02 02 	lds	r24, 0x0202
    3d7a:	90 91 03 02 	lds	r25, 0x0203
    3d7e:	82 30       	cpi	r24, 0x02	; 2
    3d80:	91 05       	cpc	r25, r1
    3d82:	79 f0       	breq	.+30     	; 0x3da2 <direction_calculator+0xa6>
    3d84:	80 91 02 02 	lds	r24, 0x0202
    3d88:	90 91 03 02 	lds	r25, 0x0203
    3d8c:	84 30       	cpi	r24, 0x04	; 4
    3d8e:	91 05       	cpc	r25, r1
    3d90:	41 f0       	breq	.+16     	; 0x3da2 <direction_calculator+0xa6>
    3d92:	80 91 02 02 	lds	r24, 0x0202
    3d96:	90 91 03 02 	lds	r25, 0x0203
    3d9a:	86 30       	cpi	r24, 0x06	; 6
    3d9c:	91 05       	cpc	r25, r1
    3d9e:	09 f0       	breq	.+2      	; 0x3da2 <direction_calculator+0xa6>
    3da0:	45 c0       	rjmp	.+138    	; 0x3e2c <direction_calculator+0x130>
		{
			return 'S';
    3da2:	83 e5       	ldi	r24, 0x53	; 83
    3da4:	44 c0       	rjmp	.+136    	; 0x3e2e <direction_calculator+0x132>
		}
	}
	else if(run == 2)
    3da6:	80 91 27 02 	lds	r24, 0x0227
    3daa:	82 30       	cpi	r24, 0x02	; 2
    3dac:	09 f0       	breq	.+2      	; 0x3db0 <direction_calculator+0xb4>
    3dae:	3e c0       	rjmp	.+124    	; 0x3e2c <direction_calculator+0x130>
	{
		if(node_count == 0)
    3db0:	80 91 00 02 	lds	r24, 0x0200
    3db4:	90 91 01 02 	lds	r25, 0x0201
    3db8:	00 97       	sbiw	r24, 0x00	; 0
    3dba:	11 f4       	brne	.+4      	; 0x3dc0 <direction_calculator+0xc4>
		{
			return 'W';
    3dbc:	87 e5       	ldi	r24, 0x57	; 87
    3dbe:	37 c0       	rjmp	.+110    	; 0x3e2e <direction_calculator+0x132>
		}
		if(rmnder == 0)
    3dc0:	80 91 30 02 	lds	r24, 0x0230
    3dc4:	90 91 31 02 	lds	r25, 0x0231
    3dc8:	00 97       	sbiw	r24, 0x00	; 0
    3dca:	11 f4       	brne	.+4      	; 0x3dd0 <direction_calculator+0xd4>
		{
			return 'N';
    3dcc:	8e e4       	ldi	r24, 0x4E	; 78
    3dce:	2f c0       	rjmp	.+94     	; 0x3e2e <direction_calculator+0x132>
		}
		else if((line_no == 1) || (line_no == 3) || (line_no == 5))
    3dd0:	80 91 02 02 	lds	r24, 0x0202
    3dd4:	90 91 03 02 	lds	r25, 0x0203
    3dd8:	81 30       	cpi	r24, 0x01	; 1
    3dda:	91 05       	cpc	r25, r1
    3ddc:	71 f0       	breq	.+28     	; 0x3dfa <direction_calculator+0xfe>
    3dde:	80 91 02 02 	lds	r24, 0x0202
    3de2:	90 91 03 02 	lds	r25, 0x0203
    3de6:	83 30       	cpi	r24, 0x03	; 3
    3de8:	91 05       	cpc	r25, r1
    3dea:	39 f0       	breq	.+14     	; 0x3dfa <direction_calculator+0xfe>
    3dec:	80 91 02 02 	lds	r24, 0x0202
    3df0:	90 91 03 02 	lds	r25, 0x0203
    3df4:	85 30       	cpi	r24, 0x05	; 5
    3df6:	91 05       	cpc	r25, r1
    3df8:	11 f4       	brne	.+4      	; 0x3dfe <direction_calculator+0x102>
		{
			return 'W';
    3dfa:	87 e5       	ldi	r24, 0x57	; 87
    3dfc:	18 c0       	rjmp	.+48     	; 0x3e2e <direction_calculator+0x132>
		}
		else if((line_no == 2) || (line_no == 4) || (line_no == 6))
    3dfe:	80 91 02 02 	lds	r24, 0x0202
    3e02:	90 91 03 02 	lds	r25, 0x0203
    3e06:	82 30       	cpi	r24, 0x02	; 2
    3e08:	91 05       	cpc	r25, r1
    3e0a:	71 f0       	breq	.+28     	; 0x3e28 <direction_calculator+0x12c>
    3e0c:	80 91 02 02 	lds	r24, 0x0202
    3e10:	90 91 03 02 	lds	r25, 0x0203
    3e14:	84 30       	cpi	r24, 0x04	; 4
    3e16:	91 05       	cpc	r25, r1
    3e18:	39 f0       	breq	.+14     	; 0x3e28 <direction_calculator+0x12c>
    3e1a:	80 91 02 02 	lds	r24, 0x0202
    3e1e:	90 91 03 02 	lds	r25, 0x0203
    3e22:	86 30       	cpi	r24, 0x06	; 6
    3e24:	91 05       	cpc	r25, r1
    3e26:	11 f4       	brne	.+4      	; 0x3e2c <direction_calculator+0x130>
		{
			return 'E';
    3e28:	85 e4       	ldi	r24, 0x45	; 69
    3e2a:	01 c0       	rjmp	.+2      	; 0x3e2e <direction_calculator+0x132>
    3e2c:	00 c0       	rjmp	.+0      	; 0x3e2e <direction_calculator+0x132>
		}
	}
}
    3e2e:	df 91       	pop	r29
    3e30:	cf 91       	pop	r28
    3e32:	08 95       	ret

00003e34 <obstacle_update>:

void obstacle_update()                     //to update the obstacle count
{
    3e34:	cf 93       	push	r28
    3e36:	df 93       	push	r29
    3e38:	cd b7       	in	r28, 0x3d	; 61
    3e3a:	de b7       	in	r29, 0x3e	; 62
	rmnder=node_count % 6;
    3e3c:	80 91 00 02 	lds	r24, 0x0200
    3e40:	90 91 01 02 	lds	r25, 0x0201
    3e44:	26 e0       	ldi	r18, 0x06	; 6
    3e46:	30 e0       	ldi	r19, 0x00	; 0
    3e48:	b9 01       	movw	r22, r18
    3e4a:	0e 94 e5 49 	call	0x93ca	; 0x93ca <__udivmodhi4>
    3e4e:	90 93 31 02 	sts	0x0231, r25
    3e52:	80 93 30 02 	sts	0x0230, r24
	if((line_no == 3) || (line_no == 5))
    3e56:	80 91 02 02 	lds	r24, 0x0202
    3e5a:	90 91 03 02 	lds	r25, 0x0203
    3e5e:	83 30       	cpi	r24, 0x03	; 3
    3e60:	91 05       	cpc	r25, r1
    3e62:	39 f0       	breq	.+14     	; 0x3e72 <obstacle_update+0x3e>
    3e64:	80 91 02 02 	lds	r24, 0x0202
    3e68:	90 91 03 02 	lds	r25, 0x0203
    3e6c:	85 30       	cpi	r24, 0x05	; 5
    3e6e:	91 05       	cpc	r25, r1
    3e70:	b1 f5       	brne	.+108    	; 0x3ede <obstacle_update+0xaa>
	{
		obstacle_array[line_no - 1][rmnder - 1]=1;
    3e72:	80 91 02 02 	lds	r24, 0x0202
    3e76:	90 91 03 02 	lds	r25, 0x0203
    3e7a:	9c 01       	movw	r18, r24
    3e7c:	21 50       	subi	r18, 0x01	; 1
    3e7e:	30 40       	sbci	r19, 0x00	; 0
    3e80:	80 91 30 02 	lds	r24, 0x0230
    3e84:	90 91 31 02 	lds	r25, 0x0231
    3e88:	ac 01       	movw	r20, r24
    3e8a:	41 50       	subi	r20, 0x01	; 1
    3e8c:	50 40       	sbci	r21, 0x00	; 0
    3e8e:	c9 01       	movw	r24, r18
    3e90:	88 0f       	add	r24, r24
    3e92:	99 1f       	adc	r25, r25
    3e94:	88 0f       	add	r24, r24
    3e96:	99 1f       	adc	r25, r25
    3e98:	82 0f       	add	r24, r18
    3e9a:	93 1f       	adc	r25, r19
    3e9c:	84 0f       	add	r24, r20
    3e9e:	95 1f       	adc	r25, r21
    3ea0:	89 59       	subi	r24, 0x99	; 153
    3ea2:	9d 4f       	sbci	r25, 0xFD	; 253
    3ea4:	21 e0       	ldi	r18, 0x01	; 1
    3ea6:	fc 01       	movw	r30, r24
    3ea8:	20 83       	st	Z, r18
		obstacle_array[line_no - 1][rmnder]=1;
    3eaa:	80 91 02 02 	lds	r24, 0x0202
    3eae:	90 91 03 02 	lds	r25, 0x0203
    3eb2:	9c 01       	movw	r18, r24
    3eb4:	21 50       	subi	r18, 0x01	; 1
    3eb6:	30 40       	sbci	r19, 0x00	; 0
    3eb8:	40 91 30 02 	lds	r20, 0x0230
    3ebc:	50 91 31 02 	lds	r21, 0x0231
    3ec0:	c9 01       	movw	r24, r18
    3ec2:	88 0f       	add	r24, r24
    3ec4:	99 1f       	adc	r25, r25
    3ec6:	88 0f       	add	r24, r24
    3ec8:	99 1f       	adc	r25, r25
    3eca:	82 0f       	add	r24, r18
    3ecc:	93 1f       	adc	r25, r19
    3ece:	84 0f       	add	r24, r20
    3ed0:	95 1f       	adc	r25, r21
    3ed2:	89 59       	subi	r24, 0x99	; 153
    3ed4:	9d 4f       	sbci	r25, 0xFD	; 253
    3ed6:	21 e0       	ldi	r18, 0x01	; 1
    3ed8:	fc 01       	movw	r30, r24
    3eda:	20 83       	st	Z, r18
    3edc:	48 c0       	rjmp	.+144    	; 0x3f6e <obstacle_update+0x13a>
	}
	else if((line_no == 2) || (line_no == 4))
    3ede:	80 91 02 02 	lds	r24, 0x0202
    3ee2:	90 91 03 02 	lds	r25, 0x0203
    3ee6:	82 30       	cpi	r24, 0x02	; 2
    3ee8:	91 05       	cpc	r25, r1
    3eea:	39 f0       	breq	.+14     	; 0x3efa <obstacle_update+0xc6>
    3eec:	80 91 02 02 	lds	r24, 0x0202
    3ef0:	90 91 03 02 	lds	r25, 0x0203
    3ef4:	84 30       	cpi	r24, 0x04	; 4
    3ef6:	91 05       	cpc	r25, r1
    3ef8:	d1 f5       	brne	.+116    	; 0x3f6e <obstacle_update+0x13a>
	{
		obstacle_array[line_no - 1][5 - rmnder]=1;
    3efa:	80 91 02 02 	lds	r24, 0x0202
    3efe:	90 91 03 02 	lds	r25, 0x0203
    3f02:	9c 01       	movw	r18, r24
    3f04:	21 50       	subi	r18, 0x01	; 1
    3f06:	30 40       	sbci	r19, 0x00	; 0
    3f08:	80 91 30 02 	lds	r24, 0x0230
    3f0c:	90 91 31 02 	lds	r25, 0x0231
    3f10:	45 e0       	ldi	r20, 0x05	; 5
    3f12:	50 e0       	ldi	r21, 0x00	; 0
    3f14:	48 1b       	sub	r20, r24
    3f16:	59 0b       	sbc	r21, r25
    3f18:	c9 01       	movw	r24, r18
    3f1a:	88 0f       	add	r24, r24
    3f1c:	99 1f       	adc	r25, r25
    3f1e:	88 0f       	add	r24, r24
    3f20:	99 1f       	adc	r25, r25
    3f22:	82 0f       	add	r24, r18
    3f24:	93 1f       	adc	r25, r19
    3f26:	84 0f       	add	r24, r20
    3f28:	95 1f       	adc	r25, r21
    3f2a:	89 59       	subi	r24, 0x99	; 153
    3f2c:	9d 4f       	sbci	r25, 0xFD	; 253
    3f2e:	21 e0       	ldi	r18, 0x01	; 1
    3f30:	fc 01       	movw	r30, r24
    3f32:	20 83       	st	Z, r18
		obstacle_array[line_no - 1][4 - rmnder]=1;
    3f34:	80 91 02 02 	lds	r24, 0x0202
    3f38:	90 91 03 02 	lds	r25, 0x0203
    3f3c:	9c 01       	movw	r18, r24
    3f3e:	21 50       	subi	r18, 0x01	; 1
    3f40:	30 40       	sbci	r19, 0x00	; 0
    3f42:	80 91 30 02 	lds	r24, 0x0230
    3f46:	90 91 31 02 	lds	r25, 0x0231
    3f4a:	44 e0       	ldi	r20, 0x04	; 4
    3f4c:	50 e0       	ldi	r21, 0x00	; 0
    3f4e:	48 1b       	sub	r20, r24
    3f50:	59 0b       	sbc	r21, r25
    3f52:	c9 01       	movw	r24, r18
    3f54:	88 0f       	add	r24, r24
    3f56:	99 1f       	adc	r25, r25
    3f58:	88 0f       	add	r24, r24
    3f5a:	99 1f       	adc	r25, r25
    3f5c:	82 0f       	add	r24, r18
    3f5e:	93 1f       	adc	r25, r19
    3f60:	84 0f       	add	r24, r20
    3f62:	95 1f       	adc	r25, r21
    3f64:	89 59       	subi	r24, 0x99	; 153
    3f66:	9d 4f       	sbci	r25, 0xFD	; 253
    3f68:	21 e0       	ldi	r18, 0x01	; 1
    3f6a:	fc 01       	movw	r30, r24
    3f6c:	20 83       	st	Z, r18
	}
}
    3f6e:	df 91       	pop	r29
    3f70:	cf 91       	pop	r28
    3f72:	08 95       	ret

00003f74 <obstacle_check>:

unsigned char obstacle_check()
{
    3f74:	cf 93       	push	r28
    3f76:	df 93       	push	r29
    3f78:	cd b7       	in	r28, 0x3d	; 61
    3f7a:	de b7       	in	r29, 0x3e	; 62
	rmnder=node_count % 6;
    3f7c:	80 91 00 02 	lds	r24, 0x0200
    3f80:	90 91 01 02 	lds	r25, 0x0201
    3f84:	26 e0       	ldi	r18, 0x06	; 6
    3f86:	30 e0       	ldi	r19, 0x00	; 0
    3f88:	b9 01       	movw	r22, r18
    3f8a:	0e 94 e5 49 	call	0x93ca	; 0x93ca <__udivmodhi4>
    3f8e:	90 93 31 02 	sts	0x0231, r25
    3f92:	80 93 30 02 	sts	0x0230, r24
	if((line_no == 3) || (line_no == 5))
    3f96:	80 91 02 02 	lds	r24, 0x0202
    3f9a:	90 91 03 02 	lds	r25, 0x0203
    3f9e:	83 30       	cpi	r24, 0x03	; 3
    3fa0:	91 05       	cpc	r25, r1
    3fa2:	39 f0       	breq	.+14     	; 0x3fb2 <obstacle_check+0x3e>
    3fa4:	80 91 02 02 	lds	r24, 0x0202
    3fa8:	90 91 03 02 	lds	r25, 0x0203
    3fac:	85 30       	cpi	r24, 0x05	; 5
    3fae:	91 05       	cpc	r25, r1
    3fb0:	09 f5       	brne	.+66     	; 0x3ff4 <obstacle_check+0x80>
	{
		if(obstacle_array[line_no - 2][rmnder - 1] == 1)
    3fb2:	80 91 02 02 	lds	r24, 0x0202
    3fb6:	90 91 03 02 	lds	r25, 0x0203
    3fba:	9c 01       	movw	r18, r24
    3fbc:	22 50       	subi	r18, 0x02	; 2
    3fbe:	30 40       	sbci	r19, 0x00	; 0
    3fc0:	80 91 30 02 	lds	r24, 0x0230
    3fc4:	90 91 31 02 	lds	r25, 0x0231
    3fc8:	ac 01       	movw	r20, r24
    3fca:	41 50       	subi	r20, 0x01	; 1
    3fcc:	50 40       	sbci	r21, 0x00	; 0
    3fce:	c9 01       	movw	r24, r18
    3fd0:	88 0f       	add	r24, r24
    3fd2:	99 1f       	adc	r25, r25
    3fd4:	88 0f       	add	r24, r24
    3fd6:	99 1f       	adc	r25, r25
    3fd8:	82 0f       	add	r24, r18
    3fda:	93 1f       	adc	r25, r19
    3fdc:	84 0f       	add	r24, r20
    3fde:	95 1f       	adc	r25, r21
    3fe0:	89 59       	subi	r24, 0x99	; 153
    3fe2:	9d 4f       	sbci	r25, 0xFD	; 253
    3fe4:	fc 01       	movw	r30, r24
    3fe6:	80 81       	ld	r24, Z
    3fe8:	81 30       	cpi	r24, 0x01	; 1
    3fea:	11 f4       	brne	.+4      	; 0x3ff0 <obstacle_check+0x7c>
		{
			return 1;
    3fec:	81 e0       	ldi	r24, 0x01	; 1
    3fee:	3a c0       	rjmp	.+116    	; 0x4064 <obstacle_check+0xf0>
		}
		else
		{
			return 0;
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
    3ff2:	38 c0       	rjmp	.+112    	; 0x4064 <obstacle_check+0xf0>
		}
	}
	else if((line_no == 2) || (line_no == 4) || (line_no == 6))
    3ff4:	80 91 02 02 	lds	r24, 0x0202
    3ff8:	90 91 03 02 	lds	r25, 0x0203
    3ffc:	82 30       	cpi	r24, 0x02	; 2
    3ffe:	91 05       	cpc	r25, r1
    4000:	71 f0       	breq	.+28     	; 0x401e <obstacle_check+0xaa>
    4002:	80 91 02 02 	lds	r24, 0x0202
    4006:	90 91 03 02 	lds	r25, 0x0203
    400a:	84 30       	cpi	r24, 0x04	; 4
    400c:	91 05       	cpc	r25, r1
    400e:	39 f0       	breq	.+14     	; 0x401e <obstacle_check+0xaa>
    4010:	80 91 02 02 	lds	r24, 0x0202
    4014:	90 91 03 02 	lds	r25, 0x0203
    4018:	86 30       	cpi	r24, 0x06	; 6
    401a:	91 05       	cpc	r25, r1
    401c:	11 f5       	brne	.+68     	; 0x4062 <obstacle_check+0xee>
	{
		if(obstacle_array[line_no - 2][5 - rmnder] == 1)
    401e:	80 91 02 02 	lds	r24, 0x0202
    4022:	90 91 03 02 	lds	r25, 0x0203
    4026:	9c 01       	movw	r18, r24
    4028:	22 50       	subi	r18, 0x02	; 2
    402a:	30 40       	sbci	r19, 0x00	; 0
    402c:	80 91 30 02 	lds	r24, 0x0230
    4030:	90 91 31 02 	lds	r25, 0x0231
    4034:	45 e0       	ldi	r20, 0x05	; 5
    4036:	50 e0       	ldi	r21, 0x00	; 0
    4038:	48 1b       	sub	r20, r24
    403a:	59 0b       	sbc	r21, r25
    403c:	c9 01       	movw	r24, r18
    403e:	88 0f       	add	r24, r24
    4040:	99 1f       	adc	r25, r25
    4042:	88 0f       	add	r24, r24
    4044:	99 1f       	adc	r25, r25
    4046:	82 0f       	add	r24, r18
    4048:	93 1f       	adc	r25, r19
    404a:	84 0f       	add	r24, r20
    404c:	95 1f       	adc	r25, r21
    404e:	89 59       	subi	r24, 0x99	; 153
    4050:	9d 4f       	sbci	r25, 0xFD	; 253
    4052:	fc 01       	movw	r30, r24
    4054:	80 81       	ld	r24, Z
    4056:	81 30       	cpi	r24, 0x01	; 1
    4058:	11 f4       	brne	.+4      	; 0x405e <obstacle_check+0xea>
		{
			return 1;
    405a:	81 e0       	ldi	r24, 0x01	; 1
    405c:	03 c0       	rjmp	.+6      	; 0x4064 <obstacle_check+0xf0>
		}
		else
		{
			return 0;
    405e:	80 e0       	ldi	r24, 0x00	; 0
    4060:	01 c0       	rjmp	.+2      	; 0x4064 <obstacle_check+0xf0>
    4062:	00 c0       	rjmp	.+0      	; 0x4064 <obstacle_check+0xf0>
		}
	}
}
    4064:	df 91       	pop	r29
    4066:	cf 91       	pop	r28
    4068:	08 95       	ret

0000406a <default_path>:

void default_path()                //default path chosen by bot when obstacle is detected
{
    406a:	0f 93       	push	r16
    406c:	1f 93       	push	r17
    406e:	cf 93       	push	r28
    4070:	df 93       	push	r29
    4072:	cd b7       	in	r28, 0x3d	; 61
    4074:	de b7       	in	r29, 0x3e	; 62
    4076:	cc 5f       	subi	r28, 0xFC	; 252
    4078:	d0 40       	sbci	r29, 0x00	; 0
    407a:	0f b6       	in	r0, 0x3f	; 63
    407c:	f8 94       	cli
    407e:	de bf       	out	0x3e, r29	; 62
    4080:	0f be       	out	0x3f, r0	; 63
    4082:	cd bf       	out	0x3d, r28	; 61
	velocity(200,200);
    4084:	88 ec       	ldi	r24, 0xC8	; 200
    4086:	68 ec       	ldi	r22, 0xC8	; 200
    4088:	0e 94 c6 11 	call	0x238c	; 0x238c <velocity>
	
	if(rmnder == 1)
    408c:	80 91 30 02 	lds	r24, 0x0230
    4090:	90 91 31 02 	lds	r25, 0x0231
    4094:	81 30       	cpi	r24, 0x01	; 1
    4096:	91 05       	cpc	r25, r1
    4098:	09 f0       	breq	.+2      	; 0x409c <default_path+0x32>
    409a:	90 c1       	rjmp	.+800    	; 0x43bc <default_path+0x352>
	{
		back_mm(40);
    409c:	88 e2       	ldi	r24, 0x28	; 40
    409e:	90 e0       	ldi	r25, 0x00	; 0
    40a0:	0e 94 60 13 	call	0x26c0	; 0x26c0 <back_mm>
		stop_bot();
    40a4:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    40a8:	80 e0       	ldi	r24, 0x00	; 0
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	a6 e9       	ldi	r26, 0x96	; 150
    40ae:	b3 e4       	ldi	r27, 0x43	; 67
    40b0:	89 83       	std	Y+1, r24	; 0x01
    40b2:	9a 83       	std	Y+2, r25	; 0x02
    40b4:	ab 83       	std	Y+3, r26	; 0x03
    40b6:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    40b8:	69 81       	ldd	r22, Y+1	; 0x01
    40ba:	7a 81       	ldd	r23, Y+2	; 0x02
    40bc:	8b 81       	ldd	r24, Y+3	; 0x03
    40be:	9c 81       	ldd	r25, Y+4	; 0x04
    40c0:	26 e6       	ldi	r18, 0x66	; 102
    40c2:	36 e6       	ldi	r19, 0x66	; 102
    40c4:	46 e6       	ldi	r20, 0x66	; 102
    40c6:	55 e4       	ldi	r21, 0x45	; 69
    40c8:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    40cc:	dc 01       	movw	r26, r24
    40ce:	cb 01       	movw	r24, r22
    40d0:	8d 83       	std	Y+5, r24	; 0x05
    40d2:	9e 83       	std	Y+6, r25	; 0x06
    40d4:	af 83       	std	Y+7, r26	; 0x07
    40d6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    40d8:	11 e0       	ldi	r17, 0x01	; 1
    40da:	6d 81       	ldd	r22, Y+5	; 0x05
    40dc:	7e 81       	ldd	r23, Y+6	; 0x06
    40de:	8f 81       	ldd	r24, Y+7	; 0x07
    40e0:	98 85       	ldd	r25, Y+8	; 0x08
    40e2:	20 e0       	ldi	r18, 0x00	; 0
    40e4:	30 e0       	ldi	r19, 0x00	; 0
    40e6:	40 e8       	ldi	r20, 0x80	; 128
    40e8:	5f e3       	ldi	r21, 0x3F	; 63
    40ea:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    40ee:	88 23       	and	r24, r24
    40f0:	0c f0       	brlt	.+2      	; 0x40f4 <default_path+0x8a>
    40f2:	10 e0       	ldi	r17, 0x00	; 0
    40f4:	11 23       	and	r17, r17
    40f6:	29 f0       	breq	.+10     	; 0x4102 <default_path+0x98>
		__ticks = 1;
    40f8:	81 e0       	ldi	r24, 0x01	; 1
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	9a 87       	std	Y+10, r25	; 0x0a
    40fe:	89 87       	std	Y+9, r24	; 0x09
    4100:	46 c0       	rjmp	.+140    	; 0x418e <default_path+0x124>
	else if (__tmp > 65535)
    4102:	11 e0       	ldi	r17, 0x01	; 1
    4104:	6d 81       	ldd	r22, Y+5	; 0x05
    4106:	7e 81       	ldd	r23, Y+6	; 0x06
    4108:	8f 81       	ldd	r24, Y+7	; 0x07
    410a:	98 85       	ldd	r25, Y+8	; 0x08
    410c:	20 e0       	ldi	r18, 0x00	; 0
    410e:	3f ef       	ldi	r19, 0xFF	; 255
    4110:	4f e7       	ldi	r20, 0x7F	; 127
    4112:	57 e4       	ldi	r21, 0x47	; 71
    4114:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    4118:	18 16       	cp	r1, r24
    411a:	0c f0       	brlt	.+2      	; 0x411e <default_path+0xb4>
    411c:	10 e0       	ldi	r17, 0x00	; 0
    411e:	11 23       	and	r17, r17
    4120:	61 f1       	breq	.+88     	; 0x417a <default_path+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4122:	69 81       	ldd	r22, Y+1	; 0x01
    4124:	7a 81       	ldd	r23, Y+2	; 0x02
    4126:	8b 81       	ldd	r24, Y+3	; 0x03
    4128:	9c 81       	ldd	r25, Y+4	; 0x04
    412a:	20 e0       	ldi	r18, 0x00	; 0
    412c:	30 e0       	ldi	r19, 0x00	; 0
    412e:	40 e2       	ldi	r20, 0x20	; 32
    4130:	51 e4       	ldi	r21, 0x41	; 65
    4132:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    4136:	dc 01       	movw	r26, r24
    4138:	cb 01       	movw	r24, r22
    413a:	bc 01       	movw	r22, r24
    413c:	cd 01       	movw	r24, r26
    413e:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    4142:	dc 01       	movw	r26, r24
    4144:	cb 01       	movw	r24, r22
    4146:	9a 87       	std	Y+10, r25	; 0x0a
    4148:	89 87       	std	Y+9, r24	; 0x09
    414a:	12 c0       	rjmp	.+36     	; 0x4170 <default_path+0x106>
    414c:	80 e7       	ldi	r24, 0x70	; 112
    414e:	91 e0       	ldi	r25, 0x01	; 1
    4150:	9c 87       	std	Y+12, r25	; 0x0c
    4152:	8b 87       	std	Y+11, r24	; 0x0b
    4154:	8b 85       	ldd	r24, Y+11	; 0x0b
    4156:	9c 85       	ldd	r25, Y+12	; 0x0c
    4158:	8c 01       	movw	r16, r24
    415a:	c8 01       	movw	r24, r16
    415c:	01 97       	sbiw	r24, 0x01	; 1
    415e:	f1 f7       	brne	.-4      	; 0x415c <default_path+0xf2>
    4160:	8c 01       	movw	r16, r24
    4162:	1c 87       	std	Y+12, r17	; 0x0c
    4164:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4166:	89 85       	ldd	r24, Y+9	; 0x09
    4168:	9a 85       	ldd	r25, Y+10	; 0x0a
    416a:	01 97       	sbiw	r24, 0x01	; 1
    416c:	9a 87       	std	Y+10, r25	; 0x0a
    416e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4170:	89 85       	ldd	r24, Y+9	; 0x09
    4172:	9a 85       	ldd	r25, Y+10	; 0x0a
    4174:	00 97       	sbiw	r24, 0x00	; 0
    4176:	51 f7       	brne	.-44     	; 0x414c <default_path+0xe2>
    4178:	17 c0       	rjmp	.+46     	; 0x41a8 <default_path+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    417a:	6d 81       	ldd	r22, Y+5	; 0x05
    417c:	7e 81       	ldd	r23, Y+6	; 0x06
    417e:	8f 81       	ldd	r24, Y+7	; 0x07
    4180:	98 85       	ldd	r25, Y+8	; 0x08
    4182:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    4186:	dc 01       	movw	r26, r24
    4188:	cb 01       	movw	r24, r22
    418a:	9a 87       	std	Y+10, r25	; 0x0a
    418c:	89 87       	std	Y+9, r24	; 0x09
    418e:	89 85       	ldd	r24, Y+9	; 0x09
    4190:	9a 85       	ldd	r25, Y+10	; 0x0a
    4192:	9e 87       	std	Y+14, r25	; 0x0e
    4194:	8d 87       	std	Y+13, r24	; 0x0d
    4196:	8d 85       	ldd	r24, Y+13	; 0x0d
    4198:	9e 85       	ldd	r25, Y+14	; 0x0e
    419a:	8c 01       	movw	r16, r24
    419c:	f8 01       	movw	r30, r16
    419e:	31 97       	sbiw	r30, 0x01	; 1
    41a0:	f1 f7       	brne	.-4      	; 0x419e <default_path+0x134>
    41a2:	8f 01       	movw	r16, r30
    41a4:	1e 87       	std	Y+14, r17	; 0x0e
    41a6:	0d 87       	std	Y+13, r16	; 0x0d
		_delay_ms(300);
		
		servo_1(130);
    41a8:	82 e8       	ldi	r24, 0x82	; 130
    41aa:	0e 94 23 11 	call	0x2246	; 0x2246 <servo_1>
    41ae:	80 e0       	ldi	r24, 0x00	; 0
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	a6 e9       	ldi	r26, 0x96	; 150
    41b4:	b3 e4       	ldi	r27, 0x43	; 67
    41b6:	8f 87       	std	Y+15, r24	; 0x0f
    41b8:	98 8b       	std	Y+16, r25	; 0x10
    41ba:	a9 8b       	std	Y+17, r26	; 0x11
    41bc:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    41be:	6f 85       	ldd	r22, Y+15	; 0x0f
    41c0:	78 89       	ldd	r23, Y+16	; 0x10
    41c2:	89 89       	ldd	r24, Y+17	; 0x11
    41c4:	9a 89       	ldd	r25, Y+18	; 0x12
    41c6:	26 e6       	ldi	r18, 0x66	; 102
    41c8:	36 e6       	ldi	r19, 0x66	; 102
    41ca:	46 e6       	ldi	r20, 0x66	; 102
    41cc:	55 e4       	ldi	r21, 0x45	; 69
    41ce:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    41d2:	dc 01       	movw	r26, r24
    41d4:	cb 01       	movw	r24, r22
    41d6:	8b 8b       	std	Y+19, r24	; 0x13
    41d8:	9c 8b       	std	Y+20, r25	; 0x14
    41da:	ad 8b       	std	Y+21, r26	; 0x15
    41dc:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    41de:	11 e0       	ldi	r17, 0x01	; 1
    41e0:	6b 89       	ldd	r22, Y+19	; 0x13
    41e2:	7c 89       	ldd	r23, Y+20	; 0x14
    41e4:	8d 89       	ldd	r24, Y+21	; 0x15
    41e6:	9e 89       	ldd	r25, Y+22	; 0x16
    41e8:	20 e0       	ldi	r18, 0x00	; 0
    41ea:	30 e0       	ldi	r19, 0x00	; 0
    41ec:	40 e8       	ldi	r20, 0x80	; 128
    41ee:	5f e3       	ldi	r21, 0x3F	; 63
    41f0:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    41f4:	88 23       	and	r24, r24
    41f6:	0c f0       	brlt	.+2      	; 0x41fa <default_path+0x190>
    41f8:	10 e0       	ldi	r17, 0x00	; 0
    41fa:	11 23       	and	r17, r17
    41fc:	29 f0       	breq	.+10     	; 0x4208 <default_path+0x19e>
		__ticks = 1;
    41fe:	81 e0       	ldi	r24, 0x01	; 1
    4200:	90 e0       	ldi	r25, 0x00	; 0
    4202:	98 8f       	std	Y+24, r25	; 0x18
    4204:	8f 8b       	std	Y+23, r24	; 0x17
    4206:	46 c0       	rjmp	.+140    	; 0x4294 <default_path+0x22a>
	else if (__tmp > 65535)
    4208:	11 e0       	ldi	r17, 0x01	; 1
    420a:	6b 89       	ldd	r22, Y+19	; 0x13
    420c:	7c 89       	ldd	r23, Y+20	; 0x14
    420e:	8d 89       	ldd	r24, Y+21	; 0x15
    4210:	9e 89       	ldd	r25, Y+22	; 0x16
    4212:	20 e0       	ldi	r18, 0x00	; 0
    4214:	3f ef       	ldi	r19, 0xFF	; 255
    4216:	4f e7       	ldi	r20, 0x7F	; 127
    4218:	57 e4       	ldi	r21, 0x47	; 71
    421a:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    421e:	18 16       	cp	r1, r24
    4220:	0c f0       	brlt	.+2      	; 0x4224 <default_path+0x1ba>
    4222:	10 e0       	ldi	r17, 0x00	; 0
    4224:	11 23       	and	r17, r17
    4226:	61 f1       	breq	.+88     	; 0x4280 <default_path+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4228:	6f 85       	ldd	r22, Y+15	; 0x0f
    422a:	78 89       	ldd	r23, Y+16	; 0x10
    422c:	89 89       	ldd	r24, Y+17	; 0x11
    422e:	9a 89       	ldd	r25, Y+18	; 0x12
    4230:	20 e0       	ldi	r18, 0x00	; 0
    4232:	30 e0       	ldi	r19, 0x00	; 0
    4234:	40 e2       	ldi	r20, 0x20	; 32
    4236:	51 e4       	ldi	r21, 0x41	; 65
    4238:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    423c:	dc 01       	movw	r26, r24
    423e:	cb 01       	movw	r24, r22
    4240:	bc 01       	movw	r22, r24
    4242:	cd 01       	movw	r24, r26
    4244:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    4248:	dc 01       	movw	r26, r24
    424a:	cb 01       	movw	r24, r22
    424c:	98 8f       	std	Y+24, r25	; 0x18
    424e:	8f 8b       	std	Y+23, r24	; 0x17
    4250:	12 c0       	rjmp	.+36     	; 0x4276 <default_path+0x20c>
    4252:	80 e7       	ldi	r24, 0x70	; 112
    4254:	91 e0       	ldi	r25, 0x01	; 1
    4256:	9a 8f       	std	Y+26, r25	; 0x1a
    4258:	89 8f       	std	Y+25, r24	; 0x19
    425a:	89 8d       	ldd	r24, Y+25	; 0x19
    425c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    425e:	8c 01       	movw	r16, r24
    4260:	c8 01       	movw	r24, r16
    4262:	01 97       	sbiw	r24, 0x01	; 1
    4264:	f1 f7       	brne	.-4      	; 0x4262 <default_path+0x1f8>
    4266:	8c 01       	movw	r16, r24
    4268:	1a 8f       	std	Y+26, r17	; 0x1a
    426a:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    426c:	8f 89       	ldd	r24, Y+23	; 0x17
    426e:	98 8d       	ldd	r25, Y+24	; 0x18
    4270:	01 97       	sbiw	r24, 0x01	; 1
    4272:	98 8f       	std	Y+24, r25	; 0x18
    4274:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4276:	8f 89       	ldd	r24, Y+23	; 0x17
    4278:	98 8d       	ldd	r25, Y+24	; 0x18
    427a:	00 97       	sbiw	r24, 0x00	; 0
    427c:	51 f7       	brne	.-44     	; 0x4252 <default_path+0x1e8>
    427e:	17 c0       	rjmp	.+46     	; 0x42ae <default_path+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4280:	6b 89       	ldd	r22, Y+19	; 0x13
    4282:	7c 89       	ldd	r23, Y+20	; 0x14
    4284:	8d 89       	ldd	r24, Y+21	; 0x15
    4286:	9e 89       	ldd	r25, Y+22	; 0x16
    4288:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    428c:	dc 01       	movw	r26, r24
    428e:	cb 01       	movw	r24, r22
    4290:	98 8f       	std	Y+24, r25	; 0x18
    4292:	8f 8b       	std	Y+23, r24	; 0x17
    4294:	8f 89       	ldd	r24, Y+23	; 0x17
    4296:	98 8d       	ldd	r25, Y+24	; 0x18
    4298:	9c 8f       	std	Y+28, r25	; 0x1c
    429a:	8b 8f       	std	Y+27, r24	; 0x1b
    429c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    429e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42a0:	8c 01       	movw	r16, r24
    42a2:	f8 01       	movw	r30, r16
    42a4:	31 97       	sbiw	r30, 0x01	; 1
    42a6:	f1 f7       	brne	.-4      	; 0x42a4 <default_path+0x23a>
    42a8:	8f 01       	movw	r16, r30
    42aa:	1c 8f       	std	Y+28, r17	; 0x1c
    42ac:	0b 8f       	std	Y+27, r16	; 0x1b
		_delay_ms(300);
		
		forward_mm(40);
    42ae:	88 e2       	ldi	r24, 0x28	; 40
    42b0:	90 e0       	ldi	r25, 0x00	; 0
    42b2:	0e 94 4d 13 	call	0x269a	; 0x269a <forward_mm>
		stop_bot();
    42b6:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    42ba:	80 e0       	ldi	r24, 0x00	; 0
    42bc:	90 e0       	ldi	r25, 0x00	; 0
    42be:	a6 e9       	ldi	r26, 0x96	; 150
    42c0:	b3 e4       	ldi	r27, 0x43	; 67
    42c2:	8d 8f       	std	Y+29, r24	; 0x1d
    42c4:	9e 8f       	std	Y+30, r25	; 0x1e
    42c6:	af 8f       	std	Y+31, r26	; 0x1f
    42c8:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    42ca:	6d 8d       	ldd	r22, Y+29	; 0x1d
    42cc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    42ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    42d0:	98 a1       	lds	r25, 0x48
    42d2:	26 e6       	ldi	r18, 0x66	; 102
    42d4:	36 e6       	ldi	r19, 0x66	; 102
    42d6:	46 e6       	ldi	r20, 0x66	; 102
    42d8:	55 e4       	ldi	r21, 0x45	; 69
    42da:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    42de:	dc 01       	movw	r26, r24
    42e0:	cb 01       	movw	r24, r22
    42e2:	89 a3       	lds	r24, 0x59
    42e4:	9a a3       	lds	r25, 0x5a
    42e6:	ab a3       	lds	r26, 0x5b
    42e8:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    42ea:	11 e0       	ldi	r17, 0x01	; 1
    42ec:	69 a1       	lds	r22, 0x49
    42ee:	7a a1       	lds	r23, 0x4a
    42f0:	8b a1       	lds	r24, 0x4b
    42f2:	9c a1       	lds	r25, 0x4c
    42f4:	20 e0       	ldi	r18, 0x00	; 0
    42f6:	30 e0       	ldi	r19, 0x00	; 0
    42f8:	40 e8       	ldi	r20, 0x80	; 128
    42fa:	5f e3       	ldi	r21, 0x3F	; 63
    42fc:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    4300:	88 23       	and	r24, r24
    4302:	0c f0       	brlt	.+2      	; 0x4306 <default_path+0x29c>
    4304:	10 e0       	ldi	r17, 0x00	; 0
    4306:	11 23       	and	r17, r17
    4308:	29 f0       	breq	.+10     	; 0x4314 <default_path+0x2aa>
		__ticks = 1;
    430a:	81 e0       	ldi	r24, 0x01	; 1
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	9e a3       	lds	r25, 0x5e
    4310:	8d a3       	lds	r24, 0x5d
    4312:	46 c0       	rjmp	.+140    	; 0x43a0 <default_path+0x336>
	else if (__tmp > 65535)
    4314:	11 e0       	ldi	r17, 0x01	; 1
    4316:	69 a1       	lds	r22, 0x49
    4318:	7a a1       	lds	r23, 0x4a
    431a:	8b a1       	lds	r24, 0x4b
    431c:	9c a1       	lds	r25, 0x4c
    431e:	20 e0       	ldi	r18, 0x00	; 0
    4320:	3f ef       	ldi	r19, 0xFF	; 255
    4322:	4f e7       	ldi	r20, 0x7F	; 127
    4324:	57 e4       	ldi	r21, 0x47	; 71
    4326:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    432a:	18 16       	cp	r1, r24
    432c:	0c f0       	brlt	.+2      	; 0x4330 <default_path+0x2c6>
    432e:	10 e0       	ldi	r17, 0x00	; 0
    4330:	11 23       	and	r17, r17
    4332:	61 f1       	breq	.+88     	; 0x438c <default_path+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4334:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4336:	7e 8d       	ldd	r23, Y+30	; 0x1e
    4338:	8f 8d       	ldd	r24, Y+31	; 0x1f
    433a:	98 a1       	lds	r25, 0x48
    433c:	20 e0       	ldi	r18, 0x00	; 0
    433e:	30 e0       	ldi	r19, 0x00	; 0
    4340:	40 e2       	ldi	r20, 0x20	; 32
    4342:	51 e4       	ldi	r21, 0x41	; 65
    4344:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    4348:	dc 01       	movw	r26, r24
    434a:	cb 01       	movw	r24, r22
    434c:	bc 01       	movw	r22, r24
    434e:	cd 01       	movw	r24, r26
    4350:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    4354:	dc 01       	movw	r26, r24
    4356:	cb 01       	movw	r24, r22
    4358:	9e a3       	lds	r25, 0x5e
    435a:	8d a3       	lds	r24, 0x5d
    435c:	12 c0       	rjmp	.+36     	; 0x4382 <default_path+0x318>
    435e:	80 e7       	ldi	r24, 0x70	; 112
    4360:	91 e0       	ldi	r25, 0x01	; 1
    4362:	98 a7       	lds	r25, 0x78
    4364:	8f a3       	lds	r24, 0x5f
    4366:	8f a1       	lds	r24, 0x4f
    4368:	98 a5       	lds	r25, 0x68
    436a:	8c 01       	movw	r16, r24
    436c:	c8 01       	movw	r24, r16
    436e:	01 97       	sbiw	r24, 0x01	; 1
    4370:	f1 f7       	brne	.-4      	; 0x436e <default_path+0x304>
    4372:	8c 01       	movw	r16, r24
    4374:	18 a7       	lds	r17, 0x78
    4376:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4378:	8d a1       	lds	r24, 0x4d
    437a:	9e a1       	lds	r25, 0x4e
    437c:	01 97       	sbiw	r24, 0x01	; 1
    437e:	9e a3       	lds	r25, 0x5e
    4380:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4382:	8d a1       	lds	r24, 0x4d
    4384:	9e a1       	lds	r25, 0x4e
    4386:	00 97       	sbiw	r24, 0x00	; 0
    4388:	51 f7       	brne	.-44     	; 0x435e <default_path+0x2f4>
    438a:	64 c1       	rjmp	.+712    	; 0x4654 <default_path+0x5ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    438c:	69 a1       	lds	r22, 0x49
    438e:	7a a1       	lds	r23, 0x4a
    4390:	8b a1       	lds	r24, 0x4b
    4392:	9c a1       	lds	r25, 0x4c
    4394:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    4398:	dc 01       	movw	r26, r24
    439a:	cb 01       	movw	r24, r22
    439c:	9e a3       	lds	r25, 0x5e
    439e:	8d a3       	lds	r24, 0x5d
    43a0:	8d a1       	lds	r24, 0x4d
    43a2:	9e a1       	lds	r25, 0x4e
    43a4:	9a a7       	lds	r25, 0x7a
    43a6:	89 a7       	lds	r24, 0x79
    43a8:	89 a5       	lds	r24, 0x69
    43aa:	9a a5       	lds	r25, 0x6a
    43ac:	8c 01       	movw	r16, r24
    43ae:	f8 01       	movw	r30, r16
    43b0:	31 97       	sbiw	r30, 0x01	; 1
    43b2:	f1 f7       	brne	.-4      	; 0x43b0 <default_path+0x346>
    43b4:	8f 01       	movw	r16, r30
    43b6:	1a a7       	lds	r17, 0x7a
    43b8:	09 a7       	lds	r16, 0x79
    43ba:	4c c1       	rjmp	.+664    	; 0x4654 <default_path+0x5ea>
		_delay_ms(300);
	}
	else
	{
		servo_1(130);
    43bc:	82 e8       	ldi	r24, 0x82	; 130
    43be:	0e 94 23 11 	call	0x2246	; 0x2246 <servo_1>
    43c2:	80 e0       	ldi	r24, 0x00	; 0
    43c4:	90 e0       	ldi	r25, 0x00	; 0
    43c6:	a6 e9       	ldi	r26, 0x96	; 150
    43c8:	b3 e4       	ldi	r27, 0x43	; 67
    43ca:	8b a7       	lds	r24, 0x7b
    43cc:	9c a7       	lds	r25, 0x7c
    43ce:	ad a7       	lds	r26, 0x7d
    43d0:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    43d2:	6b a5       	lds	r22, 0x6b
    43d4:	7c a5       	lds	r23, 0x6c
    43d6:	8d a5       	lds	r24, 0x6d
    43d8:	9e a5       	lds	r25, 0x6e
    43da:	26 e6       	ldi	r18, 0x66	; 102
    43dc:	36 e6       	ldi	r19, 0x66	; 102
    43de:	46 e6       	ldi	r20, 0x66	; 102
    43e0:	55 e4       	ldi	r21, 0x45	; 69
    43e2:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    43e6:	dc 01       	movw	r26, r24
    43e8:	cb 01       	movw	r24, r22
    43ea:	8f a7       	lds	r24, 0x7f
    43ec:	98 ab       	sts	0x58, r25
    43ee:	a9 ab       	sts	0x59, r26
    43f0:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    43f2:	11 e0       	ldi	r17, 0x01	; 1
    43f4:	6f a5       	lds	r22, 0x6f
    43f6:	78 a9       	sts	0x48, r23
    43f8:	89 a9       	sts	0x49, r24
    43fa:	9a a9       	sts	0x4a, r25
    43fc:	20 e0       	ldi	r18, 0x00	; 0
    43fe:	30 e0       	ldi	r19, 0x00	; 0
    4400:	40 e8       	ldi	r20, 0x80	; 128
    4402:	5f e3       	ldi	r21, 0x3F	; 63
    4404:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    4408:	88 23       	and	r24, r24
    440a:	0c f0       	brlt	.+2      	; 0x440e <default_path+0x3a4>
    440c:	10 e0       	ldi	r17, 0x00	; 0
    440e:	11 23       	and	r17, r17
    4410:	29 f0       	breq	.+10     	; 0x441c <default_path+0x3b2>
		__ticks = 1;
    4412:	81 e0       	ldi	r24, 0x01	; 1
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	9c ab       	sts	0x5c, r25
    4418:	8b ab       	sts	0x5b, r24
    441a:	46 c0       	rjmp	.+140    	; 0x44a8 <default_path+0x43e>
	else if (__tmp > 65535)
    441c:	11 e0       	ldi	r17, 0x01	; 1
    441e:	6f a5       	lds	r22, 0x6f
    4420:	78 a9       	sts	0x48, r23
    4422:	89 a9       	sts	0x49, r24
    4424:	9a a9       	sts	0x4a, r25
    4426:	20 e0       	ldi	r18, 0x00	; 0
    4428:	3f ef       	ldi	r19, 0xFF	; 255
    442a:	4f e7       	ldi	r20, 0x7F	; 127
    442c:	57 e4       	ldi	r21, 0x47	; 71
    442e:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    4432:	18 16       	cp	r1, r24
    4434:	0c f0       	brlt	.+2      	; 0x4438 <default_path+0x3ce>
    4436:	10 e0       	ldi	r17, 0x00	; 0
    4438:	11 23       	and	r17, r17
    443a:	61 f1       	breq	.+88     	; 0x4494 <default_path+0x42a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    443c:	6b a5       	lds	r22, 0x6b
    443e:	7c a5       	lds	r23, 0x6c
    4440:	8d a5       	lds	r24, 0x6d
    4442:	9e a5       	lds	r25, 0x6e
    4444:	20 e0       	ldi	r18, 0x00	; 0
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	40 e2       	ldi	r20, 0x20	; 32
    444a:	51 e4       	ldi	r21, 0x41	; 65
    444c:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    4450:	dc 01       	movw	r26, r24
    4452:	cb 01       	movw	r24, r22
    4454:	bc 01       	movw	r22, r24
    4456:	cd 01       	movw	r24, r26
    4458:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    445c:	dc 01       	movw	r26, r24
    445e:	cb 01       	movw	r24, r22
    4460:	9c ab       	sts	0x5c, r25
    4462:	8b ab       	sts	0x5b, r24
    4464:	12 c0       	rjmp	.+36     	; 0x448a <default_path+0x420>
    4466:	80 e7       	ldi	r24, 0x70	; 112
    4468:	91 e0       	ldi	r25, 0x01	; 1
    446a:	9e ab       	sts	0x5e, r25
    446c:	8d ab       	sts	0x5d, r24
    446e:	8d a9       	sts	0x4d, r24
    4470:	9e a9       	sts	0x4e, r25
    4472:	8c 01       	movw	r16, r24
    4474:	c8 01       	movw	r24, r16
    4476:	01 97       	sbiw	r24, 0x01	; 1
    4478:	f1 f7       	brne	.-4      	; 0x4476 <default_path+0x40c>
    447a:	8c 01       	movw	r16, r24
    447c:	1e ab       	sts	0x5e, r17
    447e:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4480:	8b a9       	sts	0x4b, r24
    4482:	9c a9       	sts	0x4c, r25
    4484:	01 97       	sbiw	r24, 0x01	; 1
    4486:	9c ab       	sts	0x5c, r25
    4488:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    448a:	8b a9       	sts	0x4b, r24
    448c:	9c a9       	sts	0x4c, r25
    448e:	00 97       	sbiw	r24, 0x00	; 0
    4490:	51 f7       	brne	.-44     	; 0x4466 <default_path+0x3fc>
    4492:	17 c0       	rjmp	.+46     	; 0x44c2 <default_path+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4494:	6f a5       	lds	r22, 0x6f
    4496:	78 a9       	sts	0x48, r23
    4498:	89 a9       	sts	0x49, r24
    449a:	9a a9       	sts	0x4a, r25
    449c:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    44a0:	dc 01       	movw	r26, r24
    44a2:	cb 01       	movw	r24, r22
    44a4:	9c ab       	sts	0x5c, r25
    44a6:	8b ab       	sts	0x5b, r24
    44a8:	8b a9       	sts	0x4b, r24
    44aa:	9c a9       	sts	0x4c, r25
    44ac:	98 af       	sts	0x78, r25
    44ae:	8f ab       	sts	0x5f, r24
    44b0:	8f a9       	sts	0x4f, r24
    44b2:	98 ad       	sts	0x68, r25
    44b4:	8c 01       	movw	r16, r24
    44b6:	f8 01       	movw	r30, r16
    44b8:	31 97       	sbiw	r30, 0x01	; 1
    44ba:	f1 f7       	brne	.-4      	; 0x44b8 <default_path+0x44e>
    44bc:	8f 01       	movw	r16, r30
    44be:	18 af       	sts	0x78, r17
    44c0:	0f ab       	sts	0x5f, r16
		_delay_ms(300);
		
		forward_mm(40);
    44c2:	88 e2       	ldi	r24, 0x28	; 40
    44c4:	90 e0       	ldi	r25, 0x00	; 0
    44c6:	0e 94 4d 13 	call	0x269a	; 0x269a <forward_mm>
		stop_bot();
    44ca:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    44ce:	80 e0       	ldi	r24, 0x00	; 0
    44d0:	90 e0       	ldi	r25, 0x00	; 0
    44d2:	a6 e9       	ldi	r26, 0x96	; 150
    44d4:	b3 e4       	ldi	r27, 0x43	; 67
    44d6:	89 af       	sts	0x79, r24
    44d8:	9a af       	sts	0x7a, r25
    44da:	ab af       	sts	0x7b, r26
    44dc:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    44de:	69 ad       	sts	0x69, r22
    44e0:	7a ad       	sts	0x6a, r23
    44e2:	8b ad       	sts	0x6b, r24
    44e4:	9c ad       	sts	0x6c, r25
    44e6:	26 e6       	ldi	r18, 0x66	; 102
    44e8:	36 e6       	ldi	r19, 0x66	; 102
    44ea:	46 e6       	ldi	r20, 0x66	; 102
    44ec:	55 e4       	ldi	r21, 0x45	; 69
    44ee:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    44f2:	dc 01       	movw	r26, r24
    44f4:	cb 01       	movw	r24, r22
    44f6:	9e 01       	movw	r18, r28
    44f8:	23 5c       	subi	r18, 0xC3	; 195
    44fa:	3f 4f       	sbci	r19, 0xFF	; 255
    44fc:	f9 01       	movw	r30, r18
    44fe:	80 83       	st	Z, r24
    4500:	91 83       	std	Z+1, r25	; 0x01
    4502:	a2 83       	std	Z+2, r26	; 0x02
    4504:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4506:	11 e0       	ldi	r17, 0x01	; 1
    4508:	ce 01       	movw	r24, r28
    450a:	cd 96       	adiw	r24, 0x3d	; 61
    450c:	fc 01       	movw	r30, r24
    450e:	60 81       	ld	r22, Z
    4510:	71 81       	ldd	r23, Z+1	; 0x01
    4512:	82 81       	ldd	r24, Z+2	; 0x02
    4514:	93 81       	ldd	r25, Z+3	; 0x03
    4516:	20 e0       	ldi	r18, 0x00	; 0
    4518:	30 e0       	ldi	r19, 0x00	; 0
    451a:	40 e8       	ldi	r20, 0x80	; 128
    451c:	5f e3       	ldi	r21, 0x3F	; 63
    451e:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    4522:	88 23       	and	r24, r24
    4524:	0c f0       	brlt	.+2      	; 0x4528 <default_path+0x4be>
    4526:	10 e0       	ldi	r17, 0x00	; 0
    4528:	11 23       	and	r17, r17
    452a:	49 f0       	breq	.+18     	; 0x453e <default_path+0x4d4>
		__ticks = 1;
    452c:	ce 01       	movw	r24, r28
    452e:	8f 5b       	subi	r24, 0xBF	; 191
    4530:	9f 4f       	sbci	r25, 0xFF	; 255
    4532:	21 e0       	ldi	r18, 0x01	; 1
    4534:	30 e0       	ldi	r19, 0x00	; 0
    4536:	fc 01       	movw	r30, r24
    4538:	31 83       	std	Z+1, r19	; 0x01
    453a:	20 83       	st	Z, r18
    453c:	6e c0       	rjmp	.+220    	; 0x461a <default_path+0x5b0>
	else if (__tmp > 65535)
    453e:	11 e0       	ldi	r17, 0x01	; 1
    4540:	ce 01       	movw	r24, r28
    4542:	cd 96       	adiw	r24, 0x3d	; 61
    4544:	fc 01       	movw	r30, r24
    4546:	60 81       	ld	r22, Z
    4548:	71 81       	ldd	r23, Z+1	; 0x01
    454a:	82 81       	ldd	r24, Z+2	; 0x02
    454c:	93 81       	ldd	r25, Z+3	; 0x03
    454e:	20 e0       	ldi	r18, 0x00	; 0
    4550:	3f ef       	ldi	r19, 0xFF	; 255
    4552:	4f e7       	ldi	r20, 0x7F	; 127
    4554:	57 e4       	ldi	r21, 0x47	; 71
    4556:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    455a:	18 16       	cp	r1, r24
    455c:	0c f0       	brlt	.+2      	; 0x4560 <default_path+0x4f6>
    455e:	10 e0       	ldi	r17, 0x00	; 0
    4560:	11 23       	and	r17, r17
    4562:	09 f4       	brne	.+2      	; 0x4566 <default_path+0x4fc>
    4564:	49 c0       	rjmp	.+146    	; 0x45f8 <default_path+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4566:	69 ad       	sts	0x69, r22
    4568:	7a ad       	sts	0x6a, r23
    456a:	8b ad       	sts	0x6b, r24
    456c:	9c ad       	sts	0x6c, r25
    456e:	20 e0       	ldi	r18, 0x00	; 0
    4570:	30 e0       	ldi	r19, 0x00	; 0
    4572:	40 e2       	ldi	r20, 0x20	; 32
    4574:	51 e4       	ldi	r21, 0x41	; 65
    4576:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    457a:	dc 01       	movw	r26, r24
    457c:	cb 01       	movw	r24, r22
    457e:	8e 01       	movw	r16, r28
    4580:	0f 5b       	subi	r16, 0xBF	; 191
    4582:	1f 4f       	sbci	r17, 0xFF	; 255
    4584:	bc 01       	movw	r22, r24
    4586:	cd 01       	movw	r24, r26
    4588:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    458c:	dc 01       	movw	r26, r24
    458e:	cb 01       	movw	r24, r22
    4590:	f8 01       	movw	r30, r16
    4592:	91 83       	std	Z+1, r25	; 0x01
    4594:	80 83       	st	Z, r24
    4596:	27 c0       	rjmp	.+78     	; 0x45e6 <default_path+0x57c>
    4598:	ce 01       	movw	r24, r28
    459a:	8d 5b       	subi	r24, 0xBD	; 189
    459c:	9f 4f       	sbci	r25, 0xFF	; 255
    459e:	20 e7       	ldi	r18, 0x70	; 112
    45a0:	31 e0       	ldi	r19, 0x01	; 1
    45a2:	fc 01       	movw	r30, r24
    45a4:	31 83       	std	Z+1, r19	; 0x01
    45a6:	20 83       	st	Z, r18
    45a8:	ce 01       	movw	r24, r28
    45aa:	8d 5b       	subi	r24, 0xBD	; 189
    45ac:	9f 4f       	sbci	r25, 0xFF	; 255
    45ae:	fc 01       	movw	r30, r24
    45b0:	80 81       	ld	r24, Z
    45b2:	91 81       	ldd	r25, Z+1	; 0x01
    45b4:	8c 01       	movw	r16, r24
    45b6:	c8 01       	movw	r24, r16
    45b8:	01 97       	sbiw	r24, 0x01	; 1
    45ba:	f1 f7       	brne	.-4      	; 0x45b8 <default_path+0x54e>
    45bc:	8c 01       	movw	r16, r24
    45be:	ce 01       	movw	r24, r28
    45c0:	8d 5b       	subi	r24, 0xBD	; 189
    45c2:	9f 4f       	sbci	r25, 0xFF	; 255
    45c4:	fc 01       	movw	r30, r24
    45c6:	11 83       	std	Z+1, r17	; 0x01
    45c8:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45ca:	ce 01       	movw	r24, r28
    45cc:	8f 5b       	subi	r24, 0xBF	; 191
    45ce:	9f 4f       	sbci	r25, 0xFF	; 255
    45d0:	9e 01       	movw	r18, r28
    45d2:	2f 5b       	subi	r18, 0xBF	; 191
    45d4:	3f 4f       	sbci	r19, 0xFF	; 255
    45d6:	f9 01       	movw	r30, r18
    45d8:	20 81       	ld	r18, Z
    45da:	31 81       	ldd	r19, Z+1	; 0x01
    45dc:	21 50       	subi	r18, 0x01	; 1
    45de:	30 40       	sbci	r19, 0x00	; 0
    45e0:	fc 01       	movw	r30, r24
    45e2:	31 83       	std	Z+1, r19	; 0x01
    45e4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45e6:	ce 01       	movw	r24, r28
    45e8:	8f 5b       	subi	r24, 0xBF	; 191
    45ea:	9f 4f       	sbci	r25, 0xFF	; 255
    45ec:	fc 01       	movw	r30, r24
    45ee:	80 81       	ld	r24, Z
    45f0:	91 81       	ldd	r25, Z+1	; 0x01
    45f2:	00 97       	sbiw	r24, 0x00	; 0
    45f4:	89 f6       	brne	.-94     	; 0x4598 <default_path+0x52e>
    45f6:	2e c0       	rjmp	.+92     	; 0x4654 <default_path+0x5ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45f8:	8e 01       	movw	r16, r28
    45fa:	0f 5b       	subi	r16, 0xBF	; 191
    45fc:	1f 4f       	sbci	r17, 0xFF	; 255
    45fe:	ce 01       	movw	r24, r28
    4600:	cd 96       	adiw	r24, 0x3d	; 61
    4602:	fc 01       	movw	r30, r24
    4604:	60 81       	ld	r22, Z
    4606:	71 81       	ldd	r23, Z+1	; 0x01
    4608:	82 81       	ldd	r24, Z+2	; 0x02
    460a:	93 81       	ldd	r25, Z+3	; 0x03
    460c:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    4610:	dc 01       	movw	r26, r24
    4612:	cb 01       	movw	r24, r22
    4614:	f8 01       	movw	r30, r16
    4616:	91 83       	std	Z+1, r25	; 0x01
    4618:	80 83       	st	Z, r24
    461a:	ce 01       	movw	r24, r28
    461c:	8b 5b       	subi	r24, 0xBB	; 187
    461e:	9f 4f       	sbci	r25, 0xFF	; 255
    4620:	9e 01       	movw	r18, r28
    4622:	2f 5b       	subi	r18, 0xBF	; 191
    4624:	3f 4f       	sbci	r19, 0xFF	; 255
    4626:	f9 01       	movw	r30, r18
    4628:	20 81       	ld	r18, Z
    462a:	31 81       	ldd	r19, Z+1	; 0x01
    462c:	fc 01       	movw	r30, r24
    462e:	31 83       	std	Z+1, r19	; 0x01
    4630:	20 83       	st	Z, r18
    4632:	ce 01       	movw	r24, r28
    4634:	8b 5b       	subi	r24, 0xBB	; 187
    4636:	9f 4f       	sbci	r25, 0xFF	; 255
    4638:	fc 01       	movw	r30, r24
    463a:	80 81       	ld	r24, Z
    463c:	91 81       	ldd	r25, Z+1	; 0x01
    463e:	8c 01       	movw	r16, r24
    4640:	c8 01       	movw	r24, r16
    4642:	01 97       	sbiw	r24, 0x01	; 1
    4644:	f1 f7       	brne	.-4      	; 0x4642 <default_path+0x5d8>
    4646:	8c 01       	movw	r16, r24
    4648:	ce 01       	movw	r24, r28
    464a:	8b 5b       	subi	r24, 0xBB	; 187
    464c:	9f 4f       	sbci	r25, 0xFF	; 255
    464e:	fc 01       	movw	r30, r24
    4650:	11 83       	std	Z+1, r17	; 0x01
    4652:	00 83       	st	Z, r16
		_delay_ms(300);
	}
	
	right_turn();
    4654:	0e 94 0d 1c 	call	0x381a	; 0x381a <right_turn>
	stop_bot();
    4658:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    465c:	9e 01       	movw	r18, r28
    465e:	29 5b       	subi	r18, 0xB9	; 185
    4660:	3f 4f       	sbci	r19, 0xFF	; 255
    4662:	80 e0       	ldi	r24, 0x00	; 0
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	a8 ec       	ldi	r26, 0xC8	; 200
    4668:	b2 e4       	ldi	r27, 0x42	; 66
    466a:	f9 01       	movw	r30, r18
    466c:	80 83       	st	Z, r24
    466e:	91 83       	std	Z+1, r25	; 0x01
    4670:	a2 83       	std	Z+2, r26	; 0x02
    4672:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4674:	8e 01       	movw	r16, r28
    4676:	05 5b       	subi	r16, 0xB5	; 181
    4678:	1f 4f       	sbci	r17, 0xFF	; 255
    467a:	ce 01       	movw	r24, r28
    467c:	89 5b       	subi	r24, 0xB9	; 185
    467e:	9f 4f       	sbci	r25, 0xFF	; 255
    4680:	fc 01       	movw	r30, r24
    4682:	60 81       	ld	r22, Z
    4684:	71 81       	ldd	r23, Z+1	; 0x01
    4686:	82 81       	ldd	r24, Z+2	; 0x02
    4688:	93 81       	ldd	r25, Z+3	; 0x03
    468a:	26 e6       	ldi	r18, 0x66	; 102
    468c:	36 e6       	ldi	r19, 0x66	; 102
    468e:	46 e6       	ldi	r20, 0x66	; 102
    4690:	55 e4       	ldi	r21, 0x45	; 69
    4692:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    4696:	dc 01       	movw	r26, r24
    4698:	cb 01       	movw	r24, r22
    469a:	f8 01       	movw	r30, r16
    469c:	80 83       	st	Z, r24
    469e:	91 83       	std	Z+1, r25	; 0x01
    46a0:	a2 83       	std	Z+2, r26	; 0x02
    46a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    46a4:	ce 01       	movw	r24, r28
    46a6:	85 5b       	subi	r24, 0xB5	; 181
    46a8:	9f 4f       	sbci	r25, 0xFF	; 255
    46aa:	11 e0       	ldi	r17, 0x01	; 1
    46ac:	fc 01       	movw	r30, r24
    46ae:	60 81       	ld	r22, Z
    46b0:	71 81       	ldd	r23, Z+1	; 0x01
    46b2:	82 81       	ldd	r24, Z+2	; 0x02
    46b4:	93 81       	ldd	r25, Z+3	; 0x03
    46b6:	20 e0       	ldi	r18, 0x00	; 0
    46b8:	30 e0       	ldi	r19, 0x00	; 0
    46ba:	40 e8       	ldi	r20, 0x80	; 128
    46bc:	5f e3       	ldi	r21, 0x3F	; 63
    46be:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    46c2:	88 23       	and	r24, r24
    46c4:	0c f0       	brlt	.+2      	; 0x46c8 <default_path+0x65e>
    46c6:	10 e0       	ldi	r17, 0x00	; 0
    46c8:	11 23       	and	r17, r17
    46ca:	49 f0       	breq	.+18     	; 0x46de <default_path+0x674>
		__ticks = 1;
    46cc:	ce 01       	movw	r24, r28
    46ce:	81 5b       	subi	r24, 0xB1	; 177
    46d0:	9f 4f       	sbci	r25, 0xFF	; 255
    46d2:	21 e0       	ldi	r18, 0x01	; 1
    46d4:	30 e0       	ldi	r19, 0x00	; 0
    46d6:	fc 01       	movw	r30, r24
    46d8:	31 83       	std	Z+1, r19	; 0x01
    46da:	20 83       	st	Z, r18
    46dc:	74 c0       	rjmp	.+232    	; 0x47c6 <default_path+0x75c>
	else if (__tmp > 65535)
    46de:	ce 01       	movw	r24, r28
    46e0:	85 5b       	subi	r24, 0xB5	; 181
    46e2:	9f 4f       	sbci	r25, 0xFF	; 255
    46e4:	11 e0       	ldi	r17, 0x01	; 1
    46e6:	fc 01       	movw	r30, r24
    46e8:	60 81       	ld	r22, Z
    46ea:	71 81       	ldd	r23, Z+1	; 0x01
    46ec:	82 81       	ldd	r24, Z+2	; 0x02
    46ee:	93 81       	ldd	r25, Z+3	; 0x03
    46f0:	20 e0       	ldi	r18, 0x00	; 0
    46f2:	3f ef       	ldi	r19, 0xFF	; 255
    46f4:	4f e7       	ldi	r20, 0x7F	; 127
    46f6:	57 e4       	ldi	r21, 0x47	; 71
    46f8:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    46fc:	18 16       	cp	r1, r24
    46fe:	0c f0       	brlt	.+2      	; 0x4702 <default_path+0x698>
    4700:	10 e0       	ldi	r17, 0x00	; 0
    4702:	11 23       	and	r17, r17
    4704:	09 f4       	brne	.+2      	; 0x4708 <default_path+0x69e>
    4706:	4d c0       	rjmp	.+154    	; 0x47a2 <default_path+0x738>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4708:	ce 01       	movw	r24, r28
    470a:	89 5b       	subi	r24, 0xB9	; 185
    470c:	9f 4f       	sbci	r25, 0xFF	; 255
    470e:	fc 01       	movw	r30, r24
    4710:	60 81       	ld	r22, Z
    4712:	71 81       	ldd	r23, Z+1	; 0x01
    4714:	82 81       	ldd	r24, Z+2	; 0x02
    4716:	93 81       	ldd	r25, Z+3	; 0x03
    4718:	20 e0       	ldi	r18, 0x00	; 0
    471a:	30 e0       	ldi	r19, 0x00	; 0
    471c:	40 e2       	ldi	r20, 0x20	; 32
    471e:	51 e4       	ldi	r21, 0x41	; 65
    4720:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    4724:	dc 01       	movw	r26, r24
    4726:	cb 01       	movw	r24, r22
    4728:	8e 01       	movw	r16, r28
    472a:	01 5b       	subi	r16, 0xB1	; 177
    472c:	1f 4f       	sbci	r17, 0xFF	; 255
    472e:	bc 01       	movw	r22, r24
    4730:	cd 01       	movw	r24, r26
    4732:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    4736:	dc 01       	movw	r26, r24
    4738:	cb 01       	movw	r24, r22
    473a:	f8 01       	movw	r30, r16
    473c:	91 83       	std	Z+1, r25	; 0x01
    473e:	80 83       	st	Z, r24
    4740:	27 c0       	rjmp	.+78     	; 0x4790 <default_path+0x726>
    4742:	ce 01       	movw	r24, r28
    4744:	8f 5a       	subi	r24, 0xAF	; 175
    4746:	9f 4f       	sbci	r25, 0xFF	; 255
    4748:	20 e7       	ldi	r18, 0x70	; 112
    474a:	31 e0       	ldi	r19, 0x01	; 1
    474c:	fc 01       	movw	r30, r24
    474e:	31 83       	std	Z+1, r19	; 0x01
    4750:	20 83       	st	Z, r18
    4752:	ce 01       	movw	r24, r28
    4754:	8f 5a       	subi	r24, 0xAF	; 175
    4756:	9f 4f       	sbci	r25, 0xFF	; 255
    4758:	fc 01       	movw	r30, r24
    475a:	80 81       	ld	r24, Z
    475c:	91 81       	ldd	r25, Z+1	; 0x01
    475e:	8c 01       	movw	r16, r24
    4760:	c8 01       	movw	r24, r16
    4762:	01 97       	sbiw	r24, 0x01	; 1
    4764:	f1 f7       	brne	.-4      	; 0x4762 <default_path+0x6f8>
    4766:	8c 01       	movw	r16, r24
    4768:	ce 01       	movw	r24, r28
    476a:	8f 5a       	subi	r24, 0xAF	; 175
    476c:	9f 4f       	sbci	r25, 0xFF	; 255
    476e:	fc 01       	movw	r30, r24
    4770:	11 83       	std	Z+1, r17	; 0x01
    4772:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4774:	ce 01       	movw	r24, r28
    4776:	81 5b       	subi	r24, 0xB1	; 177
    4778:	9f 4f       	sbci	r25, 0xFF	; 255
    477a:	9e 01       	movw	r18, r28
    477c:	21 5b       	subi	r18, 0xB1	; 177
    477e:	3f 4f       	sbci	r19, 0xFF	; 255
    4780:	f9 01       	movw	r30, r18
    4782:	20 81       	ld	r18, Z
    4784:	31 81       	ldd	r19, Z+1	; 0x01
    4786:	21 50       	subi	r18, 0x01	; 1
    4788:	30 40       	sbci	r19, 0x00	; 0
    478a:	fc 01       	movw	r30, r24
    478c:	31 83       	std	Z+1, r19	; 0x01
    478e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4790:	ce 01       	movw	r24, r28
    4792:	81 5b       	subi	r24, 0xB1	; 177
    4794:	9f 4f       	sbci	r25, 0xFF	; 255
    4796:	fc 01       	movw	r30, r24
    4798:	80 81       	ld	r24, Z
    479a:	91 81       	ldd	r25, Z+1	; 0x01
    479c:	00 97       	sbiw	r24, 0x00	; 0
    479e:	89 f6       	brne	.-94     	; 0x4742 <default_path+0x6d8>
    47a0:	2f c0       	rjmp	.+94     	; 0x4800 <default_path+0x796>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47a2:	8e 01       	movw	r16, r28
    47a4:	01 5b       	subi	r16, 0xB1	; 177
    47a6:	1f 4f       	sbci	r17, 0xFF	; 255
    47a8:	ce 01       	movw	r24, r28
    47aa:	85 5b       	subi	r24, 0xB5	; 181
    47ac:	9f 4f       	sbci	r25, 0xFF	; 255
    47ae:	fc 01       	movw	r30, r24
    47b0:	60 81       	ld	r22, Z
    47b2:	71 81       	ldd	r23, Z+1	; 0x01
    47b4:	82 81       	ldd	r24, Z+2	; 0x02
    47b6:	93 81       	ldd	r25, Z+3	; 0x03
    47b8:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    47bc:	dc 01       	movw	r26, r24
    47be:	cb 01       	movw	r24, r22
    47c0:	f8 01       	movw	r30, r16
    47c2:	91 83       	std	Z+1, r25	; 0x01
    47c4:	80 83       	st	Z, r24
    47c6:	ce 01       	movw	r24, r28
    47c8:	8d 5a       	subi	r24, 0xAD	; 173
    47ca:	9f 4f       	sbci	r25, 0xFF	; 255
    47cc:	9e 01       	movw	r18, r28
    47ce:	21 5b       	subi	r18, 0xB1	; 177
    47d0:	3f 4f       	sbci	r19, 0xFF	; 255
    47d2:	f9 01       	movw	r30, r18
    47d4:	20 81       	ld	r18, Z
    47d6:	31 81       	ldd	r19, Z+1	; 0x01
    47d8:	fc 01       	movw	r30, r24
    47da:	31 83       	std	Z+1, r19	; 0x01
    47dc:	20 83       	st	Z, r18
    47de:	ce 01       	movw	r24, r28
    47e0:	8d 5a       	subi	r24, 0xAD	; 173
    47e2:	9f 4f       	sbci	r25, 0xFF	; 255
    47e4:	fc 01       	movw	r30, r24
    47e6:	80 81       	ld	r24, Z
    47e8:	91 81       	ldd	r25, Z+1	; 0x01
    47ea:	8c 01       	movw	r16, r24
    47ec:	c8 01       	movw	r24, r16
    47ee:	01 97       	sbiw	r24, 0x01	; 1
    47f0:	f1 f7       	brne	.-4      	; 0x47ee <default_path+0x784>
    47f2:	8c 01       	movw	r16, r24
    47f4:	ce 01       	movw	r24, r28
    47f6:	8d 5a       	subi	r24, 0xAD	; 173
    47f8:	9f 4f       	sbci	r25, 0xFF	; 255
    47fa:	fc 01       	movw	r30, r24
    47fc:	11 83       	std	Z+1, r17	; 0x01
    47fe:	00 83       	st	Z, r16
	_delay_ms(100);
	
	servo_1(70);
    4800:	86 e4       	ldi	r24, 0x46	; 70
    4802:	0e 94 23 11 	call	0x2246	; 0x2246 <servo_1>
    4806:	9e 01       	movw	r18, r28
    4808:	2b 5a       	subi	r18, 0xAB	; 171
    480a:	3f 4f       	sbci	r19, 0xFF	; 255
    480c:	80 e0       	ldi	r24, 0x00	; 0
    480e:	90 e0       	ldi	r25, 0x00	; 0
    4810:	a6 e9       	ldi	r26, 0x96	; 150
    4812:	b3 e4       	ldi	r27, 0x43	; 67
    4814:	f9 01       	movw	r30, r18
    4816:	80 83       	st	Z, r24
    4818:	91 83       	std	Z+1, r25	; 0x01
    481a:	a2 83       	std	Z+2, r26	; 0x02
    481c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    481e:	8e 01       	movw	r16, r28
    4820:	07 5a       	subi	r16, 0xA7	; 167
    4822:	1f 4f       	sbci	r17, 0xFF	; 255
    4824:	ce 01       	movw	r24, r28
    4826:	8b 5a       	subi	r24, 0xAB	; 171
    4828:	9f 4f       	sbci	r25, 0xFF	; 255
    482a:	fc 01       	movw	r30, r24
    482c:	60 81       	ld	r22, Z
    482e:	71 81       	ldd	r23, Z+1	; 0x01
    4830:	82 81       	ldd	r24, Z+2	; 0x02
    4832:	93 81       	ldd	r25, Z+3	; 0x03
    4834:	26 e6       	ldi	r18, 0x66	; 102
    4836:	36 e6       	ldi	r19, 0x66	; 102
    4838:	46 e6       	ldi	r20, 0x66	; 102
    483a:	55 e4       	ldi	r21, 0x45	; 69
    483c:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    4840:	dc 01       	movw	r26, r24
    4842:	cb 01       	movw	r24, r22
    4844:	f8 01       	movw	r30, r16
    4846:	80 83       	st	Z, r24
    4848:	91 83       	std	Z+1, r25	; 0x01
    484a:	a2 83       	std	Z+2, r26	; 0x02
    484c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    484e:	ce 01       	movw	r24, r28
    4850:	87 5a       	subi	r24, 0xA7	; 167
    4852:	9f 4f       	sbci	r25, 0xFF	; 255
    4854:	11 e0       	ldi	r17, 0x01	; 1
    4856:	fc 01       	movw	r30, r24
    4858:	60 81       	ld	r22, Z
    485a:	71 81       	ldd	r23, Z+1	; 0x01
    485c:	82 81       	ldd	r24, Z+2	; 0x02
    485e:	93 81       	ldd	r25, Z+3	; 0x03
    4860:	20 e0       	ldi	r18, 0x00	; 0
    4862:	30 e0       	ldi	r19, 0x00	; 0
    4864:	40 e8       	ldi	r20, 0x80	; 128
    4866:	5f e3       	ldi	r21, 0x3F	; 63
    4868:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    486c:	88 23       	and	r24, r24
    486e:	0c f0       	brlt	.+2      	; 0x4872 <default_path+0x808>
    4870:	10 e0       	ldi	r17, 0x00	; 0
    4872:	11 23       	and	r17, r17
    4874:	49 f0       	breq	.+18     	; 0x4888 <default_path+0x81e>
		__ticks = 1;
    4876:	ce 01       	movw	r24, r28
    4878:	83 5a       	subi	r24, 0xA3	; 163
    487a:	9f 4f       	sbci	r25, 0xFF	; 255
    487c:	21 e0       	ldi	r18, 0x01	; 1
    487e:	30 e0       	ldi	r19, 0x00	; 0
    4880:	fc 01       	movw	r30, r24
    4882:	31 83       	std	Z+1, r19	; 0x01
    4884:	20 83       	st	Z, r18
    4886:	74 c0       	rjmp	.+232    	; 0x4970 <default_path+0x906>
	else if (__tmp > 65535)
    4888:	ce 01       	movw	r24, r28
    488a:	87 5a       	subi	r24, 0xA7	; 167
    488c:	9f 4f       	sbci	r25, 0xFF	; 255
    488e:	11 e0       	ldi	r17, 0x01	; 1
    4890:	fc 01       	movw	r30, r24
    4892:	60 81       	ld	r22, Z
    4894:	71 81       	ldd	r23, Z+1	; 0x01
    4896:	82 81       	ldd	r24, Z+2	; 0x02
    4898:	93 81       	ldd	r25, Z+3	; 0x03
    489a:	20 e0       	ldi	r18, 0x00	; 0
    489c:	3f ef       	ldi	r19, 0xFF	; 255
    489e:	4f e7       	ldi	r20, 0x7F	; 127
    48a0:	57 e4       	ldi	r21, 0x47	; 71
    48a2:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    48a6:	18 16       	cp	r1, r24
    48a8:	0c f0       	brlt	.+2      	; 0x48ac <default_path+0x842>
    48aa:	10 e0       	ldi	r17, 0x00	; 0
    48ac:	11 23       	and	r17, r17
    48ae:	09 f4       	brne	.+2      	; 0x48b2 <default_path+0x848>
    48b0:	4d c0       	rjmp	.+154    	; 0x494c <default_path+0x8e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48b2:	ce 01       	movw	r24, r28
    48b4:	8b 5a       	subi	r24, 0xAB	; 171
    48b6:	9f 4f       	sbci	r25, 0xFF	; 255
    48b8:	fc 01       	movw	r30, r24
    48ba:	60 81       	ld	r22, Z
    48bc:	71 81       	ldd	r23, Z+1	; 0x01
    48be:	82 81       	ldd	r24, Z+2	; 0x02
    48c0:	93 81       	ldd	r25, Z+3	; 0x03
    48c2:	20 e0       	ldi	r18, 0x00	; 0
    48c4:	30 e0       	ldi	r19, 0x00	; 0
    48c6:	40 e2       	ldi	r20, 0x20	; 32
    48c8:	51 e4       	ldi	r21, 0x41	; 65
    48ca:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    48ce:	dc 01       	movw	r26, r24
    48d0:	cb 01       	movw	r24, r22
    48d2:	8e 01       	movw	r16, r28
    48d4:	03 5a       	subi	r16, 0xA3	; 163
    48d6:	1f 4f       	sbci	r17, 0xFF	; 255
    48d8:	bc 01       	movw	r22, r24
    48da:	cd 01       	movw	r24, r26
    48dc:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    48e0:	dc 01       	movw	r26, r24
    48e2:	cb 01       	movw	r24, r22
    48e4:	f8 01       	movw	r30, r16
    48e6:	91 83       	std	Z+1, r25	; 0x01
    48e8:	80 83       	st	Z, r24
    48ea:	27 c0       	rjmp	.+78     	; 0x493a <default_path+0x8d0>
    48ec:	ce 01       	movw	r24, r28
    48ee:	81 5a       	subi	r24, 0xA1	; 161
    48f0:	9f 4f       	sbci	r25, 0xFF	; 255
    48f2:	20 e7       	ldi	r18, 0x70	; 112
    48f4:	31 e0       	ldi	r19, 0x01	; 1
    48f6:	fc 01       	movw	r30, r24
    48f8:	31 83       	std	Z+1, r19	; 0x01
    48fa:	20 83       	st	Z, r18
    48fc:	ce 01       	movw	r24, r28
    48fe:	81 5a       	subi	r24, 0xA1	; 161
    4900:	9f 4f       	sbci	r25, 0xFF	; 255
    4902:	fc 01       	movw	r30, r24
    4904:	80 81       	ld	r24, Z
    4906:	91 81       	ldd	r25, Z+1	; 0x01
    4908:	8c 01       	movw	r16, r24
    490a:	c8 01       	movw	r24, r16
    490c:	01 97       	sbiw	r24, 0x01	; 1
    490e:	f1 f7       	brne	.-4      	; 0x490c <default_path+0x8a2>
    4910:	8c 01       	movw	r16, r24
    4912:	ce 01       	movw	r24, r28
    4914:	81 5a       	subi	r24, 0xA1	; 161
    4916:	9f 4f       	sbci	r25, 0xFF	; 255
    4918:	fc 01       	movw	r30, r24
    491a:	11 83       	std	Z+1, r17	; 0x01
    491c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    491e:	ce 01       	movw	r24, r28
    4920:	83 5a       	subi	r24, 0xA3	; 163
    4922:	9f 4f       	sbci	r25, 0xFF	; 255
    4924:	9e 01       	movw	r18, r28
    4926:	23 5a       	subi	r18, 0xA3	; 163
    4928:	3f 4f       	sbci	r19, 0xFF	; 255
    492a:	f9 01       	movw	r30, r18
    492c:	20 81       	ld	r18, Z
    492e:	31 81       	ldd	r19, Z+1	; 0x01
    4930:	21 50       	subi	r18, 0x01	; 1
    4932:	30 40       	sbci	r19, 0x00	; 0
    4934:	fc 01       	movw	r30, r24
    4936:	31 83       	std	Z+1, r19	; 0x01
    4938:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    493a:	ce 01       	movw	r24, r28
    493c:	83 5a       	subi	r24, 0xA3	; 163
    493e:	9f 4f       	sbci	r25, 0xFF	; 255
    4940:	fc 01       	movw	r30, r24
    4942:	80 81       	ld	r24, Z
    4944:	91 81       	ldd	r25, Z+1	; 0x01
    4946:	00 97       	sbiw	r24, 0x00	; 0
    4948:	89 f6       	brne	.-94     	; 0x48ec <default_path+0x882>
    494a:	2f c0       	rjmp	.+94     	; 0x49aa <default_path+0x940>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    494c:	8e 01       	movw	r16, r28
    494e:	03 5a       	subi	r16, 0xA3	; 163
    4950:	1f 4f       	sbci	r17, 0xFF	; 255
    4952:	ce 01       	movw	r24, r28
    4954:	87 5a       	subi	r24, 0xA7	; 167
    4956:	9f 4f       	sbci	r25, 0xFF	; 255
    4958:	fc 01       	movw	r30, r24
    495a:	60 81       	ld	r22, Z
    495c:	71 81       	ldd	r23, Z+1	; 0x01
    495e:	82 81       	ldd	r24, Z+2	; 0x02
    4960:	93 81       	ldd	r25, Z+3	; 0x03
    4962:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    4966:	dc 01       	movw	r26, r24
    4968:	cb 01       	movw	r24, r22
    496a:	f8 01       	movw	r30, r16
    496c:	91 83       	std	Z+1, r25	; 0x01
    496e:	80 83       	st	Z, r24
    4970:	ce 01       	movw	r24, r28
    4972:	8f 59       	subi	r24, 0x9F	; 159
    4974:	9f 4f       	sbci	r25, 0xFF	; 255
    4976:	9e 01       	movw	r18, r28
    4978:	23 5a       	subi	r18, 0xA3	; 163
    497a:	3f 4f       	sbci	r19, 0xFF	; 255
    497c:	f9 01       	movw	r30, r18
    497e:	20 81       	ld	r18, Z
    4980:	31 81       	ldd	r19, Z+1	; 0x01
    4982:	fc 01       	movw	r30, r24
    4984:	31 83       	std	Z+1, r19	; 0x01
    4986:	20 83       	st	Z, r18
    4988:	ce 01       	movw	r24, r28
    498a:	8f 59       	subi	r24, 0x9F	; 159
    498c:	9f 4f       	sbci	r25, 0xFF	; 255
    498e:	fc 01       	movw	r30, r24
    4990:	80 81       	ld	r24, Z
    4992:	91 81       	ldd	r25, Z+1	; 0x01
    4994:	8c 01       	movw	r16, r24
    4996:	c8 01       	movw	r24, r16
    4998:	01 97       	sbiw	r24, 0x01	; 1
    499a:	f1 f7       	brne	.-4      	; 0x4998 <default_path+0x92e>
    499c:	8c 01       	movw	r16, r24
    499e:	ce 01       	movw	r24, r28
    49a0:	8f 59       	subi	r24, 0x9F	; 159
    49a2:	9f 4f       	sbci	r25, 0xFF	; 255
    49a4:	fc 01       	movw	r30, r24
    49a6:	11 83       	std	Z+1, r17	; 0x01
    49a8:	00 83       	st	Z, r16
	_delay_ms(300);
	servo_1_free();
    49aa:	0e 94 71 11 	call	0x22e2	; 0x22e2 <servo_1_free>
	
	move_forward();
    49ae:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <move_forward>
	stop_bot();
    49b2:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    49b6:	9e 01       	movw	r18, r28
    49b8:	2d 59       	subi	r18, 0x9D	; 157
    49ba:	3f 4f       	sbci	r19, 0xFF	; 255
    49bc:	80 e0       	ldi	r24, 0x00	; 0
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	a6 e9       	ldi	r26, 0x96	; 150
    49c2:	b3 e4       	ldi	r27, 0x43	; 67
    49c4:	f9 01       	movw	r30, r18
    49c6:	80 83       	st	Z, r24
    49c8:	91 83       	std	Z+1, r25	; 0x01
    49ca:	a2 83       	std	Z+2, r26	; 0x02
    49cc:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    49ce:	8e 01       	movw	r16, r28
    49d0:	09 59       	subi	r16, 0x99	; 153
    49d2:	1f 4f       	sbci	r17, 0xFF	; 255
    49d4:	ce 01       	movw	r24, r28
    49d6:	8d 59       	subi	r24, 0x9D	; 157
    49d8:	9f 4f       	sbci	r25, 0xFF	; 255
    49da:	fc 01       	movw	r30, r24
    49dc:	60 81       	ld	r22, Z
    49de:	71 81       	ldd	r23, Z+1	; 0x01
    49e0:	82 81       	ldd	r24, Z+2	; 0x02
    49e2:	93 81       	ldd	r25, Z+3	; 0x03
    49e4:	26 e6       	ldi	r18, 0x66	; 102
    49e6:	36 e6       	ldi	r19, 0x66	; 102
    49e8:	46 e6       	ldi	r20, 0x66	; 102
    49ea:	55 e4       	ldi	r21, 0x45	; 69
    49ec:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    49f0:	dc 01       	movw	r26, r24
    49f2:	cb 01       	movw	r24, r22
    49f4:	f8 01       	movw	r30, r16
    49f6:	80 83       	st	Z, r24
    49f8:	91 83       	std	Z+1, r25	; 0x01
    49fa:	a2 83       	std	Z+2, r26	; 0x02
    49fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    49fe:	ce 01       	movw	r24, r28
    4a00:	89 59       	subi	r24, 0x99	; 153
    4a02:	9f 4f       	sbci	r25, 0xFF	; 255
    4a04:	11 e0       	ldi	r17, 0x01	; 1
    4a06:	fc 01       	movw	r30, r24
    4a08:	60 81       	ld	r22, Z
    4a0a:	71 81       	ldd	r23, Z+1	; 0x01
    4a0c:	82 81       	ldd	r24, Z+2	; 0x02
    4a0e:	93 81       	ldd	r25, Z+3	; 0x03
    4a10:	20 e0       	ldi	r18, 0x00	; 0
    4a12:	30 e0       	ldi	r19, 0x00	; 0
    4a14:	40 e8       	ldi	r20, 0x80	; 128
    4a16:	5f e3       	ldi	r21, 0x3F	; 63
    4a18:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    4a1c:	88 23       	and	r24, r24
    4a1e:	0c f0       	brlt	.+2      	; 0x4a22 <default_path+0x9b8>
    4a20:	10 e0       	ldi	r17, 0x00	; 0
    4a22:	11 23       	and	r17, r17
    4a24:	49 f0       	breq	.+18     	; 0x4a38 <default_path+0x9ce>
		__ticks = 1;
    4a26:	ce 01       	movw	r24, r28
    4a28:	85 59       	subi	r24, 0x95	; 149
    4a2a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a2c:	21 e0       	ldi	r18, 0x01	; 1
    4a2e:	30 e0       	ldi	r19, 0x00	; 0
    4a30:	fc 01       	movw	r30, r24
    4a32:	31 83       	std	Z+1, r19	; 0x01
    4a34:	20 83       	st	Z, r18
    4a36:	74 c0       	rjmp	.+232    	; 0x4b20 <default_path+0xab6>
	else if (__tmp > 65535)
    4a38:	ce 01       	movw	r24, r28
    4a3a:	89 59       	subi	r24, 0x99	; 153
    4a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    4a3e:	11 e0       	ldi	r17, 0x01	; 1
    4a40:	fc 01       	movw	r30, r24
    4a42:	60 81       	ld	r22, Z
    4a44:	71 81       	ldd	r23, Z+1	; 0x01
    4a46:	82 81       	ldd	r24, Z+2	; 0x02
    4a48:	93 81       	ldd	r25, Z+3	; 0x03
    4a4a:	20 e0       	ldi	r18, 0x00	; 0
    4a4c:	3f ef       	ldi	r19, 0xFF	; 255
    4a4e:	4f e7       	ldi	r20, 0x7F	; 127
    4a50:	57 e4       	ldi	r21, 0x47	; 71
    4a52:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    4a56:	18 16       	cp	r1, r24
    4a58:	0c f0       	brlt	.+2      	; 0x4a5c <default_path+0x9f2>
    4a5a:	10 e0       	ldi	r17, 0x00	; 0
    4a5c:	11 23       	and	r17, r17
    4a5e:	09 f4       	brne	.+2      	; 0x4a62 <default_path+0x9f8>
    4a60:	4d c0       	rjmp	.+154    	; 0x4afc <default_path+0xa92>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a62:	ce 01       	movw	r24, r28
    4a64:	8d 59       	subi	r24, 0x9D	; 157
    4a66:	9f 4f       	sbci	r25, 0xFF	; 255
    4a68:	fc 01       	movw	r30, r24
    4a6a:	60 81       	ld	r22, Z
    4a6c:	71 81       	ldd	r23, Z+1	; 0x01
    4a6e:	82 81       	ldd	r24, Z+2	; 0x02
    4a70:	93 81       	ldd	r25, Z+3	; 0x03
    4a72:	20 e0       	ldi	r18, 0x00	; 0
    4a74:	30 e0       	ldi	r19, 0x00	; 0
    4a76:	40 e2       	ldi	r20, 0x20	; 32
    4a78:	51 e4       	ldi	r21, 0x41	; 65
    4a7a:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    4a7e:	dc 01       	movw	r26, r24
    4a80:	cb 01       	movw	r24, r22
    4a82:	8e 01       	movw	r16, r28
    4a84:	05 59       	subi	r16, 0x95	; 149
    4a86:	1f 4f       	sbci	r17, 0xFF	; 255
    4a88:	bc 01       	movw	r22, r24
    4a8a:	cd 01       	movw	r24, r26
    4a8c:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    4a90:	dc 01       	movw	r26, r24
    4a92:	cb 01       	movw	r24, r22
    4a94:	f8 01       	movw	r30, r16
    4a96:	91 83       	std	Z+1, r25	; 0x01
    4a98:	80 83       	st	Z, r24
    4a9a:	27 c0       	rjmp	.+78     	; 0x4aea <default_path+0xa80>
    4a9c:	ce 01       	movw	r24, r28
    4a9e:	83 59       	subi	r24, 0x93	; 147
    4aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    4aa2:	20 e7       	ldi	r18, 0x70	; 112
    4aa4:	31 e0       	ldi	r19, 0x01	; 1
    4aa6:	fc 01       	movw	r30, r24
    4aa8:	31 83       	std	Z+1, r19	; 0x01
    4aaa:	20 83       	st	Z, r18
    4aac:	ce 01       	movw	r24, r28
    4aae:	83 59       	subi	r24, 0x93	; 147
    4ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    4ab2:	fc 01       	movw	r30, r24
    4ab4:	80 81       	ld	r24, Z
    4ab6:	91 81       	ldd	r25, Z+1	; 0x01
    4ab8:	8c 01       	movw	r16, r24
    4aba:	c8 01       	movw	r24, r16
    4abc:	01 97       	sbiw	r24, 0x01	; 1
    4abe:	f1 f7       	brne	.-4      	; 0x4abc <default_path+0xa52>
    4ac0:	8c 01       	movw	r16, r24
    4ac2:	ce 01       	movw	r24, r28
    4ac4:	83 59       	subi	r24, 0x93	; 147
    4ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ac8:	fc 01       	movw	r30, r24
    4aca:	11 83       	std	Z+1, r17	; 0x01
    4acc:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ace:	ce 01       	movw	r24, r28
    4ad0:	85 59       	subi	r24, 0x95	; 149
    4ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ad4:	9e 01       	movw	r18, r28
    4ad6:	25 59       	subi	r18, 0x95	; 149
    4ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    4ada:	f9 01       	movw	r30, r18
    4adc:	20 81       	ld	r18, Z
    4ade:	31 81       	ldd	r19, Z+1	; 0x01
    4ae0:	21 50       	subi	r18, 0x01	; 1
    4ae2:	30 40       	sbci	r19, 0x00	; 0
    4ae4:	fc 01       	movw	r30, r24
    4ae6:	31 83       	std	Z+1, r19	; 0x01
    4ae8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aea:	ce 01       	movw	r24, r28
    4aec:	85 59       	subi	r24, 0x95	; 149
    4aee:	9f 4f       	sbci	r25, 0xFF	; 255
    4af0:	fc 01       	movw	r30, r24
    4af2:	80 81       	ld	r24, Z
    4af4:	91 81       	ldd	r25, Z+1	; 0x01
    4af6:	00 97       	sbiw	r24, 0x00	; 0
    4af8:	89 f6       	brne	.-94     	; 0x4a9c <default_path+0xa32>
    4afa:	2f c0       	rjmp	.+94     	; 0x4b5a <default_path+0xaf0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4afc:	8e 01       	movw	r16, r28
    4afe:	05 59       	subi	r16, 0x95	; 149
    4b00:	1f 4f       	sbci	r17, 0xFF	; 255
    4b02:	ce 01       	movw	r24, r28
    4b04:	89 59       	subi	r24, 0x99	; 153
    4b06:	9f 4f       	sbci	r25, 0xFF	; 255
    4b08:	fc 01       	movw	r30, r24
    4b0a:	60 81       	ld	r22, Z
    4b0c:	71 81       	ldd	r23, Z+1	; 0x01
    4b0e:	82 81       	ldd	r24, Z+2	; 0x02
    4b10:	93 81       	ldd	r25, Z+3	; 0x03
    4b12:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    4b16:	dc 01       	movw	r26, r24
    4b18:	cb 01       	movw	r24, r22
    4b1a:	f8 01       	movw	r30, r16
    4b1c:	91 83       	std	Z+1, r25	; 0x01
    4b1e:	80 83       	st	Z, r24
    4b20:	ce 01       	movw	r24, r28
    4b22:	81 59       	subi	r24, 0x91	; 145
    4b24:	9f 4f       	sbci	r25, 0xFF	; 255
    4b26:	9e 01       	movw	r18, r28
    4b28:	25 59       	subi	r18, 0x95	; 149
    4b2a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b2c:	f9 01       	movw	r30, r18
    4b2e:	20 81       	ld	r18, Z
    4b30:	31 81       	ldd	r19, Z+1	; 0x01
    4b32:	fc 01       	movw	r30, r24
    4b34:	31 83       	std	Z+1, r19	; 0x01
    4b36:	20 83       	st	Z, r18
    4b38:	ce 01       	movw	r24, r28
    4b3a:	81 59       	subi	r24, 0x91	; 145
    4b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    4b3e:	fc 01       	movw	r30, r24
    4b40:	80 81       	ld	r24, Z
    4b42:	91 81       	ldd	r25, Z+1	; 0x01
    4b44:	8c 01       	movw	r16, r24
    4b46:	c8 01       	movw	r24, r16
    4b48:	01 97       	sbiw	r24, 0x01	; 1
    4b4a:	f1 f7       	brne	.-4      	; 0x4b48 <default_path+0xade>
    4b4c:	8c 01       	movw	r16, r24
    4b4e:	ce 01       	movw	r24, r28
    4b50:	81 59       	subi	r24, 0x91	; 145
    4b52:	9f 4f       	sbci	r25, 0xFF	; 255
    4b54:	fc 01       	movw	r30, r24
    4b56:	11 83       	std	Z+1, r17	; 0x01
    4b58:	00 83       	st	Z, r16
	_delay_ms(300);
	
	forward_mm(53);
    4b5a:	85 e3       	ldi	r24, 0x35	; 53
    4b5c:	90 e0       	ldi	r25, 0x00	; 0
    4b5e:	0e 94 4d 13 	call	0x269a	; 0x269a <forward_mm>
	stop_bot();
    4b62:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    4b66:	9e 01       	movw	r18, r28
    4b68:	2f 58       	subi	r18, 0x8F	; 143
    4b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b6c:	80 e0       	ldi	r24, 0x00	; 0
    4b6e:	90 e0       	ldi	r25, 0x00	; 0
    4b70:	a6 e9       	ldi	r26, 0x96	; 150
    4b72:	b3 e4       	ldi	r27, 0x43	; 67
    4b74:	f9 01       	movw	r30, r18
    4b76:	80 83       	st	Z, r24
    4b78:	91 83       	std	Z+1, r25	; 0x01
    4b7a:	a2 83       	std	Z+2, r26	; 0x02
    4b7c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4b7e:	8e 01       	movw	r16, r28
    4b80:	0b 58       	subi	r16, 0x8B	; 139
    4b82:	1f 4f       	sbci	r17, 0xFF	; 255
    4b84:	ce 01       	movw	r24, r28
    4b86:	8f 58       	subi	r24, 0x8F	; 143
    4b88:	9f 4f       	sbci	r25, 0xFF	; 255
    4b8a:	fc 01       	movw	r30, r24
    4b8c:	60 81       	ld	r22, Z
    4b8e:	71 81       	ldd	r23, Z+1	; 0x01
    4b90:	82 81       	ldd	r24, Z+2	; 0x02
    4b92:	93 81       	ldd	r25, Z+3	; 0x03
    4b94:	26 e6       	ldi	r18, 0x66	; 102
    4b96:	36 e6       	ldi	r19, 0x66	; 102
    4b98:	46 e6       	ldi	r20, 0x66	; 102
    4b9a:	55 e4       	ldi	r21, 0x45	; 69
    4b9c:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    4ba0:	dc 01       	movw	r26, r24
    4ba2:	cb 01       	movw	r24, r22
    4ba4:	f8 01       	movw	r30, r16
    4ba6:	80 83       	st	Z, r24
    4ba8:	91 83       	std	Z+1, r25	; 0x01
    4baa:	a2 83       	std	Z+2, r26	; 0x02
    4bac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4bae:	ce 01       	movw	r24, r28
    4bb0:	8b 58       	subi	r24, 0x8B	; 139
    4bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    4bb4:	11 e0       	ldi	r17, 0x01	; 1
    4bb6:	fc 01       	movw	r30, r24
    4bb8:	60 81       	ld	r22, Z
    4bba:	71 81       	ldd	r23, Z+1	; 0x01
    4bbc:	82 81       	ldd	r24, Z+2	; 0x02
    4bbe:	93 81       	ldd	r25, Z+3	; 0x03
    4bc0:	20 e0       	ldi	r18, 0x00	; 0
    4bc2:	30 e0       	ldi	r19, 0x00	; 0
    4bc4:	40 e8       	ldi	r20, 0x80	; 128
    4bc6:	5f e3       	ldi	r21, 0x3F	; 63
    4bc8:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    4bcc:	88 23       	and	r24, r24
    4bce:	0c f0       	brlt	.+2      	; 0x4bd2 <default_path+0xb68>
    4bd0:	10 e0       	ldi	r17, 0x00	; 0
    4bd2:	11 23       	and	r17, r17
    4bd4:	49 f0       	breq	.+18     	; 0x4be8 <default_path+0xb7e>
		__ticks = 1;
    4bd6:	ce 01       	movw	r24, r28
    4bd8:	87 58       	subi	r24, 0x87	; 135
    4bda:	9f 4f       	sbci	r25, 0xFF	; 255
    4bdc:	21 e0       	ldi	r18, 0x01	; 1
    4bde:	30 e0       	ldi	r19, 0x00	; 0
    4be0:	fc 01       	movw	r30, r24
    4be2:	31 83       	std	Z+1, r19	; 0x01
    4be4:	20 83       	st	Z, r18
    4be6:	74 c0       	rjmp	.+232    	; 0x4cd0 <default_path+0xc66>
	else if (__tmp > 65535)
    4be8:	ce 01       	movw	r24, r28
    4bea:	8b 58       	subi	r24, 0x8B	; 139
    4bec:	9f 4f       	sbci	r25, 0xFF	; 255
    4bee:	11 e0       	ldi	r17, 0x01	; 1
    4bf0:	fc 01       	movw	r30, r24
    4bf2:	60 81       	ld	r22, Z
    4bf4:	71 81       	ldd	r23, Z+1	; 0x01
    4bf6:	82 81       	ldd	r24, Z+2	; 0x02
    4bf8:	93 81       	ldd	r25, Z+3	; 0x03
    4bfa:	20 e0       	ldi	r18, 0x00	; 0
    4bfc:	3f ef       	ldi	r19, 0xFF	; 255
    4bfe:	4f e7       	ldi	r20, 0x7F	; 127
    4c00:	57 e4       	ldi	r21, 0x47	; 71
    4c02:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    4c06:	18 16       	cp	r1, r24
    4c08:	0c f0       	brlt	.+2      	; 0x4c0c <default_path+0xba2>
    4c0a:	10 e0       	ldi	r17, 0x00	; 0
    4c0c:	11 23       	and	r17, r17
    4c0e:	09 f4       	brne	.+2      	; 0x4c12 <default_path+0xba8>
    4c10:	4d c0       	rjmp	.+154    	; 0x4cac <default_path+0xc42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c12:	ce 01       	movw	r24, r28
    4c14:	8f 58       	subi	r24, 0x8F	; 143
    4c16:	9f 4f       	sbci	r25, 0xFF	; 255
    4c18:	fc 01       	movw	r30, r24
    4c1a:	60 81       	ld	r22, Z
    4c1c:	71 81       	ldd	r23, Z+1	; 0x01
    4c1e:	82 81       	ldd	r24, Z+2	; 0x02
    4c20:	93 81       	ldd	r25, Z+3	; 0x03
    4c22:	20 e0       	ldi	r18, 0x00	; 0
    4c24:	30 e0       	ldi	r19, 0x00	; 0
    4c26:	40 e2       	ldi	r20, 0x20	; 32
    4c28:	51 e4       	ldi	r21, 0x41	; 65
    4c2a:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    4c2e:	dc 01       	movw	r26, r24
    4c30:	cb 01       	movw	r24, r22
    4c32:	8e 01       	movw	r16, r28
    4c34:	07 58       	subi	r16, 0x87	; 135
    4c36:	1f 4f       	sbci	r17, 0xFF	; 255
    4c38:	bc 01       	movw	r22, r24
    4c3a:	cd 01       	movw	r24, r26
    4c3c:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    4c40:	dc 01       	movw	r26, r24
    4c42:	cb 01       	movw	r24, r22
    4c44:	f8 01       	movw	r30, r16
    4c46:	91 83       	std	Z+1, r25	; 0x01
    4c48:	80 83       	st	Z, r24
    4c4a:	27 c0       	rjmp	.+78     	; 0x4c9a <default_path+0xc30>
    4c4c:	ce 01       	movw	r24, r28
    4c4e:	85 58       	subi	r24, 0x85	; 133
    4c50:	9f 4f       	sbci	r25, 0xFF	; 255
    4c52:	20 e7       	ldi	r18, 0x70	; 112
    4c54:	31 e0       	ldi	r19, 0x01	; 1
    4c56:	fc 01       	movw	r30, r24
    4c58:	31 83       	std	Z+1, r19	; 0x01
    4c5a:	20 83       	st	Z, r18
    4c5c:	ce 01       	movw	r24, r28
    4c5e:	85 58       	subi	r24, 0x85	; 133
    4c60:	9f 4f       	sbci	r25, 0xFF	; 255
    4c62:	fc 01       	movw	r30, r24
    4c64:	80 81       	ld	r24, Z
    4c66:	91 81       	ldd	r25, Z+1	; 0x01
    4c68:	8c 01       	movw	r16, r24
    4c6a:	c8 01       	movw	r24, r16
    4c6c:	01 97       	sbiw	r24, 0x01	; 1
    4c6e:	f1 f7       	brne	.-4      	; 0x4c6c <default_path+0xc02>
    4c70:	8c 01       	movw	r16, r24
    4c72:	ce 01       	movw	r24, r28
    4c74:	85 58       	subi	r24, 0x85	; 133
    4c76:	9f 4f       	sbci	r25, 0xFF	; 255
    4c78:	fc 01       	movw	r30, r24
    4c7a:	11 83       	std	Z+1, r17	; 0x01
    4c7c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c7e:	ce 01       	movw	r24, r28
    4c80:	87 58       	subi	r24, 0x87	; 135
    4c82:	9f 4f       	sbci	r25, 0xFF	; 255
    4c84:	9e 01       	movw	r18, r28
    4c86:	27 58       	subi	r18, 0x87	; 135
    4c88:	3f 4f       	sbci	r19, 0xFF	; 255
    4c8a:	f9 01       	movw	r30, r18
    4c8c:	20 81       	ld	r18, Z
    4c8e:	31 81       	ldd	r19, Z+1	; 0x01
    4c90:	21 50       	subi	r18, 0x01	; 1
    4c92:	30 40       	sbci	r19, 0x00	; 0
    4c94:	fc 01       	movw	r30, r24
    4c96:	31 83       	std	Z+1, r19	; 0x01
    4c98:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c9a:	ce 01       	movw	r24, r28
    4c9c:	87 58       	subi	r24, 0x87	; 135
    4c9e:	9f 4f       	sbci	r25, 0xFF	; 255
    4ca0:	fc 01       	movw	r30, r24
    4ca2:	80 81       	ld	r24, Z
    4ca4:	91 81       	ldd	r25, Z+1	; 0x01
    4ca6:	00 97       	sbiw	r24, 0x00	; 0
    4ca8:	89 f6       	brne	.-94     	; 0x4c4c <default_path+0xbe2>
    4caa:	2f c0       	rjmp	.+94     	; 0x4d0a <default_path+0xca0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cac:	8e 01       	movw	r16, r28
    4cae:	07 58       	subi	r16, 0x87	; 135
    4cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    4cb2:	ce 01       	movw	r24, r28
    4cb4:	8b 58       	subi	r24, 0x8B	; 139
    4cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    4cb8:	fc 01       	movw	r30, r24
    4cba:	60 81       	ld	r22, Z
    4cbc:	71 81       	ldd	r23, Z+1	; 0x01
    4cbe:	82 81       	ldd	r24, Z+2	; 0x02
    4cc0:	93 81       	ldd	r25, Z+3	; 0x03
    4cc2:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    4cc6:	dc 01       	movw	r26, r24
    4cc8:	cb 01       	movw	r24, r22
    4cca:	f8 01       	movw	r30, r16
    4ccc:	91 83       	std	Z+1, r25	; 0x01
    4cce:	80 83       	st	Z, r24
    4cd0:	ce 01       	movw	r24, r28
    4cd2:	83 58       	subi	r24, 0x83	; 131
    4cd4:	9f 4f       	sbci	r25, 0xFF	; 255
    4cd6:	9e 01       	movw	r18, r28
    4cd8:	27 58       	subi	r18, 0x87	; 135
    4cda:	3f 4f       	sbci	r19, 0xFF	; 255
    4cdc:	f9 01       	movw	r30, r18
    4cde:	20 81       	ld	r18, Z
    4ce0:	31 81       	ldd	r19, Z+1	; 0x01
    4ce2:	fc 01       	movw	r30, r24
    4ce4:	31 83       	std	Z+1, r19	; 0x01
    4ce6:	20 83       	st	Z, r18
    4ce8:	ce 01       	movw	r24, r28
    4cea:	83 58       	subi	r24, 0x83	; 131
    4cec:	9f 4f       	sbci	r25, 0xFF	; 255
    4cee:	fc 01       	movw	r30, r24
    4cf0:	80 81       	ld	r24, Z
    4cf2:	91 81       	ldd	r25, Z+1	; 0x01
    4cf4:	8c 01       	movw	r16, r24
    4cf6:	c8 01       	movw	r24, r16
    4cf8:	01 97       	sbiw	r24, 0x01	; 1
    4cfa:	f1 f7       	brne	.-4      	; 0x4cf8 <default_path+0xc8e>
    4cfc:	8c 01       	movw	r16, r24
    4cfe:	ce 01       	movw	r24, r28
    4d00:	83 58       	subi	r24, 0x83	; 131
    4d02:	9f 4f       	sbci	r25, 0xFF	; 255
    4d04:	fc 01       	movw	r30, r24
    4d06:	11 83       	std	Z+1, r17	; 0x01
    4d08:	00 83       	st	Z, r16
	_delay_ms(300);
	
	left_turn();
    4d0a:	0e 94 b8 1c 	call	0x3970	; 0x3970 <left_turn>
	stop_bot();
    4d0e:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    4d12:	9e 01       	movw	r18, r28
    4d14:	21 58       	subi	r18, 0x81	; 129
    4d16:	3f 4f       	sbci	r19, 0xFF	; 255
    4d18:	80 e0       	ldi	r24, 0x00	; 0
    4d1a:	90 e0       	ldi	r25, 0x00	; 0
    4d1c:	a6 e9       	ldi	r26, 0x96	; 150
    4d1e:	b3 e4       	ldi	r27, 0x43	; 67
    4d20:	f9 01       	movw	r30, r18
    4d22:	80 83       	st	Z, r24
    4d24:	91 83       	std	Z+1, r25	; 0x01
    4d26:	a2 83       	std	Z+2, r26	; 0x02
    4d28:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4d2a:	8e 01       	movw	r16, r28
    4d2c:	0d 57       	subi	r16, 0x7D	; 125
    4d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    4d30:	ce 01       	movw	r24, r28
    4d32:	81 58       	subi	r24, 0x81	; 129
    4d34:	9f 4f       	sbci	r25, 0xFF	; 255
    4d36:	fc 01       	movw	r30, r24
    4d38:	60 81       	ld	r22, Z
    4d3a:	71 81       	ldd	r23, Z+1	; 0x01
    4d3c:	82 81       	ldd	r24, Z+2	; 0x02
    4d3e:	93 81       	ldd	r25, Z+3	; 0x03
    4d40:	26 e6       	ldi	r18, 0x66	; 102
    4d42:	36 e6       	ldi	r19, 0x66	; 102
    4d44:	46 e6       	ldi	r20, 0x66	; 102
    4d46:	55 e4       	ldi	r21, 0x45	; 69
    4d48:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    4d4c:	dc 01       	movw	r26, r24
    4d4e:	cb 01       	movw	r24, r22
    4d50:	f8 01       	movw	r30, r16
    4d52:	80 83       	st	Z, r24
    4d54:	91 83       	std	Z+1, r25	; 0x01
    4d56:	a2 83       	std	Z+2, r26	; 0x02
    4d58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d5a:	ce 01       	movw	r24, r28
    4d5c:	8d 57       	subi	r24, 0x7D	; 125
    4d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    4d60:	11 e0       	ldi	r17, 0x01	; 1
    4d62:	fc 01       	movw	r30, r24
    4d64:	60 81       	ld	r22, Z
    4d66:	71 81       	ldd	r23, Z+1	; 0x01
    4d68:	82 81       	ldd	r24, Z+2	; 0x02
    4d6a:	93 81       	ldd	r25, Z+3	; 0x03
    4d6c:	20 e0       	ldi	r18, 0x00	; 0
    4d6e:	30 e0       	ldi	r19, 0x00	; 0
    4d70:	40 e8       	ldi	r20, 0x80	; 128
    4d72:	5f e3       	ldi	r21, 0x3F	; 63
    4d74:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    4d78:	88 23       	and	r24, r24
    4d7a:	0c f0       	brlt	.+2      	; 0x4d7e <default_path+0xd14>
    4d7c:	10 e0       	ldi	r17, 0x00	; 0
    4d7e:	11 23       	and	r17, r17
    4d80:	49 f0       	breq	.+18     	; 0x4d94 <default_path+0xd2a>
		__ticks = 1;
    4d82:	ce 01       	movw	r24, r28
    4d84:	89 57       	subi	r24, 0x79	; 121
    4d86:	9f 4f       	sbci	r25, 0xFF	; 255
    4d88:	21 e0       	ldi	r18, 0x01	; 1
    4d8a:	30 e0       	ldi	r19, 0x00	; 0
    4d8c:	fc 01       	movw	r30, r24
    4d8e:	31 83       	std	Z+1, r19	; 0x01
    4d90:	20 83       	st	Z, r18
    4d92:	74 c0       	rjmp	.+232    	; 0x4e7c <default_path+0xe12>
	else if (__tmp > 65535)
    4d94:	ce 01       	movw	r24, r28
    4d96:	8d 57       	subi	r24, 0x7D	; 125
    4d98:	9f 4f       	sbci	r25, 0xFF	; 255
    4d9a:	11 e0       	ldi	r17, 0x01	; 1
    4d9c:	fc 01       	movw	r30, r24
    4d9e:	60 81       	ld	r22, Z
    4da0:	71 81       	ldd	r23, Z+1	; 0x01
    4da2:	82 81       	ldd	r24, Z+2	; 0x02
    4da4:	93 81       	ldd	r25, Z+3	; 0x03
    4da6:	20 e0       	ldi	r18, 0x00	; 0
    4da8:	3f ef       	ldi	r19, 0xFF	; 255
    4daa:	4f e7       	ldi	r20, 0x7F	; 127
    4dac:	57 e4       	ldi	r21, 0x47	; 71
    4dae:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    4db2:	18 16       	cp	r1, r24
    4db4:	0c f0       	brlt	.+2      	; 0x4db8 <default_path+0xd4e>
    4db6:	10 e0       	ldi	r17, 0x00	; 0
    4db8:	11 23       	and	r17, r17
    4dba:	09 f4       	brne	.+2      	; 0x4dbe <default_path+0xd54>
    4dbc:	4d c0       	rjmp	.+154    	; 0x4e58 <default_path+0xdee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dbe:	ce 01       	movw	r24, r28
    4dc0:	81 58       	subi	r24, 0x81	; 129
    4dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    4dc4:	fc 01       	movw	r30, r24
    4dc6:	60 81       	ld	r22, Z
    4dc8:	71 81       	ldd	r23, Z+1	; 0x01
    4dca:	82 81       	ldd	r24, Z+2	; 0x02
    4dcc:	93 81       	ldd	r25, Z+3	; 0x03
    4dce:	20 e0       	ldi	r18, 0x00	; 0
    4dd0:	30 e0       	ldi	r19, 0x00	; 0
    4dd2:	40 e2       	ldi	r20, 0x20	; 32
    4dd4:	51 e4       	ldi	r21, 0x41	; 65
    4dd6:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    4dda:	dc 01       	movw	r26, r24
    4ddc:	cb 01       	movw	r24, r22
    4dde:	8e 01       	movw	r16, r28
    4de0:	09 57       	subi	r16, 0x79	; 121
    4de2:	1f 4f       	sbci	r17, 0xFF	; 255
    4de4:	bc 01       	movw	r22, r24
    4de6:	cd 01       	movw	r24, r26
    4de8:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    4dec:	dc 01       	movw	r26, r24
    4dee:	cb 01       	movw	r24, r22
    4df0:	f8 01       	movw	r30, r16
    4df2:	91 83       	std	Z+1, r25	; 0x01
    4df4:	80 83       	st	Z, r24
    4df6:	27 c0       	rjmp	.+78     	; 0x4e46 <default_path+0xddc>
    4df8:	ce 01       	movw	r24, r28
    4dfa:	87 57       	subi	r24, 0x77	; 119
    4dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    4dfe:	20 e7       	ldi	r18, 0x70	; 112
    4e00:	31 e0       	ldi	r19, 0x01	; 1
    4e02:	fc 01       	movw	r30, r24
    4e04:	31 83       	std	Z+1, r19	; 0x01
    4e06:	20 83       	st	Z, r18
    4e08:	ce 01       	movw	r24, r28
    4e0a:	87 57       	subi	r24, 0x77	; 119
    4e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    4e0e:	fc 01       	movw	r30, r24
    4e10:	80 81       	ld	r24, Z
    4e12:	91 81       	ldd	r25, Z+1	; 0x01
    4e14:	8c 01       	movw	r16, r24
    4e16:	c8 01       	movw	r24, r16
    4e18:	01 97       	sbiw	r24, 0x01	; 1
    4e1a:	f1 f7       	brne	.-4      	; 0x4e18 <default_path+0xdae>
    4e1c:	8c 01       	movw	r16, r24
    4e1e:	ce 01       	movw	r24, r28
    4e20:	87 57       	subi	r24, 0x77	; 119
    4e22:	9f 4f       	sbci	r25, 0xFF	; 255
    4e24:	fc 01       	movw	r30, r24
    4e26:	11 83       	std	Z+1, r17	; 0x01
    4e28:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e2a:	ce 01       	movw	r24, r28
    4e2c:	89 57       	subi	r24, 0x79	; 121
    4e2e:	9f 4f       	sbci	r25, 0xFF	; 255
    4e30:	9e 01       	movw	r18, r28
    4e32:	29 57       	subi	r18, 0x79	; 121
    4e34:	3f 4f       	sbci	r19, 0xFF	; 255
    4e36:	f9 01       	movw	r30, r18
    4e38:	20 81       	ld	r18, Z
    4e3a:	31 81       	ldd	r19, Z+1	; 0x01
    4e3c:	21 50       	subi	r18, 0x01	; 1
    4e3e:	30 40       	sbci	r19, 0x00	; 0
    4e40:	fc 01       	movw	r30, r24
    4e42:	31 83       	std	Z+1, r19	; 0x01
    4e44:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e46:	ce 01       	movw	r24, r28
    4e48:	89 57       	subi	r24, 0x79	; 121
    4e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    4e4c:	fc 01       	movw	r30, r24
    4e4e:	80 81       	ld	r24, Z
    4e50:	91 81       	ldd	r25, Z+1	; 0x01
    4e52:	00 97       	sbiw	r24, 0x00	; 0
    4e54:	89 f6       	brne	.-94     	; 0x4df8 <default_path+0xd8e>
    4e56:	2f c0       	rjmp	.+94     	; 0x4eb6 <default_path+0xe4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e58:	8e 01       	movw	r16, r28
    4e5a:	09 57       	subi	r16, 0x79	; 121
    4e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    4e5e:	ce 01       	movw	r24, r28
    4e60:	8d 57       	subi	r24, 0x7D	; 125
    4e62:	9f 4f       	sbci	r25, 0xFF	; 255
    4e64:	fc 01       	movw	r30, r24
    4e66:	60 81       	ld	r22, Z
    4e68:	71 81       	ldd	r23, Z+1	; 0x01
    4e6a:	82 81       	ldd	r24, Z+2	; 0x02
    4e6c:	93 81       	ldd	r25, Z+3	; 0x03
    4e6e:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    4e72:	dc 01       	movw	r26, r24
    4e74:	cb 01       	movw	r24, r22
    4e76:	f8 01       	movw	r30, r16
    4e78:	91 83       	std	Z+1, r25	; 0x01
    4e7a:	80 83       	st	Z, r24
    4e7c:	ce 01       	movw	r24, r28
    4e7e:	85 57       	subi	r24, 0x75	; 117
    4e80:	9f 4f       	sbci	r25, 0xFF	; 255
    4e82:	9e 01       	movw	r18, r28
    4e84:	29 57       	subi	r18, 0x79	; 121
    4e86:	3f 4f       	sbci	r19, 0xFF	; 255
    4e88:	f9 01       	movw	r30, r18
    4e8a:	20 81       	ld	r18, Z
    4e8c:	31 81       	ldd	r19, Z+1	; 0x01
    4e8e:	fc 01       	movw	r30, r24
    4e90:	31 83       	std	Z+1, r19	; 0x01
    4e92:	20 83       	st	Z, r18
    4e94:	ce 01       	movw	r24, r28
    4e96:	85 57       	subi	r24, 0x75	; 117
    4e98:	9f 4f       	sbci	r25, 0xFF	; 255
    4e9a:	fc 01       	movw	r30, r24
    4e9c:	80 81       	ld	r24, Z
    4e9e:	91 81       	ldd	r25, Z+1	; 0x01
    4ea0:	8c 01       	movw	r16, r24
    4ea2:	c8 01       	movw	r24, r16
    4ea4:	01 97       	sbiw	r24, 0x01	; 1
    4ea6:	f1 f7       	brne	.-4      	; 0x4ea4 <default_path+0xe3a>
    4ea8:	8c 01       	movw	r16, r24
    4eaa:	ce 01       	movw	r24, r28
    4eac:	85 57       	subi	r24, 0x75	; 117
    4eae:	9f 4f       	sbci	r25, 0xFF	; 255
    4eb0:	fc 01       	movw	r30, r24
    4eb2:	11 83       	std	Z+1, r17	; 0x01
    4eb4:	00 83       	st	Z, r16
	_delay_ms(300);
	
	move_forward();
    4eb6:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <move_forward>
	stop_bot();
    4eba:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    4ebe:	9e 01       	movw	r18, r28
    4ec0:	23 57       	subi	r18, 0x73	; 115
    4ec2:	3f 4f       	sbci	r19, 0xFF	; 255
    4ec4:	80 e0       	ldi	r24, 0x00	; 0
    4ec6:	90 e0       	ldi	r25, 0x00	; 0
    4ec8:	a6 e9       	ldi	r26, 0x96	; 150
    4eca:	b3 e4       	ldi	r27, 0x43	; 67
    4ecc:	f9 01       	movw	r30, r18
    4ece:	80 83       	st	Z, r24
    4ed0:	91 83       	std	Z+1, r25	; 0x01
    4ed2:	a2 83       	std	Z+2, r26	; 0x02
    4ed4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    4ed6:	8e 01       	movw	r16, r28
    4ed8:	0f 56       	subi	r16, 0x6F	; 111
    4eda:	1f 4f       	sbci	r17, 0xFF	; 255
    4edc:	ce 01       	movw	r24, r28
    4ede:	83 57       	subi	r24, 0x73	; 115
    4ee0:	9f 4f       	sbci	r25, 0xFF	; 255
    4ee2:	fc 01       	movw	r30, r24
    4ee4:	60 81       	ld	r22, Z
    4ee6:	71 81       	ldd	r23, Z+1	; 0x01
    4ee8:	82 81       	ldd	r24, Z+2	; 0x02
    4eea:	93 81       	ldd	r25, Z+3	; 0x03
    4eec:	26 e6       	ldi	r18, 0x66	; 102
    4eee:	36 e6       	ldi	r19, 0x66	; 102
    4ef0:	46 e6       	ldi	r20, 0x66	; 102
    4ef2:	55 e4       	ldi	r21, 0x45	; 69
    4ef4:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    4ef8:	dc 01       	movw	r26, r24
    4efa:	cb 01       	movw	r24, r22
    4efc:	f8 01       	movw	r30, r16
    4efe:	80 83       	st	Z, r24
    4f00:	91 83       	std	Z+1, r25	; 0x01
    4f02:	a2 83       	std	Z+2, r26	; 0x02
    4f04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f06:	ce 01       	movw	r24, r28
    4f08:	8f 56       	subi	r24, 0x6F	; 111
    4f0a:	9f 4f       	sbci	r25, 0xFF	; 255
    4f0c:	11 e0       	ldi	r17, 0x01	; 1
    4f0e:	fc 01       	movw	r30, r24
    4f10:	60 81       	ld	r22, Z
    4f12:	71 81       	ldd	r23, Z+1	; 0x01
    4f14:	82 81       	ldd	r24, Z+2	; 0x02
    4f16:	93 81       	ldd	r25, Z+3	; 0x03
    4f18:	20 e0       	ldi	r18, 0x00	; 0
    4f1a:	30 e0       	ldi	r19, 0x00	; 0
    4f1c:	40 e8       	ldi	r20, 0x80	; 128
    4f1e:	5f e3       	ldi	r21, 0x3F	; 63
    4f20:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    4f24:	88 23       	and	r24, r24
    4f26:	0c f0       	brlt	.+2      	; 0x4f2a <default_path+0xec0>
    4f28:	10 e0       	ldi	r17, 0x00	; 0
    4f2a:	11 23       	and	r17, r17
    4f2c:	49 f0       	breq	.+18     	; 0x4f40 <default_path+0xed6>
		__ticks = 1;
    4f2e:	ce 01       	movw	r24, r28
    4f30:	8b 56       	subi	r24, 0x6B	; 107
    4f32:	9f 4f       	sbci	r25, 0xFF	; 255
    4f34:	21 e0       	ldi	r18, 0x01	; 1
    4f36:	30 e0       	ldi	r19, 0x00	; 0
    4f38:	fc 01       	movw	r30, r24
    4f3a:	31 83       	std	Z+1, r19	; 0x01
    4f3c:	20 83       	st	Z, r18
    4f3e:	74 c0       	rjmp	.+232    	; 0x5028 <default_path+0xfbe>
	else if (__tmp > 65535)
    4f40:	ce 01       	movw	r24, r28
    4f42:	8f 56       	subi	r24, 0x6F	; 111
    4f44:	9f 4f       	sbci	r25, 0xFF	; 255
    4f46:	11 e0       	ldi	r17, 0x01	; 1
    4f48:	fc 01       	movw	r30, r24
    4f4a:	60 81       	ld	r22, Z
    4f4c:	71 81       	ldd	r23, Z+1	; 0x01
    4f4e:	82 81       	ldd	r24, Z+2	; 0x02
    4f50:	93 81       	ldd	r25, Z+3	; 0x03
    4f52:	20 e0       	ldi	r18, 0x00	; 0
    4f54:	3f ef       	ldi	r19, 0xFF	; 255
    4f56:	4f e7       	ldi	r20, 0x7F	; 127
    4f58:	57 e4       	ldi	r21, 0x47	; 71
    4f5a:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    4f5e:	18 16       	cp	r1, r24
    4f60:	0c f0       	brlt	.+2      	; 0x4f64 <default_path+0xefa>
    4f62:	10 e0       	ldi	r17, 0x00	; 0
    4f64:	11 23       	and	r17, r17
    4f66:	09 f4       	brne	.+2      	; 0x4f6a <default_path+0xf00>
    4f68:	4d c0       	rjmp	.+154    	; 0x5004 <default_path+0xf9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f6a:	ce 01       	movw	r24, r28
    4f6c:	83 57       	subi	r24, 0x73	; 115
    4f6e:	9f 4f       	sbci	r25, 0xFF	; 255
    4f70:	fc 01       	movw	r30, r24
    4f72:	60 81       	ld	r22, Z
    4f74:	71 81       	ldd	r23, Z+1	; 0x01
    4f76:	82 81       	ldd	r24, Z+2	; 0x02
    4f78:	93 81       	ldd	r25, Z+3	; 0x03
    4f7a:	20 e0       	ldi	r18, 0x00	; 0
    4f7c:	30 e0       	ldi	r19, 0x00	; 0
    4f7e:	40 e2       	ldi	r20, 0x20	; 32
    4f80:	51 e4       	ldi	r21, 0x41	; 65
    4f82:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    4f86:	dc 01       	movw	r26, r24
    4f88:	cb 01       	movw	r24, r22
    4f8a:	8e 01       	movw	r16, r28
    4f8c:	0b 56       	subi	r16, 0x6B	; 107
    4f8e:	1f 4f       	sbci	r17, 0xFF	; 255
    4f90:	bc 01       	movw	r22, r24
    4f92:	cd 01       	movw	r24, r26
    4f94:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    4f98:	dc 01       	movw	r26, r24
    4f9a:	cb 01       	movw	r24, r22
    4f9c:	f8 01       	movw	r30, r16
    4f9e:	91 83       	std	Z+1, r25	; 0x01
    4fa0:	80 83       	st	Z, r24
    4fa2:	27 c0       	rjmp	.+78     	; 0x4ff2 <default_path+0xf88>
    4fa4:	ce 01       	movw	r24, r28
    4fa6:	89 56       	subi	r24, 0x69	; 105
    4fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    4faa:	20 e7       	ldi	r18, 0x70	; 112
    4fac:	31 e0       	ldi	r19, 0x01	; 1
    4fae:	fc 01       	movw	r30, r24
    4fb0:	31 83       	std	Z+1, r19	; 0x01
    4fb2:	20 83       	st	Z, r18
    4fb4:	ce 01       	movw	r24, r28
    4fb6:	89 56       	subi	r24, 0x69	; 105
    4fb8:	9f 4f       	sbci	r25, 0xFF	; 255
    4fba:	fc 01       	movw	r30, r24
    4fbc:	80 81       	ld	r24, Z
    4fbe:	91 81       	ldd	r25, Z+1	; 0x01
    4fc0:	8c 01       	movw	r16, r24
    4fc2:	c8 01       	movw	r24, r16
    4fc4:	01 97       	sbiw	r24, 0x01	; 1
    4fc6:	f1 f7       	brne	.-4      	; 0x4fc4 <default_path+0xf5a>
    4fc8:	8c 01       	movw	r16, r24
    4fca:	ce 01       	movw	r24, r28
    4fcc:	89 56       	subi	r24, 0x69	; 105
    4fce:	9f 4f       	sbci	r25, 0xFF	; 255
    4fd0:	fc 01       	movw	r30, r24
    4fd2:	11 83       	std	Z+1, r17	; 0x01
    4fd4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fd6:	ce 01       	movw	r24, r28
    4fd8:	8b 56       	subi	r24, 0x6B	; 107
    4fda:	9f 4f       	sbci	r25, 0xFF	; 255
    4fdc:	9e 01       	movw	r18, r28
    4fde:	2b 56       	subi	r18, 0x6B	; 107
    4fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    4fe2:	f9 01       	movw	r30, r18
    4fe4:	20 81       	ld	r18, Z
    4fe6:	31 81       	ldd	r19, Z+1	; 0x01
    4fe8:	21 50       	subi	r18, 0x01	; 1
    4fea:	30 40       	sbci	r19, 0x00	; 0
    4fec:	fc 01       	movw	r30, r24
    4fee:	31 83       	std	Z+1, r19	; 0x01
    4ff0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ff2:	ce 01       	movw	r24, r28
    4ff4:	8b 56       	subi	r24, 0x6B	; 107
    4ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ff8:	fc 01       	movw	r30, r24
    4ffa:	80 81       	ld	r24, Z
    4ffc:	91 81       	ldd	r25, Z+1	; 0x01
    4ffe:	00 97       	sbiw	r24, 0x00	; 0
    5000:	89 f6       	brne	.-94     	; 0x4fa4 <default_path+0xf3a>
    5002:	2f c0       	rjmp	.+94     	; 0x5062 <default_path+0xff8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5004:	8e 01       	movw	r16, r28
    5006:	0b 56       	subi	r16, 0x6B	; 107
    5008:	1f 4f       	sbci	r17, 0xFF	; 255
    500a:	ce 01       	movw	r24, r28
    500c:	8f 56       	subi	r24, 0x6F	; 111
    500e:	9f 4f       	sbci	r25, 0xFF	; 255
    5010:	fc 01       	movw	r30, r24
    5012:	60 81       	ld	r22, Z
    5014:	71 81       	ldd	r23, Z+1	; 0x01
    5016:	82 81       	ldd	r24, Z+2	; 0x02
    5018:	93 81       	ldd	r25, Z+3	; 0x03
    501a:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    501e:	dc 01       	movw	r26, r24
    5020:	cb 01       	movw	r24, r22
    5022:	f8 01       	movw	r30, r16
    5024:	91 83       	std	Z+1, r25	; 0x01
    5026:	80 83       	st	Z, r24
    5028:	ce 01       	movw	r24, r28
    502a:	87 56       	subi	r24, 0x67	; 103
    502c:	9f 4f       	sbci	r25, 0xFF	; 255
    502e:	9e 01       	movw	r18, r28
    5030:	2b 56       	subi	r18, 0x6B	; 107
    5032:	3f 4f       	sbci	r19, 0xFF	; 255
    5034:	f9 01       	movw	r30, r18
    5036:	20 81       	ld	r18, Z
    5038:	31 81       	ldd	r19, Z+1	; 0x01
    503a:	fc 01       	movw	r30, r24
    503c:	31 83       	std	Z+1, r19	; 0x01
    503e:	20 83       	st	Z, r18
    5040:	ce 01       	movw	r24, r28
    5042:	87 56       	subi	r24, 0x67	; 103
    5044:	9f 4f       	sbci	r25, 0xFF	; 255
    5046:	fc 01       	movw	r30, r24
    5048:	80 81       	ld	r24, Z
    504a:	91 81       	ldd	r25, Z+1	; 0x01
    504c:	8c 01       	movw	r16, r24
    504e:	c8 01       	movw	r24, r16
    5050:	01 97       	sbiw	r24, 0x01	; 1
    5052:	f1 f7       	brne	.-4      	; 0x5050 <default_path+0xfe6>
    5054:	8c 01       	movw	r16, r24
    5056:	ce 01       	movw	r24, r28
    5058:	87 56       	subi	r24, 0x67	; 103
    505a:	9f 4f       	sbci	r25, 0xFF	; 255
    505c:	fc 01       	movw	r30, r24
    505e:	11 83       	std	Z+1, r17	; 0x01
    5060:	00 83       	st	Z, r16
	_delay_ms(300);
	
	forward_mm(20);
    5062:	84 e1       	ldi	r24, 0x14	; 20
    5064:	90 e0       	ldi	r25, 0x00	; 0
    5066:	0e 94 4d 13 	call	0x269a	; 0x269a <forward_mm>
	send_to_pc();
    506a:	0e 94 5f 3a 	call	0x74be	; 0x74be <send_to_pc>
	
	move_forward();
    506e:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <move_forward>
	stop_bot();
    5072:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    5076:	9e 01       	movw	r18, r28
    5078:	25 56       	subi	r18, 0x65	; 101
    507a:	3f 4f       	sbci	r19, 0xFF	; 255
    507c:	80 e0       	ldi	r24, 0x00	; 0
    507e:	90 e0       	ldi	r25, 0x00	; 0
    5080:	a6 e9       	ldi	r26, 0x96	; 150
    5082:	b3 e4       	ldi	r27, 0x43	; 67
    5084:	f9 01       	movw	r30, r18
    5086:	80 83       	st	Z, r24
    5088:	91 83       	std	Z+1, r25	; 0x01
    508a:	a2 83       	std	Z+2, r26	; 0x02
    508c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    508e:	8e 01       	movw	r16, r28
    5090:	01 56       	subi	r16, 0x61	; 97
    5092:	1f 4f       	sbci	r17, 0xFF	; 255
    5094:	ce 01       	movw	r24, r28
    5096:	85 56       	subi	r24, 0x65	; 101
    5098:	9f 4f       	sbci	r25, 0xFF	; 255
    509a:	fc 01       	movw	r30, r24
    509c:	60 81       	ld	r22, Z
    509e:	71 81       	ldd	r23, Z+1	; 0x01
    50a0:	82 81       	ldd	r24, Z+2	; 0x02
    50a2:	93 81       	ldd	r25, Z+3	; 0x03
    50a4:	26 e6       	ldi	r18, 0x66	; 102
    50a6:	36 e6       	ldi	r19, 0x66	; 102
    50a8:	46 e6       	ldi	r20, 0x66	; 102
    50aa:	55 e4       	ldi	r21, 0x45	; 69
    50ac:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    50b0:	dc 01       	movw	r26, r24
    50b2:	cb 01       	movw	r24, r22
    50b4:	f8 01       	movw	r30, r16
    50b6:	80 83       	st	Z, r24
    50b8:	91 83       	std	Z+1, r25	; 0x01
    50ba:	a2 83       	std	Z+2, r26	; 0x02
    50bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50be:	ce 01       	movw	r24, r28
    50c0:	81 56       	subi	r24, 0x61	; 97
    50c2:	9f 4f       	sbci	r25, 0xFF	; 255
    50c4:	11 e0       	ldi	r17, 0x01	; 1
    50c6:	fc 01       	movw	r30, r24
    50c8:	60 81       	ld	r22, Z
    50ca:	71 81       	ldd	r23, Z+1	; 0x01
    50cc:	82 81       	ldd	r24, Z+2	; 0x02
    50ce:	93 81       	ldd	r25, Z+3	; 0x03
    50d0:	20 e0       	ldi	r18, 0x00	; 0
    50d2:	30 e0       	ldi	r19, 0x00	; 0
    50d4:	40 e8       	ldi	r20, 0x80	; 128
    50d6:	5f e3       	ldi	r21, 0x3F	; 63
    50d8:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    50dc:	88 23       	and	r24, r24
    50de:	0c f0       	brlt	.+2      	; 0x50e2 <default_path+0x1078>
    50e0:	10 e0       	ldi	r17, 0x00	; 0
    50e2:	11 23       	and	r17, r17
    50e4:	49 f0       	breq	.+18     	; 0x50f8 <default_path+0x108e>
		__ticks = 1;
    50e6:	ce 01       	movw	r24, r28
    50e8:	8d 55       	subi	r24, 0x5D	; 93
    50ea:	9f 4f       	sbci	r25, 0xFF	; 255
    50ec:	21 e0       	ldi	r18, 0x01	; 1
    50ee:	30 e0       	ldi	r19, 0x00	; 0
    50f0:	fc 01       	movw	r30, r24
    50f2:	31 83       	std	Z+1, r19	; 0x01
    50f4:	20 83       	st	Z, r18
    50f6:	74 c0       	rjmp	.+232    	; 0x51e0 <default_path+0x1176>
	else if (__tmp > 65535)
    50f8:	ce 01       	movw	r24, r28
    50fa:	81 56       	subi	r24, 0x61	; 97
    50fc:	9f 4f       	sbci	r25, 0xFF	; 255
    50fe:	11 e0       	ldi	r17, 0x01	; 1
    5100:	fc 01       	movw	r30, r24
    5102:	60 81       	ld	r22, Z
    5104:	71 81       	ldd	r23, Z+1	; 0x01
    5106:	82 81       	ldd	r24, Z+2	; 0x02
    5108:	93 81       	ldd	r25, Z+3	; 0x03
    510a:	20 e0       	ldi	r18, 0x00	; 0
    510c:	3f ef       	ldi	r19, 0xFF	; 255
    510e:	4f e7       	ldi	r20, 0x7F	; 127
    5110:	57 e4       	ldi	r21, 0x47	; 71
    5112:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    5116:	18 16       	cp	r1, r24
    5118:	0c f0       	brlt	.+2      	; 0x511c <default_path+0x10b2>
    511a:	10 e0       	ldi	r17, 0x00	; 0
    511c:	11 23       	and	r17, r17
    511e:	09 f4       	brne	.+2      	; 0x5122 <default_path+0x10b8>
    5120:	4d c0       	rjmp	.+154    	; 0x51bc <default_path+0x1152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5122:	ce 01       	movw	r24, r28
    5124:	85 56       	subi	r24, 0x65	; 101
    5126:	9f 4f       	sbci	r25, 0xFF	; 255
    5128:	fc 01       	movw	r30, r24
    512a:	60 81       	ld	r22, Z
    512c:	71 81       	ldd	r23, Z+1	; 0x01
    512e:	82 81       	ldd	r24, Z+2	; 0x02
    5130:	93 81       	ldd	r25, Z+3	; 0x03
    5132:	20 e0       	ldi	r18, 0x00	; 0
    5134:	30 e0       	ldi	r19, 0x00	; 0
    5136:	40 e2       	ldi	r20, 0x20	; 32
    5138:	51 e4       	ldi	r21, 0x41	; 65
    513a:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    513e:	dc 01       	movw	r26, r24
    5140:	cb 01       	movw	r24, r22
    5142:	8e 01       	movw	r16, r28
    5144:	0d 55       	subi	r16, 0x5D	; 93
    5146:	1f 4f       	sbci	r17, 0xFF	; 255
    5148:	bc 01       	movw	r22, r24
    514a:	cd 01       	movw	r24, r26
    514c:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    5150:	dc 01       	movw	r26, r24
    5152:	cb 01       	movw	r24, r22
    5154:	f8 01       	movw	r30, r16
    5156:	91 83       	std	Z+1, r25	; 0x01
    5158:	80 83       	st	Z, r24
    515a:	27 c0       	rjmp	.+78     	; 0x51aa <default_path+0x1140>
    515c:	ce 01       	movw	r24, r28
    515e:	8b 55       	subi	r24, 0x5B	; 91
    5160:	9f 4f       	sbci	r25, 0xFF	; 255
    5162:	20 e7       	ldi	r18, 0x70	; 112
    5164:	31 e0       	ldi	r19, 0x01	; 1
    5166:	fc 01       	movw	r30, r24
    5168:	31 83       	std	Z+1, r19	; 0x01
    516a:	20 83       	st	Z, r18
    516c:	ce 01       	movw	r24, r28
    516e:	8b 55       	subi	r24, 0x5B	; 91
    5170:	9f 4f       	sbci	r25, 0xFF	; 255
    5172:	fc 01       	movw	r30, r24
    5174:	80 81       	ld	r24, Z
    5176:	91 81       	ldd	r25, Z+1	; 0x01
    5178:	8c 01       	movw	r16, r24
    517a:	c8 01       	movw	r24, r16
    517c:	01 97       	sbiw	r24, 0x01	; 1
    517e:	f1 f7       	brne	.-4      	; 0x517c <default_path+0x1112>
    5180:	8c 01       	movw	r16, r24
    5182:	ce 01       	movw	r24, r28
    5184:	8b 55       	subi	r24, 0x5B	; 91
    5186:	9f 4f       	sbci	r25, 0xFF	; 255
    5188:	fc 01       	movw	r30, r24
    518a:	11 83       	std	Z+1, r17	; 0x01
    518c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    518e:	ce 01       	movw	r24, r28
    5190:	8d 55       	subi	r24, 0x5D	; 93
    5192:	9f 4f       	sbci	r25, 0xFF	; 255
    5194:	9e 01       	movw	r18, r28
    5196:	2d 55       	subi	r18, 0x5D	; 93
    5198:	3f 4f       	sbci	r19, 0xFF	; 255
    519a:	f9 01       	movw	r30, r18
    519c:	20 81       	ld	r18, Z
    519e:	31 81       	ldd	r19, Z+1	; 0x01
    51a0:	21 50       	subi	r18, 0x01	; 1
    51a2:	30 40       	sbci	r19, 0x00	; 0
    51a4:	fc 01       	movw	r30, r24
    51a6:	31 83       	std	Z+1, r19	; 0x01
    51a8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51aa:	ce 01       	movw	r24, r28
    51ac:	8d 55       	subi	r24, 0x5D	; 93
    51ae:	9f 4f       	sbci	r25, 0xFF	; 255
    51b0:	fc 01       	movw	r30, r24
    51b2:	80 81       	ld	r24, Z
    51b4:	91 81       	ldd	r25, Z+1	; 0x01
    51b6:	00 97       	sbiw	r24, 0x00	; 0
    51b8:	89 f6       	brne	.-94     	; 0x515c <default_path+0x10f2>
    51ba:	2f c0       	rjmp	.+94     	; 0x521a <default_path+0x11b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51bc:	8e 01       	movw	r16, r28
    51be:	0d 55       	subi	r16, 0x5D	; 93
    51c0:	1f 4f       	sbci	r17, 0xFF	; 255
    51c2:	ce 01       	movw	r24, r28
    51c4:	81 56       	subi	r24, 0x61	; 97
    51c6:	9f 4f       	sbci	r25, 0xFF	; 255
    51c8:	fc 01       	movw	r30, r24
    51ca:	60 81       	ld	r22, Z
    51cc:	71 81       	ldd	r23, Z+1	; 0x01
    51ce:	82 81       	ldd	r24, Z+2	; 0x02
    51d0:	93 81       	ldd	r25, Z+3	; 0x03
    51d2:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    51d6:	dc 01       	movw	r26, r24
    51d8:	cb 01       	movw	r24, r22
    51da:	f8 01       	movw	r30, r16
    51dc:	91 83       	std	Z+1, r25	; 0x01
    51de:	80 83       	st	Z, r24
    51e0:	ce 01       	movw	r24, r28
    51e2:	89 55       	subi	r24, 0x59	; 89
    51e4:	9f 4f       	sbci	r25, 0xFF	; 255
    51e6:	9e 01       	movw	r18, r28
    51e8:	2d 55       	subi	r18, 0x5D	; 93
    51ea:	3f 4f       	sbci	r19, 0xFF	; 255
    51ec:	f9 01       	movw	r30, r18
    51ee:	20 81       	ld	r18, Z
    51f0:	31 81       	ldd	r19, Z+1	; 0x01
    51f2:	fc 01       	movw	r30, r24
    51f4:	31 83       	std	Z+1, r19	; 0x01
    51f6:	20 83       	st	Z, r18
    51f8:	ce 01       	movw	r24, r28
    51fa:	89 55       	subi	r24, 0x59	; 89
    51fc:	9f 4f       	sbci	r25, 0xFF	; 255
    51fe:	fc 01       	movw	r30, r24
    5200:	80 81       	ld	r24, Z
    5202:	91 81       	ldd	r25, Z+1	; 0x01
    5204:	8c 01       	movw	r16, r24
    5206:	c8 01       	movw	r24, r16
    5208:	01 97       	sbiw	r24, 0x01	; 1
    520a:	f1 f7       	brne	.-4      	; 0x5208 <default_path+0x119e>
    520c:	8c 01       	movw	r16, r24
    520e:	ce 01       	movw	r24, r28
    5210:	89 55       	subi	r24, 0x59	; 89
    5212:	9f 4f       	sbci	r25, 0xFF	; 255
    5214:	fc 01       	movw	r30, r24
    5216:	11 83       	std	Z+1, r17	; 0x01
    5218:	00 83       	st	Z, r16
	_delay_ms(300);
	
	forward_mm(53);
    521a:	85 e3       	ldi	r24, 0x35	; 53
    521c:	90 e0       	ldi	r25, 0x00	; 0
    521e:	0e 94 4d 13 	call	0x269a	; 0x269a <forward_mm>
	stop_bot();
    5222:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    5226:	9e 01       	movw	r18, r28
    5228:	27 55       	subi	r18, 0x57	; 87
    522a:	3f 4f       	sbci	r19, 0xFF	; 255
    522c:	80 e0       	ldi	r24, 0x00	; 0
    522e:	90 e0       	ldi	r25, 0x00	; 0
    5230:	a6 e9       	ldi	r26, 0x96	; 150
    5232:	b3 e4       	ldi	r27, 0x43	; 67
    5234:	f9 01       	movw	r30, r18
    5236:	80 83       	st	Z, r24
    5238:	91 83       	std	Z+1, r25	; 0x01
    523a:	a2 83       	std	Z+2, r26	; 0x02
    523c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    523e:	8e 01       	movw	r16, r28
    5240:	03 55       	subi	r16, 0x53	; 83
    5242:	1f 4f       	sbci	r17, 0xFF	; 255
    5244:	ce 01       	movw	r24, r28
    5246:	87 55       	subi	r24, 0x57	; 87
    5248:	9f 4f       	sbci	r25, 0xFF	; 255
    524a:	fc 01       	movw	r30, r24
    524c:	60 81       	ld	r22, Z
    524e:	71 81       	ldd	r23, Z+1	; 0x01
    5250:	82 81       	ldd	r24, Z+2	; 0x02
    5252:	93 81       	ldd	r25, Z+3	; 0x03
    5254:	26 e6       	ldi	r18, 0x66	; 102
    5256:	36 e6       	ldi	r19, 0x66	; 102
    5258:	46 e6       	ldi	r20, 0x66	; 102
    525a:	55 e4       	ldi	r21, 0x45	; 69
    525c:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    5260:	dc 01       	movw	r26, r24
    5262:	cb 01       	movw	r24, r22
    5264:	f8 01       	movw	r30, r16
    5266:	80 83       	st	Z, r24
    5268:	91 83       	std	Z+1, r25	; 0x01
    526a:	a2 83       	std	Z+2, r26	; 0x02
    526c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    526e:	ce 01       	movw	r24, r28
    5270:	83 55       	subi	r24, 0x53	; 83
    5272:	9f 4f       	sbci	r25, 0xFF	; 255
    5274:	11 e0       	ldi	r17, 0x01	; 1
    5276:	fc 01       	movw	r30, r24
    5278:	60 81       	ld	r22, Z
    527a:	71 81       	ldd	r23, Z+1	; 0x01
    527c:	82 81       	ldd	r24, Z+2	; 0x02
    527e:	93 81       	ldd	r25, Z+3	; 0x03
    5280:	20 e0       	ldi	r18, 0x00	; 0
    5282:	30 e0       	ldi	r19, 0x00	; 0
    5284:	40 e8       	ldi	r20, 0x80	; 128
    5286:	5f e3       	ldi	r21, 0x3F	; 63
    5288:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    528c:	88 23       	and	r24, r24
    528e:	0c f0       	brlt	.+2      	; 0x5292 <default_path+0x1228>
    5290:	10 e0       	ldi	r17, 0x00	; 0
    5292:	11 23       	and	r17, r17
    5294:	49 f0       	breq	.+18     	; 0x52a8 <default_path+0x123e>
		__ticks = 1;
    5296:	ce 01       	movw	r24, r28
    5298:	8f 54       	subi	r24, 0x4F	; 79
    529a:	9f 4f       	sbci	r25, 0xFF	; 255
    529c:	21 e0       	ldi	r18, 0x01	; 1
    529e:	30 e0       	ldi	r19, 0x00	; 0
    52a0:	fc 01       	movw	r30, r24
    52a2:	31 83       	std	Z+1, r19	; 0x01
    52a4:	20 83       	st	Z, r18
    52a6:	74 c0       	rjmp	.+232    	; 0x5390 <default_path+0x1326>
	else if (__tmp > 65535)
    52a8:	ce 01       	movw	r24, r28
    52aa:	83 55       	subi	r24, 0x53	; 83
    52ac:	9f 4f       	sbci	r25, 0xFF	; 255
    52ae:	11 e0       	ldi	r17, 0x01	; 1
    52b0:	fc 01       	movw	r30, r24
    52b2:	60 81       	ld	r22, Z
    52b4:	71 81       	ldd	r23, Z+1	; 0x01
    52b6:	82 81       	ldd	r24, Z+2	; 0x02
    52b8:	93 81       	ldd	r25, Z+3	; 0x03
    52ba:	20 e0       	ldi	r18, 0x00	; 0
    52bc:	3f ef       	ldi	r19, 0xFF	; 255
    52be:	4f e7       	ldi	r20, 0x7F	; 127
    52c0:	57 e4       	ldi	r21, 0x47	; 71
    52c2:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    52c6:	18 16       	cp	r1, r24
    52c8:	0c f0       	brlt	.+2      	; 0x52cc <default_path+0x1262>
    52ca:	10 e0       	ldi	r17, 0x00	; 0
    52cc:	11 23       	and	r17, r17
    52ce:	09 f4       	brne	.+2      	; 0x52d2 <default_path+0x1268>
    52d0:	4d c0       	rjmp	.+154    	; 0x536c <default_path+0x1302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52d2:	ce 01       	movw	r24, r28
    52d4:	87 55       	subi	r24, 0x57	; 87
    52d6:	9f 4f       	sbci	r25, 0xFF	; 255
    52d8:	fc 01       	movw	r30, r24
    52da:	60 81       	ld	r22, Z
    52dc:	71 81       	ldd	r23, Z+1	; 0x01
    52de:	82 81       	ldd	r24, Z+2	; 0x02
    52e0:	93 81       	ldd	r25, Z+3	; 0x03
    52e2:	20 e0       	ldi	r18, 0x00	; 0
    52e4:	30 e0       	ldi	r19, 0x00	; 0
    52e6:	40 e2       	ldi	r20, 0x20	; 32
    52e8:	51 e4       	ldi	r21, 0x41	; 65
    52ea:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    52ee:	dc 01       	movw	r26, r24
    52f0:	cb 01       	movw	r24, r22
    52f2:	8e 01       	movw	r16, r28
    52f4:	0f 54       	subi	r16, 0x4F	; 79
    52f6:	1f 4f       	sbci	r17, 0xFF	; 255
    52f8:	bc 01       	movw	r22, r24
    52fa:	cd 01       	movw	r24, r26
    52fc:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    5300:	dc 01       	movw	r26, r24
    5302:	cb 01       	movw	r24, r22
    5304:	f8 01       	movw	r30, r16
    5306:	91 83       	std	Z+1, r25	; 0x01
    5308:	80 83       	st	Z, r24
    530a:	27 c0       	rjmp	.+78     	; 0x535a <default_path+0x12f0>
    530c:	ce 01       	movw	r24, r28
    530e:	8d 54       	subi	r24, 0x4D	; 77
    5310:	9f 4f       	sbci	r25, 0xFF	; 255
    5312:	20 e7       	ldi	r18, 0x70	; 112
    5314:	31 e0       	ldi	r19, 0x01	; 1
    5316:	fc 01       	movw	r30, r24
    5318:	31 83       	std	Z+1, r19	; 0x01
    531a:	20 83       	st	Z, r18
    531c:	ce 01       	movw	r24, r28
    531e:	8d 54       	subi	r24, 0x4D	; 77
    5320:	9f 4f       	sbci	r25, 0xFF	; 255
    5322:	fc 01       	movw	r30, r24
    5324:	80 81       	ld	r24, Z
    5326:	91 81       	ldd	r25, Z+1	; 0x01
    5328:	8c 01       	movw	r16, r24
    532a:	c8 01       	movw	r24, r16
    532c:	01 97       	sbiw	r24, 0x01	; 1
    532e:	f1 f7       	brne	.-4      	; 0x532c <default_path+0x12c2>
    5330:	8c 01       	movw	r16, r24
    5332:	ce 01       	movw	r24, r28
    5334:	8d 54       	subi	r24, 0x4D	; 77
    5336:	9f 4f       	sbci	r25, 0xFF	; 255
    5338:	fc 01       	movw	r30, r24
    533a:	11 83       	std	Z+1, r17	; 0x01
    533c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    533e:	ce 01       	movw	r24, r28
    5340:	8f 54       	subi	r24, 0x4F	; 79
    5342:	9f 4f       	sbci	r25, 0xFF	; 255
    5344:	9e 01       	movw	r18, r28
    5346:	2f 54       	subi	r18, 0x4F	; 79
    5348:	3f 4f       	sbci	r19, 0xFF	; 255
    534a:	f9 01       	movw	r30, r18
    534c:	20 81       	ld	r18, Z
    534e:	31 81       	ldd	r19, Z+1	; 0x01
    5350:	21 50       	subi	r18, 0x01	; 1
    5352:	30 40       	sbci	r19, 0x00	; 0
    5354:	fc 01       	movw	r30, r24
    5356:	31 83       	std	Z+1, r19	; 0x01
    5358:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    535a:	ce 01       	movw	r24, r28
    535c:	8f 54       	subi	r24, 0x4F	; 79
    535e:	9f 4f       	sbci	r25, 0xFF	; 255
    5360:	fc 01       	movw	r30, r24
    5362:	80 81       	ld	r24, Z
    5364:	91 81       	ldd	r25, Z+1	; 0x01
    5366:	00 97       	sbiw	r24, 0x00	; 0
    5368:	89 f6       	brne	.-94     	; 0x530c <default_path+0x12a2>
    536a:	2f c0       	rjmp	.+94     	; 0x53ca <default_path+0x1360>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    536c:	8e 01       	movw	r16, r28
    536e:	0f 54       	subi	r16, 0x4F	; 79
    5370:	1f 4f       	sbci	r17, 0xFF	; 255
    5372:	ce 01       	movw	r24, r28
    5374:	83 55       	subi	r24, 0x53	; 83
    5376:	9f 4f       	sbci	r25, 0xFF	; 255
    5378:	fc 01       	movw	r30, r24
    537a:	60 81       	ld	r22, Z
    537c:	71 81       	ldd	r23, Z+1	; 0x01
    537e:	82 81       	ldd	r24, Z+2	; 0x02
    5380:	93 81       	ldd	r25, Z+3	; 0x03
    5382:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    5386:	dc 01       	movw	r26, r24
    5388:	cb 01       	movw	r24, r22
    538a:	f8 01       	movw	r30, r16
    538c:	91 83       	std	Z+1, r25	; 0x01
    538e:	80 83       	st	Z, r24
    5390:	ce 01       	movw	r24, r28
    5392:	8b 54       	subi	r24, 0x4B	; 75
    5394:	9f 4f       	sbci	r25, 0xFF	; 255
    5396:	9e 01       	movw	r18, r28
    5398:	2f 54       	subi	r18, 0x4F	; 79
    539a:	3f 4f       	sbci	r19, 0xFF	; 255
    539c:	f9 01       	movw	r30, r18
    539e:	20 81       	ld	r18, Z
    53a0:	31 81       	ldd	r19, Z+1	; 0x01
    53a2:	fc 01       	movw	r30, r24
    53a4:	31 83       	std	Z+1, r19	; 0x01
    53a6:	20 83       	st	Z, r18
    53a8:	ce 01       	movw	r24, r28
    53aa:	8b 54       	subi	r24, 0x4B	; 75
    53ac:	9f 4f       	sbci	r25, 0xFF	; 255
    53ae:	fc 01       	movw	r30, r24
    53b0:	80 81       	ld	r24, Z
    53b2:	91 81       	ldd	r25, Z+1	; 0x01
    53b4:	8c 01       	movw	r16, r24
    53b6:	c8 01       	movw	r24, r16
    53b8:	01 97       	sbiw	r24, 0x01	; 1
    53ba:	f1 f7       	brne	.-4      	; 0x53b8 <default_path+0x134e>
    53bc:	8c 01       	movw	r16, r24
    53be:	ce 01       	movw	r24, r28
    53c0:	8b 54       	subi	r24, 0x4B	; 75
    53c2:	9f 4f       	sbci	r25, 0xFF	; 255
    53c4:	fc 01       	movw	r30, r24
    53c6:	11 83       	std	Z+1, r17	; 0x01
    53c8:	00 83       	st	Z, r16
	_delay_ms(300);
	
	left_turn();
    53ca:	0e 94 b8 1c 	call	0x3970	; 0x3970 <left_turn>
	stop_bot();
    53ce:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    53d2:	9e 01       	movw	r18, r28
    53d4:	29 54       	subi	r18, 0x49	; 73
    53d6:	3f 4f       	sbci	r19, 0xFF	; 255
    53d8:	80 e0       	ldi	r24, 0x00	; 0
    53da:	90 e0       	ldi	r25, 0x00	; 0
    53dc:	a6 e9       	ldi	r26, 0x96	; 150
    53de:	b3 e4       	ldi	r27, 0x43	; 67
    53e0:	f9 01       	movw	r30, r18
    53e2:	80 83       	st	Z, r24
    53e4:	91 83       	std	Z+1, r25	; 0x01
    53e6:	a2 83       	std	Z+2, r26	; 0x02
    53e8:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    53ea:	8e 01       	movw	r16, r28
    53ec:	05 54       	subi	r16, 0x45	; 69
    53ee:	1f 4f       	sbci	r17, 0xFF	; 255
    53f0:	ce 01       	movw	r24, r28
    53f2:	89 54       	subi	r24, 0x49	; 73
    53f4:	9f 4f       	sbci	r25, 0xFF	; 255
    53f6:	fc 01       	movw	r30, r24
    53f8:	60 81       	ld	r22, Z
    53fa:	71 81       	ldd	r23, Z+1	; 0x01
    53fc:	82 81       	ldd	r24, Z+2	; 0x02
    53fe:	93 81       	ldd	r25, Z+3	; 0x03
    5400:	26 e6       	ldi	r18, 0x66	; 102
    5402:	36 e6       	ldi	r19, 0x66	; 102
    5404:	46 e6       	ldi	r20, 0x66	; 102
    5406:	55 e4       	ldi	r21, 0x45	; 69
    5408:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    540c:	dc 01       	movw	r26, r24
    540e:	cb 01       	movw	r24, r22
    5410:	f8 01       	movw	r30, r16
    5412:	80 83       	st	Z, r24
    5414:	91 83       	std	Z+1, r25	; 0x01
    5416:	a2 83       	std	Z+2, r26	; 0x02
    5418:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    541a:	ce 01       	movw	r24, r28
    541c:	85 54       	subi	r24, 0x45	; 69
    541e:	9f 4f       	sbci	r25, 0xFF	; 255
    5420:	11 e0       	ldi	r17, 0x01	; 1
    5422:	fc 01       	movw	r30, r24
    5424:	60 81       	ld	r22, Z
    5426:	71 81       	ldd	r23, Z+1	; 0x01
    5428:	82 81       	ldd	r24, Z+2	; 0x02
    542a:	93 81       	ldd	r25, Z+3	; 0x03
    542c:	20 e0       	ldi	r18, 0x00	; 0
    542e:	30 e0       	ldi	r19, 0x00	; 0
    5430:	40 e8       	ldi	r20, 0x80	; 128
    5432:	5f e3       	ldi	r21, 0x3F	; 63
    5434:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    5438:	88 23       	and	r24, r24
    543a:	0c f0       	brlt	.+2      	; 0x543e <default_path+0x13d4>
    543c:	10 e0       	ldi	r17, 0x00	; 0
    543e:	11 23       	and	r17, r17
    5440:	49 f0       	breq	.+18     	; 0x5454 <default_path+0x13ea>
		__ticks = 1;
    5442:	ce 01       	movw	r24, r28
    5444:	81 54       	subi	r24, 0x41	; 65
    5446:	9f 4f       	sbci	r25, 0xFF	; 255
    5448:	21 e0       	ldi	r18, 0x01	; 1
    544a:	30 e0       	ldi	r19, 0x00	; 0
    544c:	fc 01       	movw	r30, r24
    544e:	31 83       	std	Z+1, r19	; 0x01
    5450:	20 83       	st	Z, r18
    5452:	74 c0       	rjmp	.+232    	; 0x553c <default_path+0x14d2>
	else if (__tmp > 65535)
    5454:	ce 01       	movw	r24, r28
    5456:	85 54       	subi	r24, 0x45	; 69
    5458:	9f 4f       	sbci	r25, 0xFF	; 255
    545a:	11 e0       	ldi	r17, 0x01	; 1
    545c:	fc 01       	movw	r30, r24
    545e:	60 81       	ld	r22, Z
    5460:	71 81       	ldd	r23, Z+1	; 0x01
    5462:	82 81       	ldd	r24, Z+2	; 0x02
    5464:	93 81       	ldd	r25, Z+3	; 0x03
    5466:	20 e0       	ldi	r18, 0x00	; 0
    5468:	3f ef       	ldi	r19, 0xFF	; 255
    546a:	4f e7       	ldi	r20, 0x7F	; 127
    546c:	57 e4       	ldi	r21, 0x47	; 71
    546e:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    5472:	18 16       	cp	r1, r24
    5474:	0c f0       	brlt	.+2      	; 0x5478 <default_path+0x140e>
    5476:	10 e0       	ldi	r17, 0x00	; 0
    5478:	11 23       	and	r17, r17
    547a:	09 f4       	brne	.+2      	; 0x547e <default_path+0x1414>
    547c:	4d c0       	rjmp	.+154    	; 0x5518 <default_path+0x14ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    547e:	ce 01       	movw	r24, r28
    5480:	89 54       	subi	r24, 0x49	; 73
    5482:	9f 4f       	sbci	r25, 0xFF	; 255
    5484:	fc 01       	movw	r30, r24
    5486:	60 81       	ld	r22, Z
    5488:	71 81       	ldd	r23, Z+1	; 0x01
    548a:	82 81       	ldd	r24, Z+2	; 0x02
    548c:	93 81       	ldd	r25, Z+3	; 0x03
    548e:	20 e0       	ldi	r18, 0x00	; 0
    5490:	30 e0       	ldi	r19, 0x00	; 0
    5492:	40 e2       	ldi	r20, 0x20	; 32
    5494:	51 e4       	ldi	r21, 0x41	; 65
    5496:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    549a:	dc 01       	movw	r26, r24
    549c:	cb 01       	movw	r24, r22
    549e:	8e 01       	movw	r16, r28
    54a0:	01 54       	subi	r16, 0x41	; 65
    54a2:	1f 4f       	sbci	r17, 0xFF	; 255
    54a4:	bc 01       	movw	r22, r24
    54a6:	cd 01       	movw	r24, r26
    54a8:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    54ac:	dc 01       	movw	r26, r24
    54ae:	cb 01       	movw	r24, r22
    54b0:	f8 01       	movw	r30, r16
    54b2:	91 83       	std	Z+1, r25	; 0x01
    54b4:	80 83       	st	Z, r24
    54b6:	27 c0       	rjmp	.+78     	; 0x5506 <default_path+0x149c>
    54b8:	ce 01       	movw	r24, r28
    54ba:	8f 53       	subi	r24, 0x3F	; 63
    54bc:	9f 4f       	sbci	r25, 0xFF	; 255
    54be:	20 e7       	ldi	r18, 0x70	; 112
    54c0:	31 e0       	ldi	r19, 0x01	; 1
    54c2:	fc 01       	movw	r30, r24
    54c4:	31 83       	std	Z+1, r19	; 0x01
    54c6:	20 83       	st	Z, r18
    54c8:	ce 01       	movw	r24, r28
    54ca:	8f 53       	subi	r24, 0x3F	; 63
    54cc:	9f 4f       	sbci	r25, 0xFF	; 255
    54ce:	fc 01       	movw	r30, r24
    54d0:	80 81       	ld	r24, Z
    54d2:	91 81       	ldd	r25, Z+1	; 0x01
    54d4:	8c 01       	movw	r16, r24
    54d6:	c8 01       	movw	r24, r16
    54d8:	01 97       	sbiw	r24, 0x01	; 1
    54da:	f1 f7       	brne	.-4      	; 0x54d8 <default_path+0x146e>
    54dc:	8c 01       	movw	r16, r24
    54de:	ce 01       	movw	r24, r28
    54e0:	8f 53       	subi	r24, 0x3F	; 63
    54e2:	9f 4f       	sbci	r25, 0xFF	; 255
    54e4:	fc 01       	movw	r30, r24
    54e6:	11 83       	std	Z+1, r17	; 0x01
    54e8:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54ea:	ce 01       	movw	r24, r28
    54ec:	81 54       	subi	r24, 0x41	; 65
    54ee:	9f 4f       	sbci	r25, 0xFF	; 255
    54f0:	9e 01       	movw	r18, r28
    54f2:	21 54       	subi	r18, 0x41	; 65
    54f4:	3f 4f       	sbci	r19, 0xFF	; 255
    54f6:	f9 01       	movw	r30, r18
    54f8:	20 81       	ld	r18, Z
    54fa:	31 81       	ldd	r19, Z+1	; 0x01
    54fc:	21 50       	subi	r18, 0x01	; 1
    54fe:	30 40       	sbci	r19, 0x00	; 0
    5500:	fc 01       	movw	r30, r24
    5502:	31 83       	std	Z+1, r19	; 0x01
    5504:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5506:	ce 01       	movw	r24, r28
    5508:	81 54       	subi	r24, 0x41	; 65
    550a:	9f 4f       	sbci	r25, 0xFF	; 255
    550c:	fc 01       	movw	r30, r24
    550e:	80 81       	ld	r24, Z
    5510:	91 81       	ldd	r25, Z+1	; 0x01
    5512:	00 97       	sbiw	r24, 0x00	; 0
    5514:	89 f6       	brne	.-94     	; 0x54b8 <default_path+0x144e>
    5516:	2f c0       	rjmp	.+94     	; 0x5576 <default_path+0x150c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5518:	8e 01       	movw	r16, r28
    551a:	01 54       	subi	r16, 0x41	; 65
    551c:	1f 4f       	sbci	r17, 0xFF	; 255
    551e:	ce 01       	movw	r24, r28
    5520:	85 54       	subi	r24, 0x45	; 69
    5522:	9f 4f       	sbci	r25, 0xFF	; 255
    5524:	fc 01       	movw	r30, r24
    5526:	60 81       	ld	r22, Z
    5528:	71 81       	ldd	r23, Z+1	; 0x01
    552a:	82 81       	ldd	r24, Z+2	; 0x02
    552c:	93 81       	ldd	r25, Z+3	; 0x03
    552e:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    5532:	dc 01       	movw	r26, r24
    5534:	cb 01       	movw	r24, r22
    5536:	f8 01       	movw	r30, r16
    5538:	91 83       	std	Z+1, r25	; 0x01
    553a:	80 83       	st	Z, r24
    553c:	ce 01       	movw	r24, r28
    553e:	8d 53       	subi	r24, 0x3D	; 61
    5540:	9f 4f       	sbci	r25, 0xFF	; 255
    5542:	9e 01       	movw	r18, r28
    5544:	21 54       	subi	r18, 0x41	; 65
    5546:	3f 4f       	sbci	r19, 0xFF	; 255
    5548:	f9 01       	movw	r30, r18
    554a:	20 81       	ld	r18, Z
    554c:	31 81       	ldd	r19, Z+1	; 0x01
    554e:	fc 01       	movw	r30, r24
    5550:	31 83       	std	Z+1, r19	; 0x01
    5552:	20 83       	st	Z, r18
    5554:	ce 01       	movw	r24, r28
    5556:	8d 53       	subi	r24, 0x3D	; 61
    5558:	9f 4f       	sbci	r25, 0xFF	; 255
    555a:	fc 01       	movw	r30, r24
    555c:	80 81       	ld	r24, Z
    555e:	91 81       	ldd	r25, Z+1	; 0x01
    5560:	8c 01       	movw	r16, r24
    5562:	c8 01       	movw	r24, r16
    5564:	01 97       	sbiw	r24, 0x01	; 1
    5566:	f1 f7       	brne	.-4      	; 0x5564 <default_path+0x14fa>
    5568:	8c 01       	movw	r16, r24
    556a:	ce 01       	movw	r24, r28
    556c:	8d 53       	subi	r24, 0x3D	; 61
    556e:	9f 4f       	sbci	r25, 0xFF	; 255
    5570:	fc 01       	movw	r30, r24
    5572:	11 83       	std	Z+1, r17	; 0x01
    5574:	00 83       	st	Z, r16
	_delay_ms(300);
	
	move_forward();
    5576:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <move_forward>
	stop_bot();
    557a:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    557e:	9e 01       	movw	r18, r28
    5580:	2b 53       	subi	r18, 0x3B	; 59
    5582:	3f 4f       	sbci	r19, 0xFF	; 255
    5584:	80 e0       	ldi	r24, 0x00	; 0
    5586:	90 e0       	ldi	r25, 0x00	; 0
    5588:	a6 e9       	ldi	r26, 0x96	; 150
    558a:	b3 e4       	ldi	r27, 0x43	; 67
    558c:	f9 01       	movw	r30, r18
    558e:	80 83       	st	Z, r24
    5590:	91 83       	std	Z+1, r25	; 0x01
    5592:	a2 83       	std	Z+2, r26	; 0x02
    5594:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5596:	8e 01       	movw	r16, r28
    5598:	07 53       	subi	r16, 0x37	; 55
    559a:	1f 4f       	sbci	r17, 0xFF	; 255
    559c:	ce 01       	movw	r24, r28
    559e:	8b 53       	subi	r24, 0x3B	; 59
    55a0:	9f 4f       	sbci	r25, 0xFF	; 255
    55a2:	fc 01       	movw	r30, r24
    55a4:	60 81       	ld	r22, Z
    55a6:	71 81       	ldd	r23, Z+1	; 0x01
    55a8:	82 81       	ldd	r24, Z+2	; 0x02
    55aa:	93 81       	ldd	r25, Z+3	; 0x03
    55ac:	26 e6       	ldi	r18, 0x66	; 102
    55ae:	36 e6       	ldi	r19, 0x66	; 102
    55b0:	46 e6       	ldi	r20, 0x66	; 102
    55b2:	55 e4       	ldi	r21, 0x45	; 69
    55b4:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    55b8:	dc 01       	movw	r26, r24
    55ba:	cb 01       	movw	r24, r22
    55bc:	f8 01       	movw	r30, r16
    55be:	80 83       	st	Z, r24
    55c0:	91 83       	std	Z+1, r25	; 0x01
    55c2:	a2 83       	std	Z+2, r26	; 0x02
    55c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    55c6:	ce 01       	movw	r24, r28
    55c8:	87 53       	subi	r24, 0x37	; 55
    55ca:	9f 4f       	sbci	r25, 0xFF	; 255
    55cc:	11 e0       	ldi	r17, 0x01	; 1
    55ce:	fc 01       	movw	r30, r24
    55d0:	60 81       	ld	r22, Z
    55d2:	71 81       	ldd	r23, Z+1	; 0x01
    55d4:	82 81       	ldd	r24, Z+2	; 0x02
    55d6:	93 81       	ldd	r25, Z+3	; 0x03
    55d8:	20 e0       	ldi	r18, 0x00	; 0
    55da:	30 e0       	ldi	r19, 0x00	; 0
    55dc:	40 e8       	ldi	r20, 0x80	; 128
    55de:	5f e3       	ldi	r21, 0x3F	; 63
    55e0:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    55e4:	88 23       	and	r24, r24
    55e6:	0c f0       	brlt	.+2      	; 0x55ea <default_path+0x1580>
    55e8:	10 e0       	ldi	r17, 0x00	; 0
    55ea:	11 23       	and	r17, r17
    55ec:	49 f0       	breq	.+18     	; 0x5600 <default_path+0x1596>
		__ticks = 1;
    55ee:	ce 01       	movw	r24, r28
    55f0:	83 53       	subi	r24, 0x33	; 51
    55f2:	9f 4f       	sbci	r25, 0xFF	; 255
    55f4:	21 e0       	ldi	r18, 0x01	; 1
    55f6:	30 e0       	ldi	r19, 0x00	; 0
    55f8:	fc 01       	movw	r30, r24
    55fa:	31 83       	std	Z+1, r19	; 0x01
    55fc:	20 83       	st	Z, r18
    55fe:	74 c0       	rjmp	.+232    	; 0x56e8 <default_path+0x167e>
	else if (__tmp > 65535)
    5600:	ce 01       	movw	r24, r28
    5602:	87 53       	subi	r24, 0x37	; 55
    5604:	9f 4f       	sbci	r25, 0xFF	; 255
    5606:	11 e0       	ldi	r17, 0x01	; 1
    5608:	fc 01       	movw	r30, r24
    560a:	60 81       	ld	r22, Z
    560c:	71 81       	ldd	r23, Z+1	; 0x01
    560e:	82 81       	ldd	r24, Z+2	; 0x02
    5610:	93 81       	ldd	r25, Z+3	; 0x03
    5612:	20 e0       	ldi	r18, 0x00	; 0
    5614:	3f ef       	ldi	r19, 0xFF	; 255
    5616:	4f e7       	ldi	r20, 0x7F	; 127
    5618:	57 e4       	ldi	r21, 0x47	; 71
    561a:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    561e:	18 16       	cp	r1, r24
    5620:	0c f0       	brlt	.+2      	; 0x5624 <default_path+0x15ba>
    5622:	10 e0       	ldi	r17, 0x00	; 0
    5624:	11 23       	and	r17, r17
    5626:	09 f4       	brne	.+2      	; 0x562a <default_path+0x15c0>
    5628:	4d c0       	rjmp	.+154    	; 0x56c4 <default_path+0x165a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    562a:	ce 01       	movw	r24, r28
    562c:	8b 53       	subi	r24, 0x3B	; 59
    562e:	9f 4f       	sbci	r25, 0xFF	; 255
    5630:	fc 01       	movw	r30, r24
    5632:	60 81       	ld	r22, Z
    5634:	71 81       	ldd	r23, Z+1	; 0x01
    5636:	82 81       	ldd	r24, Z+2	; 0x02
    5638:	93 81       	ldd	r25, Z+3	; 0x03
    563a:	20 e0       	ldi	r18, 0x00	; 0
    563c:	30 e0       	ldi	r19, 0x00	; 0
    563e:	40 e2       	ldi	r20, 0x20	; 32
    5640:	51 e4       	ldi	r21, 0x41	; 65
    5642:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    5646:	dc 01       	movw	r26, r24
    5648:	cb 01       	movw	r24, r22
    564a:	8e 01       	movw	r16, r28
    564c:	03 53       	subi	r16, 0x33	; 51
    564e:	1f 4f       	sbci	r17, 0xFF	; 255
    5650:	bc 01       	movw	r22, r24
    5652:	cd 01       	movw	r24, r26
    5654:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    5658:	dc 01       	movw	r26, r24
    565a:	cb 01       	movw	r24, r22
    565c:	f8 01       	movw	r30, r16
    565e:	91 83       	std	Z+1, r25	; 0x01
    5660:	80 83       	st	Z, r24
    5662:	27 c0       	rjmp	.+78     	; 0x56b2 <default_path+0x1648>
    5664:	ce 01       	movw	r24, r28
    5666:	81 53       	subi	r24, 0x31	; 49
    5668:	9f 4f       	sbci	r25, 0xFF	; 255
    566a:	20 e7       	ldi	r18, 0x70	; 112
    566c:	31 e0       	ldi	r19, 0x01	; 1
    566e:	fc 01       	movw	r30, r24
    5670:	31 83       	std	Z+1, r19	; 0x01
    5672:	20 83       	st	Z, r18
    5674:	ce 01       	movw	r24, r28
    5676:	81 53       	subi	r24, 0x31	; 49
    5678:	9f 4f       	sbci	r25, 0xFF	; 255
    567a:	fc 01       	movw	r30, r24
    567c:	80 81       	ld	r24, Z
    567e:	91 81       	ldd	r25, Z+1	; 0x01
    5680:	8c 01       	movw	r16, r24
    5682:	c8 01       	movw	r24, r16
    5684:	01 97       	sbiw	r24, 0x01	; 1
    5686:	f1 f7       	brne	.-4      	; 0x5684 <default_path+0x161a>
    5688:	8c 01       	movw	r16, r24
    568a:	ce 01       	movw	r24, r28
    568c:	81 53       	subi	r24, 0x31	; 49
    568e:	9f 4f       	sbci	r25, 0xFF	; 255
    5690:	fc 01       	movw	r30, r24
    5692:	11 83       	std	Z+1, r17	; 0x01
    5694:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5696:	ce 01       	movw	r24, r28
    5698:	83 53       	subi	r24, 0x33	; 51
    569a:	9f 4f       	sbci	r25, 0xFF	; 255
    569c:	9e 01       	movw	r18, r28
    569e:	23 53       	subi	r18, 0x33	; 51
    56a0:	3f 4f       	sbci	r19, 0xFF	; 255
    56a2:	f9 01       	movw	r30, r18
    56a4:	20 81       	ld	r18, Z
    56a6:	31 81       	ldd	r19, Z+1	; 0x01
    56a8:	21 50       	subi	r18, 0x01	; 1
    56aa:	30 40       	sbci	r19, 0x00	; 0
    56ac:	fc 01       	movw	r30, r24
    56ae:	31 83       	std	Z+1, r19	; 0x01
    56b0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56b2:	ce 01       	movw	r24, r28
    56b4:	83 53       	subi	r24, 0x33	; 51
    56b6:	9f 4f       	sbci	r25, 0xFF	; 255
    56b8:	fc 01       	movw	r30, r24
    56ba:	80 81       	ld	r24, Z
    56bc:	91 81       	ldd	r25, Z+1	; 0x01
    56be:	00 97       	sbiw	r24, 0x00	; 0
    56c0:	89 f6       	brne	.-94     	; 0x5664 <default_path+0x15fa>
    56c2:	2f c0       	rjmp	.+94     	; 0x5722 <default_path+0x16b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56c4:	8e 01       	movw	r16, r28
    56c6:	03 53       	subi	r16, 0x33	; 51
    56c8:	1f 4f       	sbci	r17, 0xFF	; 255
    56ca:	ce 01       	movw	r24, r28
    56cc:	87 53       	subi	r24, 0x37	; 55
    56ce:	9f 4f       	sbci	r25, 0xFF	; 255
    56d0:	fc 01       	movw	r30, r24
    56d2:	60 81       	ld	r22, Z
    56d4:	71 81       	ldd	r23, Z+1	; 0x01
    56d6:	82 81       	ldd	r24, Z+2	; 0x02
    56d8:	93 81       	ldd	r25, Z+3	; 0x03
    56da:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    56de:	dc 01       	movw	r26, r24
    56e0:	cb 01       	movw	r24, r22
    56e2:	f8 01       	movw	r30, r16
    56e4:	91 83       	std	Z+1, r25	; 0x01
    56e6:	80 83       	st	Z, r24
    56e8:	ce 01       	movw	r24, r28
    56ea:	8f 52       	subi	r24, 0x2F	; 47
    56ec:	9f 4f       	sbci	r25, 0xFF	; 255
    56ee:	9e 01       	movw	r18, r28
    56f0:	23 53       	subi	r18, 0x33	; 51
    56f2:	3f 4f       	sbci	r19, 0xFF	; 255
    56f4:	f9 01       	movw	r30, r18
    56f6:	20 81       	ld	r18, Z
    56f8:	31 81       	ldd	r19, Z+1	; 0x01
    56fa:	fc 01       	movw	r30, r24
    56fc:	31 83       	std	Z+1, r19	; 0x01
    56fe:	20 83       	st	Z, r18
    5700:	ce 01       	movw	r24, r28
    5702:	8f 52       	subi	r24, 0x2F	; 47
    5704:	9f 4f       	sbci	r25, 0xFF	; 255
    5706:	fc 01       	movw	r30, r24
    5708:	80 81       	ld	r24, Z
    570a:	91 81       	ldd	r25, Z+1	; 0x01
    570c:	8c 01       	movw	r16, r24
    570e:	c8 01       	movw	r24, r16
    5710:	01 97       	sbiw	r24, 0x01	; 1
    5712:	f1 f7       	brne	.-4      	; 0x5710 <default_path+0x16a6>
    5714:	8c 01       	movw	r16, r24
    5716:	ce 01       	movw	r24, r28
    5718:	8f 52       	subi	r24, 0x2F	; 47
    571a:	9f 4f       	sbci	r25, 0xFF	; 255
    571c:	fc 01       	movw	r30, r24
    571e:	11 83       	std	Z+1, r17	; 0x01
    5720:	00 83       	st	Z, r16
	_delay_ms(300);
	
	sensor_refresh();
    5722:	0e 94 03 16 	call	0x2c06	; 0x2c06 <sensor_refresh>
	if (IR1 < 0x70)
    5726:	80 91 3a 02 	lds	r24, 0x023A
    572a:	80 37       	cpi	r24, 0x70	; 112
    572c:	30 f4       	brcc	.+12     	; 0x573a <default_path+0x16d0>
	{
		obstacle_found='1';
    572e:	81 e3       	ldi	r24, 0x31	; 49
    5730:	90 e0       	ldi	r25, 0x00	; 0
    5732:	90 93 0b 02 	sts	0x020B, r25
    5736:	80 93 0a 02 	sts	0x020A, r24
	}
	
	forward_mm(53);
    573a:	85 e3       	ldi	r24, 0x35	; 53
    573c:	90 e0       	ldi	r25, 0x00	; 0
    573e:	0e 94 4d 13 	call	0x269a	; 0x269a <forward_mm>
	stop_bot();
    5742:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    5746:	9e 01       	movw	r18, r28
    5748:	2d 52       	subi	r18, 0x2D	; 45
    574a:	3f 4f       	sbci	r19, 0xFF	; 255
    574c:	80 e0       	ldi	r24, 0x00	; 0
    574e:	90 e0       	ldi	r25, 0x00	; 0
    5750:	a6 e9       	ldi	r26, 0x96	; 150
    5752:	b3 e4       	ldi	r27, 0x43	; 67
    5754:	f9 01       	movw	r30, r18
    5756:	80 83       	st	Z, r24
    5758:	91 83       	std	Z+1, r25	; 0x01
    575a:	a2 83       	std	Z+2, r26	; 0x02
    575c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    575e:	8e 01       	movw	r16, r28
    5760:	09 52       	subi	r16, 0x29	; 41
    5762:	1f 4f       	sbci	r17, 0xFF	; 255
    5764:	ce 01       	movw	r24, r28
    5766:	8d 52       	subi	r24, 0x2D	; 45
    5768:	9f 4f       	sbci	r25, 0xFF	; 255
    576a:	fc 01       	movw	r30, r24
    576c:	60 81       	ld	r22, Z
    576e:	71 81       	ldd	r23, Z+1	; 0x01
    5770:	82 81       	ldd	r24, Z+2	; 0x02
    5772:	93 81       	ldd	r25, Z+3	; 0x03
    5774:	26 e6       	ldi	r18, 0x66	; 102
    5776:	36 e6       	ldi	r19, 0x66	; 102
    5778:	46 e6       	ldi	r20, 0x66	; 102
    577a:	55 e4       	ldi	r21, 0x45	; 69
    577c:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    5780:	dc 01       	movw	r26, r24
    5782:	cb 01       	movw	r24, r22
    5784:	f8 01       	movw	r30, r16
    5786:	80 83       	st	Z, r24
    5788:	91 83       	std	Z+1, r25	; 0x01
    578a:	a2 83       	std	Z+2, r26	; 0x02
    578c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    578e:	ce 01       	movw	r24, r28
    5790:	89 52       	subi	r24, 0x29	; 41
    5792:	9f 4f       	sbci	r25, 0xFF	; 255
    5794:	11 e0       	ldi	r17, 0x01	; 1
    5796:	fc 01       	movw	r30, r24
    5798:	60 81       	ld	r22, Z
    579a:	71 81       	ldd	r23, Z+1	; 0x01
    579c:	82 81       	ldd	r24, Z+2	; 0x02
    579e:	93 81       	ldd	r25, Z+3	; 0x03
    57a0:	20 e0       	ldi	r18, 0x00	; 0
    57a2:	30 e0       	ldi	r19, 0x00	; 0
    57a4:	40 e8       	ldi	r20, 0x80	; 128
    57a6:	5f e3       	ldi	r21, 0x3F	; 63
    57a8:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    57ac:	88 23       	and	r24, r24
    57ae:	0c f0       	brlt	.+2      	; 0x57b2 <default_path+0x1748>
    57b0:	10 e0       	ldi	r17, 0x00	; 0
    57b2:	11 23       	and	r17, r17
    57b4:	49 f0       	breq	.+18     	; 0x57c8 <default_path+0x175e>
		__ticks = 1;
    57b6:	ce 01       	movw	r24, r28
    57b8:	85 52       	subi	r24, 0x25	; 37
    57ba:	9f 4f       	sbci	r25, 0xFF	; 255
    57bc:	21 e0       	ldi	r18, 0x01	; 1
    57be:	30 e0       	ldi	r19, 0x00	; 0
    57c0:	fc 01       	movw	r30, r24
    57c2:	31 83       	std	Z+1, r19	; 0x01
    57c4:	20 83       	st	Z, r18
    57c6:	74 c0       	rjmp	.+232    	; 0x58b0 <default_path+0x1846>
	else if (__tmp > 65535)
    57c8:	ce 01       	movw	r24, r28
    57ca:	89 52       	subi	r24, 0x29	; 41
    57cc:	9f 4f       	sbci	r25, 0xFF	; 255
    57ce:	11 e0       	ldi	r17, 0x01	; 1
    57d0:	fc 01       	movw	r30, r24
    57d2:	60 81       	ld	r22, Z
    57d4:	71 81       	ldd	r23, Z+1	; 0x01
    57d6:	82 81       	ldd	r24, Z+2	; 0x02
    57d8:	93 81       	ldd	r25, Z+3	; 0x03
    57da:	20 e0       	ldi	r18, 0x00	; 0
    57dc:	3f ef       	ldi	r19, 0xFF	; 255
    57de:	4f e7       	ldi	r20, 0x7F	; 127
    57e0:	57 e4       	ldi	r21, 0x47	; 71
    57e2:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    57e6:	18 16       	cp	r1, r24
    57e8:	0c f0       	brlt	.+2      	; 0x57ec <default_path+0x1782>
    57ea:	10 e0       	ldi	r17, 0x00	; 0
    57ec:	11 23       	and	r17, r17
    57ee:	09 f4       	brne	.+2      	; 0x57f2 <default_path+0x1788>
    57f0:	4d c0       	rjmp	.+154    	; 0x588c <default_path+0x1822>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57f2:	ce 01       	movw	r24, r28
    57f4:	8d 52       	subi	r24, 0x2D	; 45
    57f6:	9f 4f       	sbci	r25, 0xFF	; 255
    57f8:	fc 01       	movw	r30, r24
    57fa:	60 81       	ld	r22, Z
    57fc:	71 81       	ldd	r23, Z+1	; 0x01
    57fe:	82 81       	ldd	r24, Z+2	; 0x02
    5800:	93 81       	ldd	r25, Z+3	; 0x03
    5802:	20 e0       	ldi	r18, 0x00	; 0
    5804:	30 e0       	ldi	r19, 0x00	; 0
    5806:	40 e2       	ldi	r20, 0x20	; 32
    5808:	51 e4       	ldi	r21, 0x41	; 65
    580a:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    580e:	dc 01       	movw	r26, r24
    5810:	cb 01       	movw	r24, r22
    5812:	8e 01       	movw	r16, r28
    5814:	05 52       	subi	r16, 0x25	; 37
    5816:	1f 4f       	sbci	r17, 0xFF	; 255
    5818:	bc 01       	movw	r22, r24
    581a:	cd 01       	movw	r24, r26
    581c:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    5820:	dc 01       	movw	r26, r24
    5822:	cb 01       	movw	r24, r22
    5824:	f8 01       	movw	r30, r16
    5826:	91 83       	std	Z+1, r25	; 0x01
    5828:	80 83       	st	Z, r24
    582a:	27 c0       	rjmp	.+78     	; 0x587a <default_path+0x1810>
    582c:	ce 01       	movw	r24, r28
    582e:	83 52       	subi	r24, 0x23	; 35
    5830:	9f 4f       	sbci	r25, 0xFF	; 255
    5832:	20 e7       	ldi	r18, 0x70	; 112
    5834:	31 e0       	ldi	r19, 0x01	; 1
    5836:	fc 01       	movw	r30, r24
    5838:	31 83       	std	Z+1, r19	; 0x01
    583a:	20 83       	st	Z, r18
    583c:	ce 01       	movw	r24, r28
    583e:	83 52       	subi	r24, 0x23	; 35
    5840:	9f 4f       	sbci	r25, 0xFF	; 255
    5842:	fc 01       	movw	r30, r24
    5844:	80 81       	ld	r24, Z
    5846:	91 81       	ldd	r25, Z+1	; 0x01
    5848:	8c 01       	movw	r16, r24
    584a:	c8 01       	movw	r24, r16
    584c:	01 97       	sbiw	r24, 0x01	; 1
    584e:	f1 f7       	brne	.-4      	; 0x584c <default_path+0x17e2>
    5850:	8c 01       	movw	r16, r24
    5852:	ce 01       	movw	r24, r28
    5854:	83 52       	subi	r24, 0x23	; 35
    5856:	9f 4f       	sbci	r25, 0xFF	; 255
    5858:	fc 01       	movw	r30, r24
    585a:	11 83       	std	Z+1, r17	; 0x01
    585c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    585e:	ce 01       	movw	r24, r28
    5860:	85 52       	subi	r24, 0x25	; 37
    5862:	9f 4f       	sbci	r25, 0xFF	; 255
    5864:	9e 01       	movw	r18, r28
    5866:	25 52       	subi	r18, 0x25	; 37
    5868:	3f 4f       	sbci	r19, 0xFF	; 255
    586a:	f9 01       	movw	r30, r18
    586c:	20 81       	ld	r18, Z
    586e:	31 81       	ldd	r19, Z+1	; 0x01
    5870:	21 50       	subi	r18, 0x01	; 1
    5872:	30 40       	sbci	r19, 0x00	; 0
    5874:	fc 01       	movw	r30, r24
    5876:	31 83       	std	Z+1, r19	; 0x01
    5878:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    587a:	ce 01       	movw	r24, r28
    587c:	85 52       	subi	r24, 0x25	; 37
    587e:	9f 4f       	sbci	r25, 0xFF	; 255
    5880:	fc 01       	movw	r30, r24
    5882:	80 81       	ld	r24, Z
    5884:	91 81       	ldd	r25, Z+1	; 0x01
    5886:	00 97       	sbiw	r24, 0x00	; 0
    5888:	89 f6       	brne	.-94     	; 0x582c <default_path+0x17c2>
    588a:	2f c0       	rjmp	.+94     	; 0x58ea <default_path+0x1880>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    588c:	8e 01       	movw	r16, r28
    588e:	05 52       	subi	r16, 0x25	; 37
    5890:	1f 4f       	sbci	r17, 0xFF	; 255
    5892:	ce 01       	movw	r24, r28
    5894:	89 52       	subi	r24, 0x29	; 41
    5896:	9f 4f       	sbci	r25, 0xFF	; 255
    5898:	fc 01       	movw	r30, r24
    589a:	60 81       	ld	r22, Z
    589c:	71 81       	ldd	r23, Z+1	; 0x01
    589e:	82 81       	ldd	r24, Z+2	; 0x02
    58a0:	93 81       	ldd	r25, Z+3	; 0x03
    58a2:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    58a6:	dc 01       	movw	r26, r24
    58a8:	cb 01       	movw	r24, r22
    58aa:	f8 01       	movw	r30, r16
    58ac:	91 83       	std	Z+1, r25	; 0x01
    58ae:	80 83       	st	Z, r24
    58b0:	ce 01       	movw	r24, r28
    58b2:	81 52       	subi	r24, 0x21	; 33
    58b4:	9f 4f       	sbci	r25, 0xFF	; 255
    58b6:	9e 01       	movw	r18, r28
    58b8:	25 52       	subi	r18, 0x25	; 37
    58ba:	3f 4f       	sbci	r19, 0xFF	; 255
    58bc:	f9 01       	movw	r30, r18
    58be:	20 81       	ld	r18, Z
    58c0:	31 81       	ldd	r19, Z+1	; 0x01
    58c2:	fc 01       	movw	r30, r24
    58c4:	31 83       	std	Z+1, r19	; 0x01
    58c6:	20 83       	st	Z, r18
    58c8:	ce 01       	movw	r24, r28
    58ca:	81 52       	subi	r24, 0x21	; 33
    58cc:	9f 4f       	sbci	r25, 0xFF	; 255
    58ce:	fc 01       	movw	r30, r24
    58d0:	80 81       	ld	r24, Z
    58d2:	91 81       	ldd	r25, Z+1	; 0x01
    58d4:	8c 01       	movw	r16, r24
    58d6:	c8 01       	movw	r24, r16
    58d8:	01 97       	sbiw	r24, 0x01	; 1
    58da:	f1 f7       	brne	.-4      	; 0x58d8 <default_path+0x186e>
    58dc:	8c 01       	movw	r16, r24
    58de:	ce 01       	movw	r24, r28
    58e0:	81 52       	subi	r24, 0x21	; 33
    58e2:	9f 4f       	sbci	r25, 0xFF	; 255
    58e4:	fc 01       	movw	r30, r24
    58e6:	11 83       	std	Z+1, r17	; 0x01
    58e8:	00 83       	st	Z, r16
	_delay_ms(300);
	
	right_degrees(85);
    58ea:	85 e5       	ldi	r24, 0x55	; 85
    58ec:	90 e0       	ldi	r25, 0x00	; 0
    58ee:	0e 94 c1 12 	call	0x2582	; 0x2582 <right_degrees>
	stop_bot();
    58f2:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    58f6:	9e 01       	movw	r18, r28
    58f8:	2f 51       	subi	r18, 0x1F	; 31
    58fa:	3f 4f       	sbci	r19, 0xFF	; 255
    58fc:	80 e0       	ldi	r24, 0x00	; 0
    58fe:	90 e0       	ldi	r25, 0x00	; 0
    5900:	a6 e9       	ldi	r26, 0x96	; 150
    5902:	b3 e4       	ldi	r27, 0x43	; 67
    5904:	f9 01       	movw	r30, r18
    5906:	80 83       	st	Z, r24
    5908:	91 83       	std	Z+1, r25	; 0x01
    590a:	a2 83       	std	Z+2, r26	; 0x02
    590c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    590e:	8e 01       	movw	r16, r28
    5910:	0b 51       	subi	r16, 0x1B	; 27
    5912:	1f 4f       	sbci	r17, 0xFF	; 255
    5914:	ce 01       	movw	r24, r28
    5916:	8f 51       	subi	r24, 0x1F	; 31
    5918:	9f 4f       	sbci	r25, 0xFF	; 255
    591a:	fc 01       	movw	r30, r24
    591c:	60 81       	ld	r22, Z
    591e:	71 81       	ldd	r23, Z+1	; 0x01
    5920:	82 81       	ldd	r24, Z+2	; 0x02
    5922:	93 81       	ldd	r25, Z+3	; 0x03
    5924:	26 e6       	ldi	r18, 0x66	; 102
    5926:	36 e6       	ldi	r19, 0x66	; 102
    5928:	46 e6       	ldi	r20, 0x66	; 102
    592a:	55 e4       	ldi	r21, 0x45	; 69
    592c:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    5930:	dc 01       	movw	r26, r24
    5932:	cb 01       	movw	r24, r22
    5934:	f8 01       	movw	r30, r16
    5936:	80 83       	st	Z, r24
    5938:	91 83       	std	Z+1, r25	; 0x01
    593a:	a2 83       	std	Z+2, r26	; 0x02
    593c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    593e:	ce 01       	movw	r24, r28
    5940:	8b 51       	subi	r24, 0x1B	; 27
    5942:	9f 4f       	sbci	r25, 0xFF	; 255
    5944:	11 e0       	ldi	r17, 0x01	; 1
    5946:	fc 01       	movw	r30, r24
    5948:	60 81       	ld	r22, Z
    594a:	71 81       	ldd	r23, Z+1	; 0x01
    594c:	82 81       	ldd	r24, Z+2	; 0x02
    594e:	93 81       	ldd	r25, Z+3	; 0x03
    5950:	20 e0       	ldi	r18, 0x00	; 0
    5952:	30 e0       	ldi	r19, 0x00	; 0
    5954:	40 e8       	ldi	r20, 0x80	; 128
    5956:	5f e3       	ldi	r21, 0x3F	; 63
    5958:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    595c:	88 23       	and	r24, r24
    595e:	0c f0       	brlt	.+2      	; 0x5962 <default_path+0x18f8>
    5960:	10 e0       	ldi	r17, 0x00	; 0
    5962:	11 23       	and	r17, r17
    5964:	49 f0       	breq	.+18     	; 0x5978 <default_path+0x190e>
		__ticks = 1;
    5966:	ce 01       	movw	r24, r28
    5968:	87 51       	subi	r24, 0x17	; 23
    596a:	9f 4f       	sbci	r25, 0xFF	; 255
    596c:	21 e0       	ldi	r18, 0x01	; 1
    596e:	30 e0       	ldi	r19, 0x00	; 0
    5970:	fc 01       	movw	r30, r24
    5972:	31 83       	std	Z+1, r19	; 0x01
    5974:	20 83       	st	Z, r18
    5976:	74 c0       	rjmp	.+232    	; 0x5a60 <default_path+0x19f6>
	else if (__tmp > 65535)
    5978:	ce 01       	movw	r24, r28
    597a:	8b 51       	subi	r24, 0x1B	; 27
    597c:	9f 4f       	sbci	r25, 0xFF	; 255
    597e:	11 e0       	ldi	r17, 0x01	; 1
    5980:	fc 01       	movw	r30, r24
    5982:	60 81       	ld	r22, Z
    5984:	71 81       	ldd	r23, Z+1	; 0x01
    5986:	82 81       	ldd	r24, Z+2	; 0x02
    5988:	93 81       	ldd	r25, Z+3	; 0x03
    598a:	20 e0       	ldi	r18, 0x00	; 0
    598c:	3f ef       	ldi	r19, 0xFF	; 255
    598e:	4f e7       	ldi	r20, 0x7F	; 127
    5990:	57 e4       	ldi	r21, 0x47	; 71
    5992:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    5996:	18 16       	cp	r1, r24
    5998:	0c f0       	brlt	.+2      	; 0x599c <default_path+0x1932>
    599a:	10 e0       	ldi	r17, 0x00	; 0
    599c:	11 23       	and	r17, r17
    599e:	09 f4       	brne	.+2      	; 0x59a2 <default_path+0x1938>
    59a0:	4d c0       	rjmp	.+154    	; 0x5a3c <default_path+0x19d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59a2:	ce 01       	movw	r24, r28
    59a4:	8f 51       	subi	r24, 0x1F	; 31
    59a6:	9f 4f       	sbci	r25, 0xFF	; 255
    59a8:	fc 01       	movw	r30, r24
    59aa:	60 81       	ld	r22, Z
    59ac:	71 81       	ldd	r23, Z+1	; 0x01
    59ae:	82 81       	ldd	r24, Z+2	; 0x02
    59b0:	93 81       	ldd	r25, Z+3	; 0x03
    59b2:	20 e0       	ldi	r18, 0x00	; 0
    59b4:	30 e0       	ldi	r19, 0x00	; 0
    59b6:	40 e2       	ldi	r20, 0x20	; 32
    59b8:	51 e4       	ldi	r21, 0x41	; 65
    59ba:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    59be:	dc 01       	movw	r26, r24
    59c0:	cb 01       	movw	r24, r22
    59c2:	8e 01       	movw	r16, r28
    59c4:	07 51       	subi	r16, 0x17	; 23
    59c6:	1f 4f       	sbci	r17, 0xFF	; 255
    59c8:	bc 01       	movw	r22, r24
    59ca:	cd 01       	movw	r24, r26
    59cc:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    59d0:	dc 01       	movw	r26, r24
    59d2:	cb 01       	movw	r24, r22
    59d4:	f8 01       	movw	r30, r16
    59d6:	91 83       	std	Z+1, r25	; 0x01
    59d8:	80 83       	st	Z, r24
    59da:	27 c0       	rjmp	.+78     	; 0x5a2a <default_path+0x19c0>
    59dc:	ce 01       	movw	r24, r28
    59de:	85 51       	subi	r24, 0x15	; 21
    59e0:	9f 4f       	sbci	r25, 0xFF	; 255
    59e2:	20 e7       	ldi	r18, 0x70	; 112
    59e4:	31 e0       	ldi	r19, 0x01	; 1
    59e6:	fc 01       	movw	r30, r24
    59e8:	31 83       	std	Z+1, r19	; 0x01
    59ea:	20 83       	st	Z, r18
    59ec:	ce 01       	movw	r24, r28
    59ee:	85 51       	subi	r24, 0x15	; 21
    59f0:	9f 4f       	sbci	r25, 0xFF	; 255
    59f2:	fc 01       	movw	r30, r24
    59f4:	80 81       	ld	r24, Z
    59f6:	91 81       	ldd	r25, Z+1	; 0x01
    59f8:	8c 01       	movw	r16, r24
    59fa:	c8 01       	movw	r24, r16
    59fc:	01 97       	sbiw	r24, 0x01	; 1
    59fe:	f1 f7       	brne	.-4      	; 0x59fc <default_path+0x1992>
    5a00:	8c 01       	movw	r16, r24
    5a02:	ce 01       	movw	r24, r28
    5a04:	85 51       	subi	r24, 0x15	; 21
    5a06:	9f 4f       	sbci	r25, 0xFF	; 255
    5a08:	fc 01       	movw	r30, r24
    5a0a:	11 83       	std	Z+1, r17	; 0x01
    5a0c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a0e:	ce 01       	movw	r24, r28
    5a10:	87 51       	subi	r24, 0x17	; 23
    5a12:	9f 4f       	sbci	r25, 0xFF	; 255
    5a14:	9e 01       	movw	r18, r28
    5a16:	27 51       	subi	r18, 0x17	; 23
    5a18:	3f 4f       	sbci	r19, 0xFF	; 255
    5a1a:	f9 01       	movw	r30, r18
    5a1c:	20 81       	ld	r18, Z
    5a1e:	31 81       	ldd	r19, Z+1	; 0x01
    5a20:	21 50       	subi	r18, 0x01	; 1
    5a22:	30 40       	sbci	r19, 0x00	; 0
    5a24:	fc 01       	movw	r30, r24
    5a26:	31 83       	std	Z+1, r19	; 0x01
    5a28:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a2a:	ce 01       	movw	r24, r28
    5a2c:	87 51       	subi	r24, 0x17	; 23
    5a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a30:	fc 01       	movw	r30, r24
    5a32:	80 81       	ld	r24, Z
    5a34:	91 81       	ldd	r25, Z+1	; 0x01
    5a36:	00 97       	sbiw	r24, 0x00	; 0
    5a38:	89 f6       	brne	.-94     	; 0x59dc <default_path+0x1972>
    5a3a:	2f c0       	rjmp	.+94     	; 0x5a9a <default_path+0x1a30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a3c:	8e 01       	movw	r16, r28
    5a3e:	07 51       	subi	r16, 0x17	; 23
    5a40:	1f 4f       	sbci	r17, 0xFF	; 255
    5a42:	ce 01       	movw	r24, r28
    5a44:	8b 51       	subi	r24, 0x1B	; 27
    5a46:	9f 4f       	sbci	r25, 0xFF	; 255
    5a48:	fc 01       	movw	r30, r24
    5a4a:	60 81       	ld	r22, Z
    5a4c:	71 81       	ldd	r23, Z+1	; 0x01
    5a4e:	82 81       	ldd	r24, Z+2	; 0x02
    5a50:	93 81       	ldd	r25, Z+3	; 0x03
    5a52:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    5a56:	dc 01       	movw	r26, r24
    5a58:	cb 01       	movw	r24, r22
    5a5a:	f8 01       	movw	r30, r16
    5a5c:	91 83       	std	Z+1, r25	; 0x01
    5a5e:	80 83       	st	Z, r24
    5a60:	ce 01       	movw	r24, r28
    5a62:	83 51       	subi	r24, 0x13	; 19
    5a64:	9f 4f       	sbci	r25, 0xFF	; 255
    5a66:	9e 01       	movw	r18, r28
    5a68:	27 51       	subi	r18, 0x17	; 23
    5a6a:	3f 4f       	sbci	r19, 0xFF	; 255
    5a6c:	f9 01       	movw	r30, r18
    5a6e:	20 81       	ld	r18, Z
    5a70:	31 81       	ldd	r19, Z+1	; 0x01
    5a72:	fc 01       	movw	r30, r24
    5a74:	31 83       	std	Z+1, r19	; 0x01
    5a76:	20 83       	st	Z, r18
    5a78:	ce 01       	movw	r24, r28
    5a7a:	83 51       	subi	r24, 0x13	; 19
    5a7c:	9f 4f       	sbci	r25, 0xFF	; 255
    5a7e:	fc 01       	movw	r30, r24
    5a80:	80 81       	ld	r24, Z
    5a82:	91 81       	ldd	r25, Z+1	; 0x01
    5a84:	8c 01       	movw	r16, r24
    5a86:	c8 01       	movw	r24, r16
    5a88:	01 97       	sbiw	r24, 0x01	; 1
    5a8a:	f1 f7       	brne	.-4      	; 0x5a88 <default_path+0x1a1e>
    5a8c:	8c 01       	movw	r16, r24
    5a8e:	ce 01       	movw	r24, r28
    5a90:	83 51       	subi	r24, 0x13	; 19
    5a92:	9f 4f       	sbci	r25, 0xFF	; 255
    5a94:	fc 01       	movw	r30, r24
    5a96:	11 83       	std	Z+1, r17	; 0x01
    5a98:	00 83       	st	Z, r16
	_delay_ms(300);
	
	back_mm(90);
    5a9a:	8a e5       	ldi	r24, 0x5A	; 90
    5a9c:	90 e0       	ldi	r25, 0x00	; 0
    5a9e:	0e 94 60 13 	call	0x26c0	; 0x26c0 <back_mm>
	stop_bot();
    5aa2:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    5aa6:	9e 01       	movw	r18, r28
    5aa8:	21 51       	subi	r18, 0x11	; 17
    5aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    5aac:	80 e0       	ldi	r24, 0x00	; 0
    5aae:	90 e0       	ldi	r25, 0x00	; 0
    5ab0:	a6 e9       	ldi	r26, 0x96	; 150
    5ab2:	b3 e4       	ldi	r27, 0x43	; 67
    5ab4:	f9 01       	movw	r30, r18
    5ab6:	80 83       	st	Z, r24
    5ab8:	91 83       	std	Z+1, r25	; 0x01
    5aba:	a2 83       	std	Z+2, r26	; 0x02
    5abc:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5abe:	8e 01       	movw	r16, r28
    5ac0:	0d 50       	subi	r16, 0x0D	; 13
    5ac2:	1f 4f       	sbci	r17, 0xFF	; 255
    5ac4:	ce 01       	movw	r24, r28
    5ac6:	81 51       	subi	r24, 0x11	; 17
    5ac8:	9f 4f       	sbci	r25, 0xFF	; 255
    5aca:	fc 01       	movw	r30, r24
    5acc:	60 81       	ld	r22, Z
    5ace:	71 81       	ldd	r23, Z+1	; 0x01
    5ad0:	82 81       	ldd	r24, Z+2	; 0x02
    5ad2:	93 81       	ldd	r25, Z+3	; 0x03
    5ad4:	26 e6       	ldi	r18, 0x66	; 102
    5ad6:	36 e6       	ldi	r19, 0x66	; 102
    5ad8:	46 e6       	ldi	r20, 0x66	; 102
    5ada:	55 e4       	ldi	r21, 0x45	; 69
    5adc:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    5ae0:	dc 01       	movw	r26, r24
    5ae2:	cb 01       	movw	r24, r22
    5ae4:	f8 01       	movw	r30, r16
    5ae6:	80 83       	st	Z, r24
    5ae8:	91 83       	std	Z+1, r25	; 0x01
    5aea:	a2 83       	std	Z+2, r26	; 0x02
    5aec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5aee:	ce 01       	movw	r24, r28
    5af0:	8d 50       	subi	r24, 0x0D	; 13
    5af2:	9f 4f       	sbci	r25, 0xFF	; 255
    5af4:	11 e0       	ldi	r17, 0x01	; 1
    5af6:	fc 01       	movw	r30, r24
    5af8:	60 81       	ld	r22, Z
    5afa:	71 81       	ldd	r23, Z+1	; 0x01
    5afc:	82 81       	ldd	r24, Z+2	; 0x02
    5afe:	93 81       	ldd	r25, Z+3	; 0x03
    5b00:	20 e0       	ldi	r18, 0x00	; 0
    5b02:	30 e0       	ldi	r19, 0x00	; 0
    5b04:	40 e8       	ldi	r20, 0x80	; 128
    5b06:	5f e3       	ldi	r21, 0x3F	; 63
    5b08:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    5b0c:	88 23       	and	r24, r24
    5b0e:	0c f0       	brlt	.+2      	; 0x5b12 <default_path+0x1aa8>
    5b10:	10 e0       	ldi	r17, 0x00	; 0
    5b12:	11 23       	and	r17, r17
    5b14:	49 f0       	breq	.+18     	; 0x5b28 <default_path+0x1abe>
		__ticks = 1;
    5b16:	ce 01       	movw	r24, r28
    5b18:	89 50       	subi	r24, 0x09	; 9
    5b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    5b1c:	21 e0       	ldi	r18, 0x01	; 1
    5b1e:	30 e0       	ldi	r19, 0x00	; 0
    5b20:	fc 01       	movw	r30, r24
    5b22:	31 83       	std	Z+1, r19	; 0x01
    5b24:	20 83       	st	Z, r18
    5b26:	74 c0       	rjmp	.+232    	; 0x5c10 <default_path+0x1ba6>
	else if (__tmp > 65535)
    5b28:	ce 01       	movw	r24, r28
    5b2a:	8d 50       	subi	r24, 0x0D	; 13
    5b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    5b2e:	11 e0       	ldi	r17, 0x01	; 1
    5b30:	fc 01       	movw	r30, r24
    5b32:	60 81       	ld	r22, Z
    5b34:	71 81       	ldd	r23, Z+1	; 0x01
    5b36:	82 81       	ldd	r24, Z+2	; 0x02
    5b38:	93 81       	ldd	r25, Z+3	; 0x03
    5b3a:	20 e0       	ldi	r18, 0x00	; 0
    5b3c:	3f ef       	ldi	r19, 0xFF	; 255
    5b3e:	4f e7       	ldi	r20, 0x7F	; 127
    5b40:	57 e4       	ldi	r21, 0x47	; 71
    5b42:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    5b46:	18 16       	cp	r1, r24
    5b48:	0c f0       	brlt	.+2      	; 0x5b4c <default_path+0x1ae2>
    5b4a:	10 e0       	ldi	r17, 0x00	; 0
    5b4c:	11 23       	and	r17, r17
    5b4e:	09 f4       	brne	.+2      	; 0x5b52 <default_path+0x1ae8>
    5b50:	4d c0       	rjmp	.+154    	; 0x5bec <default_path+0x1b82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b52:	ce 01       	movw	r24, r28
    5b54:	81 51       	subi	r24, 0x11	; 17
    5b56:	9f 4f       	sbci	r25, 0xFF	; 255
    5b58:	fc 01       	movw	r30, r24
    5b5a:	60 81       	ld	r22, Z
    5b5c:	71 81       	ldd	r23, Z+1	; 0x01
    5b5e:	82 81       	ldd	r24, Z+2	; 0x02
    5b60:	93 81       	ldd	r25, Z+3	; 0x03
    5b62:	20 e0       	ldi	r18, 0x00	; 0
    5b64:	30 e0       	ldi	r19, 0x00	; 0
    5b66:	40 e2       	ldi	r20, 0x20	; 32
    5b68:	51 e4       	ldi	r21, 0x41	; 65
    5b6a:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    5b6e:	dc 01       	movw	r26, r24
    5b70:	cb 01       	movw	r24, r22
    5b72:	8e 01       	movw	r16, r28
    5b74:	09 50       	subi	r16, 0x09	; 9
    5b76:	1f 4f       	sbci	r17, 0xFF	; 255
    5b78:	bc 01       	movw	r22, r24
    5b7a:	cd 01       	movw	r24, r26
    5b7c:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    5b80:	dc 01       	movw	r26, r24
    5b82:	cb 01       	movw	r24, r22
    5b84:	f8 01       	movw	r30, r16
    5b86:	91 83       	std	Z+1, r25	; 0x01
    5b88:	80 83       	st	Z, r24
    5b8a:	27 c0       	rjmp	.+78     	; 0x5bda <default_path+0x1b70>
    5b8c:	ce 01       	movw	r24, r28
    5b8e:	87 50       	subi	r24, 0x07	; 7
    5b90:	9f 4f       	sbci	r25, 0xFF	; 255
    5b92:	20 e7       	ldi	r18, 0x70	; 112
    5b94:	31 e0       	ldi	r19, 0x01	; 1
    5b96:	fc 01       	movw	r30, r24
    5b98:	31 83       	std	Z+1, r19	; 0x01
    5b9a:	20 83       	st	Z, r18
    5b9c:	ce 01       	movw	r24, r28
    5b9e:	87 50       	subi	r24, 0x07	; 7
    5ba0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ba2:	fc 01       	movw	r30, r24
    5ba4:	80 81       	ld	r24, Z
    5ba6:	91 81       	ldd	r25, Z+1	; 0x01
    5ba8:	8c 01       	movw	r16, r24
    5baa:	c8 01       	movw	r24, r16
    5bac:	01 97       	sbiw	r24, 0x01	; 1
    5bae:	f1 f7       	brne	.-4      	; 0x5bac <default_path+0x1b42>
    5bb0:	8c 01       	movw	r16, r24
    5bb2:	ce 01       	movw	r24, r28
    5bb4:	87 50       	subi	r24, 0x07	; 7
    5bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    5bb8:	fc 01       	movw	r30, r24
    5bba:	11 83       	std	Z+1, r17	; 0x01
    5bbc:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bbe:	ce 01       	movw	r24, r28
    5bc0:	89 50       	subi	r24, 0x09	; 9
    5bc2:	9f 4f       	sbci	r25, 0xFF	; 255
    5bc4:	9e 01       	movw	r18, r28
    5bc6:	29 50       	subi	r18, 0x09	; 9
    5bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    5bca:	f9 01       	movw	r30, r18
    5bcc:	20 81       	ld	r18, Z
    5bce:	31 81       	ldd	r19, Z+1	; 0x01
    5bd0:	21 50       	subi	r18, 0x01	; 1
    5bd2:	30 40       	sbci	r19, 0x00	; 0
    5bd4:	fc 01       	movw	r30, r24
    5bd6:	31 83       	std	Z+1, r19	; 0x01
    5bd8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bda:	ce 01       	movw	r24, r28
    5bdc:	89 50       	subi	r24, 0x09	; 9
    5bde:	9f 4f       	sbci	r25, 0xFF	; 255
    5be0:	fc 01       	movw	r30, r24
    5be2:	80 81       	ld	r24, Z
    5be4:	91 81       	ldd	r25, Z+1	; 0x01
    5be6:	00 97       	sbiw	r24, 0x00	; 0
    5be8:	89 f6       	brne	.-94     	; 0x5b8c <default_path+0x1b22>
    5bea:	2f c0       	rjmp	.+94     	; 0x5c4a <default_path+0x1be0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bec:	8e 01       	movw	r16, r28
    5bee:	09 50       	subi	r16, 0x09	; 9
    5bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    5bf2:	ce 01       	movw	r24, r28
    5bf4:	8d 50       	subi	r24, 0x0D	; 13
    5bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    5bf8:	fc 01       	movw	r30, r24
    5bfa:	60 81       	ld	r22, Z
    5bfc:	71 81       	ldd	r23, Z+1	; 0x01
    5bfe:	82 81       	ldd	r24, Z+2	; 0x02
    5c00:	93 81       	ldd	r25, Z+3	; 0x03
    5c02:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    5c06:	dc 01       	movw	r26, r24
    5c08:	cb 01       	movw	r24, r22
    5c0a:	f8 01       	movw	r30, r16
    5c0c:	91 83       	std	Z+1, r25	; 0x01
    5c0e:	80 83       	st	Z, r24
    5c10:	ce 01       	movw	r24, r28
    5c12:	85 50       	subi	r24, 0x05	; 5
    5c14:	9f 4f       	sbci	r25, 0xFF	; 255
    5c16:	9e 01       	movw	r18, r28
    5c18:	29 50       	subi	r18, 0x09	; 9
    5c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    5c1c:	f9 01       	movw	r30, r18
    5c1e:	20 81       	ld	r18, Z
    5c20:	31 81       	ldd	r19, Z+1	; 0x01
    5c22:	fc 01       	movw	r30, r24
    5c24:	31 83       	std	Z+1, r19	; 0x01
    5c26:	20 83       	st	Z, r18
    5c28:	ce 01       	movw	r24, r28
    5c2a:	85 50       	subi	r24, 0x05	; 5
    5c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    5c2e:	fc 01       	movw	r30, r24
    5c30:	80 81       	ld	r24, Z
    5c32:	91 81       	ldd	r25, Z+1	; 0x01
    5c34:	8c 01       	movw	r16, r24
    5c36:	c8 01       	movw	r24, r16
    5c38:	01 97       	sbiw	r24, 0x01	; 1
    5c3a:	f1 f7       	brne	.-4      	; 0x5c38 <default_path+0x1bce>
    5c3c:	8c 01       	movw	r16, r24
    5c3e:	ce 01       	movw	r24, r28
    5c40:	85 50       	subi	r24, 0x05	; 5
    5c42:	9f 4f       	sbci	r25, 0xFF	; 255
    5c44:	fc 01       	movw	r30, r24
    5c46:	11 83       	std	Z+1, r17	; 0x01
    5c48:	00 83       	st	Z, r16
	_delay_ms(300);
	
	node_count++;
    5c4a:	80 91 00 02 	lds	r24, 0x0200
    5c4e:	90 91 01 02 	lds	r25, 0x0201
    5c52:	01 96       	adiw	r24, 0x01	; 1
    5c54:	90 93 01 02 	sts	0x0201, r25
    5c58:	80 93 00 02 	sts	0x0200, r24
}
    5c5c:	c4 50       	subi	r28, 0x04	; 4
    5c5e:	df 4f       	sbci	r29, 0xFF	; 255
    5c60:	0f b6       	in	r0, 0x3f	; 63
    5c62:	f8 94       	cli
    5c64:	de bf       	out	0x3e, r29	; 62
    5c66:	0f be       	out	0x3f, r0	; 63
    5c68:	cd bf       	out	0x3d, r28	; 61
    5c6a:	df 91       	pop	r29
    5c6c:	cf 91       	pop	r28
    5c6e:	1f 91       	pop	r17
    5c70:	0f 91       	pop	r16
    5c72:	08 95       	ret

00005c74 <alternate_path>:

void alternate_path()  //alternate path chosen by bot when obstacle is detected
{
    5c74:	0f 93       	push	r16
    5c76:	1f 93       	push	r17
    5c78:	cf 93       	push	r28
    5c7a:	df 93       	push	r29
    5c7c:	cd b7       	in	r28, 0x3d	; 61
    5c7e:	de b7       	in	r29, 0x3e	; 62
    5c80:	c8 5a       	subi	r28, 0xA8	; 168
    5c82:	d0 40       	sbci	r29, 0x00	; 0
    5c84:	0f b6       	in	r0, 0x3f	; 63
    5c86:	f8 94       	cli
    5c88:	de bf       	out	0x3e, r29	; 62
    5c8a:	0f be       	out	0x3f, r0	; 63
    5c8c:	cd bf       	out	0x3d, r28	; 61
	velocity(200,200);
    5c8e:	88 ec       	ldi	r24, 0xC8	; 200
    5c90:	68 ec       	ldi	r22, 0xC8	; 200
    5c92:	0e 94 c6 11 	call	0x238c	; 0x238c <velocity>
	
	if(rmnder == 1)
    5c96:	80 91 30 02 	lds	r24, 0x0230
    5c9a:	90 91 31 02 	lds	r25, 0x0231
    5c9e:	81 30       	cpi	r24, 0x01	; 1
    5ca0:	91 05       	cpc	r25, r1
    5ca2:	09 f4       	brne	.+2      	; 0x5ca6 <alternate_path+0x32>
    5ca4:	86 c0       	rjmp	.+268    	; 0x5db2 <alternate_path+0x13e>
	{
		
	}
	else
	{
		forward_mm(40);
    5ca6:	88 e2       	ldi	r24, 0x28	; 40
    5ca8:	90 e0       	ldi	r25, 0x00	; 0
    5caa:	0e 94 4d 13 	call	0x269a	; 0x269a <forward_mm>
		stop_bot();
    5cae:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    5cb2:	80 e0       	ldi	r24, 0x00	; 0
    5cb4:	90 e0       	ldi	r25, 0x00	; 0
    5cb6:	a6 e9       	ldi	r26, 0x96	; 150
    5cb8:	b3 e4       	ldi	r27, 0x43	; 67
    5cba:	89 83       	std	Y+1, r24	; 0x01
    5cbc:	9a 83       	std	Y+2, r25	; 0x02
    5cbe:	ab 83       	std	Y+3, r26	; 0x03
    5cc0:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5cc2:	69 81       	ldd	r22, Y+1	; 0x01
    5cc4:	7a 81       	ldd	r23, Y+2	; 0x02
    5cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    5cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    5cca:	26 e6       	ldi	r18, 0x66	; 102
    5ccc:	36 e6       	ldi	r19, 0x66	; 102
    5cce:	46 e6       	ldi	r20, 0x66	; 102
    5cd0:	55 e4       	ldi	r21, 0x45	; 69
    5cd2:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    5cd6:	dc 01       	movw	r26, r24
    5cd8:	cb 01       	movw	r24, r22
    5cda:	8d 83       	std	Y+5, r24	; 0x05
    5cdc:	9e 83       	std	Y+6, r25	; 0x06
    5cde:	af 83       	std	Y+7, r26	; 0x07
    5ce0:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    5ce2:	11 e0       	ldi	r17, 0x01	; 1
    5ce4:	6d 81       	ldd	r22, Y+5	; 0x05
    5ce6:	7e 81       	ldd	r23, Y+6	; 0x06
    5ce8:	8f 81       	ldd	r24, Y+7	; 0x07
    5cea:	98 85       	ldd	r25, Y+8	; 0x08
    5cec:	20 e0       	ldi	r18, 0x00	; 0
    5cee:	30 e0       	ldi	r19, 0x00	; 0
    5cf0:	40 e8       	ldi	r20, 0x80	; 128
    5cf2:	5f e3       	ldi	r21, 0x3F	; 63
    5cf4:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    5cf8:	88 23       	and	r24, r24
    5cfa:	0c f0       	brlt	.+2      	; 0x5cfe <alternate_path+0x8a>
    5cfc:	10 e0       	ldi	r17, 0x00	; 0
    5cfe:	11 23       	and	r17, r17
    5d00:	29 f0       	breq	.+10     	; 0x5d0c <alternate_path+0x98>
		__ticks = 1;
    5d02:	81 e0       	ldi	r24, 0x01	; 1
    5d04:	90 e0       	ldi	r25, 0x00	; 0
    5d06:	9a 87       	std	Y+10, r25	; 0x0a
    5d08:	89 87       	std	Y+9, r24	; 0x09
    5d0a:	46 c0       	rjmp	.+140    	; 0x5d98 <alternate_path+0x124>
	else if (__tmp > 65535)
    5d0c:	11 e0       	ldi	r17, 0x01	; 1
    5d0e:	6d 81       	ldd	r22, Y+5	; 0x05
    5d10:	7e 81       	ldd	r23, Y+6	; 0x06
    5d12:	8f 81       	ldd	r24, Y+7	; 0x07
    5d14:	98 85       	ldd	r25, Y+8	; 0x08
    5d16:	20 e0       	ldi	r18, 0x00	; 0
    5d18:	3f ef       	ldi	r19, 0xFF	; 255
    5d1a:	4f e7       	ldi	r20, 0x7F	; 127
    5d1c:	57 e4       	ldi	r21, 0x47	; 71
    5d1e:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    5d22:	18 16       	cp	r1, r24
    5d24:	0c f0       	brlt	.+2      	; 0x5d28 <alternate_path+0xb4>
    5d26:	10 e0       	ldi	r17, 0x00	; 0
    5d28:	11 23       	and	r17, r17
    5d2a:	61 f1       	breq	.+88     	; 0x5d84 <alternate_path+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d2c:	69 81       	ldd	r22, Y+1	; 0x01
    5d2e:	7a 81       	ldd	r23, Y+2	; 0x02
    5d30:	8b 81       	ldd	r24, Y+3	; 0x03
    5d32:	9c 81       	ldd	r25, Y+4	; 0x04
    5d34:	20 e0       	ldi	r18, 0x00	; 0
    5d36:	30 e0       	ldi	r19, 0x00	; 0
    5d38:	40 e2       	ldi	r20, 0x20	; 32
    5d3a:	51 e4       	ldi	r21, 0x41	; 65
    5d3c:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    5d40:	dc 01       	movw	r26, r24
    5d42:	cb 01       	movw	r24, r22
    5d44:	bc 01       	movw	r22, r24
    5d46:	cd 01       	movw	r24, r26
    5d48:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    5d4c:	dc 01       	movw	r26, r24
    5d4e:	cb 01       	movw	r24, r22
    5d50:	9a 87       	std	Y+10, r25	; 0x0a
    5d52:	89 87       	std	Y+9, r24	; 0x09
    5d54:	12 c0       	rjmp	.+36     	; 0x5d7a <alternate_path+0x106>
    5d56:	80 e7       	ldi	r24, 0x70	; 112
    5d58:	91 e0       	ldi	r25, 0x01	; 1
    5d5a:	9c 87       	std	Y+12, r25	; 0x0c
    5d5c:	8b 87       	std	Y+11, r24	; 0x0b
    5d5e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d60:	9c 85       	ldd	r25, Y+12	; 0x0c
    5d62:	8c 01       	movw	r16, r24
    5d64:	c8 01       	movw	r24, r16
    5d66:	01 97       	sbiw	r24, 0x01	; 1
    5d68:	f1 f7       	brne	.-4      	; 0x5d66 <alternate_path+0xf2>
    5d6a:	8c 01       	movw	r16, r24
    5d6c:	1c 87       	std	Y+12, r17	; 0x0c
    5d6e:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d70:	89 85       	ldd	r24, Y+9	; 0x09
    5d72:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d74:	01 97       	sbiw	r24, 0x01	; 1
    5d76:	9a 87       	std	Y+10, r25	; 0x0a
    5d78:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d7a:	89 85       	ldd	r24, Y+9	; 0x09
    5d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d7e:	00 97       	sbiw	r24, 0x00	; 0
    5d80:	51 f7       	brne	.-44     	; 0x5d56 <alternate_path+0xe2>
    5d82:	17 c0       	rjmp	.+46     	; 0x5db2 <alternate_path+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d84:	6d 81       	ldd	r22, Y+5	; 0x05
    5d86:	7e 81       	ldd	r23, Y+6	; 0x06
    5d88:	8f 81       	ldd	r24, Y+7	; 0x07
    5d8a:	98 85       	ldd	r25, Y+8	; 0x08
    5d8c:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    5d90:	dc 01       	movw	r26, r24
    5d92:	cb 01       	movw	r24, r22
    5d94:	9a 87       	std	Y+10, r25	; 0x0a
    5d96:	89 87       	std	Y+9, r24	; 0x09
    5d98:	89 85       	ldd	r24, Y+9	; 0x09
    5d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d9c:	9e 87       	std	Y+14, r25	; 0x0e
    5d9e:	8d 87       	std	Y+13, r24	; 0x0d
    5da0:	8d 85       	ldd	r24, Y+13	; 0x0d
    5da2:	9e 85       	ldd	r25, Y+14	; 0x0e
    5da4:	8c 01       	movw	r16, r24
    5da6:	f8 01       	movw	r30, r16
    5da8:	31 97       	sbiw	r30, 0x01	; 1
    5daa:	f1 f7       	brne	.-4      	; 0x5da8 <alternate_path+0x134>
    5dac:	8f 01       	movw	r16, r30
    5dae:	1e 87       	std	Y+14, r17	; 0x0e
    5db0:	0d 87       	std	Y+13, r16	; 0x0d
		_delay_ms(300);
	}	
	
	left_turn();
    5db2:	0e 94 b8 1c 	call	0x3970	; 0x3970 <left_turn>
	stop_bot();
    5db6:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    5dba:	80 e0       	ldi	r24, 0x00	; 0
    5dbc:	90 e0       	ldi	r25, 0x00	; 0
    5dbe:	a6 e9       	ldi	r26, 0x96	; 150
    5dc0:	b3 e4       	ldi	r27, 0x43	; 67
    5dc2:	8f 87       	std	Y+15, r24	; 0x0f
    5dc4:	98 8b       	std	Y+16, r25	; 0x10
    5dc6:	a9 8b       	std	Y+17, r26	; 0x11
    5dc8:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5dca:	6f 85       	ldd	r22, Y+15	; 0x0f
    5dcc:	78 89       	ldd	r23, Y+16	; 0x10
    5dce:	89 89       	ldd	r24, Y+17	; 0x11
    5dd0:	9a 89       	ldd	r25, Y+18	; 0x12
    5dd2:	26 e6       	ldi	r18, 0x66	; 102
    5dd4:	36 e6       	ldi	r19, 0x66	; 102
    5dd6:	46 e6       	ldi	r20, 0x66	; 102
    5dd8:	55 e4       	ldi	r21, 0x45	; 69
    5dda:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    5dde:	dc 01       	movw	r26, r24
    5de0:	cb 01       	movw	r24, r22
    5de2:	8b 8b       	std	Y+19, r24	; 0x13
    5de4:	9c 8b       	std	Y+20, r25	; 0x14
    5de6:	ad 8b       	std	Y+21, r26	; 0x15
    5de8:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    5dea:	11 e0       	ldi	r17, 0x01	; 1
    5dec:	6b 89       	ldd	r22, Y+19	; 0x13
    5dee:	7c 89       	ldd	r23, Y+20	; 0x14
    5df0:	8d 89       	ldd	r24, Y+21	; 0x15
    5df2:	9e 89       	ldd	r25, Y+22	; 0x16
    5df4:	20 e0       	ldi	r18, 0x00	; 0
    5df6:	30 e0       	ldi	r19, 0x00	; 0
    5df8:	40 e8       	ldi	r20, 0x80	; 128
    5dfa:	5f e3       	ldi	r21, 0x3F	; 63
    5dfc:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    5e00:	88 23       	and	r24, r24
    5e02:	0c f0       	brlt	.+2      	; 0x5e06 <alternate_path+0x192>
    5e04:	10 e0       	ldi	r17, 0x00	; 0
    5e06:	11 23       	and	r17, r17
    5e08:	29 f0       	breq	.+10     	; 0x5e14 <alternate_path+0x1a0>
		__ticks = 1;
    5e0a:	81 e0       	ldi	r24, 0x01	; 1
    5e0c:	90 e0       	ldi	r25, 0x00	; 0
    5e0e:	98 8f       	std	Y+24, r25	; 0x18
    5e10:	8f 8b       	std	Y+23, r24	; 0x17
    5e12:	46 c0       	rjmp	.+140    	; 0x5ea0 <alternate_path+0x22c>
	else if (__tmp > 65535)
    5e14:	11 e0       	ldi	r17, 0x01	; 1
    5e16:	6b 89       	ldd	r22, Y+19	; 0x13
    5e18:	7c 89       	ldd	r23, Y+20	; 0x14
    5e1a:	8d 89       	ldd	r24, Y+21	; 0x15
    5e1c:	9e 89       	ldd	r25, Y+22	; 0x16
    5e1e:	20 e0       	ldi	r18, 0x00	; 0
    5e20:	3f ef       	ldi	r19, 0xFF	; 255
    5e22:	4f e7       	ldi	r20, 0x7F	; 127
    5e24:	57 e4       	ldi	r21, 0x47	; 71
    5e26:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    5e2a:	18 16       	cp	r1, r24
    5e2c:	0c f0       	brlt	.+2      	; 0x5e30 <alternate_path+0x1bc>
    5e2e:	10 e0       	ldi	r17, 0x00	; 0
    5e30:	11 23       	and	r17, r17
    5e32:	61 f1       	breq	.+88     	; 0x5e8c <alternate_path+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e34:	6f 85       	ldd	r22, Y+15	; 0x0f
    5e36:	78 89       	ldd	r23, Y+16	; 0x10
    5e38:	89 89       	ldd	r24, Y+17	; 0x11
    5e3a:	9a 89       	ldd	r25, Y+18	; 0x12
    5e3c:	20 e0       	ldi	r18, 0x00	; 0
    5e3e:	30 e0       	ldi	r19, 0x00	; 0
    5e40:	40 e2       	ldi	r20, 0x20	; 32
    5e42:	51 e4       	ldi	r21, 0x41	; 65
    5e44:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    5e48:	dc 01       	movw	r26, r24
    5e4a:	cb 01       	movw	r24, r22
    5e4c:	bc 01       	movw	r22, r24
    5e4e:	cd 01       	movw	r24, r26
    5e50:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    5e54:	dc 01       	movw	r26, r24
    5e56:	cb 01       	movw	r24, r22
    5e58:	98 8f       	std	Y+24, r25	; 0x18
    5e5a:	8f 8b       	std	Y+23, r24	; 0x17
    5e5c:	12 c0       	rjmp	.+36     	; 0x5e82 <alternate_path+0x20e>
    5e5e:	80 e7       	ldi	r24, 0x70	; 112
    5e60:	91 e0       	ldi	r25, 0x01	; 1
    5e62:	9a 8f       	std	Y+26, r25	; 0x1a
    5e64:	89 8f       	std	Y+25, r24	; 0x19
    5e66:	89 8d       	ldd	r24, Y+25	; 0x19
    5e68:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5e6a:	8c 01       	movw	r16, r24
    5e6c:	c8 01       	movw	r24, r16
    5e6e:	01 97       	sbiw	r24, 0x01	; 1
    5e70:	f1 f7       	brne	.-4      	; 0x5e6e <alternate_path+0x1fa>
    5e72:	8c 01       	movw	r16, r24
    5e74:	1a 8f       	std	Y+26, r17	; 0x1a
    5e76:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e78:	8f 89       	ldd	r24, Y+23	; 0x17
    5e7a:	98 8d       	ldd	r25, Y+24	; 0x18
    5e7c:	01 97       	sbiw	r24, 0x01	; 1
    5e7e:	98 8f       	std	Y+24, r25	; 0x18
    5e80:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e82:	8f 89       	ldd	r24, Y+23	; 0x17
    5e84:	98 8d       	ldd	r25, Y+24	; 0x18
    5e86:	00 97       	sbiw	r24, 0x00	; 0
    5e88:	51 f7       	brne	.-44     	; 0x5e5e <alternate_path+0x1ea>
    5e8a:	17 c0       	rjmp	.+46     	; 0x5eba <alternate_path+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e8c:	6b 89       	ldd	r22, Y+19	; 0x13
    5e8e:	7c 89       	ldd	r23, Y+20	; 0x14
    5e90:	8d 89       	ldd	r24, Y+21	; 0x15
    5e92:	9e 89       	ldd	r25, Y+22	; 0x16
    5e94:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    5e98:	dc 01       	movw	r26, r24
    5e9a:	cb 01       	movw	r24, r22
    5e9c:	98 8f       	std	Y+24, r25	; 0x18
    5e9e:	8f 8b       	std	Y+23, r24	; 0x17
    5ea0:	8f 89       	ldd	r24, Y+23	; 0x17
    5ea2:	98 8d       	ldd	r25, Y+24	; 0x18
    5ea4:	9c 8f       	std	Y+28, r25	; 0x1c
    5ea6:	8b 8f       	std	Y+27, r24	; 0x1b
    5ea8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5eaa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5eac:	8c 01       	movw	r16, r24
    5eae:	f8 01       	movw	r30, r16
    5eb0:	31 97       	sbiw	r30, 0x01	; 1
    5eb2:	f1 f7       	brne	.-4      	; 0x5eb0 <alternate_path+0x23c>
    5eb4:	8f 01       	movw	r16, r30
    5eb6:	1c 8f       	std	Y+28, r17	; 0x1c
    5eb8:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(300);
	
	move_forward();
    5eba:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <move_forward>
	stop_bot();
    5ebe:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    5ec2:	80 e0       	ldi	r24, 0x00	; 0
    5ec4:	90 e0       	ldi	r25, 0x00	; 0
    5ec6:	a6 e9       	ldi	r26, 0x96	; 150
    5ec8:	b3 e4       	ldi	r27, 0x43	; 67
    5eca:	8d 8f       	std	Y+29, r24	; 0x1d
    5ecc:	9e 8f       	std	Y+30, r25	; 0x1e
    5ece:	af 8f       	std	Y+31, r26	; 0x1f
    5ed0:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5ed2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5ed4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5ed6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5ed8:	98 a1       	lds	r25, 0x48
    5eda:	26 e6       	ldi	r18, 0x66	; 102
    5edc:	36 e6       	ldi	r19, 0x66	; 102
    5ede:	46 e6       	ldi	r20, 0x66	; 102
    5ee0:	55 e4       	ldi	r21, 0x45	; 69
    5ee2:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    5ee6:	dc 01       	movw	r26, r24
    5ee8:	cb 01       	movw	r24, r22
    5eea:	89 a3       	lds	r24, 0x59
    5eec:	9a a3       	lds	r25, 0x5a
    5eee:	ab a3       	lds	r26, 0x5b
    5ef0:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    5ef2:	11 e0       	ldi	r17, 0x01	; 1
    5ef4:	69 a1       	lds	r22, 0x49
    5ef6:	7a a1       	lds	r23, 0x4a
    5ef8:	8b a1       	lds	r24, 0x4b
    5efa:	9c a1       	lds	r25, 0x4c
    5efc:	20 e0       	ldi	r18, 0x00	; 0
    5efe:	30 e0       	ldi	r19, 0x00	; 0
    5f00:	40 e8       	ldi	r20, 0x80	; 128
    5f02:	5f e3       	ldi	r21, 0x3F	; 63
    5f04:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    5f08:	88 23       	and	r24, r24
    5f0a:	0c f0       	brlt	.+2      	; 0x5f0e <alternate_path+0x29a>
    5f0c:	10 e0       	ldi	r17, 0x00	; 0
    5f0e:	11 23       	and	r17, r17
    5f10:	29 f0       	breq	.+10     	; 0x5f1c <alternate_path+0x2a8>
		__ticks = 1;
    5f12:	81 e0       	ldi	r24, 0x01	; 1
    5f14:	90 e0       	ldi	r25, 0x00	; 0
    5f16:	9e a3       	lds	r25, 0x5e
    5f18:	8d a3       	lds	r24, 0x5d
    5f1a:	46 c0       	rjmp	.+140    	; 0x5fa8 <alternate_path+0x334>
	else if (__tmp > 65535)
    5f1c:	11 e0       	ldi	r17, 0x01	; 1
    5f1e:	69 a1       	lds	r22, 0x49
    5f20:	7a a1       	lds	r23, 0x4a
    5f22:	8b a1       	lds	r24, 0x4b
    5f24:	9c a1       	lds	r25, 0x4c
    5f26:	20 e0       	ldi	r18, 0x00	; 0
    5f28:	3f ef       	ldi	r19, 0xFF	; 255
    5f2a:	4f e7       	ldi	r20, 0x7F	; 127
    5f2c:	57 e4       	ldi	r21, 0x47	; 71
    5f2e:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    5f32:	18 16       	cp	r1, r24
    5f34:	0c f0       	brlt	.+2      	; 0x5f38 <alternate_path+0x2c4>
    5f36:	10 e0       	ldi	r17, 0x00	; 0
    5f38:	11 23       	and	r17, r17
    5f3a:	61 f1       	breq	.+88     	; 0x5f94 <alternate_path+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f3c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    5f3e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    5f40:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5f42:	98 a1       	lds	r25, 0x48
    5f44:	20 e0       	ldi	r18, 0x00	; 0
    5f46:	30 e0       	ldi	r19, 0x00	; 0
    5f48:	40 e2       	ldi	r20, 0x20	; 32
    5f4a:	51 e4       	ldi	r21, 0x41	; 65
    5f4c:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    5f50:	dc 01       	movw	r26, r24
    5f52:	cb 01       	movw	r24, r22
    5f54:	bc 01       	movw	r22, r24
    5f56:	cd 01       	movw	r24, r26
    5f58:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    5f5c:	dc 01       	movw	r26, r24
    5f5e:	cb 01       	movw	r24, r22
    5f60:	9e a3       	lds	r25, 0x5e
    5f62:	8d a3       	lds	r24, 0x5d
    5f64:	12 c0       	rjmp	.+36     	; 0x5f8a <alternate_path+0x316>
    5f66:	80 e7       	ldi	r24, 0x70	; 112
    5f68:	91 e0       	ldi	r25, 0x01	; 1
    5f6a:	98 a7       	lds	r25, 0x78
    5f6c:	8f a3       	lds	r24, 0x5f
    5f6e:	8f a1       	lds	r24, 0x4f
    5f70:	98 a5       	lds	r25, 0x68
    5f72:	8c 01       	movw	r16, r24
    5f74:	c8 01       	movw	r24, r16
    5f76:	01 97       	sbiw	r24, 0x01	; 1
    5f78:	f1 f7       	brne	.-4      	; 0x5f76 <alternate_path+0x302>
    5f7a:	8c 01       	movw	r16, r24
    5f7c:	18 a7       	lds	r17, 0x78
    5f7e:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f80:	8d a1       	lds	r24, 0x4d
    5f82:	9e a1       	lds	r25, 0x4e
    5f84:	01 97       	sbiw	r24, 0x01	; 1
    5f86:	9e a3       	lds	r25, 0x5e
    5f88:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f8a:	8d a1       	lds	r24, 0x4d
    5f8c:	9e a1       	lds	r25, 0x4e
    5f8e:	00 97       	sbiw	r24, 0x00	; 0
    5f90:	51 f7       	brne	.-44     	; 0x5f66 <alternate_path+0x2f2>
    5f92:	17 c0       	rjmp	.+46     	; 0x5fc2 <alternate_path+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f94:	69 a1       	lds	r22, 0x49
    5f96:	7a a1       	lds	r23, 0x4a
    5f98:	8b a1       	lds	r24, 0x4b
    5f9a:	9c a1       	lds	r25, 0x4c
    5f9c:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    5fa0:	dc 01       	movw	r26, r24
    5fa2:	cb 01       	movw	r24, r22
    5fa4:	9e a3       	lds	r25, 0x5e
    5fa6:	8d a3       	lds	r24, 0x5d
    5fa8:	8d a1       	lds	r24, 0x4d
    5faa:	9e a1       	lds	r25, 0x4e
    5fac:	9a a7       	lds	r25, 0x7a
    5fae:	89 a7       	lds	r24, 0x79
    5fb0:	89 a5       	lds	r24, 0x69
    5fb2:	9a a5       	lds	r25, 0x6a
    5fb4:	8c 01       	movw	r16, r24
    5fb6:	f8 01       	movw	r30, r16
    5fb8:	31 97       	sbiw	r30, 0x01	; 1
    5fba:	f1 f7       	brne	.-4      	; 0x5fb8 <alternate_path+0x344>
    5fbc:	8f 01       	movw	r16, r30
    5fbe:	1a a7       	lds	r17, 0x7a
    5fc0:	09 a7       	lds	r16, 0x79
	_delay_ms(300);
	
	forward_mm(53);
    5fc2:	85 e3       	ldi	r24, 0x35	; 53
    5fc4:	90 e0       	ldi	r25, 0x00	; 0
    5fc6:	0e 94 4d 13 	call	0x269a	; 0x269a <forward_mm>
	stop_bot();
    5fca:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    5fce:	80 e0       	ldi	r24, 0x00	; 0
    5fd0:	90 e0       	ldi	r25, 0x00	; 0
    5fd2:	a6 e9       	ldi	r26, 0x96	; 150
    5fd4:	b3 e4       	ldi	r27, 0x43	; 67
    5fd6:	8b a7       	lds	r24, 0x7b
    5fd8:	9c a7       	lds	r25, 0x7c
    5fda:	ad a7       	lds	r26, 0x7d
    5fdc:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    5fde:	6b a5       	lds	r22, 0x6b
    5fe0:	7c a5       	lds	r23, 0x6c
    5fe2:	8d a5       	lds	r24, 0x6d
    5fe4:	9e a5       	lds	r25, 0x6e
    5fe6:	26 e6       	ldi	r18, 0x66	; 102
    5fe8:	36 e6       	ldi	r19, 0x66	; 102
    5fea:	46 e6       	ldi	r20, 0x66	; 102
    5fec:	55 e4       	ldi	r21, 0x45	; 69
    5fee:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    5ff2:	dc 01       	movw	r26, r24
    5ff4:	cb 01       	movw	r24, r22
    5ff6:	8f a7       	lds	r24, 0x7f
    5ff8:	98 ab       	sts	0x58, r25
    5ffa:	a9 ab       	sts	0x59, r26
    5ffc:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    5ffe:	11 e0       	ldi	r17, 0x01	; 1
    6000:	6f a5       	lds	r22, 0x6f
    6002:	78 a9       	sts	0x48, r23
    6004:	89 a9       	sts	0x49, r24
    6006:	9a a9       	sts	0x4a, r25
    6008:	20 e0       	ldi	r18, 0x00	; 0
    600a:	30 e0       	ldi	r19, 0x00	; 0
    600c:	40 e8       	ldi	r20, 0x80	; 128
    600e:	5f e3       	ldi	r21, 0x3F	; 63
    6010:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    6014:	88 23       	and	r24, r24
    6016:	0c f0       	brlt	.+2      	; 0x601a <alternate_path+0x3a6>
    6018:	10 e0       	ldi	r17, 0x00	; 0
    601a:	11 23       	and	r17, r17
    601c:	29 f0       	breq	.+10     	; 0x6028 <alternate_path+0x3b4>
		__ticks = 1;
    601e:	81 e0       	ldi	r24, 0x01	; 1
    6020:	90 e0       	ldi	r25, 0x00	; 0
    6022:	9c ab       	sts	0x5c, r25
    6024:	8b ab       	sts	0x5b, r24
    6026:	46 c0       	rjmp	.+140    	; 0x60b4 <alternate_path+0x440>
	else if (__tmp > 65535)
    6028:	11 e0       	ldi	r17, 0x01	; 1
    602a:	6f a5       	lds	r22, 0x6f
    602c:	78 a9       	sts	0x48, r23
    602e:	89 a9       	sts	0x49, r24
    6030:	9a a9       	sts	0x4a, r25
    6032:	20 e0       	ldi	r18, 0x00	; 0
    6034:	3f ef       	ldi	r19, 0xFF	; 255
    6036:	4f e7       	ldi	r20, 0x7F	; 127
    6038:	57 e4       	ldi	r21, 0x47	; 71
    603a:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    603e:	18 16       	cp	r1, r24
    6040:	0c f0       	brlt	.+2      	; 0x6044 <alternate_path+0x3d0>
    6042:	10 e0       	ldi	r17, 0x00	; 0
    6044:	11 23       	and	r17, r17
    6046:	61 f1       	breq	.+88     	; 0x60a0 <alternate_path+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6048:	6b a5       	lds	r22, 0x6b
    604a:	7c a5       	lds	r23, 0x6c
    604c:	8d a5       	lds	r24, 0x6d
    604e:	9e a5       	lds	r25, 0x6e
    6050:	20 e0       	ldi	r18, 0x00	; 0
    6052:	30 e0       	ldi	r19, 0x00	; 0
    6054:	40 e2       	ldi	r20, 0x20	; 32
    6056:	51 e4       	ldi	r21, 0x41	; 65
    6058:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    605c:	dc 01       	movw	r26, r24
    605e:	cb 01       	movw	r24, r22
    6060:	bc 01       	movw	r22, r24
    6062:	cd 01       	movw	r24, r26
    6064:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    6068:	dc 01       	movw	r26, r24
    606a:	cb 01       	movw	r24, r22
    606c:	9c ab       	sts	0x5c, r25
    606e:	8b ab       	sts	0x5b, r24
    6070:	12 c0       	rjmp	.+36     	; 0x6096 <alternate_path+0x422>
    6072:	80 e7       	ldi	r24, 0x70	; 112
    6074:	91 e0       	ldi	r25, 0x01	; 1
    6076:	9e ab       	sts	0x5e, r25
    6078:	8d ab       	sts	0x5d, r24
    607a:	8d a9       	sts	0x4d, r24
    607c:	9e a9       	sts	0x4e, r25
    607e:	8c 01       	movw	r16, r24
    6080:	c8 01       	movw	r24, r16
    6082:	01 97       	sbiw	r24, 0x01	; 1
    6084:	f1 f7       	brne	.-4      	; 0x6082 <alternate_path+0x40e>
    6086:	8c 01       	movw	r16, r24
    6088:	1e ab       	sts	0x5e, r17
    608a:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    608c:	8b a9       	sts	0x4b, r24
    608e:	9c a9       	sts	0x4c, r25
    6090:	01 97       	sbiw	r24, 0x01	; 1
    6092:	9c ab       	sts	0x5c, r25
    6094:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6096:	8b a9       	sts	0x4b, r24
    6098:	9c a9       	sts	0x4c, r25
    609a:	00 97       	sbiw	r24, 0x00	; 0
    609c:	51 f7       	brne	.-44     	; 0x6072 <alternate_path+0x3fe>
    609e:	17 c0       	rjmp	.+46     	; 0x60ce <alternate_path+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60a0:	6f a5       	lds	r22, 0x6f
    60a2:	78 a9       	sts	0x48, r23
    60a4:	89 a9       	sts	0x49, r24
    60a6:	9a a9       	sts	0x4a, r25
    60a8:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    60ac:	dc 01       	movw	r26, r24
    60ae:	cb 01       	movw	r24, r22
    60b0:	9c ab       	sts	0x5c, r25
    60b2:	8b ab       	sts	0x5b, r24
    60b4:	8b a9       	sts	0x4b, r24
    60b6:	9c a9       	sts	0x4c, r25
    60b8:	98 af       	sts	0x78, r25
    60ba:	8f ab       	sts	0x5f, r24
    60bc:	8f a9       	sts	0x4f, r24
    60be:	98 ad       	sts	0x68, r25
    60c0:	8c 01       	movw	r16, r24
    60c2:	f8 01       	movw	r30, r16
    60c4:	31 97       	sbiw	r30, 0x01	; 1
    60c6:	f1 f7       	brne	.-4      	; 0x60c4 <alternate_path+0x450>
    60c8:	8f 01       	movw	r16, r30
    60ca:	18 af       	sts	0x78, r17
    60cc:	0f ab       	sts	0x5f, r16
	_delay_ms(300);
	
	right_turn();
    60ce:	0e 94 0d 1c 	call	0x381a	; 0x381a <right_turn>
	stop_bot();
    60d2:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    60d6:	80 e0       	ldi	r24, 0x00	; 0
    60d8:	90 e0       	ldi	r25, 0x00	; 0
    60da:	a6 e9       	ldi	r26, 0x96	; 150
    60dc:	b3 e4       	ldi	r27, 0x43	; 67
    60de:	89 af       	sts	0x79, r24
    60e0:	9a af       	sts	0x7a, r25
    60e2:	ab af       	sts	0x7b, r26
    60e4:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    60e6:	69 ad       	sts	0x69, r22
    60e8:	7a ad       	sts	0x6a, r23
    60ea:	8b ad       	sts	0x6b, r24
    60ec:	9c ad       	sts	0x6c, r25
    60ee:	26 e6       	ldi	r18, 0x66	; 102
    60f0:	36 e6       	ldi	r19, 0x66	; 102
    60f2:	46 e6       	ldi	r20, 0x66	; 102
    60f4:	55 e4       	ldi	r21, 0x45	; 69
    60f6:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    60fa:	dc 01       	movw	r26, r24
    60fc:	cb 01       	movw	r24, r22
    60fe:	9e 01       	movw	r18, r28
    6100:	23 5c       	subi	r18, 0xC3	; 195
    6102:	3f 4f       	sbci	r19, 0xFF	; 255
    6104:	f9 01       	movw	r30, r18
    6106:	80 83       	st	Z, r24
    6108:	91 83       	std	Z+1, r25	; 0x01
    610a:	a2 83       	std	Z+2, r26	; 0x02
    610c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    610e:	11 e0       	ldi	r17, 0x01	; 1
    6110:	ce 01       	movw	r24, r28
    6112:	cd 96       	adiw	r24, 0x3d	; 61
    6114:	fc 01       	movw	r30, r24
    6116:	60 81       	ld	r22, Z
    6118:	71 81       	ldd	r23, Z+1	; 0x01
    611a:	82 81       	ldd	r24, Z+2	; 0x02
    611c:	93 81       	ldd	r25, Z+3	; 0x03
    611e:	20 e0       	ldi	r18, 0x00	; 0
    6120:	30 e0       	ldi	r19, 0x00	; 0
    6122:	40 e8       	ldi	r20, 0x80	; 128
    6124:	5f e3       	ldi	r21, 0x3F	; 63
    6126:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    612a:	88 23       	and	r24, r24
    612c:	0c f0       	brlt	.+2      	; 0x6130 <alternate_path+0x4bc>
    612e:	10 e0       	ldi	r17, 0x00	; 0
    6130:	11 23       	and	r17, r17
    6132:	49 f0       	breq	.+18     	; 0x6146 <alternate_path+0x4d2>
		__ticks = 1;
    6134:	ce 01       	movw	r24, r28
    6136:	8f 5b       	subi	r24, 0xBF	; 191
    6138:	9f 4f       	sbci	r25, 0xFF	; 255
    613a:	21 e0       	ldi	r18, 0x01	; 1
    613c:	30 e0       	ldi	r19, 0x00	; 0
    613e:	fc 01       	movw	r30, r24
    6140:	31 83       	std	Z+1, r19	; 0x01
    6142:	20 83       	st	Z, r18
    6144:	6e c0       	rjmp	.+220    	; 0x6222 <alternate_path+0x5ae>
	else if (__tmp > 65535)
    6146:	11 e0       	ldi	r17, 0x01	; 1
    6148:	ce 01       	movw	r24, r28
    614a:	cd 96       	adiw	r24, 0x3d	; 61
    614c:	fc 01       	movw	r30, r24
    614e:	60 81       	ld	r22, Z
    6150:	71 81       	ldd	r23, Z+1	; 0x01
    6152:	82 81       	ldd	r24, Z+2	; 0x02
    6154:	93 81       	ldd	r25, Z+3	; 0x03
    6156:	20 e0       	ldi	r18, 0x00	; 0
    6158:	3f ef       	ldi	r19, 0xFF	; 255
    615a:	4f e7       	ldi	r20, 0x7F	; 127
    615c:	57 e4       	ldi	r21, 0x47	; 71
    615e:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    6162:	18 16       	cp	r1, r24
    6164:	0c f0       	brlt	.+2      	; 0x6168 <alternate_path+0x4f4>
    6166:	10 e0       	ldi	r17, 0x00	; 0
    6168:	11 23       	and	r17, r17
    616a:	09 f4       	brne	.+2      	; 0x616e <alternate_path+0x4fa>
    616c:	49 c0       	rjmp	.+146    	; 0x6200 <alternate_path+0x58c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    616e:	69 ad       	sts	0x69, r22
    6170:	7a ad       	sts	0x6a, r23
    6172:	8b ad       	sts	0x6b, r24
    6174:	9c ad       	sts	0x6c, r25
    6176:	20 e0       	ldi	r18, 0x00	; 0
    6178:	30 e0       	ldi	r19, 0x00	; 0
    617a:	40 e2       	ldi	r20, 0x20	; 32
    617c:	51 e4       	ldi	r21, 0x41	; 65
    617e:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    6182:	dc 01       	movw	r26, r24
    6184:	cb 01       	movw	r24, r22
    6186:	8e 01       	movw	r16, r28
    6188:	0f 5b       	subi	r16, 0xBF	; 191
    618a:	1f 4f       	sbci	r17, 0xFF	; 255
    618c:	bc 01       	movw	r22, r24
    618e:	cd 01       	movw	r24, r26
    6190:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    6194:	dc 01       	movw	r26, r24
    6196:	cb 01       	movw	r24, r22
    6198:	f8 01       	movw	r30, r16
    619a:	91 83       	std	Z+1, r25	; 0x01
    619c:	80 83       	st	Z, r24
    619e:	27 c0       	rjmp	.+78     	; 0x61ee <alternate_path+0x57a>
    61a0:	ce 01       	movw	r24, r28
    61a2:	8d 5b       	subi	r24, 0xBD	; 189
    61a4:	9f 4f       	sbci	r25, 0xFF	; 255
    61a6:	20 e7       	ldi	r18, 0x70	; 112
    61a8:	31 e0       	ldi	r19, 0x01	; 1
    61aa:	fc 01       	movw	r30, r24
    61ac:	31 83       	std	Z+1, r19	; 0x01
    61ae:	20 83       	st	Z, r18
    61b0:	ce 01       	movw	r24, r28
    61b2:	8d 5b       	subi	r24, 0xBD	; 189
    61b4:	9f 4f       	sbci	r25, 0xFF	; 255
    61b6:	fc 01       	movw	r30, r24
    61b8:	80 81       	ld	r24, Z
    61ba:	91 81       	ldd	r25, Z+1	; 0x01
    61bc:	8c 01       	movw	r16, r24
    61be:	c8 01       	movw	r24, r16
    61c0:	01 97       	sbiw	r24, 0x01	; 1
    61c2:	f1 f7       	brne	.-4      	; 0x61c0 <alternate_path+0x54c>
    61c4:	8c 01       	movw	r16, r24
    61c6:	ce 01       	movw	r24, r28
    61c8:	8d 5b       	subi	r24, 0xBD	; 189
    61ca:	9f 4f       	sbci	r25, 0xFF	; 255
    61cc:	fc 01       	movw	r30, r24
    61ce:	11 83       	std	Z+1, r17	; 0x01
    61d0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    61d2:	ce 01       	movw	r24, r28
    61d4:	8f 5b       	subi	r24, 0xBF	; 191
    61d6:	9f 4f       	sbci	r25, 0xFF	; 255
    61d8:	9e 01       	movw	r18, r28
    61da:	2f 5b       	subi	r18, 0xBF	; 191
    61dc:	3f 4f       	sbci	r19, 0xFF	; 255
    61de:	f9 01       	movw	r30, r18
    61e0:	20 81       	ld	r18, Z
    61e2:	31 81       	ldd	r19, Z+1	; 0x01
    61e4:	21 50       	subi	r18, 0x01	; 1
    61e6:	30 40       	sbci	r19, 0x00	; 0
    61e8:	fc 01       	movw	r30, r24
    61ea:	31 83       	std	Z+1, r19	; 0x01
    61ec:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61ee:	ce 01       	movw	r24, r28
    61f0:	8f 5b       	subi	r24, 0xBF	; 191
    61f2:	9f 4f       	sbci	r25, 0xFF	; 255
    61f4:	fc 01       	movw	r30, r24
    61f6:	80 81       	ld	r24, Z
    61f8:	91 81       	ldd	r25, Z+1	; 0x01
    61fa:	00 97       	sbiw	r24, 0x00	; 0
    61fc:	89 f6       	brne	.-94     	; 0x61a0 <alternate_path+0x52c>
    61fe:	2e c0       	rjmp	.+92     	; 0x625c <alternate_path+0x5e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6200:	8e 01       	movw	r16, r28
    6202:	0f 5b       	subi	r16, 0xBF	; 191
    6204:	1f 4f       	sbci	r17, 0xFF	; 255
    6206:	ce 01       	movw	r24, r28
    6208:	cd 96       	adiw	r24, 0x3d	; 61
    620a:	fc 01       	movw	r30, r24
    620c:	60 81       	ld	r22, Z
    620e:	71 81       	ldd	r23, Z+1	; 0x01
    6210:	82 81       	ldd	r24, Z+2	; 0x02
    6212:	93 81       	ldd	r25, Z+3	; 0x03
    6214:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    6218:	dc 01       	movw	r26, r24
    621a:	cb 01       	movw	r24, r22
    621c:	f8 01       	movw	r30, r16
    621e:	91 83       	std	Z+1, r25	; 0x01
    6220:	80 83       	st	Z, r24
    6222:	ce 01       	movw	r24, r28
    6224:	8b 5b       	subi	r24, 0xBB	; 187
    6226:	9f 4f       	sbci	r25, 0xFF	; 255
    6228:	9e 01       	movw	r18, r28
    622a:	2f 5b       	subi	r18, 0xBF	; 191
    622c:	3f 4f       	sbci	r19, 0xFF	; 255
    622e:	f9 01       	movw	r30, r18
    6230:	20 81       	ld	r18, Z
    6232:	31 81       	ldd	r19, Z+1	; 0x01
    6234:	fc 01       	movw	r30, r24
    6236:	31 83       	std	Z+1, r19	; 0x01
    6238:	20 83       	st	Z, r18
    623a:	ce 01       	movw	r24, r28
    623c:	8b 5b       	subi	r24, 0xBB	; 187
    623e:	9f 4f       	sbci	r25, 0xFF	; 255
    6240:	fc 01       	movw	r30, r24
    6242:	80 81       	ld	r24, Z
    6244:	91 81       	ldd	r25, Z+1	; 0x01
    6246:	8c 01       	movw	r16, r24
    6248:	c8 01       	movw	r24, r16
    624a:	01 97       	sbiw	r24, 0x01	; 1
    624c:	f1 f7       	brne	.-4      	; 0x624a <alternate_path+0x5d6>
    624e:	8c 01       	movw	r16, r24
    6250:	ce 01       	movw	r24, r28
    6252:	8b 5b       	subi	r24, 0xBB	; 187
    6254:	9f 4f       	sbci	r25, 0xFF	; 255
    6256:	fc 01       	movw	r30, r24
    6258:	11 83       	std	Z+1, r17	; 0x01
    625a:	00 83       	st	Z, r16
	_delay_ms(300);
	
	move_forward();
    625c:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <move_forward>
	forward_mm(20);
    6260:	84 e1       	ldi	r24, 0x14	; 20
    6262:	90 e0       	ldi	r25, 0x00	; 0
    6264:	0e 94 4d 13 	call	0x269a	; 0x269a <forward_mm>
	send_to_pc();
    6268:	0e 94 5f 3a 	call	0x74be	; 0x74be <send_to_pc>
	
	move_forward();
    626c:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <move_forward>
	stop_bot();
    6270:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    6274:	9e 01       	movw	r18, r28
    6276:	29 5b       	subi	r18, 0xB9	; 185
    6278:	3f 4f       	sbci	r19, 0xFF	; 255
    627a:	80 e0       	ldi	r24, 0x00	; 0
    627c:	90 e0       	ldi	r25, 0x00	; 0
    627e:	a6 e9       	ldi	r26, 0x96	; 150
    6280:	b3 e4       	ldi	r27, 0x43	; 67
    6282:	f9 01       	movw	r30, r18
    6284:	80 83       	st	Z, r24
    6286:	91 83       	std	Z+1, r25	; 0x01
    6288:	a2 83       	std	Z+2, r26	; 0x02
    628a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    628c:	8e 01       	movw	r16, r28
    628e:	05 5b       	subi	r16, 0xB5	; 181
    6290:	1f 4f       	sbci	r17, 0xFF	; 255
    6292:	ce 01       	movw	r24, r28
    6294:	89 5b       	subi	r24, 0xB9	; 185
    6296:	9f 4f       	sbci	r25, 0xFF	; 255
    6298:	fc 01       	movw	r30, r24
    629a:	60 81       	ld	r22, Z
    629c:	71 81       	ldd	r23, Z+1	; 0x01
    629e:	82 81       	ldd	r24, Z+2	; 0x02
    62a0:	93 81       	ldd	r25, Z+3	; 0x03
    62a2:	26 e6       	ldi	r18, 0x66	; 102
    62a4:	36 e6       	ldi	r19, 0x66	; 102
    62a6:	46 e6       	ldi	r20, 0x66	; 102
    62a8:	55 e4       	ldi	r21, 0x45	; 69
    62aa:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    62ae:	dc 01       	movw	r26, r24
    62b0:	cb 01       	movw	r24, r22
    62b2:	f8 01       	movw	r30, r16
    62b4:	80 83       	st	Z, r24
    62b6:	91 83       	std	Z+1, r25	; 0x01
    62b8:	a2 83       	std	Z+2, r26	; 0x02
    62ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    62bc:	ce 01       	movw	r24, r28
    62be:	85 5b       	subi	r24, 0xB5	; 181
    62c0:	9f 4f       	sbci	r25, 0xFF	; 255
    62c2:	11 e0       	ldi	r17, 0x01	; 1
    62c4:	fc 01       	movw	r30, r24
    62c6:	60 81       	ld	r22, Z
    62c8:	71 81       	ldd	r23, Z+1	; 0x01
    62ca:	82 81       	ldd	r24, Z+2	; 0x02
    62cc:	93 81       	ldd	r25, Z+3	; 0x03
    62ce:	20 e0       	ldi	r18, 0x00	; 0
    62d0:	30 e0       	ldi	r19, 0x00	; 0
    62d2:	40 e8       	ldi	r20, 0x80	; 128
    62d4:	5f e3       	ldi	r21, 0x3F	; 63
    62d6:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    62da:	88 23       	and	r24, r24
    62dc:	0c f0       	brlt	.+2      	; 0x62e0 <alternate_path+0x66c>
    62de:	10 e0       	ldi	r17, 0x00	; 0
    62e0:	11 23       	and	r17, r17
    62e2:	49 f0       	breq	.+18     	; 0x62f6 <alternate_path+0x682>
		__ticks = 1;
    62e4:	ce 01       	movw	r24, r28
    62e6:	81 5b       	subi	r24, 0xB1	; 177
    62e8:	9f 4f       	sbci	r25, 0xFF	; 255
    62ea:	21 e0       	ldi	r18, 0x01	; 1
    62ec:	30 e0       	ldi	r19, 0x00	; 0
    62ee:	fc 01       	movw	r30, r24
    62f0:	31 83       	std	Z+1, r19	; 0x01
    62f2:	20 83       	st	Z, r18
    62f4:	74 c0       	rjmp	.+232    	; 0x63de <alternate_path+0x76a>
	else if (__tmp > 65535)
    62f6:	ce 01       	movw	r24, r28
    62f8:	85 5b       	subi	r24, 0xB5	; 181
    62fa:	9f 4f       	sbci	r25, 0xFF	; 255
    62fc:	11 e0       	ldi	r17, 0x01	; 1
    62fe:	fc 01       	movw	r30, r24
    6300:	60 81       	ld	r22, Z
    6302:	71 81       	ldd	r23, Z+1	; 0x01
    6304:	82 81       	ldd	r24, Z+2	; 0x02
    6306:	93 81       	ldd	r25, Z+3	; 0x03
    6308:	20 e0       	ldi	r18, 0x00	; 0
    630a:	3f ef       	ldi	r19, 0xFF	; 255
    630c:	4f e7       	ldi	r20, 0x7F	; 127
    630e:	57 e4       	ldi	r21, 0x47	; 71
    6310:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    6314:	18 16       	cp	r1, r24
    6316:	0c f0       	brlt	.+2      	; 0x631a <alternate_path+0x6a6>
    6318:	10 e0       	ldi	r17, 0x00	; 0
    631a:	11 23       	and	r17, r17
    631c:	09 f4       	brne	.+2      	; 0x6320 <alternate_path+0x6ac>
    631e:	4d c0       	rjmp	.+154    	; 0x63ba <alternate_path+0x746>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6320:	ce 01       	movw	r24, r28
    6322:	89 5b       	subi	r24, 0xB9	; 185
    6324:	9f 4f       	sbci	r25, 0xFF	; 255
    6326:	fc 01       	movw	r30, r24
    6328:	60 81       	ld	r22, Z
    632a:	71 81       	ldd	r23, Z+1	; 0x01
    632c:	82 81       	ldd	r24, Z+2	; 0x02
    632e:	93 81       	ldd	r25, Z+3	; 0x03
    6330:	20 e0       	ldi	r18, 0x00	; 0
    6332:	30 e0       	ldi	r19, 0x00	; 0
    6334:	40 e2       	ldi	r20, 0x20	; 32
    6336:	51 e4       	ldi	r21, 0x41	; 65
    6338:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    633c:	dc 01       	movw	r26, r24
    633e:	cb 01       	movw	r24, r22
    6340:	8e 01       	movw	r16, r28
    6342:	01 5b       	subi	r16, 0xB1	; 177
    6344:	1f 4f       	sbci	r17, 0xFF	; 255
    6346:	bc 01       	movw	r22, r24
    6348:	cd 01       	movw	r24, r26
    634a:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    634e:	dc 01       	movw	r26, r24
    6350:	cb 01       	movw	r24, r22
    6352:	f8 01       	movw	r30, r16
    6354:	91 83       	std	Z+1, r25	; 0x01
    6356:	80 83       	st	Z, r24
    6358:	27 c0       	rjmp	.+78     	; 0x63a8 <alternate_path+0x734>
    635a:	ce 01       	movw	r24, r28
    635c:	8f 5a       	subi	r24, 0xAF	; 175
    635e:	9f 4f       	sbci	r25, 0xFF	; 255
    6360:	20 e7       	ldi	r18, 0x70	; 112
    6362:	31 e0       	ldi	r19, 0x01	; 1
    6364:	fc 01       	movw	r30, r24
    6366:	31 83       	std	Z+1, r19	; 0x01
    6368:	20 83       	st	Z, r18
    636a:	ce 01       	movw	r24, r28
    636c:	8f 5a       	subi	r24, 0xAF	; 175
    636e:	9f 4f       	sbci	r25, 0xFF	; 255
    6370:	fc 01       	movw	r30, r24
    6372:	80 81       	ld	r24, Z
    6374:	91 81       	ldd	r25, Z+1	; 0x01
    6376:	8c 01       	movw	r16, r24
    6378:	c8 01       	movw	r24, r16
    637a:	01 97       	sbiw	r24, 0x01	; 1
    637c:	f1 f7       	brne	.-4      	; 0x637a <alternate_path+0x706>
    637e:	8c 01       	movw	r16, r24
    6380:	ce 01       	movw	r24, r28
    6382:	8f 5a       	subi	r24, 0xAF	; 175
    6384:	9f 4f       	sbci	r25, 0xFF	; 255
    6386:	fc 01       	movw	r30, r24
    6388:	11 83       	std	Z+1, r17	; 0x01
    638a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    638c:	ce 01       	movw	r24, r28
    638e:	81 5b       	subi	r24, 0xB1	; 177
    6390:	9f 4f       	sbci	r25, 0xFF	; 255
    6392:	9e 01       	movw	r18, r28
    6394:	21 5b       	subi	r18, 0xB1	; 177
    6396:	3f 4f       	sbci	r19, 0xFF	; 255
    6398:	f9 01       	movw	r30, r18
    639a:	20 81       	ld	r18, Z
    639c:	31 81       	ldd	r19, Z+1	; 0x01
    639e:	21 50       	subi	r18, 0x01	; 1
    63a0:	30 40       	sbci	r19, 0x00	; 0
    63a2:	fc 01       	movw	r30, r24
    63a4:	31 83       	std	Z+1, r19	; 0x01
    63a6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63a8:	ce 01       	movw	r24, r28
    63aa:	81 5b       	subi	r24, 0xB1	; 177
    63ac:	9f 4f       	sbci	r25, 0xFF	; 255
    63ae:	fc 01       	movw	r30, r24
    63b0:	80 81       	ld	r24, Z
    63b2:	91 81       	ldd	r25, Z+1	; 0x01
    63b4:	00 97       	sbiw	r24, 0x00	; 0
    63b6:	89 f6       	brne	.-94     	; 0x635a <alternate_path+0x6e6>
    63b8:	2f c0       	rjmp	.+94     	; 0x6418 <alternate_path+0x7a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    63ba:	8e 01       	movw	r16, r28
    63bc:	01 5b       	subi	r16, 0xB1	; 177
    63be:	1f 4f       	sbci	r17, 0xFF	; 255
    63c0:	ce 01       	movw	r24, r28
    63c2:	85 5b       	subi	r24, 0xB5	; 181
    63c4:	9f 4f       	sbci	r25, 0xFF	; 255
    63c6:	fc 01       	movw	r30, r24
    63c8:	60 81       	ld	r22, Z
    63ca:	71 81       	ldd	r23, Z+1	; 0x01
    63cc:	82 81       	ldd	r24, Z+2	; 0x02
    63ce:	93 81       	ldd	r25, Z+3	; 0x03
    63d0:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    63d4:	dc 01       	movw	r26, r24
    63d6:	cb 01       	movw	r24, r22
    63d8:	f8 01       	movw	r30, r16
    63da:	91 83       	std	Z+1, r25	; 0x01
    63dc:	80 83       	st	Z, r24
    63de:	ce 01       	movw	r24, r28
    63e0:	8d 5a       	subi	r24, 0xAD	; 173
    63e2:	9f 4f       	sbci	r25, 0xFF	; 255
    63e4:	9e 01       	movw	r18, r28
    63e6:	21 5b       	subi	r18, 0xB1	; 177
    63e8:	3f 4f       	sbci	r19, 0xFF	; 255
    63ea:	f9 01       	movw	r30, r18
    63ec:	20 81       	ld	r18, Z
    63ee:	31 81       	ldd	r19, Z+1	; 0x01
    63f0:	fc 01       	movw	r30, r24
    63f2:	31 83       	std	Z+1, r19	; 0x01
    63f4:	20 83       	st	Z, r18
    63f6:	ce 01       	movw	r24, r28
    63f8:	8d 5a       	subi	r24, 0xAD	; 173
    63fa:	9f 4f       	sbci	r25, 0xFF	; 255
    63fc:	fc 01       	movw	r30, r24
    63fe:	80 81       	ld	r24, Z
    6400:	91 81       	ldd	r25, Z+1	; 0x01
    6402:	8c 01       	movw	r16, r24
    6404:	c8 01       	movw	r24, r16
    6406:	01 97       	sbiw	r24, 0x01	; 1
    6408:	f1 f7       	brne	.-4      	; 0x6406 <alternate_path+0x792>
    640a:	8c 01       	movw	r16, r24
    640c:	ce 01       	movw	r24, r28
    640e:	8d 5a       	subi	r24, 0xAD	; 173
    6410:	9f 4f       	sbci	r25, 0xFF	; 255
    6412:	fc 01       	movw	r30, r24
    6414:	11 83       	std	Z+1, r17	; 0x01
    6416:	00 83       	st	Z, r16
	_delay_ms(300);
	
	forward_mm(53);
    6418:	85 e3       	ldi	r24, 0x35	; 53
    641a:	90 e0       	ldi	r25, 0x00	; 0
    641c:	0e 94 4d 13 	call	0x269a	; 0x269a <forward_mm>
	stop_bot();
    6420:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    6424:	9e 01       	movw	r18, r28
    6426:	2b 5a       	subi	r18, 0xAB	; 171
    6428:	3f 4f       	sbci	r19, 0xFF	; 255
    642a:	80 e0       	ldi	r24, 0x00	; 0
    642c:	90 e0       	ldi	r25, 0x00	; 0
    642e:	a6 e9       	ldi	r26, 0x96	; 150
    6430:	b3 e4       	ldi	r27, 0x43	; 67
    6432:	f9 01       	movw	r30, r18
    6434:	80 83       	st	Z, r24
    6436:	91 83       	std	Z+1, r25	; 0x01
    6438:	a2 83       	std	Z+2, r26	; 0x02
    643a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    643c:	8e 01       	movw	r16, r28
    643e:	07 5a       	subi	r16, 0xA7	; 167
    6440:	1f 4f       	sbci	r17, 0xFF	; 255
    6442:	ce 01       	movw	r24, r28
    6444:	8b 5a       	subi	r24, 0xAB	; 171
    6446:	9f 4f       	sbci	r25, 0xFF	; 255
    6448:	fc 01       	movw	r30, r24
    644a:	60 81       	ld	r22, Z
    644c:	71 81       	ldd	r23, Z+1	; 0x01
    644e:	82 81       	ldd	r24, Z+2	; 0x02
    6450:	93 81       	ldd	r25, Z+3	; 0x03
    6452:	26 e6       	ldi	r18, 0x66	; 102
    6454:	36 e6       	ldi	r19, 0x66	; 102
    6456:	46 e6       	ldi	r20, 0x66	; 102
    6458:	55 e4       	ldi	r21, 0x45	; 69
    645a:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    645e:	dc 01       	movw	r26, r24
    6460:	cb 01       	movw	r24, r22
    6462:	f8 01       	movw	r30, r16
    6464:	80 83       	st	Z, r24
    6466:	91 83       	std	Z+1, r25	; 0x01
    6468:	a2 83       	std	Z+2, r26	; 0x02
    646a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    646c:	ce 01       	movw	r24, r28
    646e:	87 5a       	subi	r24, 0xA7	; 167
    6470:	9f 4f       	sbci	r25, 0xFF	; 255
    6472:	11 e0       	ldi	r17, 0x01	; 1
    6474:	fc 01       	movw	r30, r24
    6476:	60 81       	ld	r22, Z
    6478:	71 81       	ldd	r23, Z+1	; 0x01
    647a:	82 81       	ldd	r24, Z+2	; 0x02
    647c:	93 81       	ldd	r25, Z+3	; 0x03
    647e:	20 e0       	ldi	r18, 0x00	; 0
    6480:	30 e0       	ldi	r19, 0x00	; 0
    6482:	40 e8       	ldi	r20, 0x80	; 128
    6484:	5f e3       	ldi	r21, 0x3F	; 63
    6486:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    648a:	88 23       	and	r24, r24
    648c:	0c f0       	brlt	.+2      	; 0x6490 <alternate_path+0x81c>
    648e:	10 e0       	ldi	r17, 0x00	; 0
    6490:	11 23       	and	r17, r17
    6492:	49 f0       	breq	.+18     	; 0x64a6 <alternate_path+0x832>
		__ticks = 1;
    6494:	ce 01       	movw	r24, r28
    6496:	83 5a       	subi	r24, 0xA3	; 163
    6498:	9f 4f       	sbci	r25, 0xFF	; 255
    649a:	21 e0       	ldi	r18, 0x01	; 1
    649c:	30 e0       	ldi	r19, 0x00	; 0
    649e:	fc 01       	movw	r30, r24
    64a0:	31 83       	std	Z+1, r19	; 0x01
    64a2:	20 83       	st	Z, r18
    64a4:	74 c0       	rjmp	.+232    	; 0x658e <alternate_path+0x91a>
	else if (__tmp > 65535)
    64a6:	ce 01       	movw	r24, r28
    64a8:	87 5a       	subi	r24, 0xA7	; 167
    64aa:	9f 4f       	sbci	r25, 0xFF	; 255
    64ac:	11 e0       	ldi	r17, 0x01	; 1
    64ae:	fc 01       	movw	r30, r24
    64b0:	60 81       	ld	r22, Z
    64b2:	71 81       	ldd	r23, Z+1	; 0x01
    64b4:	82 81       	ldd	r24, Z+2	; 0x02
    64b6:	93 81       	ldd	r25, Z+3	; 0x03
    64b8:	20 e0       	ldi	r18, 0x00	; 0
    64ba:	3f ef       	ldi	r19, 0xFF	; 255
    64bc:	4f e7       	ldi	r20, 0x7F	; 127
    64be:	57 e4       	ldi	r21, 0x47	; 71
    64c0:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    64c4:	18 16       	cp	r1, r24
    64c6:	0c f0       	brlt	.+2      	; 0x64ca <alternate_path+0x856>
    64c8:	10 e0       	ldi	r17, 0x00	; 0
    64ca:	11 23       	and	r17, r17
    64cc:	09 f4       	brne	.+2      	; 0x64d0 <alternate_path+0x85c>
    64ce:	4d c0       	rjmp	.+154    	; 0x656a <alternate_path+0x8f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    64d0:	ce 01       	movw	r24, r28
    64d2:	8b 5a       	subi	r24, 0xAB	; 171
    64d4:	9f 4f       	sbci	r25, 0xFF	; 255
    64d6:	fc 01       	movw	r30, r24
    64d8:	60 81       	ld	r22, Z
    64da:	71 81       	ldd	r23, Z+1	; 0x01
    64dc:	82 81       	ldd	r24, Z+2	; 0x02
    64de:	93 81       	ldd	r25, Z+3	; 0x03
    64e0:	20 e0       	ldi	r18, 0x00	; 0
    64e2:	30 e0       	ldi	r19, 0x00	; 0
    64e4:	40 e2       	ldi	r20, 0x20	; 32
    64e6:	51 e4       	ldi	r21, 0x41	; 65
    64e8:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    64ec:	dc 01       	movw	r26, r24
    64ee:	cb 01       	movw	r24, r22
    64f0:	8e 01       	movw	r16, r28
    64f2:	03 5a       	subi	r16, 0xA3	; 163
    64f4:	1f 4f       	sbci	r17, 0xFF	; 255
    64f6:	bc 01       	movw	r22, r24
    64f8:	cd 01       	movw	r24, r26
    64fa:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    64fe:	dc 01       	movw	r26, r24
    6500:	cb 01       	movw	r24, r22
    6502:	f8 01       	movw	r30, r16
    6504:	91 83       	std	Z+1, r25	; 0x01
    6506:	80 83       	st	Z, r24
    6508:	27 c0       	rjmp	.+78     	; 0x6558 <alternate_path+0x8e4>
    650a:	ce 01       	movw	r24, r28
    650c:	81 5a       	subi	r24, 0xA1	; 161
    650e:	9f 4f       	sbci	r25, 0xFF	; 255
    6510:	20 e7       	ldi	r18, 0x70	; 112
    6512:	31 e0       	ldi	r19, 0x01	; 1
    6514:	fc 01       	movw	r30, r24
    6516:	31 83       	std	Z+1, r19	; 0x01
    6518:	20 83       	st	Z, r18
    651a:	ce 01       	movw	r24, r28
    651c:	81 5a       	subi	r24, 0xA1	; 161
    651e:	9f 4f       	sbci	r25, 0xFF	; 255
    6520:	fc 01       	movw	r30, r24
    6522:	80 81       	ld	r24, Z
    6524:	91 81       	ldd	r25, Z+1	; 0x01
    6526:	8c 01       	movw	r16, r24
    6528:	c8 01       	movw	r24, r16
    652a:	01 97       	sbiw	r24, 0x01	; 1
    652c:	f1 f7       	brne	.-4      	; 0x652a <alternate_path+0x8b6>
    652e:	8c 01       	movw	r16, r24
    6530:	ce 01       	movw	r24, r28
    6532:	81 5a       	subi	r24, 0xA1	; 161
    6534:	9f 4f       	sbci	r25, 0xFF	; 255
    6536:	fc 01       	movw	r30, r24
    6538:	11 83       	std	Z+1, r17	; 0x01
    653a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    653c:	ce 01       	movw	r24, r28
    653e:	83 5a       	subi	r24, 0xA3	; 163
    6540:	9f 4f       	sbci	r25, 0xFF	; 255
    6542:	9e 01       	movw	r18, r28
    6544:	23 5a       	subi	r18, 0xA3	; 163
    6546:	3f 4f       	sbci	r19, 0xFF	; 255
    6548:	f9 01       	movw	r30, r18
    654a:	20 81       	ld	r18, Z
    654c:	31 81       	ldd	r19, Z+1	; 0x01
    654e:	21 50       	subi	r18, 0x01	; 1
    6550:	30 40       	sbci	r19, 0x00	; 0
    6552:	fc 01       	movw	r30, r24
    6554:	31 83       	std	Z+1, r19	; 0x01
    6556:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6558:	ce 01       	movw	r24, r28
    655a:	83 5a       	subi	r24, 0xA3	; 163
    655c:	9f 4f       	sbci	r25, 0xFF	; 255
    655e:	fc 01       	movw	r30, r24
    6560:	80 81       	ld	r24, Z
    6562:	91 81       	ldd	r25, Z+1	; 0x01
    6564:	00 97       	sbiw	r24, 0x00	; 0
    6566:	89 f6       	brne	.-94     	; 0x650a <alternate_path+0x896>
    6568:	2f c0       	rjmp	.+94     	; 0x65c8 <alternate_path+0x954>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    656a:	8e 01       	movw	r16, r28
    656c:	03 5a       	subi	r16, 0xA3	; 163
    656e:	1f 4f       	sbci	r17, 0xFF	; 255
    6570:	ce 01       	movw	r24, r28
    6572:	87 5a       	subi	r24, 0xA7	; 167
    6574:	9f 4f       	sbci	r25, 0xFF	; 255
    6576:	fc 01       	movw	r30, r24
    6578:	60 81       	ld	r22, Z
    657a:	71 81       	ldd	r23, Z+1	; 0x01
    657c:	82 81       	ldd	r24, Z+2	; 0x02
    657e:	93 81       	ldd	r25, Z+3	; 0x03
    6580:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    6584:	dc 01       	movw	r26, r24
    6586:	cb 01       	movw	r24, r22
    6588:	f8 01       	movw	r30, r16
    658a:	91 83       	std	Z+1, r25	; 0x01
    658c:	80 83       	st	Z, r24
    658e:	ce 01       	movw	r24, r28
    6590:	8f 59       	subi	r24, 0x9F	; 159
    6592:	9f 4f       	sbci	r25, 0xFF	; 255
    6594:	9e 01       	movw	r18, r28
    6596:	23 5a       	subi	r18, 0xA3	; 163
    6598:	3f 4f       	sbci	r19, 0xFF	; 255
    659a:	f9 01       	movw	r30, r18
    659c:	20 81       	ld	r18, Z
    659e:	31 81       	ldd	r19, Z+1	; 0x01
    65a0:	fc 01       	movw	r30, r24
    65a2:	31 83       	std	Z+1, r19	; 0x01
    65a4:	20 83       	st	Z, r18
    65a6:	ce 01       	movw	r24, r28
    65a8:	8f 59       	subi	r24, 0x9F	; 159
    65aa:	9f 4f       	sbci	r25, 0xFF	; 255
    65ac:	fc 01       	movw	r30, r24
    65ae:	80 81       	ld	r24, Z
    65b0:	91 81       	ldd	r25, Z+1	; 0x01
    65b2:	8c 01       	movw	r16, r24
    65b4:	c8 01       	movw	r24, r16
    65b6:	01 97       	sbiw	r24, 0x01	; 1
    65b8:	f1 f7       	brne	.-4      	; 0x65b6 <alternate_path+0x942>
    65ba:	8c 01       	movw	r16, r24
    65bc:	ce 01       	movw	r24, r28
    65be:	8f 59       	subi	r24, 0x9F	; 159
    65c0:	9f 4f       	sbci	r25, 0xFF	; 255
    65c2:	fc 01       	movw	r30, r24
    65c4:	11 83       	std	Z+1, r17	; 0x01
    65c6:	00 83       	st	Z, r16
	_delay_ms(300);
	
	right_turn();
    65c8:	0e 94 0d 1c 	call	0x381a	; 0x381a <right_turn>
	stop_bot();
    65cc:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    65d0:	9e 01       	movw	r18, r28
    65d2:	2d 59       	subi	r18, 0x9D	; 157
    65d4:	3f 4f       	sbci	r19, 0xFF	; 255
    65d6:	80 e0       	ldi	r24, 0x00	; 0
    65d8:	90 e0       	ldi	r25, 0x00	; 0
    65da:	a6 e9       	ldi	r26, 0x96	; 150
    65dc:	b3 e4       	ldi	r27, 0x43	; 67
    65de:	f9 01       	movw	r30, r18
    65e0:	80 83       	st	Z, r24
    65e2:	91 83       	std	Z+1, r25	; 0x01
    65e4:	a2 83       	std	Z+2, r26	; 0x02
    65e6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    65e8:	8e 01       	movw	r16, r28
    65ea:	09 59       	subi	r16, 0x99	; 153
    65ec:	1f 4f       	sbci	r17, 0xFF	; 255
    65ee:	ce 01       	movw	r24, r28
    65f0:	8d 59       	subi	r24, 0x9D	; 157
    65f2:	9f 4f       	sbci	r25, 0xFF	; 255
    65f4:	fc 01       	movw	r30, r24
    65f6:	60 81       	ld	r22, Z
    65f8:	71 81       	ldd	r23, Z+1	; 0x01
    65fa:	82 81       	ldd	r24, Z+2	; 0x02
    65fc:	93 81       	ldd	r25, Z+3	; 0x03
    65fe:	26 e6       	ldi	r18, 0x66	; 102
    6600:	36 e6       	ldi	r19, 0x66	; 102
    6602:	46 e6       	ldi	r20, 0x66	; 102
    6604:	55 e4       	ldi	r21, 0x45	; 69
    6606:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    660a:	dc 01       	movw	r26, r24
    660c:	cb 01       	movw	r24, r22
    660e:	f8 01       	movw	r30, r16
    6610:	80 83       	st	Z, r24
    6612:	91 83       	std	Z+1, r25	; 0x01
    6614:	a2 83       	std	Z+2, r26	; 0x02
    6616:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6618:	ce 01       	movw	r24, r28
    661a:	89 59       	subi	r24, 0x99	; 153
    661c:	9f 4f       	sbci	r25, 0xFF	; 255
    661e:	11 e0       	ldi	r17, 0x01	; 1
    6620:	fc 01       	movw	r30, r24
    6622:	60 81       	ld	r22, Z
    6624:	71 81       	ldd	r23, Z+1	; 0x01
    6626:	82 81       	ldd	r24, Z+2	; 0x02
    6628:	93 81       	ldd	r25, Z+3	; 0x03
    662a:	20 e0       	ldi	r18, 0x00	; 0
    662c:	30 e0       	ldi	r19, 0x00	; 0
    662e:	40 e8       	ldi	r20, 0x80	; 128
    6630:	5f e3       	ldi	r21, 0x3F	; 63
    6632:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    6636:	88 23       	and	r24, r24
    6638:	0c f0       	brlt	.+2      	; 0x663c <alternate_path+0x9c8>
    663a:	10 e0       	ldi	r17, 0x00	; 0
    663c:	11 23       	and	r17, r17
    663e:	49 f0       	breq	.+18     	; 0x6652 <alternate_path+0x9de>
		__ticks = 1;
    6640:	ce 01       	movw	r24, r28
    6642:	85 59       	subi	r24, 0x95	; 149
    6644:	9f 4f       	sbci	r25, 0xFF	; 255
    6646:	21 e0       	ldi	r18, 0x01	; 1
    6648:	30 e0       	ldi	r19, 0x00	; 0
    664a:	fc 01       	movw	r30, r24
    664c:	31 83       	std	Z+1, r19	; 0x01
    664e:	20 83       	st	Z, r18
    6650:	74 c0       	rjmp	.+232    	; 0x673a <alternate_path+0xac6>
	else if (__tmp > 65535)
    6652:	ce 01       	movw	r24, r28
    6654:	89 59       	subi	r24, 0x99	; 153
    6656:	9f 4f       	sbci	r25, 0xFF	; 255
    6658:	11 e0       	ldi	r17, 0x01	; 1
    665a:	fc 01       	movw	r30, r24
    665c:	60 81       	ld	r22, Z
    665e:	71 81       	ldd	r23, Z+1	; 0x01
    6660:	82 81       	ldd	r24, Z+2	; 0x02
    6662:	93 81       	ldd	r25, Z+3	; 0x03
    6664:	20 e0       	ldi	r18, 0x00	; 0
    6666:	3f ef       	ldi	r19, 0xFF	; 255
    6668:	4f e7       	ldi	r20, 0x7F	; 127
    666a:	57 e4       	ldi	r21, 0x47	; 71
    666c:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    6670:	18 16       	cp	r1, r24
    6672:	0c f0       	brlt	.+2      	; 0x6676 <alternate_path+0xa02>
    6674:	10 e0       	ldi	r17, 0x00	; 0
    6676:	11 23       	and	r17, r17
    6678:	09 f4       	brne	.+2      	; 0x667c <alternate_path+0xa08>
    667a:	4d c0       	rjmp	.+154    	; 0x6716 <alternate_path+0xaa2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    667c:	ce 01       	movw	r24, r28
    667e:	8d 59       	subi	r24, 0x9D	; 157
    6680:	9f 4f       	sbci	r25, 0xFF	; 255
    6682:	fc 01       	movw	r30, r24
    6684:	60 81       	ld	r22, Z
    6686:	71 81       	ldd	r23, Z+1	; 0x01
    6688:	82 81       	ldd	r24, Z+2	; 0x02
    668a:	93 81       	ldd	r25, Z+3	; 0x03
    668c:	20 e0       	ldi	r18, 0x00	; 0
    668e:	30 e0       	ldi	r19, 0x00	; 0
    6690:	40 e2       	ldi	r20, 0x20	; 32
    6692:	51 e4       	ldi	r21, 0x41	; 65
    6694:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    6698:	dc 01       	movw	r26, r24
    669a:	cb 01       	movw	r24, r22
    669c:	8e 01       	movw	r16, r28
    669e:	05 59       	subi	r16, 0x95	; 149
    66a0:	1f 4f       	sbci	r17, 0xFF	; 255
    66a2:	bc 01       	movw	r22, r24
    66a4:	cd 01       	movw	r24, r26
    66a6:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    66aa:	dc 01       	movw	r26, r24
    66ac:	cb 01       	movw	r24, r22
    66ae:	f8 01       	movw	r30, r16
    66b0:	91 83       	std	Z+1, r25	; 0x01
    66b2:	80 83       	st	Z, r24
    66b4:	27 c0       	rjmp	.+78     	; 0x6704 <alternate_path+0xa90>
    66b6:	ce 01       	movw	r24, r28
    66b8:	83 59       	subi	r24, 0x93	; 147
    66ba:	9f 4f       	sbci	r25, 0xFF	; 255
    66bc:	20 e7       	ldi	r18, 0x70	; 112
    66be:	31 e0       	ldi	r19, 0x01	; 1
    66c0:	fc 01       	movw	r30, r24
    66c2:	31 83       	std	Z+1, r19	; 0x01
    66c4:	20 83       	st	Z, r18
    66c6:	ce 01       	movw	r24, r28
    66c8:	83 59       	subi	r24, 0x93	; 147
    66ca:	9f 4f       	sbci	r25, 0xFF	; 255
    66cc:	fc 01       	movw	r30, r24
    66ce:	80 81       	ld	r24, Z
    66d0:	91 81       	ldd	r25, Z+1	; 0x01
    66d2:	8c 01       	movw	r16, r24
    66d4:	c8 01       	movw	r24, r16
    66d6:	01 97       	sbiw	r24, 0x01	; 1
    66d8:	f1 f7       	brne	.-4      	; 0x66d6 <alternate_path+0xa62>
    66da:	8c 01       	movw	r16, r24
    66dc:	ce 01       	movw	r24, r28
    66de:	83 59       	subi	r24, 0x93	; 147
    66e0:	9f 4f       	sbci	r25, 0xFF	; 255
    66e2:	fc 01       	movw	r30, r24
    66e4:	11 83       	std	Z+1, r17	; 0x01
    66e6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    66e8:	ce 01       	movw	r24, r28
    66ea:	85 59       	subi	r24, 0x95	; 149
    66ec:	9f 4f       	sbci	r25, 0xFF	; 255
    66ee:	9e 01       	movw	r18, r28
    66f0:	25 59       	subi	r18, 0x95	; 149
    66f2:	3f 4f       	sbci	r19, 0xFF	; 255
    66f4:	f9 01       	movw	r30, r18
    66f6:	20 81       	ld	r18, Z
    66f8:	31 81       	ldd	r19, Z+1	; 0x01
    66fa:	21 50       	subi	r18, 0x01	; 1
    66fc:	30 40       	sbci	r19, 0x00	; 0
    66fe:	fc 01       	movw	r30, r24
    6700:	31 83       	std	Z+1, r19	; 0x01
    6702:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6704:	ce 01       	movw	r24, r28
    6706:	85 59       	subi	r24, 0x95	; 149
    6708:	9f 4f       	sbci	r25, 0xFF	; 255
    670a:	fc 01       	movw	r30, r24
    670c:	80 81       	ld	r24, Z
    670e:	91 81       	ldd	r25, Z+1	; 0x01
    6710:	00 97       	sbiw	r24, 0x00	; 0
    6712:	89 f6       	brne	.-94     	; 0x66b6 <alternate_path+0xa42>
    6714:	2f c0       	rjmp	.+94     	; 0x6774 <alternate_path+0xb00>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6716:	8e 01       	movw	r16, r28
    6718:	05 59       	subi	r16, 0x95	; 149
    671a:	1f 4f       	sbci	r17, 0xFF	; 255
    671c:	ce 01       	movw	r24, r28
    671e:	89 59       	subi	r24, 0x99	; 153
    6720:	9f 4f       	sbci	r25, 0xFF	; 255
    6722:	fc 01       	movw	r30, r24
    6724:	60 81       	ld	r22, Z
    6726:	71 81       	ldd	r23, Z+1	; 0x01
    6728:	82 81       	ldd	r24, Z+2	; 0x02
    672a:	93 81       	ldd	r25, Z+3	; 0x03
    672c:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    6730:	dc 01       	movw	r26, r24
    6732:	cb 01       	movw	r24, r22
    6734:	f8 01       	movw	r30, r16
    6736:	91 83       	std	Z+1, r25	; 0x01
    6738:	80 83       	st	Z, r24
    673a:	ce 01       	movw	r24, r28
    673c:	81 59       	subi	r24, 0x91	; 145
    673e:	9f 4f       	sbci	r25, 0xFF	; 255
    6740:	9e 01       	movw	r18, r28
    6742:	25 59       	subi	r18, 0x95	; 149
    6744:	3f 4f       	sbci	r19, 0xFF	; 255
    6746:	f9 01       	movw	r30, r18
    6748:	20 81       	ld	r18, Z
    674a:	31 81       	ldd	r19, Z+1	; 0x01
    674c:	fc 01       	movw	r30, r24
    674e:	31 83       	std	Z+1, r19	; 0x01
    6750:	20 83       	st	Z, r18
    6752:	ce 01       	movw	r24, r28
    6754:	81 59       	subi	r24, 0x91	; 145
    6756:	9f 4f       	sbci	r25, 0xFF	; 255
    6758:	fc 01       	movw	r30, r24
    675a:	80 81       	ld	r24, Z
    675c:	91 81       	ldd	r25, Z+1	; 0x01
    675e:	8c 01       	movw	r16, r24
    6760:	c8 01       	movw	r24, r16
    6762:	01 97       	sbiw	r24, 0x01	; 1
    6764:	f1 f7       	brne	.-4      	; 0x6762 <alternate_path+0xaee>
    6766:	8c 01       	movw	r16, r24
    6768:	ce 01       	movw	r24, r28
    676a:	81 59       	subi	r24, 0x91	; 145
    676c:	9f 4f       	sbci	r25, 0xFF	; 255
    676e:	fc 01       	movw	r30, r24
    6770:	11 83       	std	Z+1, r17	; 0x01
    6772:	00 83       	st	Z, r16
	_delay_ms(300);
	
	move_forward();
    6774:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <move_forward>
	stop_bot();
    6778:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    677c:	9e 01       	movw	r18, r28
    677e:	2f 58       	subi	r18, 0x8F	; 143
    6780:	3f 4f       	sbci	r19, 0xFF	; 255
    6782:	80 e0       	ldi	r24, 0x00	; 0
    6784:	90 e0       	ldi	r25, 0x00	; 0
    6786:	a6 e9       	ldi	r26, 0x96	; 150
    6788:	b3 e4       	ldi	r27, 0x43	; 67
    678a:	f9 01       	movw	r30, r18
    678c:	80 83       	st	Z, r24
    678e:	91 83       	std	Z+1, r25	; 0x01
    6790:	a2 83       	std	Z+2, r26	; 0x02
    6792:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6794:	8e 01       	movw	r16, r28
    6796:	0b 58       	subi	r16, 0x8B	; 139
    6798:	1f 4f       	sbci	r17, 0xFF	; 255
    679a:	ce 01       	movw	r24, r28
    679c:	8f 58       	subi	r24, 0x8F	; 143
    679e:	9f 4f       	sbci	r25, 0xFF	; 255
    67a0:	fc 01       	movw	r30, r24
    67a2:	60 81       	ld	r22, Z
    67a4:	71 81       	ldd	r23, Z+1	; 0x01
    67a6:	82 81       	ldd	r24, Z+2	; 0x02
    67a8:	93 81       	ldd	r25, Z+3	; 0x03
    67aa:	26 e6       	ldi	r18, 0x66	; 102
    67ac:	36 e6       	ldi	r19, 0x66	; 102
    67ae:	46 e6       	ldi	r20, 0x66	; 102
    67b0:	55 e4       	ldi	r21, 0x45	; 69
    67b2:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    67b6:	dc 01       	movw	r26, r24
    67b8:	cb 01       	movw	r24, r22
    67ba:	f8 01       	movw	r30, r16
    67bc:	80 83       	st	Z, r24
    67be:	91 83       	std	Z+1, r25	; 0x01
    67c0:	a2 83       	std	Z+2, r26	; 0x02
    67c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    67c4:	ce 01       	movw	r24, r28
    67c6:	8b 58       	subi	r24, 0x8B	; 139
    67c8:	9f 4f       	sbci	r25, 0xFF	; 255
    67ca:	11 e0       	ldi	r17, 0x01	; 1
    67cc:	fc 01       	movw	r30, r24
    67ce:	60 81       	ld	r22, Z
    67d0:	71 81       	ldd	r23, Z+1	; 0x01
    67d2:	82 81       	ldd	r24, Z+2	; 0x02
    67d4:	93 81       	ldd	r25, Z+3	; 0x03
    67d6:	20 e0       	ldi	r18, 0x00	; 0
    67d8:	30 e0       	ldi	r19, 0x00	; 0
    67da:	40 e8       	ldi	r20, 0x80	; 128
    67dc:	5f e3       	ldi	r21, 0x3F	; 63
    67de:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    67e2:	88 23       	and	r24, r24
    67e4:	0c f0       	brlt	.+2      	; 0x67e8 <alternate_path+0xb74>
    67e6:	10 e0       	ldi	r17, 0x00	; 0
    67e8:	11 23       	and	r17, r17
    67ea:	49 f0       	breq	.+18     	; 0x67fe <alternate_path+0xb8a>
		__ticks = 1;
    67ec:	ce 01       	movw	r24, r28
    67ee:	87 58       	subi	r24, 0x87	; 135
    67f0:	9f 4f       	sbci	r25, 0xFF	; 255
    67f2:	21 e0       	ldi	r18, 0x01	; 1
    67f4:	30 e0       	ldi	r19, 0x00	; 0
    67f6:	fc 01       	movw	r30, r24
    67f8:	31 83       	std	Z+1, r19	; 0x01
    67fa:	20 83       	st	Z, r18
    67fc:	74 c0       	rjmp	.+232    	; 0x68e6 <alternate_path+0xc72>
	else if (__tmp > 65535)
    67fe:	ce 01       	movw	r24, r28
    6800:	8b 58       	subi	r24, 0x8B	; 139
    6802:	9f 4f       	sbci	r25, 0xFF	; 255
    6804:	11 e0       	ldi	r17, 0x01	; 1
    6806:	fc 01       	movw	r30, r24
    6808:	60 81       	ld	r22, Z
    680a:	71 81       	ldd	r23, Z+1	; 0x01
    680c:	82 81       	ldd	r24, Z+2	; 0x02
    680e:	93 81       	ldd	r25, Z+3	; 0x03
    6810:	20 e0       	ldi	r18, 0x00	; 0
    6812:	3f ef       	ldi	r19, 0xFF	; 255
    6814:	4f e7       	ldi	r20, 0x7F	; 127
    6816:	57 e4       	ldi	r21, 0x47	; 71
    6818:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    681c:	18 16       	cp	r1, r24
    681e:	0c f0       	brlt	.+2      	; 0x6822 <alternate_path+0xbae>
    6820:	10 e0       	ldi	r17, 0x00	; 0
    6822:	11 23       	and	r17, r17
    6824:	09 f4       	brne	.+2      	; 0x6828 <alternate_path+0xbb4>
    6826:	4d c0       	rjmp	.+154    	; 0x68c2 <alternate_path+0xc4e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6828:	ce 01       	movw	r24, r28
    682a:	8f 58       	subi	r24, 0x8F	; 143
    682c:	9f 4f       	sbci	r25, 0xFF	; 255
    682e:	fc 01       	movw	r30, r24
    6830:	60 81       	ld	r22, Z
    6832:	71 81       	ldd	r23, Z+1	; 0x01
    6834:	82 81       	ldd	r24, Z+2	; 0x02
    6836:	93 81       	ldd	r25, Z+3	; 0x03
    6838:	20 e0       	ldi	r18, 0x00	; 0
    683a:	30 e0       	ldi	r19, 0x00	; 0
    683c:	40 e2       	ldi	r20, 0x20	; 32
    683e:	51 e4       	ldi	r21, 0x41	; 65
    6840:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    6844:	dc 01       	movw	r26, r24
    6846:	cb 01       	movw	r24, r22
    6848:	8e 01       	movw	r16, r28
    684a:	07 58       	subi	r16, 0x87	; 135
    684c:	1f 4f       	sbci	r17, 0xFF	; 255
    684e:	bc 01       	movw	r22, r24
    6850:	cd 01       	movw	r24, r26
    6852:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    6856:	dc 01       	movw	r26, r24
    6858:	cb 01       	movw	r24, r22
    685a:	f8 01       	movw	r30, r16
    685c:	91 83       	std	Z+1, r25	; 0x01
    685e:	80 83       	st	Z, r24
    6860:	27 c0       	rjmp	.+78     	; 0x68b0 <alternate_path+0xc3c>
    6862:	ce 01       	movw	r24, r28
    6864:	85 58       	subi	r24, 0x85	; 133
    6866:	9f 4f       	sbci	r25, 0xFF	; 255
    6868:	20 e7       	ldi	r18, 0x70	; 112
    686a:	31 e0       	ldi	r19, 0x01	; 1
    686c:	fc 01       	movw	r30, r24
    686e:	31 83       	std	Z+1, r19	; 0x01
    6870:	20 83       	st	Z, r18
    6872:	ce 01       	movw	r24, r28
    6874:	85 58       	subi	r24, 0x85	; 133
    6876:	9f 4f       	sbci	r25, 0xFF	; 255
    6878:	fc 01       	movw	r30, r24
    687a:	80 81       	ld	r24, Z
    687c:	91 81       	ldd	r25, Z+1	; 0x01
    687e:	8c 01       	movw	r16, r24
    6880:	c8 01       	movw	r24, r16
    6882:	01 97       	sbiw	r24, 0x01	; 1
    6884:	f1 f7       	brne	.-4      	; 0x6882 <alternate_path+0xc0e>
    6886:	8c 01       	movw	r16, r24
    6888:	ce 01       	movw	r24, r28
    688a:	85 58       	subi	r24, 0x85	; 133
    688c:	9f 4f       	sbci	r25, 0xFF	; 255
    688e:	fc 01       	movw	r30, r24
    6890:	11 83       	std	Z+1, r17	; 0x01
    6892:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6894:	ce 01       	movw	r24, r28
    6896:	87 58       	subi	r24, 0x87	; 135
    6898:	9f 4f       	sbci	r25, 0xFF	; 255
    689a:	9e 01       	movw	r18, r28
    689c:	27 58       	subi	r18, 0x87	; 135
    689e:	3f 4f       	sbci	r19, 0xFF	; 255
    68a0:	f9 01       	movw	r30, r18
    68a2:	20 81       	ld	r18, Z
    68a4:	31 81       	ldd	r19, Z+1	; 0x01
    68a6:	21 50       	subi	r18, 0x01	; 1
    68a8:	30 40       	sbci	r19, 0x00	; 0
    68aa:	fc 01       	movw	r30, r24
    68ac:	31 83       	std	Z+1, r19	; 0x01
    68ae:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    68b0:	ce 01       	movw	r24, r28
    68b2:	87 58       	subi	r24, 0x87	; 135
    68b4:	9f 4f       	sbci	r25, 0xFF	; 255
    68b6:	fc 01       	movw	r30, r24
    68b8:	80 81       	ld	r24, Z
    68ba:	91 81       	ldd	r25, Z+1	; 0x01
    68bc:	00 97       	sbiw	r24, 0x00	; 0
    68be:	89 f6       	brne	.-94     	; 0x6862 <alternate_path+0xbee>
    68c0:	2f c0       	rjmp	.+94     	; 0x6920 <alternate_path+0xcac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68c2:	8e 01       	movw	r16, r28
    68c4:	07 58       	subi	r16, 0x87	; 135
    68c6:	1f 4f       	sbci	r17, 0xFF	; 255
    68c8:	ce 01       	movw	r24, r28
    68ca:	8b 58       	subi	r24, 0x8B	; 139
    68cc:	9f 4f       	sbci	r25, 0xFF	; 255
    68ce:	fc 01       	movw	r30, r24
    68d0:	60 81       	ld	r22, Z
    68d2:	71 81       	ldd	r23, Z+1	; 0x01
    68d4:	82 81       	ldd	r24, Z+2	; 0x02
    68d6:	93 81       	ldd	r25, Z+3	; 0x03
    68d8:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    68dc:	dc 01       	movw	r26, r24
    68de:	cb 01       	movw	r24, r22
    68e0:	f8 01       	movw	r30, r16
    68e2:	91 83       	std	Z+1, r25	; 0x01
    68e4:	80 83       	st	Z, r24
    68e6:	ce 01       	movw	r24, r28
    68e8:	83 58       	subi	r24, 0x83	; 131
    68ea:	9f 4f       	sbci	r25, 0xFF	; 255
    68ec:	9e 01       	movw	r18, r28
    68ee:	27 58       	subi	r18, 0x87	; 135
    68f0:	3f 4f       	sbci	r19, 0xFF	; 255
    68f2:	f9 01       	movw	r30, r18
    68f4:	20 81       	ld	r18, Z
    68f6:	31 81       	ldd	r19, Z+1	; 0x01
    68f8:	fc 01       	movw	r30, r24
    68fa:	31 83       	std	Z+1, r19	; 0x01
    68fc:	20 83       	st	Z, r18
    68fe:	ce 01       	movw	r24, r28
    6900:	83 58       	subi	r24, 0x83	; 131
    6902:	9f 4f       	sbci	r25, 0xFF	; 255
    6904:	fc 01       	movw	r30, r24
    6906:	80 81       	ld	r24, Z
    6908:	91 81       	ldd	r25, Z+1	; 0x01
    690a:	8c 01       	movw	r16, r24
    690c:	c8 01       	movw	r24, r16
    690e:	01 97       	sbiw	r24, 0x01	; 1
    6910:	f1 f7       	brne	.-4      	; 0x690e <alternate_path+0xc9a>
    6912:	8c 01       	movw	r16, r24
    6914:	ce 01       	movw	r24, r28
    6916:	83 58       	subi	r24, 0x83	; 131
    6918:	9f 4f       	sbci	r25, 0xFF	; 255
    691a:	fc 01       	movw	r30, r24
    691c:	11 83       	std	Z+1, r17	; 0x01
    691e:	00 83       	st	Z, r16
	_delay_ms(300);
	
	sensor_refresh();
    6920:	0e 94 03 16 	call	0x2c06	; 0x2c06 <sensor_refresh>
	if (IR5 < 0x70)
    6924:	80 91 3e 02 	lds	r24, 0x023E
    6928:	80 37       	cpi	r24, 0x70	; 112
    692a:	30 f4       	brcc	.+12     	; 0x6938 <alternate_path+0xcc4>
	{
		obstacle_found='1';
    692c:	81 e3       	ldi	r24, 0x31	; 49
    692e:	90 e0       	ldi	r25, 0x00	; 0
    6930:	90 93 0b 02 	sts	0x020B, r25
    6934:	80 93 0a 02 	sts	0x020A, r24
	}
	
	forward_mm(53);
    6938:	85 e3       	ldi	r24, 0x35	; 53
    693a:	90 e0       	ldi	r25, 0x00	; 0
    693c:	0e 94 4d 13 	call	0x269a	; 0x269a <forward_mm>
	stop_bot();
    6940:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    6944:	9e 01       	movw	r18, r28
    6946:	21 58       	subi	r18, 0x81	; 129
    6948:	3f 4f       	sbci	r19, 0xFF	; 255
    694a:	80 e0       	ldi	r24, 0x00	; 0
    694c:	90 e0       	ldi	r25, 0x00	; 0
    694e:	a6 e9       	ldi	r26, 0x96	; 150
    6950:	b3 e4       	ldi	r27, 0x43	; 67
    6952:	f9 01       	movw	r30, r18
    6954:	80 83       	st	Z, r24
    6956:	91 83       	std	Z+1, r25	; 0x01
    6958:	a2 83       	std	Z+2, r26	; 0x02
    695a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    695c:	8e 01       	movw	r16, r28
    695e:	0d 57       	subi	r16, 0x7D	; 125
    6960:	1f 4f       	sbci	r17, 0xFF	; 255
    6962:	ce 01       	movw	r24, r28
    6964:	81 58       	subi	r24, 0x81	; 129
    6966:	9f 4f       	sbci	r25, 0xFF	; 255
    6968:	fc 01       	movw	r30, r24
    696a:	60 81       	ld	r22, Z
    696c:	71 81       	ldd	r23, Z+1	; 0x01
    696e:	82 81       	ldd	r24, Z+2	; 0x02
    6970:	93 81       	ldd	r25, Z+3	; 0x03
    6972:	26 e6       	ldi	r18, 0x66	; 102
    6974:	36 e6       	ldi	r19, 0x66	; 102
    6976:	46 e6       	ldi	r20, 0x66	; 102
    6978:	55 e4       	ldi	r21, 0x45	; 69
    697a:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    697e:	dc 01       	movw	r26, r24
    6980:	cb 01       	movw	r24, r22
    6982:	f8 01       	movw	r30, r16
    6984:	80 83       	st	Z, r24
    6986:	91 83       	std	Z+1, r25	; 0x01
    6988:	a2 83       	std	Z+2, r26	; 0x02
    698a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    698c:	ce 01       	movw	r24, r28
    698e:	8d 57       	subi	r24, 0x7D	; 125
    6990:	9f 4f       	sbci	r25, 0xFF	; 255
    6992:	11 e0       	ldi	r17, 0x01	; 1
    6994:	fc 01       	movw	r30, r24
    6996:	60 81       	ld	r22, Z
    6998:	71 81       	ldd	r23, Z+1	; 0x01
    699a:	82 81       	ldd	r24, Z+2	; 0x02
    699c:	93 81       	ldd	r25, Z+3	; 0x03
    699e:	20 e0       	ldi	r18, 0x00	; 0
    69a0:	30 e0       	ldi	r19, 0x00	; 0
    69a2:	40 e8       	ldi	r20, 0x80	; 128
    69a4:	5f e3       	ldi	r21, 0x3F	; 63
    69a6:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    69aa:	88 23       	and	r24, r24
    69ac:	0c f0       	brlt	.+2      	; 0x69b0 <alternate_path+0xd3c>
    69ae:	10 e0       	ldi	r17, 0x00	; 0
    69b0:	11 23       	and	r17, r17
    69b2:	49 f0       	breq	.+18     	; 0x69c6 <alternate_path+0xd52>
		__ticks = 1;
    69b4:	ce 01       	movw	r24, r28
    69b6:	89 57       	subi	r24, 0x79	; 121
    69b8:	9f 4f       	sbci	r25, 0xFF	; 255
    69ba:	21 e0       	ldi	r18, 0x01	; 1
    69bc:	30 e0       	ldi	r19, 0x00	; 0
    69be:	fc 01       	movw	r30, r24
    69c0:	31 83       	std	Z+1, r19	; 0x01
    69c2:	20 83       	st	Z, r18
    69c4:	74 c0       	rjmp	.+232    	; 0x6aae <alternate_path+0xe3a>
	else if (__tmp > 65535)
    69c6:	ce 01       	movw	r24, r28
    69c8:	8d 57       	subi	r24, 0x7D	; 125
    69ca:	9f 4f       	sbci	r25, 0xFF	; 255
    69cc:	11 e0       	ldi	r17, 0x01	; 1
    69ce:	fc 01       	movw	r30, r24
    69d0:	60 81       	ld	r22, Z
    69d2:	71 81       	ldd	r23, Z+1	; 0x01
    69d4:	82 81       	ldd	r24, Z+2	; 0x02
    69d6:	93 81       	ldd	r25, Z+3	; 0x03
    69d8:	20 e0       	ldi	r18, 0x00	; 0
    69da:	3f ef       	ldi	r19, 0xFF	; 255
    69dc:	4f e7       	ldi	r20, 0x7F	; 127
    69de:	57 e4       	ldi	r21, 0x47	; 71
    69e0:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    69e4:	18 16       	cp	r1, r24
    69e6:	0c f0       	brlt	.+2      	; 0x69ea <alternate_path+0xd76>
    69e8:	10 e0       	ldi	r17, 0x00	; 0
    69ea:	11 23       	and	r17, r17
    69ec:	09 f4       	brne	.+2      	; 0x69f0 <alternate_path+0xd7c>
    69ee:	4d c0       	rjmp	.+154    	; 0x6a8a <alternate_path+0xe16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    69f0:	ce 01       	movw	r24, r28
    69f2:	81 58       	subi	r24, 0x81	; 129
    69f4:	9f 4f       	sbci	r25, 0xFF	; 255
    69f6:	fc 01       	movw	r30, r24
    69f8:	60 81       	ld	r22, Z
    69fa:	71 81       	ldd	r23, Z+1	; 0x01
    69fc:	82 81       	ldd	r24, Z+2	; 0x02
    69fe:	93 81       	ldd	r25, Z+3	; 0x03
    6a00:	20 e0       	ldi	r18, 0x00	; 0
    6a02:	30 e0       	ldi	r19, 0x00	; 0
    6a04:	40 e2       	ldi	r20, 0x20	; 32
    6a06:	51 e4       	ldi	r21, 0x41	; 65
    6a08:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    6a0c:	dc 01       	movw	r26, r24
    6a0e:	cb 01       	movw	r24, r22
    6a10:	8e 01       	movw	r16, r28
    6a12:	09 57       	subi	r16, 0x79	; 121
    6a14:	1f 4f       	sbci	r17, 0xFF	; 255
    6a16:	bc 01       	movw	r22, r24
    6a18:	cd 01       	movw	r24, r26
    6a1a:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    6a1e:	dc 01       	movw	r26, r24
    6a20:	cb 01       	movw	r24, r22
    6a22:	f8 01       	movw	r30, r16
    6a24:	91 83       	std	Z+1, r25	; 0x01
    6a26:	80 83       	st	Z, r24
    6a28:	27 c0       	rjmp	.+78     	; 0x6a78 <alternate_path+0xe04>
    6a2a:	ce 01       	movw	r24, r28
    6a2c:	87 57       	subi	r24, 0x77	; 119
    6a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    6a30:	20 e7       	ldi	r18, 0x70	; 112
    6a32:	31 e0       	ldi	r19, 0x01	; 1
    6a34:	fc 01       	movw	r30, r24
    6a36:	31 83       	std	Z+1, r19	; 0x01
    6a38:	20 83       	st	Z, r18
    6a3a:	ce 01       	movw	r24, r28
    6a3c:	87 57       	subi	r24, 0x77	; 119
    6a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    6a40:	fc 01       	movw	r30, r24
    6a42:	80 81       	ld	r24, Z
    6a44:	91 81       	ldd	r25, Z+1	; 0x01
    6a46:	8c 01       	movw	r16, r24
    6a48:	c8 01       	movw	r24, r16
    6a4a:	01 97       	sbiw	r24, 0x01	; 1
    6a4c:	f1 f7       	brne	.-4      	; 0x6a4a <alternate_path+0xdd6>
    6a4e:	8c 01       	movw	r16, r24
    6a50:	ce 01       	movw	r24, r28
    6a52:	87 57       	subi	r24, 0x77	; 119
    6a54:	9f 4f       	sbci	r25, 0xFF	; 255
    6a56:	fc 01       	movw	r30, r24
    6a58:	11 83       	std	Z+1, r17	; 0x01
    6a5a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a5c:	ce 01       	movw	r24, r28
    6a5e:	89 57       	subi	r24, 0x79	; 121
    6a60:	9f 4f       	sbci	r25, 0xFF	; 255
    6a62:	9e 01       	movw	r18, r28
    6a64:	29 57       	subi	r18, 0x79	; 121
    6a66:	3f 4f       	sbci	r19, 0xFF	; 255
    6a68:	f9 01       	movw	r30, r18
    6a6a:	20 81       	ld	r18, Z
    6a6c:	31 81       	ldd	r19, Z+1	; 0x01
    6a6e:	21 50       	subi	r18, 0x01	; 1
    6a70:	30 40       	sbci	r19, 0x00	; 0
    6a72:	fc 01       	movw	r30, r24
    6a74:	31 83       	std	Z+1, r19	; 0x01
    6a76:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a78:	ce 01       	movw	r24, r28
    6a7a:	89 57       	subi	r24, 0x79	; 121
    6a7c:	9f 4f       	sbci	r25, 0xFF	; 255
    6a7e:	fc 01       	movw	r30, r24
    6a80:	80 81       	ld	r24, Z
    6a82:	91 81       	ldd	r25, Z+1	; 0x01
    6a84:	00 97       	sbiw	r24, 0x00	; 0
    6a86:	89 f6       	brne	.-94     	; 0x6a2a <alternate_path+0xdb6>
    6a88:	2f c0       	rjmp	.+94     	; 0x6ae8 <alternate_path+0xe74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a8a:	8e 01       	movw	r16, r28
    6a8c:	09 57       	subi	r16, 0x79	; 121
    6a8e:	1f 4f       	sbci	r17, 0xFF	; 255
    6a90:	ce 01       	movw	r24, r28
    6a92:	8d 57       	subi	r24, 0x7D	; 125
    6a94:	9f 4f       	sbci	r25, 0xFF	; 255
    6a96:	fc 01       	movw	r30, r24
    6a98:	60 81       	ld	r22, Z
    6a9a:	71 81       	ldd	r23, Z+1	; 0x01
    6a9c:	82 81       	ldd	r24, Z+2	; 0x02
    6a9e:	93 81       	ldd	r25, Z+3	; 0x03
    6aa0:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    6aa4:	dc 01       	movw	r26, r24
    6aa6:	cb 01       	movw	r24, r22
    6aa8:	f8 01       	movw	r30, r16
    6aaa:	91 83       	std	Z+1, r25	; 0x01
    6aac:	80 83       	st	Z, r24
    6aae:	ce 01       	movw	r24, r28
    6ab0:	85 57       	subi	r24, 0x75	; 117
    6ab2:	9f 4f       	sbci	r25, 0xFF	; 255
    6ab4:	9e 01       	movw	r18, r28
    6ab6:	29 57       	subi	r18, 0x79	; 121
    6ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    6aba:	f9 01       	movw	r30, r18
    6abc:	20 81       	ld	r18, Z
    6abe:	31 81       	ldd	r19, Z+1	; 0x01
    6ac0:	fc 01       	movw	r30, r24
    6ac2:	31 83       	std	Z+1, r19	; 0x01
    6ac4:	20 83       	st	Z, r18
    6ac6:	ce 01       	movw	r24, r28
    6ac8:	85 57       	subi	r24, 0x75	; 117
    6aca:	9f 4f       	sbci	r25, 0xFF	; 255
    6acc:	fc 01       	movw	r30, r24
    6ace:	80 81       	ld	r24, Z
    6ad0:	91 81       	ldd	r25, Z+1	; 0x01
    6ad2:	8c 01       	movw	r16, r24
    6ad4:	c8 01       	movw	r24, r16
    6ad6:	01 97       	sbiw	r24, 0x01	; 1
    6ad8:	f1 f7       	brne	.-4      	; 0x6ad6 <alternate_path+0xe62>
    6ada:	8c 01       	movw	r16, r24
    6adc:	ce 01       	movw	r24, r28
    6ade:	85 57       	subi	r24, 0x75	; 117
    6ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    6ae2:	fc 01       	movw	r30, r24
    6ae4:	11 83       	std	Z+1, r17	; 0x01
    6ae6:	00 83       	st	Z, r16
	_delay_ms(300);
	
	left_turn();
    6ae8:	0e 94 b8 1c 	call	0x3970	; 0x3970 <left_turn>
	stop_bot();
    6aec:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    6af0:	9e 01       	movw	r18, r28
    6af2:	23 57       	subi	r18, 0x73	; 115
    6af4:	3f 4f       	sbci	r19, 0xFF	; 255
    6af6:	80 e0       	ldi	r24, 0x00	; 0
    6af8:	90 e0       	ldi	r25, 0x00	; 0
    6afa:	a6 e9       	ldi	r26, 0x96	; 150
    6afc:	b3 e4       	ldi	r27, 0x43	; 67
    6afe:	f9 01       	movw	r30, r18
    6b00:	80 83       	st	Z, r24
    6b02:	91 83       	std	Z+1, r25	; 0x01
    6b04:	a2 83       	std	Z+2, r26	; 0x02
    6b06:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6b08:	8e 01       	movw	r16, r28
    6b0a:	0f 56       	subi	r16, 0x6F	; 111
    6b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    6b0e:	ce 01       	movw	r24, r28
    6b10:	83 57       	subi	r24, 0x73	; 115
    6b12:	9f 4f       	sbci	r25, 0xFF	; 255
    6b14:	fc 01       	movw	r30, r24
    6b16:	60 81       	ld	r22, Z
    6b18:	71 81       	ldd	r23, Z+1	; 0x01
    6b1a:	82 81       	ldd	r24, Z+2	; 0x02
    6b1c:	93 81       	ldd	r25, Z+3	; 0x03
    6b1e:	26 e6       	ldi	r18, 0x66	; 102
    6b20:	36 e6       	ldi	r19, 0x66	; 102
    6b22:	46 e6       	ldi	r20, 0x66	; 102
    6b24:	55 e4       	ldi	r21, 0x45	; 69
    6b26:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    6b2a:	dc 01       	movw	r26, r24
    6b2c:	cb 01       	movw	r24, r22
    6b2e:	f8 01       	movw	r30, r16
    6b30:	80 83       	st	Z, r24
    6b32:	91 83       	std	Z+1, r25	; 0x01
    6b34:	a2 83       	std	Z+2, r26	; 0x02
    6b36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6b38:	ce 01       	movw	r24, r28
    6b3a:	8f 56       	subi	r24, 0x6F	; 111
    6b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    6b3e:	11 e0       	ldi	r17, 0x01	; 1
    6b40:	fc 01       	movw	r30, r24
    6b42:	60 81       	ld	r22, Z
    6b44:	71 81       	ldd	r23, Z+1	; 0x01
    6b46:	82 81       	ldd	r24, Z+2	; 0x02
    6b48:	93 81       	ldd	r25, Z+3	; 0x03
    6b4a:	20 e0       	ldi	r18, 0x00	; 0
    6b4c:	30 e0       	ldi	r19, 0x00	; 0
    6b4e:	40 e8       	ldi	r20, 0x80	; 128
    6b50:	5f e3       	ldi	r21, 0x3F	; 63
    6b52:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    6b56:	88 23       	and	r24, r24
    6b58:	0c f0       	brlt	.+2      	; 0x6b5c <alternate_path+0xee8>
    6b5a:	10 e0       	ldi	r17, 0x00	; 0
    6b5c:	11 23       	and	r17, r17
    6b5e:	49 f0       	breq	.+18     	; 0x6b72 <alternate_path+0xefe>
		__ticks = 1;
    6b60:	ce 01       	movw	r24, r28
    6b62:	8b 56       	subi	r24, 0x6B	; 107
    6b64:	9f 4f       	sbci	r25, 0xFF	; 255
    6b66:	21 e0       	ldi	r18, 0x01	; 1
    6b68:	30 e0       	ldi	r19, 0x00	; 0
    6b6a:	fc 01       	movw	r30, r24
    6b6c:	31 83       	std	Z+1, r19	; 0x01
    6b6e:	20 83       	st	Z, r18
    6b70:	74 c0       	rjmp	.+232    	; 0x6c5a <alternate_path+0xfe6>
	else if (__tmp > 65535)
    6b72:	ce 01       	movw	r24, r28
    6b74:	8f 56       	subi	r24, 0x6F	; 111
    6b76:	9f 4f       	sbci	r25, 0xFF	; 255
    6b78:	11 e0       	ldi	r17, 0x01	; 1
    6b7a:	fc 01       	movw	r30, r24
    6b7c:	60 81       	ld	r22, Z
    6b7e:	71 81       	ldd	r23, Z+1	; 0x01
    6b80:	82 81       	ldd	r24, Z+2	; 0x02
    6b82:	93 81       	ldd	r25, Z+3	; 0x03
    6b84:	20 e0       	ldi	r18, 0x00	; 0
    6b86:	3f ef       	ldi	r19, 0xFF	; 255
    6b88:	4f e7       	ldi	r20, 0x7F	; 127
    6b8a:	57 e4       	ldi	r21, 0x47	; 71
    6b8c:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    6b90:	18 16       	cp	r1, r24
    6b92:	0c f0       	brlt	.+2      	; 0x6b96 <alternate_path+0xf22>
    6b94:	10 e0       	ldi	r17, 0x00	; 0
    6b96:	11 23       	and	r17, r17
    6b98:	09 f4       	brne	.+2      	; 0x6b9c <alternate_path+0xf28>
    6b9a:	4d c0       	rjmp	.+154    	; 0x6c36 <alternate_path+0xfc2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6b9c:	ce 01       	movw	r24, r28
    6b9e:	83 57       	subi	r24, 0x73	; 115
    6ba0:	9f 4f       	sbci	r25, 0xFF	; 255
    6ba2:	fc 01       	movw	r30, r24
    6ba4:	60 81       	ld	r22, Z
    6ba6:	71 81       	ldd	r23, Z+1	; 0x01
    6ba8:	82 81       	ldd	r24, Z+2	; 0x02
    6baa:	93 81       	ldd	r25, Z+3	; 0x03
    6bac:	20 e0       	ldi	r18, 0x00	; 0
    6bae:	30 e0       	ldi	r19, 0x00	; 0
    6bb0:	40 e2       	ldi	r20, 0x20	; 32
    6bb2:	51 e4       	ldi	r21, 0x41	; 65
    6bb4:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    6bb8:	dc 01       	movw	r26, r24
    6bba:	cb 01       	movw	r24, r22
    6bbc:	8e 01       	movw	r16, r28
    6bbe:	0b 56       	subi	r16, 0x6B	; 107
    6bc0:	1f 4f       	sbci	r17, 0xFF	; 255
    6bc2:	bc 01       	movw	r22, r24
    6bc4:	cd 01       	movw	r24, r26
    6bc6:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    6bca:	dc 01       	movw	r26, r24
    6bcc:	cb 01       	movw	r24, r22
    6bce:	f8 01       	movw	r30, r16
    6bd0:	91 83       	std	Z+1, r25	; 0x01
    6bd2:	80 83       	st	Z, r24
    6bd4:	27 c0       	rjmp	.+78     	; 0x6c24 <alternate_path+0xfb0>
    6bd6:	ce 01       	movw	r24, r28
    6bd8:	89 56       	subi	r24, 0x69	; 105
    6bda:	9f 4f       	sbci	r25, 0xFF	; 255
    6bdc:	20 e7       	ldi	r18, 0x70	; 112
    6bde:	31 e0       	ldi	r19, 0x01	; 1
    6be0:	fc 01       	movw	r30, r24
    6be2:	31 83       	std	Z+1, r19	; 0x01
    6be4:	20 83       	st	Z, r18
    6be6:	ce 01       	movw	r24, r28
    6be8:	89 56       	subi	r24, 0x69	; 105
    6bea:	9f 4f       	sbci	r25, 0xFF	; 255
    6bec:	fc 01       	movw	r30, r24
    6bee:	80 81       	ld	r24, Z
    6bf0:	91 81       	ldd	r25, Z+1	; 0x01
    6bf2:	8c 01       	movw	r16, r24
    6bf4:	c8 01       	movw	r24, r16
    6bf6:	01 97       	sbiw	r24, 0x01	; 1
    6bf8:	f1 f7       	brne	.-4      	; 0x6bf6 <alternate_path+0xf82>
    6bfa:	8c 01       	movw	r16, r24
    6bfc:	ce 01       	movw	r24, r28
    6bfe:	89 56       	subi	r24, 0x69	; 105
    6c00:	9f 4f       	sbci	r25, 0xFF	; 255
    6c02:	fc 01       	movw	r30, r24
    6c04:	11 83       	std	Z+1, r17	; 0x01
    6c06:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c08:	ce 01       	movw	r24, r28
    6c0a:	8b 56       	subi	r24, 0x6B	; 107
    6c0c:	9f 4f       	sbci	r25, 0xFF	; 255
    6c0e:	9e 01       	movw	r18, r28
    6c10:	2b 56       	subi	r18, 0x6B	; 107
    6c12:	3f 4f       	sbci	r19, 0xFF	; 255
    6c14:	f9 01       	movw	r30, r18
    6c16:	20 81       	ld	r18, Z
    6c18:	31 81       	ldd	r19, Z+1	; 0x01
    6c1a:	21 50       	subi	r18, 0x01	; 1
    6c1c:	30 40       	sbci	r19, 0x00	; 0
    6c1e:	fc 01       	movw	r30, r24
    6c20:	31 83       	std	Z+1, r19	; 0x01
    6c22:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c24:	ce 01       	movw	r24, r28
    6c26:	8b 56       	subi	r24, 0x6B	; 107
    6c28:	9f 4f       	sbci	r25, 0xFF	; 255
    6c2a:	fc 01       	movw	r30, r24
    6c2c:	80 81       	ld	r24, Z
    6c2e:	91 81       	ldd	r25, Z+1	; 0x01
    6c30:	00 97       	sbiw	r24, 0x00	; 0
    6c32:	89 f6       	brne	.-94     	; 0x6bd6 <alternate_path+0xf62>
    6c34:	2f c0       	rjmp	.+94     	; 0x6c94 <alternate_path+0x1020>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6c36:	8e 01       	movw	r16, r28
    6c38:	0b 56       	subi	r16, 0x6B	; 107
    6c3a:	1f 4f       	sbci	r17, 0xFF	; 255
    6c3c:	ce 01       	movw	r24, r28
    6c3e:	8f 56       	subi	r24, 0x6F	; 111
    6c40:	9f 4f       	sbci	r25, 0xFF	; 255
    6c42:	fc 01       	movw	r30, r24
    6c44:	60 81       	ld	r22, Z
    6c46:	71 81       	ldd	r23, Z+1	; 0x01
    6c48:	82 81       	ldd	r24, Z+2	; 0x02
    6c4a:	93 81       	ldd	r25, Z+3	; 0x03
    6c4c:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    6c50:	dc 01       	movw	r26, r24
    6c52:	cb 01       	movw	r24, r22
    6c54:	f8 01       	movw	r30, r16
    6c56:	91 83       	std	Z+1, r25	; 0x01
    6c58:	80 83       	st	Z, r24
    6c5a:	ce 01       	movw	r24, r28
    6c5c:	87 56       	subi	r24, 0x67	; 103
    6c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    6c60:	9e 01       	movw	r18, r28
    6c62:	2b 56       	subi	r18, 0x6B	; 107
    6c64:	3f 4f       	sbci	r19, 0xFF	; 255
    6c66:	f9 01       	movw	r30, r18
    6c68:	20 81       	ld	r18, Z
    6c6a:	31 81       	ldd	r19, Z+1	; 0x01
    6c6c:	fc 01       	movw	r30, r24
    6c6e:	31 83       	std	Z+1, r19	; 0x01
    6c70:	20 83       	st	Z, r18
    6c72:	ce 01       	movw	r24, r28
    6c74:	87 56       	subi	r24, 0x67	; 103
    6c76:	9f 4f       	sbci	r25, 0xFF	; 255
    6c78:	fc 01       	movw	r30, r24
    6c7a:	80 81       	ld	r24, Z
    6c7c:	91 81       	ldd	r25, Z+1	; 0x01
    6c7e:	8c 01       	movw	r16, r24
    6c80:	c8 01       	movw	r24, r16
    6c82:	01 97       	sbiw	r24, 0x01	; 1
    6c84:	f1 f7       	brne	.-4      	; 0x6c82 <alternate_path+0x100e>
    6c86:	8c 01       	movw	r16, r24
    6c88:	ce 01       	movw	r24, r28
    6c8a:	87 56       	subi	r24, 0x67	; 103
    6c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    6c8e:	fc 01       	movw	r30, r24
    6c90:	11 83       	std	Z+1, r17	; 0x01
    6c92:	00 83       	st	Z, r16
	_delay_ms(300);
	
	back_mm(90);
    6c94:	8a e5       	ldi	r24, 0x5A	; 90
    6c96:	90 e0       	ldi	r25, 0x00	; 0
    6c98:	0e 94 60 13 	call	0x26c0	; 0x26c0 <back_mm>
	stop_bot();
    6c9c:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    6ca0:	9e 01       	movw	r18, r28
    6ca2:	25 56       	subi	r18, 0x65	; 101
    6ca4:	3f 4f       	sbci	r19, 0xFF	; 255
    6ca6:	80 e0       	ldi	r24, 0x00	; 0
    6ca8:	90 e0       	ldi	r25, 0x00	; 0
    6caa:	a6 e9       	ldi	r26, 0x96	; 150
    6cac:	b3 e4       	ldi	r27, 0x43	; 67
    6cae:	f9 01       	movw	r30, r18
    6cb0:	80 83       	st	Z, r24
    6cb2:	91 83       	std	Z+1, r25	; 0x01
    6cb4:	a2 83       	std	Z+2, r26	; 0x02
    6cb6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6cb8:	8e 01       	movw	r16, r28
    6cba:	01 56       	subi	r16, 0x61	; 97
    6cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    6cbe:	ce 01       	movw	r24, r28
    6cc0:	85 56       	subi	r24, 0x65	; 101
    6cc2:	9f 4f       	sbci	r25, 0xFF	; 255
    6cc4:	fc 01       	movw	r30, r24
    6cc6:	60 81       	ld	r22, Z
    6cc8:	71 81       	ldd	r23, Z+1	; 0x01
    6cca:	82 81       	ldd	r24, Z+2	; 0x02
    6ccc:	93 81       	ldd	r25, Z+3	; 0x03
    6cce:	26 e6       	ldi	r18, 0x66	; 102
    6cd0:	36 e6       	ldi	r19, 0x66	; 102
    6cd2:	46 e6       	ldi	r20, 0x66	; 102
    6cd4:	55 e4       	ldi	r21, 0x45	; 69
    6cd6:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    6cda:	dc 01       	movw	r26, r24
    6cdc:	cb 01       	movw	r24, r22
    6cde:	f8 01       	movw	r30, r16
    6ce0:	80 83       	st	Z, r24
    6ce2:	91 83       	std	Z+1, r25	; 0x01
    6ce4:	a2 83       	std	Z+2, r26	; 0x02
    6ce6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6ce8:	ce 01       	movw	r24, r28
    6cea:	81 56       	subi	r24, 0x61	; 97
    6cec:	9f 4f       	sbci	r25, 0xFF	; 255
    6cee:	11 e0       	ldi	r17, 0x01	; 1
    6cf0:	fc 01       	movw	r30, r24
    6cf2:	60 81       	ld	r22, Z
    6cf4:	71 81       	ldd	r23, Z+1	; 0x01
    6cf6:	82 81       	ldd	r24, Z+2	; 0x02
    6cf8:	93 81       	ldd	r25, Z+3	; 0x03
    6cfa:	20 e0       	ldi	r18, 0x00	; 0
    6cfc:	30 e0       	ldi	r19, 0x00	; 0
    6cfe:	40 e8       	ldi	r20, 0x80	; 128
    6d00:	5f e3       	ldi	r21, 0x3F	; 63
    6d02:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    6d06:	88 23       	and	r24, r24
    6d08:	0c f0       	brlt	.+2      	; 0x6d0c <alternate_path+0x1098>
    6d0a:	10 e0       	ldi	r17, 0x00	; 0
    6d0c:	11 23       	and	r17, r17
    6d0e:	49 f0       	breq	.+18     	; 0x6d22 <alternate_path+0x10ae>
		__ticks = 1;
    6d10:	ce 01       	movw	r24, r28
    6d12:	8d 55       	subi	r24, 0x5D	; 93
    6d14:	9f 4f       	sbci	r25, 0xFF	; 255
    6d16:	21 e0       	ldi	r18, 0x01	; 1
    6d18:	30 e0       	ldi	r19, 0x00	; 0
    6d1a:	fc 01       	movw	r30, r24
    6d1c:	31 83       	std	Z+1, r19	; 0x01
    6d1e:	20 83       	st	Z, r18
    6d20:	74 c0       	rjmp	.+232    	; 0x6e0a <alternate_path+0x1196>
	else if (__tmp > 65535)
    6d22:	ce 01       	movw	r24, r28
    6d24:	81 56       	subi	r24, 0x61	; 97
    6d26:	9f 4f       	sbci	r25, 0xFF	; 255
    6d28:	11 e0       	ldi	r17, 0x01	; 1
    6d2a:	fc 01       	movw	r30, r24
    6d2c:	60 81       	ld	r22, Z
    6d2e:	71 81       	ldd	r23, Z+1	; 0x01
    6d30:	82 81       	ldd	r24, Z+2	; 0x02
    6d32:	93 81       	ldd	r25, Z+3	; 0x03
    6d34:	20 e0       	ldi	r18, 0x00	; 0
    6d36:	3f ef       	ldi	r19, 0xFF	; 255
    6d38:	4f e7       	ldi	r20, 0x7F	; 127
    6d3a:	57 e4       	ldi	r21, 0x47	; 71
    6d3c:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    6d40:	18 16       	cp	r1, r24
    6d42:	0c f0       	brlt	.+2      	; 0x6d46 <alternate_path+0x10d2>
    6d44:	10 e0       	ldi	r17, 0x00	; 0
    6d46:	11 23       	and	r17, r17
    6d48:	09 f4       	brne	.+2      	; 0x6d4c <alternate_path+0x10d8>
    6d4a:	4d c0       	rjmp	.+154    	; 0x6de6 <alternate_path+0x1172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d4c:	ce 01       	movw	r24, r28
    6d4e:	85 56       	subi	r24, 0x65	; 101
    6d50:	9f 4f       	sbci	r25, 0xFF	; 255
    6d52:	fc 01       	movw	r30, r24
    6d54:	60 81       	ld	r22, Z
    6d56:	71 81       	ldd	r23, Z+1	; 0x01
    6d58:	82 81       	ldd	r24, Z+2	; 0x02
    6d5a:	93 81       	ldd	r25, Z+3	; 0x03
    6d5c:	20 e0       	ldi	r18, 0x00	; 0
    6d5e:	30 e0       	ldi	r19, 0x00	; 0
    6d60:	40 e2       	ldi	r20, 0x20	; 32
    6d62:	51 e4       	ldi	r21, 0x41	; 65
    6d64:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    6d68:	dc 01       	movw	r26, r24
    6d6a:	cb 01       	movw	r24, r22
    6d6c:	8e 01       	movw	r16, r28
    6d6e:	0d 55       	subi	r16, 0x5D	; 93
    6d70:	1f 4f       	sbci	r17, 0xFF	; 255
    6d72:	bc 01       	movw	r22, r24
    6d74:	cd 01       	movw	r24, r26
    6d76:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    6d7a:	dc 01       	movw	r26, r24
    6d7c:	cb 01       	movw	r24, r22
    6d7e:	f8 01       	movw	r30, r16
    6d80:	91 83       	std	Z+1, r25	; 0x01
    6d82:	80 83       	st	Z, r24
    6d84:	27 c0       	rjmp	.+78     	; 0x6dd4 <alternate_path+0x1160>
    6d86:	ce 01       	movw	r24, r28
    6d88:	8b 55       	subi	r24, 0x5B	; 91
    6d8a:	9f 4f       	sbci	r25, 0xFF	; 255
    6d8c:	20 e7       	ldi	r18, 0x70	; 112
    6d8e:	31 e0       	ldi	r19, 0x01	; 1
    6d90:	fc 01       	movw	r30, r24
    6d92:	31 83       	std	Z+1, r19	; 0x01
    6d94:	20 83       	st	Z, r18
    6d96:	ce 01       	movw	r24, r28
    6d98:	8b 55       	subi	r24, 0x5B	; 91
    6d9a:	9f 4f       	sbci	r25, 0xFF	; 255
    6d9c:	fc 01       	movw	r30, r24
    6d9e:	80 81       	ld	r24, Z
    6da0:	91 81       	ldd	r25, Z+1	; 0x01
    6da2:	8c 01       	movw	r16, r24
    6da4:	c8 01       	movw	r24, r16
    6da6:	01 97       	sbiw	r24, 0x01	; 1
    6da8:	f1 f7       	brne	.-4      	; 0x6da6 <alternate_path+0x1132>
    6daa:	8c 01       	movw	r16, r24
    6dac:	ce 01       	movw	r24, r28
    6dae:	8b 55       	subi	r24, 0x5B	; 91
    6db0:	9f 4f       	sbci	r25, 0xFF	; 255
    6db2:	fc 01       	movw	r30, r24
    6db4:	11 83       	std	Z+1, r17	; 0x01
    6db6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6db8:	ce 01       	movw	r24, r28
    6dba:	8d 55       	subi	r24, 0x5D	; 93
    6dbc:	9f 4f       	sbci	r25, 0xFF	; 255
    6dbe:	9e 01       	movw	r18, r28
    6dc0:	2d 55       	subi	r18, 0x5D	; 93
    6dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    6dc4:	f9 01       	movw	r30, r18
    6dc6:	20 81       	ld	r18, Z
    6dc8:	31 81       	ldd	r19, Z+1	; 0x01
    6dca:	21 50       	subi	r18, 0x01	; 1
    6dcc:	30 40       	sbci	r19, 0x00	; 0
    6dce:	fc 01       	movw	r30, r24
    6dd0:	31 83       	std	Z+1, r19	; 0x01
    6dd2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6dd4:	ce 01       	movw	r24, r28
    6dd6:	8d 55       	subi	r24, 0x5D	; 93
    6dd8:	9f 4f       	sbci	r25, 0xFF	; 255
    6dda:	fc 01       	movw	r30, r24
    6ddc:	80 81       	ld	r24, Z
    6dde:	91 81       	ldd	r25, Z+1	; 0x01
    6de0:	00 97       	sbiw	r24, 0x00	; 0
    6de2:	89 f6       	brne	.-94     	; 0x6d86 <alternate_path+0x1112>
    6de4:	2f c0       	rjmp	.+94     	; 0x6e44 <alternate_path+0x11d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6de6:	8e 01       	movw	r16, r28
    6de8:	0d 55       	subi	r16, 0x5D	; 93
    6dea:	1f 4f       	sbci	r17, 0xFF	; 255
    6dec:	ce 01       	movw	r24, r28
    6dee:	81 56       	subi	r24, 0x61	; 97
    6df0:	9f 4f       	sbci	r25, 0xFF	; 255
    6df2:	fc 01       	movw	r30, r24
    6df4:	60 81       	ld	r22, Z
    6df6:	71 81       	ldd	r23, Z+1	; 0x01
    6df8:	82 81       	ldd	r24, Z+2	; 0x02
    6dfa:	93 81       	ldd	r25, Z+3	; 0x03
    6dfc:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    6e00:	dc 01       	movw	r26, r24
    6e02:	cb 01       	movw	r24, r22
    6e04:	f8 01       	movw	r30, r16
    6e06:	91 83       	std	Z+1, r25	; 0x01
    6e08:	80 83       	st	Z, r24
    6e0a:	ce 01       	movw	r24, r28
    6e0c:	89 55       	subi	r24, 0x59	; 89
    6e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    6e10:	9e 01       	movw	r18, r28
    6e12:	2d 55       	subi	r18, 0x5D	; 93
    6e14:	3f 4f       	sbci	r19, 0xFF	; 255
    6e16:	f9 01       	movw	r30, r18
    6e18:	20 81       	ld	r18, Z
    6e1a:	31 81       	ldd	r19, Z+1	; 0x01
    6e1c:	fc 01       	movw	r30, r24
    6e1e:	31 83       	std	Z+1, r19	; 0x01
    6e20:	20 83       	st	Z, r18
    6e22:	ce 01       	movw	r24, r28
    6e24:	89 55       	subi	r24, 0x59	; 89
    6e26:	9f 4f       	sbci	r25, 0xFF	; 255
    6e28:	fc 01       	movw	r30, r24
    6e2a:	80 81       	ld	r24, Z
    6e2c:	91 81       	ldd	r25, Z+1	; 0x01
    6e2e:	8c 01       	movw	r16, r24
    6e30:	c8 01       	movw	r24, r16
    6e32:	01 97       	sbiw	r24, 0x01	; 1
    6e34:	f1 f7       	brne	.-4      	; 0x6e32 <alternate_path+0x11be>
    6e36:	8c 01       	movw	r16, r24
    6e38:	ce 01       	movw	r24, r28
    6e3a:	89 55       	subi	r24, 0x59	; 89
    6e3c:	9f 4f       	sbci	r25, 0xFF	; 255
    6e3e:	fc 01       	movw	r30, r24
    6e40:	11 83       	std	Z+1, r17	; 0x01
    6e42:	00 83       	st	Z, r16
	_delay_ms(300);
	
	node_count++;
    6e44:	80 91 00 02 	lds	r24, 0x0200
    6e48:	90 91 01 02 	lds	r25, 0x0201
    6e4c:	01 96       	adiw	r24, 0x01	; 1
    6e4e:	90 93 01 02 	sts	0x0201, r25
    6e52:	80 93 00 02 	sts	0x0200, r24
}
    6e56:	c8 55       	subi	r28, 0x58	; 88
    6e58:	df 4f       	sbci	r29, 0xFF	; 255
    6e5a:	0f b6       	in	r0, 0x3f	; 63
    6e5c:	f8 94       	cli
    6e5e:	de bf       	out	0x3e, r29	; 62
    6e60:	0f be       	out	0x3f, r0	; 63
    6e62:	cd bf       	out	0x3d, r28	; 61
    6e64:	df 91       	pop	r29
    6e66:	cf 91       	pop	r28
    6e68:	1f 91       	pop	r17
    6e6a:	0f 91       	pop	r16
    6e6c:	08 95       	ret

00006e6e <obstacle_detector>:

//this function will be used, when obstacle is detected
void obstacle_detector()
{
    6e6e:	cf 93       	push	r28
    6e70:	df 93       	push	r29
    6e72:	cd b7       	in	r28, 0x3d	; 61
    6e74:	de b7       	in	r29, 0x3e	; 62
	buzzer_beep();
    6e76:	0e 94 55 10 	call	0x20aa	; 0x20aa <buzzer_beep>
	obstacle_update();
    6e7a:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <obstacle_update>
	obstacle_found='1';
    6e7e:	81 e3       	ldi	r24, 0x31	; 49
    6e80:	90 e0       	ldi	r25, 0x00	; 0
    6e82:	90 93 0b 02 	sts	0x020B, r25
    6e86:	80 93 0a 02 	sts	0x020A, r24
	path_direction=direction_calculator();
    6e8a:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <direction_calculator>
    6e8e:	80 93 04 02 	sts	0x0204, r24
	rmnder=node_count % 6;
    6e92:	80 91 00 02 	lds	r24, 0x0200
    6e96:	90 91 01 02 	lds	r25, 0x0201
    6e9a:	26 e0       	ldi	r18, 0x06	; 6
    6e9c:	30 e0       	ldi	r19, 0x00	; 0
    6e9e:	b9 01       	movw	r22, r18
    6ea0:	0e 94 e5 49 	call	0x93ca	; 0x93ca <__udivmodhi4>
    6ea4:	90 93 31 02 	sts	0x0231, r25
    6ea8:	80 93 30 02 	sts	0x0230, r24
	priority=obstacle_check();
    6eac:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <obstacle_check>
    6eb0:	80 93 32 02 	sts	0x0232, r24
	if((line_no == 2) || (line_no == 4))    //when obstacle is in even line numbers
    6eb4:	80 91 02 02 	lds	r24, 0x0202
    6eb8:	90 91 03 02 	lds	r25, 0x0203
    6ebc:	82 30       	cpi	r24, 0x02	; 2
    6ebe:	91 05       	cpc	r25, r1
    6ec0:	39 f0       	breq	.+14     	; 0x6ed0 <obstacle_detector+0x62>
    6ec2:	80 91 02 02 	lds	r24, 0x0202
    6ec6:	90 91 03 02 	lds	r25, 0x0203
    6eca:	84 30       	cpi	r24, 0x04	; 4
    6ecc:	91 05       	cpc	r25, r1
    6ece:	51 f4       	brne	.+20     	; 0x6ee4 <obstacle_detector+0x76>
	{
		if (priority == 1)
    6ed0:	80 91 32 02 	lds	r24, 0x0232
    6ed4:	81 30       	cpi	r24, 0x01	; 1
    6ed6:	19 f4       	brne	.+6      	; 0x6ede <obstacle_detector+0x70>
		{
			alternate_path();
    6ed8:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <alternate_path>
	path_direction=direction_calculator();
	rmnder=node_count % 6;
	priority=obstacle_check();
	if((line_no == 2) || (line_no == 4))    //when obstacle is in even line numbers
	{
		if (priority == 1)
    6edc:	1a c0       	rjmp	.+52     	; 0x6f12 <obstacle_detector+0xa4>
		{
			alternate_path();
		}
		else
		{
			default_path();
    6ede:	0e 94 35 20 	call	0x406a	; 0x406a <default_path>
	path_direction=direction_calculator();
	rmnder=node_count % 6;
	priority=obstacle_check();
	if((line_no == 2) || (line_no == 4))    //when obstacle is in even line numbers
	{
		if (priority == 1)
    6ee2:	17 c0       	rjmp	.+46     	; 0x6f12 <obstacle_detector+0xa4>
		{
			default_path();
		}
		
	}
	else if((line_no == 3) || (line_no == 5)) 
    6ee4:	80 91 02 02 	lds	r24, 0x0202
    6ee8:	90 91 03 02 	lds	r25, 0x0203
    6eec:	83 30       	cpi	r24, 0x03	; 3
    6eee:	91 05       	cpc	r25, r1
    6ef0:	39 f0       	breq	.+14     	; 0x6f00 <obstacle_detector+0x92>
    6ef2:	80 91 02 02 	lds	r24, 0x0202
    6ef6:	90 91 03 02 	lds	r25, 0x0203
    6efa:	85 30       	cpi	r24, 0x05	; 5
    6efc:	91 05       	cpc	r25, r1
    6efe:	49 f4       	brne	.+18     	; 0x6f12 <obstacle_detector+0xa4>
	{
		if (priority == 1)
    6f00:	80 91 32 02 	lds	r24, 0x0232
    6f04:	81 30       	cpi	r24, 0x01	; 1
    6f06:	19 f4       	brne	.+6      	; 0x6f0e <obstacle_detector+0xa0>
		{
			default_path();
    6f08:	0e 94 35 20 	call	0x406a	; 0x406a <default_path>
    6f0c:	02 c0       	rjmp	.+4      	; 0x6f12 <obstacle_detector+0xa4>
		}
		else
		{
			alternate_path();
    6f0e:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <alternate_path>
		}
		
	}
}
    6f12:	df 91       	pop	r29
    6f14:	cf 91       	pop	r28
    6f16:	08 95       	ret

00006f18 <node_detector>:


//this function will be used, when node is detected
void node_detector()
{
    6f18:	0f 93       	push	r16
    6f1a:	1f 93       	push	r17
    6f1c:	cf 93       	push	r28
    6f1e:	df 93       	push	r29
    6f20:	cd b7       	in	r28, 0x3d	; 61
    6f22:	de b7       	in	r29, 0x3e	; 62
    6f24:	ae 97       	sbiw	r28, 0x2e	; 46
    6f26:	0f b6       	in	r0, 0x3f	; 63
    6f28:	f8 94       	cli
    6f2a:	de bf       	out	0x3e, r29	; 62
    6f2c:	0f be       	out	0x3f, r0	; 63
    6f2e:	cd bf       	out	0x3d, r28	; 61
	buzzer_beep();
    6f30:	0e 94 55 10 	call	0x20aa	; 0x20aa <buzzer_beep>
	path_direction = direction_calculator();
    6f34:	0e 94 7e 1e 	call	0x3cfc	; 0x3cfc <direction_calculator>
    6f38:	80 93 04 02 	sts	0x0204, r24
	node_count++;
    6f3c:	80 91 00 02 	lds	r24, 0x0200
    6f40:	90 91 01 02 	lds	r25, 0x0201
    6f44:	01 96       	adiw	r24, 0x01	; 1
    6f46:	90 93 01 02 	sts	0x0201, r25
    6f4a:	80 93 00 02 	sts	0x0200, r24
	
	if (node_count > 1)
    6f4e:	80 91 00 02 	lds	r24, 0x0200
    6f52:	90 91 01 02 	lds	r25, 0x0201
    6f56:	82 30       	cpi	r24, 0x02	; 2
    6f58:	91 05       	cpc	r25, r1
    6f5a:	10 f0       	brcs	.+4      	; 0x6f60 <node_detector+0x48>
	{
		send_to_pc();
    6f5c:	0e 94 5f 3a 	call	0x74be	; 0x74be <send_to_pc>
	}
	
	flag_left_object=0;
    6f60:	10 92 33 02 	sts	0x0233, r1
	flag_right_object=0;
    6f64:	10 92 34 02 	sts	0x0234, r1
	left_object_type='0';
    6f68:	80 e3       	ldi	r24, 0x30	; 48
    6f6a:	90 e0       	ldi	r25, 0x00	; 0
    6f6c:	90 93 07 02 	sts	0x0207, r25
    6f70:	80 93 06 02 	sts	0x0206, r24
	right_object_type='0';
    6f74:	80 e3       	ldi	r24, 0x30	; 48
    6f76:	90 e0       	ldi	r25, 0x00	; 0
    6f78:	90 93 09 02 	sts	0x0209, r25
    6f7c:	80 93 08 02 	sts	0x0208, r24
	obstacle_found='0';
    6f80:	80 e3       	ldi	r24, 0x30	; 48
    6f82:	90 e0       	ldi	r25, 0x00	; 0
    6f84:	90 93 0b 02 	sts	0x020B, r25
    6f88:	80 93 0a 02 	sts	0x020A, r24
	pathL=0;
    6f8c:	10 92 35 02 	sts	0x0235, r1
	pathR=0;
    6f90:	10 92 36 02 	sts	0x0236, r1
	flag_S1_count=0;
    6f94:	10 92 2a 02 	sts	0x022A, r1
	flag_S1=0;
    6f98:	10 92 29 02 	sts	0x0229, r1
	flag_Shape=0;
    6f9c:	10 92 28 02 	sts	0x0228, r1
	shape_type='0';
    6fa0:	80 e3       	ldi	r24, 0x30	; 48
    6fa2:	80 93 05 02 	sts	0x0205, r24
	
	if((node_count == 36) && (run == 1))   //end of run=1,run=2 starts 
    6fa6:	80 91 00 02 	lds	r24, 0x0200
    6faa:	90 91 01 02 	lds	r25, 0x0201
    6fae:	84 32       	cpi	r24, 0x24	; 36
    6fb0:	91 05       	cpc	r25, r1
    6fb2:	09 f0       	breq	.+2      	; 0x6fb6 <node_detector+0x9e>
    6fb4:	ca c0       	rjmp	.+404    	; 0x714a <node_detector+0x232>
    6fb6:	80 91 27 02 	lds	r24, 0x0227
    6fba:	81 30       	cpi	r24, 0x01	; 1
    6fbc:	09 f0       	breq	.+2      	; 0x6fc0 <node_detector+0xa8>
    6fbe:	c5 c0       	rjmp	.+394    	; 0x714a <node_detector+0x232>
	{
		forward_mm(53);
    6fc0:	85 e3       	ldi	r24, 0x35	; 53
    6fc2:	90 e0       	ldi	r25, 0x00	; 0
    6fc4:	0e 94 4d 13 	call	0x269a	; 0x269a <forward_mm>
		stop_bot();
    6fc8:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    6fcc:	80 e0       	ldi	r24, 0x00	; 0
    6fce:	90 e0       	ldi	r25, 0x00	; 0
    6fd0:	a6 e9       	ldi	r26, 0x96	; 150
    6fd2:	b3 e4       	ldi	r27, 0x43	; 67
    6fd4:	8d 83       	std	Y+5, r24	; 0x05
    6fd6:	9e 83       	std	Y+6, r25	; 0x06
    6fd8:	af 83       	std	Y+7, r26	; 0x07
    6fda:	b8 87       	std	Y+8, r27	; 0x08
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    6fdc:	6d 81       	ldd	r22, Y+5	; 0x05
    6fde:	7e 81       	ldd	r23, Y+6	; 0x06
    6fe0:	8f 81       	ldd	r24, Y+7	; 0x07
    6fe2:	98 85       	ldd	r25, Y+8	; 0x08
    6fe4:	26 e6       	ldi	r18, 0x66	; 102
    6fe6:	36 e6       	ldi	r19, 0x66	; 102
    6fe8:	46 e6       	ldi	r20, 0x66	; 102
    6fea:	55 e4       	ldi	r21, 0x45	; 69
    6fec:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    6ff0:	dc 01       	movw	r26, r24
    6ff2:	cb 01       	movw	r24, r22
    6ff4:	89 87       	std	Y+9, r24	; 0x09
    6ff6:	9a 87       	std	Y+10, r25	; 0x0a
    6ff8:	ab 87       	std	Y+11, r26	; 0x0b
    6ffa:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    6ffc:	11 e0       	ldi	r17, 0x01	; 1
    6ffe:	69 85       	ldd	r22, Y+9	; 0x09
    7000:	7a 85       	ldd	r23, Y+10	; 0x0a
    7002:	8b 85       	ldd	r24, Y+11	; 0x0b
    7004:	9c 85       	ldd	r25, Y+12	; 0x0c
    7006:	20 e0       	ldi	r18, 0x00	; 0
    7008:	30 e0       	ldi	r19, 0x00	; 0
    700a:	40 e8       	ldi	r20, 0x80	; 128
    700c:	5f e3       	ldi	r21, 0x3F	; 63
    700e:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    7012:	88 23       	and	r24, r24
    7014:	0c f0       	brlt	.+2      	; 0x7018 <node_detector+0x100>
    7016:	10 e0       	ldi	r17, 0x00	; 0
    7018:	11 23       	and	r17, r17
    701a:	29 f0       	breq	.+10     	; 0x7026 <node_detector+0x10e>
		__ticks = 1;
    701c:	81 e0       	ldi	r24, 0x01	; 1
    701e:	90 e0       	ldi	r25, 0x00	; 0
    7020:	9e 87       	std	Y+14, r25	; 0x0e
    7022:	8d 87       	std	Y+13, r24	; 0x0d
    7024:	46 c0       	rjmp	.+140    	; 0x70b2 <node_detector+0x19a>
	else if (__tmp > 65535)
    7026:	11 e0       	ldi	r17, 0x01	; 1
    7028:	69 85       	ldd	r22, Y+9	; 0x09
    702a:	7a 85       	ldd	r23, Y+10	; 0x0a
    702c:	8b 85       	ldd	r24, Y+11	; 0x0b
    702e:	9c 85       	ldd	r25, Y+12	; 0x0c
    7030:	20 e0       	ldi	r18, 0x00	; 0
    7032:	3f ef       	ldi	r19, 0xFF	; 255
    7034:	4f e7       	ldi	r20, 0x7F	; 127
    7036:	57 e4       	ldi	r21, 0x47	; 71
    7038:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    703c:	18 16       	cp	r1, r24
    703e:	0c f0       	brlt	.+2      	; 0x7042 <node_detector+0x12a>
    7040:	10 e0       	ldi	r17, 0x00	; 0
    7042:	11 23       	and	r17, r17
    7044:	61 f1       	breq	.+88     	; 0x709e <node_detector+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7046:	6d 81       	ldd	r22, Y+5	; 0x05
    7048:	7e 81       	ldd	r23, Y+6	; 0x06
    704a:	8f 81       	ldd	r24, Y+7	; 0x07
    704c:	98 85       	ldd	r25, Y+8	; 0x08
    704e:	20 e0       	ldi	r18, 0x00	; 0
    7050:	30 e0       	ldi	r19, 0x00	; 0
    7052:	40 e2       	ldi	r20, 0x20	; 32
    7054:	51 e4       	ldi	r21, 0x41	; 65
    7056:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    705a:	dc 01       	movw	r26, r24
    705c:	cb 01       	movw	r24, r22
    705e:	bc 01       	movw	r22, r24
    7060:	cd 01       	movw	r24, r26
    7062:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    7066:	dc 01       	movw	r26, r24
    7068:	cb 01       	movw	r24, r22
    706a:	9e 87       	std	Y+14, r25	; 0x0e
    706c:	8d 87       	std	Y+13, r24	; 0x0d
    706e:	12 c0       	rjmp	.+36     	; 0x7094 <node_detector+0x17c>
    7070:	80 e7       	ldi	r24, 0x70	; 112
    7072:	91 e0       	ldi	r25, 0x01	; 1
    7074:	98 8b       	std	Y+16, r25	; 0x10
    7076:	8f 87       	std	Y+15, r24	; 0x0f
    7078:	8f 85       	ldd	r24, Y+15	; 0x0f
    707a:	98 89       	ldd	r25, Y+16	; 0x10
    707c:	8c 01       	movw	r16, r24
    707e:	c8 01       	movw	r24, r16
    7080:	01 97       	sbiw	r24, 0x01	; 1
    7082:	f1 f7       	brne	.-4      	; 0x7080 <node_detector+0x168>
    7084:	8c 01       	movw	r16, r24
    7086:	18 8b       	std	Y+16, r17	; 0x10
    7088:	0f 87       	std	Y+15, r16	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    708a:	8d 85       	ldd	r24, Y+13	; 0x0d
    708c:	9e 85       	ldd	r25, Y+14	; 0x0e
    708e:	01 97       	sbiw	r24, 0x01	; 1
    7090:	9e 87       	std	Y+14, r25	; 0x0e
    7092:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7094:	8d 85       	ldd	r24, Y+13	; 0x0d
    7096:	9e 85       	ldd	r25, Y+14	; 0x0e
    7098:	00 97       	sbiw	r24, 0x00	; 0
    709a:	51 f7       	brne	.-44     	; 0x7070 <node_detector+0x158>
    709c:	17 c0       	rjmp	.+46     	; 0x70cc <node_detector+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    709e:	69 85       	ldd	r22, Y+9	; 0x09
    70a0:	7a 85       	ldd	r23, Y+10	; 0x0a
    70a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    70a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    70a6:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    70aa:	dc 01       	movw	r26, r24
    70ac:	cb 01       	movw	r24, r22
    70ae:	9e 87       	std	Y+14, r25	; 0x0e
    70b0:	8d 87       	std	Y+13, r24	; 0x0d
    70b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    70b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    70b6:	9a 8b       	std	Y+18, r25	; 0x12
    70b8:	89 8b       	std	Y+17, r24	; 0x11
    70ba:	89 89       	ldd	r24, Y+17	; 0x11
    70bc:	9a 89       	ldd	r25, Y+18	; 0x12
    70be:	8c 01       	movw	r16, r24
    70c0:	f8 01       	movw	r30, r16
    70c2:	31 97       	sbiw	r30, 0x01	; 1
    70c4:	f1 f7       	brne	.-4      	; 0x70c2 <node_detector+0x1aa>
    70c6:	8f 01       	movw	r16, r30
    70c8:	1a 8b       	std	Y+18, r17	; 0x12
    70ca:	09 8b       	std	Y+17, r16	; 0x11
		_delay_ms(300);
		right_turn();
    70cc:	0e 94 0d 1c 	call	0x381a	; 0x381a <right_turn>
		buzzer_beep();
    70d0:	0e 94 55 10 	call	0x20aa	; 0x20aa <buzzer_beep>
		run=2;
    70d4:	82 e0       	ldi	r24, 0x02	; 2
    70d6:	80 93 27 02 	sts	0x0227, r24
		node_count=1;
    70da:	81 e0       	ldi	r24, 0x01	; 1
    70dc:	90 e0       	ldi	r25, 0x00	; 0
    70de:	90 93 01 02 	sts	0x0201, r25
    70e2:	80 93 00 02 	sts	0x0200, r24
		line_no=1;
    70e6:	81 e0       	ldi	r24, 0x01	; 1
    70e8:	90 e0       	ldi	r25, 0x00	; 0
    70ea:	90 93 03 02 	sts	0x0203, r25
    70ee:	80 93 02 02 	sts	0x0202, r24
		for (int i=0; i < 5; i++)
    70f2:	1a 82       	std	Y+2, r1	; 0x02
    70f4:	19 82       	std	Y+1, r1	; 0x01
    70f6:	23 c0       	rjmp	.+70     	; 0x713e <node_detector+0x226>
		{
			for(int j=0; j < 5; j++)
    70f8:	1c 82       	std	Y+4, r1	; 0x04
    70fa:	1b 82       	std	Y+3, r1	; 0x03
    70fc:	16 c0       	rjmp	.+44     	; 0x712a <node_detector+0x212>
			{
				obstacle_array[i][j]=0;
    70fe:	29 81       	ldd	r18, Y+1	; 0x01
    7100:	3a 81       	ldd	r19, Y+2	; 0x02
    7102:	c9 01       	movw	r24, r18
    7104:	88 0f       	add	r24, r24
    7106:	99 1f       	adc	r25, r25
    7108:	88 0f       	add	r24, r24
    710a:	99 1f       	adc	r25, r25
    710c:	82 0f       	add	r24, r18
    710e:	93 1f       	adc	r25, r19
    7110:	2b 81       	ldd	r18, Y+3	; 0x03
    7112:	3c 81       	ldd	r19, Y+4	; 0x04
    7114:	82 0f       	add	r24, r18
    7116:	93 1f       	adc	r25, r19
    7118:	89 59       	subi	r24, 0x99	; 153
    711a:	9d 4f       	sbci	r25, 0xFD	; 253
    711c:	fc 01       	movw	r30, r24
    711e:	10 82       	st	Z, r1
		run=2;
		node_count=1;
		line_no=1;
		for (int i=0; i < 5; i++)
		{
			for(int j=0; j < 5; j++)
    7120:	8b 81       	ldd	r24, Y+3	; 0x03
    7122:	9c 81       	ldd	r25, Y+4	; 0x04
    7124:	01 96       	adiw	r24, 0x01	; 1
    7126:	9c 83       	std	Y+4, r25	; 0x04
    7128:	8b 83       	std	Y+3, r24	; 0x03
    712a:	8b 81       	ldd	r24, Y+3	; 0x03
    712c:	9c 81       	ldd	r25, Y+4	; 0x04
    712e:	85 30       	cpi	r24, 0x05	; 5
    7130:	91 05       	cpc	r25, r1
    7132:	2c f3       	brlt	.-54     	; 0x70fe <node_detector+0x1e6>
		right_turn();
		buzzer_beep();
		run=2;
		node_count=1;
		line_no=1;
		for (int i=0; i < 5; i++)
    7134:	89 81       	ldd	r24, Y+1	; 0x01
    7136:	9a 81       	ldd	r25, Y+2	; 0x02
    7138:	01 96       	adiw	r24, 0x01	; 1
    713a:	9a 83       	std	Y+2, r25	; 0x02
    713c:	89 83       	std	Y+1, r24	; 0x01
    713e:	89 81       	ldd	r24, Y+1	; 0x01
    7140:	9a 81       	ldd	r25, Y+2	; 0x02
    7142:	85 30       	cpi	r24, 0x05	; 5
    7144:	91 05       	cpc	r25, r1
    7146:	c4 f2       	brlt	.-80     	; 0x70f8 <node_detector+0x1e0>
    7148:	14 c0       	rjmp	.+40     	; 0x7172 <node_detector+0x25a>
			{
				obstacle_array[i][j]=0;
			}
		}
    }
	else if((node_count == 36) && (run == 2))  //finished scanning the arena, turn on buzzer and stop permanently
    714a:	80 91 00 02 	lds	r24, 0x0200
    714e:	90 91 01 02 	lds	r25, 0x0201
    7152:	84 32       	cpi	r24, 0x24	; 36
    7154:	91 05       	cpc	r25, r1
    7156:	69 f4       	brne	.+26     	; 0x7172 <node_detector+0x25a>
    7158:	80 91 27 02 	lds	r24, 0x0227
    715c:	82 30       	cpi	r24, 0x02	; 2
    715e:	49 f4       	brne	.+18     	; 0x7172 <node_detector+0x25a>
	{
		velocity(0,0);
    7160:	80 e0       	ldi	r24, 0x00	; 0
    7162:	60 e0       	ldi	r22, 0x00	; 0
    7164:	0e 94 c6 11 	call	0x238c	; 0x238c <velocity>
		stop_bot();
    7168:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
		while(1)
		{
			buzzer_beep_long();
    716c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <buzzer_beep_long>
		}
    7170:	fd cf       	rjmp	.-6      	; 0x716c <node_detector+0x254>
		
	}
	
	quotient = node_count / 6;
    7172:	80 91 00 02 	lds	r24, 0x0200
    7176:	90 91 01 02 	lds	r25, 0x0201
    717a:	26 e0       	ldi	r18, 0x06	; 6
    717c:	30 e0       	ldi	r19, 0x00	; 0
    717e:	b9 01       	movw	r22, r18
    7180:	0e 94 e5 49 	call	0x93ca	; 0x93ca <__udivmodhi4>
    7184:	9b 01       	movw	r18, r22
    7186:	c9 01       	movw	r24, r18
    7188:	90 93 2f 02 	sts	0x022F, r25
    718c:	80 93 2e 02 	sts	0x022E, r24
	rmnder = node_count % 6;
    7190:	80 91 00 02 	lds	r24, 0x0200
    7194:	90 91 01 02 	lds	r25, 0x0201
    7198:	26 e0       	ldi	r18, 0x06	; 6
    719a:	30 e0       	ldi	r19, 0x00	; 0
    719c:	b9 01       	movw	r22, r18
    719e:	0e 94 e5 49 	call	0x93ca	; 0x93ca <__udivmodhi4>
    71a2:	90 93 31 02 	sts	0x0231, r25
    71a6:	80 93 30 02 	sts	0x0230, r24
	
	if(quotient == 1 || quotient == 3 || quotient == 5)   //at end of north and begining of south direction
    71aa:	80 91 2e 02 	lds	r24, 0x022E
    71ae:	90 91 2f 02 	lds	r25, 0x022F
    71b2:	81 30       	cpi	r24, 0x01	; 1
    71b4:	91 05       	cpc	r25, r1
    71b6:	79 f0       	breq	.+30     	; 0x71d6 <node_detector+0x2be>
    71b8:	80 91 2e 02 	lds	r24, 0x022E
    71bc:	90 91 2f 02 	lds	r25, 0x022F
    71c0:	83 30       	cpi	r24, 0x03	; 3
    71c2:	91 05       	cpc	r25, r1
    71c4:	41 f0       	breq	.+16     	; 0x71d6 <node_detector+0x2be>
    71c6:	80 91 2e 02 	lds	r24, 0x022E
    71ca:	90 91 2f 02 	lds	r25, 0x022F
    71ce:	85 30       	cpi	r24, 0x05	; 5
    71d0:	91 05       	cpc	r25, r1
    71d2:	09 f0       	breq	.+2      	; 0x71d6 <node_detector+0x2be>
    71d4:	ae c0       	rjmp	.+348    	; 0x7332 <node_detector+0x41a>
	{
		if((rmnder == 0) || (rmnder == 1))
    71d6:	80 91 30 02 	lds	r24, 0x0230
    71da:	90 91 31 02 	lds	r25, 0x0231
    71de:	00 97       	sbiw	r24, 0x00	; 0
    71e0:	41 f0       	breq	.+16     	; 0x71f2 <node_detector+0x2da>
    71e2:	80 91 30 02 	lds	r24, 0x0230
    71e6:	90 91 31 02 	lds	r25, 0x0231
    71ea:	81 30       	cpi	r24, 0x01	; 1
    71ec:	91 05       	cpc	r25, r1
    71ee:	09 f0       	breq	.+2      	; 0x71f2 <node_detector+0x2da>
    71f0:	8e c0       	rjmp	.+284    	; 0x730e <node_detector+0x3f6>
		{
			forward_mm(53);
    71f2:	85 e3       	ldi	r24, 0x35	; 53
    71f4:	90 e0       	ldi	r25, 0x00	; 0
    71f6:	0e 94 4d 13 	call	0x269a	; 0x269a <forward_mm>
			stop_bot();
    71fa:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    71fe:	80 e0       	ldi	r24, 0x00	; 0
    7200:	90 e0       	ldi	r25, 0x00	; 0
    7202:	a6 e9       	ldi	r26, 0x96	; 150
    7204:	b3 e4       	ldi	r27, 0x43	; 67
    7206:	8b 8b       	std	Y+19, r24	; 0x13
    7208:	9c 8b       	std	Y+20, r25	; 0x14
    720a:	ad 8b       	std	Y+21, r26	; 0x15
    720c:	be 8b       	std	Y+22, r27	; 0x16
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    720e:	6b 89       	ldd	r22, Y+19	; 0x13
    7210:	7c 89       	ldd	r23, Y+20	; 0x14
    7212:	8d 89       	ldd	r24, Y+21	; 0x15
    7214:	9e 89       	ldd	r25, Y+22	; 0x16
    7216:	26 e6       	ldi	r18, 0x66	; 102
    7218:	36 e6       	ldi	r19, 0x66	; 102
    721a:	46 e6       	ldi	r20, 0x66	; 102
    721c:	55 e4       	ldi	r21, 0x45	; 69
    721e:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    7222:	dc 01       	movw	r26, r24
    7224:	cb 01       	movw	r24, r22
    7226:	8f 8b       	std	Y+23, r24	; 0x17
    7228:	98 8f       	std	Y+24, r25	; 0x18
    722a:	a9 8f       	std	Y+25, r26	; 0x19
    722c:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
    722e:	11 e0       	ldi	r17, 0x01	; 1
    7230:	6f 89       	ldd	r22, Y+23	; 0x17
    7232:	78 8d       	ldd	r23, Y+24	; 0x18
    7234:	89 8d       	ldd	r24, Y+25	; 0x19
    7236:	9a 8d       	ldd	r25, Y+26	; 0x1a
    7238:	20 e0       	ldi	r18, 0x00	; 0
    723a:	30 e0       	ldi	r19, 0x00	; 0
    723c:	40 e8       	ldi	r20, 0x80	; 128
    723e:	5f e3       	ldi	r21, 0x3F	; 63
    7240:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    7244:	88 23       	and	r24, r24
    7246:	0c f0       	brlt	.+2      	; 0x724a <node_detector+0x332>
    7248:	10 e0       	ldi	r17, 0x00	; 0
    724a:	11 23       	and	r17, r17
    724c:	29 f0       	breq	.+10     	; 0x7258 <node_detector+0x340>
		__ticks = 1;
    724e:	81 e0       	ldi	r24, 0x01	; 1
    7250:	90 e0       	ldi	r25, 0x00	; 0
    7252:	9c 8f       	std	Y+28, r25	; 0x1c
    7254:	8b 8f       	std	Y+27, r24	; 0x1b
    7256:	46 c0       	rjmp	.+140    	; 0x72e4 <node_detector+0x3cc>
	else if (__tmp > 65535)
    7258:	11 e0       	ldi	r17, 0x01	; 1
    725a:	6f 89       	ldd	r22, Y+23	; 0x17
    725c:	78 8d       	ldd	r23, Y+24	; 0x18
    725e:	89 8d       	ldd	r24, Y+25	; 0x19
    7260:	9a 8d       	ldd	r25, Y+26	; 0x1a
    7262:	20 e0       	ldi	r18, 0x00	; 0
    7264:	3f ef       	ldi	r19, 0xFF	; 255
    7266:	4f e7       	ldi	r20, 0x7F	; 127
    7268:	57 e4       	ldi	r21, 0x47	; 71
    726a:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    726e:	18 16       	cp	r1, r24
    7270:	0c f0       	brlt	.+2      	; 0x7274 <node_detector+0x35c>
    7272:	10 e0       	ldi	r17, 0x00	; 0
    7274:	11 23       	and	r17, r17
    7276:	61 f1       	breq	.+88     	; 0x72d0 <node_detector+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7278:	6b 89       	ldd	r22, Y+19	; 0x13
    727a:	7c 89       	ldd	r23, Y+20	; 0x14
    727c:	8d 89       	ldd	r24, Y+21	; 0x15
    727e:	9e 89       	ldd	r25, Y+22	; 0x16
    7280:	20 e0       	ldi	r18, 0x00	; 0
    7282:	30 e0       	ldi	r19, 0x00	; 0
    7284:	40 e2       	ldi	r20, 0x20	; 32
    7286:	51 e4       	ldi	r21, 0x41	; 65
    7288:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    728c:	dc 01       	movw	r26, r24
    728e:	cb 01       	movw	r24, r22
    7290:	bc 01       	movw	r22, r24
    7292:	cd 01       	movw	r24, r26
    7294:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    7298:	dc 01       	movw	r26, r24
    729a:	cb 01       	movw	r24, r22
    729c:	9c 8f       	std	Y+28, r25	; 0x1c
    729e:	8b 8f       	std	Y+27, r24	; 0x1b
    72a0:	12 c0       	rjmp	.+36     	; 0x72c6 <node_detector+0x3ae>
    72a2:	80 e7       	ldi	r24, 0x70	; 112
    72a4:	91 e0       	ldi	r25, 0x01	; 1
    72a6:	9e 8f       	std	Y+30, r25	; 0x1e
    72a8:	8d 8f       	std	Y+29, r24	; 0x1d
    72aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    72ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    72ae:	8c 01       	movw	r16, r24
    72b0:	c8 01       	movw	r24, r16
    72b2:	01 97       	sbiw	r24, 0x01	; 1
    72b4:	f1 f7       	brne	.-4      	; 0x72b2 <node_detector+0x39a>
    72b6:	8c 01       	movw	r16, r24
    72b8:	1e 8f       	std	Y+30, r17	; 0x1e
    72ba:	0d 8f       	std	Y+29, r16	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    72bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    72be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    72c0:	01 97       	sbiw	r24, 0x01	; 1
    72c2:	9c 8f       	std	Y+28, r25	; 0x1c
    72c4:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    72c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    72c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    72ca:	00 97       	sbiw	r24, 0x00	; 0
    72cc:	51 f7       	brne	.-44     	; 0x72a2 <node_detector+0x38a>
    72ce:	17 c0       	rjmp	.+46     	; 0x72fe <node_detector+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    72d0:	6f 89       	ldd	r22, Y+23	; 0x17
    72d2:	78 8d       	ldd	r23, Y+24	; 0x18
    72d4:	89 8d       	ldd	r24, Y+25	; 0x19
    72d6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    72d8:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    72dc:	dc 01       	movw	r26, r24
    72de:	cb 01       	movw	r24, r22
    72e0:	9c 8f       	std	Y+28, r25	; 0x1c
    72e2:	8b 8f       	std	Y+27, r24	; 0x1b
    72e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    72e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    72e8:	98 a3       	lds	r25, 0x58
    72ea:	8f 8f       	std	Y+31, r24	; 0x1f
    72ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    72ee:	98 a1       	lds	r25, 0x48
    72f0:	8c 01       	movw	r16, r24
    72f2:	f8 01       	movw	r30, r16
    72f4:	31 97       	sbiw	r30, 0x01	; 1
    72f6:	f1 f7       	brne	.-4      	; 0x72f4 <node_detector+0x3dc>
    72f8:	8f 01       	movw	r16, r30
    72fa:	18 a3       	lds	r17, 0x58
    72fc:	0f 8f       	std	Y+31, r16	; 0x1f
			_delay_ms(300);
			right_turn();
    72fe:	0e 94 0d 1c 	call	0x381a	; 0x381a <right_turn>
			pathL=15;
    7302:	8f e0       	ldi	r24, 0x0F	; 15
    7304:	80 93 35 02 	sts	0x0235, r24
			pathR=15;
    7308:	8f e0       	ldi	r24, 0x0F	; 15
    730a:	80 93 36 02 	sts	0x0236, r24
		}
		if(rmnder == 1)
    730e:	80 91 30 02 	lds	r24, 0x0230
    7312:	90 91 31 02 	lds	r25, 0x0231
    7316:	81 30       	cpi	r24, 0x01	; 1
    7318:	91 05       	cpc	r25, r1
    731a:	09 f0       	breq	.+2      	; 0x731e <node_detector+0x406>
    731c:	c5 c0       	rjmp	.+394    	; 0x74a8 <node_detector+0x590>
		{
			line_no++;
    731e:	80 91 02 02 	lds	r24, 0x0202
    7322:	90 91 03 02 	lds	r25, 0x0203
    7326:	01 96       	adiw	r24, 0x01	; 1
    7328:	90 93 03 02 	sts	0x0203, r25
    732c:	80 93 02 02 	sts	0x0202, r24
			_delay_ms(300);
			right_turn();
			pathL=15;
			pathR=15;
		}
		if(rmnder == 1)
    7330:	bb c0       	rjmp	.+374    	; 0x74a8 <node_detector+0x590>
		{
			line_no++;
		}
	}
	
	else if(quotient == 2 || quotient == 4)          //at end of south and begining of north direction
    7332:	80 91 2e 02 	lds	r24, 0x022E
    7336:	90 91 2f 02 	lds	r25, 0x022F
    733a:	82 30       	cpi	r24, 0x02	; 2
    733c:	91 05       	cpc	r25, r1
    733e:	41 f0       	breq	.+16     	; 0x7350 <node_detector+0x438>
    7340:	80 91 2e 02 	lds	r24, 0x022E
    7344:	90 91 2f 02 	lds	r25, 0x022F
    7348:	84 30       	cpi	r24, 0x04	; 4
    734a:	91 05       	cpc	r25, r1
    734c:	09 f0       	breq	.+2      	; 0x7350 <node_detector+0x438>
    734e:	ac c0       	rjmp	.+344    	; 0x74a8 <node_detector+0x590>
	{
		if((rmnder == 0) || (rmnder == 1))
    7350:	80 91 30 02 	lds	r24, 0x0230
    7354:	90 91 31 02 	lds	r25, 0x0231
    7358:	00 97       	sbiw	r24, 0x00	; 0
    735a:	41 f0       	breq	.+16     	; 0x736c <node_detector+0x454>
    735c:	80 91 30 02 	lds	r24, 0x0230
    7360:	90 91 31 02 	lds	r25, 0x0231
    7364:	81 30       	cpi	r24, 0x01	; 1
    7366:	91 05       	cpc	r25, r1
    7368:	09 f0       	breq	.+2      	; 0x736c <node_detector+0x454>
    736a:	8e c0       	rjmp	.+284    	; 0x7488 <node_detector+0x570>
		{
		    forward_mm(53);
    736c:	85 e3       	ldi	r24, 0x35	; 53
    736e:	90 e0       	ldi	r25, 0x00	; 0
    7370:	0e 94 4d 13 	call	0x269a	; 0x269a <forward_mm>
			stop_bot();
    7374:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    7378:	80 e0       	ldi	r24, 0x00	; 0
    737a:	90 e0       	ldi	r25, 0x00	; 0
    737c:	a6 e9       	ldi	r26, 0x96	; 150
    737e:	b3 e4       	ldi	r27, 0x43	; 67
    7380:	89 a3       	lds	r24, 0x59
    7382:	9a a3       	lds	r25, 0x5a
    7384:	ab a3       	lds	r26, 0x5b
    7386:	bc a3       	lds	r27, 0x5c
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7388:	69 a1       	lds	r22, 0x49
    738a:	7a a1       	lds	r23, 0x4a
    738c:	8b a1       	lds	r24, 0x4b
    738e:	9c a1       	lds	r25, 0x4c
    7390:	26 e6       	ldi	r18, 0x66	; 102
    7392:	36 e6       	ldi	r19, 0x66	; 102
    7394:	46 e6       	ldi	r20, 0x66	; 102
    7396:	55 e4       	ldi	r21, 0x45	; 69
    7398:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    739c:	dc 01       	movw	r26, r24
    739e:	cb 01       	movw	r24, r22
    73a0:	8d a3       	lds	r24, 0x5d
    73a2:	9e a3       	lds	r25, 0x5e
    73a4:	af a3       	lds	r26, 0x5f
    73a6:	b8 a7       	lds	r27, 0x78
	if (__tmp < 1.0)
    73a8:	11 e0       	ldi	r17, 0x01	; 1
    73aa:	6d a1       	lds	r22, 0x4d
    73ac:	7e a1       	lds	r23, 0x4e
    73ae:	8f a1       	lds	r24, 0x4f
    73b0:	98 a5       	lds	r25, 0x68
    73b2:	20 e0       	ldi	r18, 0x00	; 0
    73b4:	30 e0       	ldi	r19, 0x00	; 0
    73b6:	40 e8       	ldi	r20, 0x80	; 128
    73b8:	5f e3       	ldi	r21, 0x3F	; 63
    73ba:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    73be:	88 23       	and	r24, r24
    73c0:	0c f0       	brlt	.+2      	; 0x73c4 <node_detector+0x4ac>
    73c2:	10 e0       	ldi	r17, 0x00	; 0
    73c4:	11 23       	and	r17, r17
    73c6:	29 f0       	breq	.+10     	; 0x73d2 <node_detector+0x4ba>
		__ticks = 1;
    73c8:	81 e0       	ldi	r24, 0x01	; 1
    73ca:	90 e0       	ldi	r25, 0x00	; 0
    73cc:	9a a7       	lds	r25, 0x7a
    73ce:	89 a7       	lds	r24, 0x79
    73d0:	46 c0       	rjmp	.+140    	; 0x745e <node_detector+0x546>
	else if (__tmp > 65535)
    73d2:	11 e0       	ldi	r17, 0x01	; 1
    73d4:	6d a1       	lds	r22, 0x4d
    73d6:	7e a1       	lds	r23, 0x4e
    73d8:	8f a1       	lds	r24, 0x4f
    73da:	98 a5       	lds	r25, 0x68
    73dc:	20 e0       	ldi	r18, 0x00	; 0
    73de:	3f ef       	ldi	r19, 0xFF	; 255
    73e0:	4f e7       	ldi	r20, 0x7F	; 127
    73e2:	57 e4       	ldi	r21, 0x47	; 71
    73e4:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    73e8:	18 16       	cp	r1, r24
    73ea:	0c f0       	brlt	.+2      	; 0x73ee <node_detector+0x4d6>
    73ec:	10 e0       	ldi	r17, 0x00	; 0
    73ee:	11 23       	and	r17, r17
    73f0:	61 f1       	breq	.+88     	; 0x744a <node_detector+0x532>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    73f2:	69 a1       	lds	r22, 0x49
    73f4:	7a a1       	lds	r23, 0x4a
    73f6:	8b a1       	lds	r24, 0x4b
    73f8:	9c a1       	lds	r25, 0x4c
    73fa:	20 e0       	ldi	r18, 0x00	; 0
    73fc:	30 e0       	ldi	r19, 0x00	; 0
    73fe:	40 e2       	ldi	r20, 0x20	; 32
    7400:	51 e4       	ldi	r21, 0x41	; 65
    7402:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    7406:	dc 01       	movw	r26, r24
    7408:	cb 01       	movw	r24, r22
    740a:	bc 01       	movw	r22, r24
    740c:	cd 01       	movw	r24, r26
    740e:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    7412:	dc 01       	movw	r26, r24
    7414:	cb 01       	movw	r24, r22
    7416:	9a a7       	lds	r25, 0x7a
    7418:	89 a7       	lds	r24, 0x79
    741a:	12 c0       	rjmp	.+36     	; 0x7440 <node_detector+0x528>
    741c:	80 e7       	ldi	r24, 0x70	; 112
    741e:	91 e0       	ldi	r25, 0x01	; 1
    7420:	9c a7       	lds	r25, 0x7c
    7422:	8b a7       	lds	r24, 0x7b
    7424:	8b a5       	lds	r24, 0x6b
    7426:	9c a5       	lds	r25, 0x6c
    7428:	8c 01       	movw	r16, r24
    742a:	c8 01       	movw	r24, r16
    742c:	01 97       	sbiw	r24, 0x01	; 1
    742e:	f1 f7       	brne	.-4      	; 0x742c <node_detector+0x514>
    7430:	8c 01       	movw	r16, r24
    7432:	1c a7       	lds	r17, 0x7c
    7434:	0b a7       	lds	r16, 0x7b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7436:	89 a5       	lds	r24, 0x69
    7438:	9a a5       	lds	r25, 0x6a
    743a:	01 97       	sbiw	r24, 0x01	; 1
    743c:	9a a7       	lds	r25, 0x7a
    743e:	89 a7       	lds	r24, 0x79
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7440:	89 a5       	lds	r24, 0x69
    7442:	9a a5       	lds	r25, 0x6a
    7444:	00 97       	sbiw	r24, 0x00	; 0
    7446:	51 f7       	brne	.-44     	; 0x741c <node_detector+0x504>
    7448:	17 c0       	rjmp	.+46     	; 0x7478 <node_detector+0x560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    744a:	6d a1       	lds	r22, 0x4d
    744c:	7e a1       	lds	r23, 0x4e
    744e:	8f a1       	lds	r24, 0x4f
    7450:	98 a5       	lds	r25, 0x68
    7452:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    7456:	dc 01       	movw	r26, r24
    7458:	cb 01       	movw	r24, r22
    745a:	9a a7       	lds	r25, 0x7a
    745c:	89 a7       	lds	r24, 0x79
    745e:	89 a5       	lds	r24, 0x69
    7460:	9a a5       	lds	r25, 0x6a
    7462:	9e a7       	lds	r25, 0x7e
    7464:	8d a7       	lds	r24, 0x7d
    7466:	8d a5       	lds	r24, 0x6d
    7468:	9e a5       	lds	r25, 0x6e
    746a:	8c 01       	movw	r16, r24
    746c:	f8 01       	movw	r30, r16
    746e:	31 97       	sbiw	r30, 0x01	; 1
    7470:	f1 f7       	brne	.-4      	; 0x746e <node_detector+0x556>
    7472:	8f 01       	movw	r16, r30
    7474:	1e a7       	lds	r17, 0x7e
    7476:	0d a7       	lds	r16, 0x7d
			_delay_ms(300);
			left_turn();
    7478:	0e 94 b8 1c 	call	0x3970	; 0x3970 <left_turn>
			pathL=15;
    747c:	8f e0       	ldi	r24, 0x0F	; 15
    747e:	80 93 35 02 	sts	0x0235, r24
			pathR=15;
    7482:	8f e0       	ldi	r24, 0x0F	; 15
    7484:	80 93 36 02 	sts	0x0236, r24
			
		}
		if(rmnder == 1)
    7488:	80 91 30 02 	lds	r24, 0x0230
    748c:	90 91 31 02 	lds	r25, 0x0231
    7490:	81 30       	cpi	r24, 0x01	; 1
    7492:	91 05       	cpc	r25, r1
    7494:	49 f4       	brne	.+18     	; 0x74a8 <node_detector+0x590>
		{
			line_no++;
    7496:	80 91 02 02 	lds	r24, 0x0202
    749a:	90 91 03 02 	lds	r25, 0x0203
    749e:	01 96       	adiw	r24, 0x01	; 1
    74a0:	90 93 03 02 	sts	0x0203, r25
    74a4:	80 93 02 02 	sts	0x0202, r24
		}
	}
}
    74a8:	ae 96       	adiw	r28, 0x2e	; 46
    74aa:	0f b6       	in	r0, 0x3f	; 63
    74ac:	f8 94       	cli
    74ae:	de bf       	out	0x3e, r29	; 62
    74b0:	0f be       	out	0x3f, r0	; 63
    74b2:	cd bf       	out	0x3d, r28	; 61
    74b4:	df 91       	pop	r29
    74b6:	cf 91       	pop	r28
    74b8:	1f 91       	pop	r17
    74ba:	0f 91       	pop	r16
    74bc:	08 95       	ret

000074be <send_to_pc>:

/************************************************************ Send to PC ************************************************************/

//function to send the data to pc using UART0
void send_to_pc()
{
    74be:	0f 93       	push	r16
    74c0:	1f 93       	push	r17
    74c2:	cf 93       	push	r28
    74c4:	df 93       	push	r29
    74c6:	cd b7       	in	r28, 0x3d	; 61
    74c8:	de b7       	in	r29, 0x3e	; 62
    74ca:	c2 56       	subi	r28, 0x62	; 98
    74cc:	d0 40       	sbci	r29, 0x00	; 0
    74ce:	0f b6       	in	r0, 0x3f	; 63
    74d0:	f8 94       	cli
    74d2:	de bf       	out	0x3e, r29	; 62
    74d4:	0f be       	out	0x3f, r0	; 63
    74d6:	cd bf       	out	0x3d, r28	; 61
	stop_bot();
    74d8:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
	UDR0=path_direction;
    74dc:	86 ec       	ldi	r24, 0xC6	; 198
    74de:	90 e0       	ldi	r25, 0x00	; 0
    74e0:	20 91 04 02 	lds	r18, 0x0204
    74e4:	fc 01       	movw	r30, r24
    74e6:	20 83       	st	Z, r18
    74e8:	80 e0       	ldi	r24, 0x00	; 0
    74ea:	90 e0       	ldi	r25, 0x00	; 0
    74ec:	a8 ec       	ldi	r26, 0xC8	; 200
    74ee:	b2 e4       	ldi	r27, 0x42	; 66
    74f0:	89 83       	std	Y+1, r24	; 0x01
    74f2:	9a 83       	std	Y+2, r25	; 0x02
    74f4:	ab 83       	std	Y+3, r26	; 0x03
    74f6:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    74f8:	69 81       	ldd	r22, Y+1	; 0x01
    74fa:	7a 81       	ldd	r23, Y+2	; 0x02
    74fc:	8b 81       	ldd	r24, Y+3	; 0x03
    74fe:	9c 81       	ldd	r25, Y+4	; 0x04
    7500:	26 e6       	ldi	r18, 0x66	; 102
    7502:	36 e6       	ldi	r19, 0x66	; 102
    7504:	46 e6       	ldi	r20, 0x66	; 102
    7506:	55 e4       	ldi	r21, 0x45	; 69
    7508:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    750c:	dc 01       	movw	r26, r24
    750e:	cb 01       	movw	r24, r22
    7510:	8d 83       	std	Y+5, r24	; 0x05
    7512:	9e 83       	std	Y+6, r25	; 0x06
    7514:	af 83       	std	Y+7, r26	; 0x07
    7516:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    7518:	11 e0       	ldi	r17, 0x01	; 1
    751a:	6d 81       	ldd	r22, Y+5	; 0x05
    751c:	7e 81       	ldd	r23, Y+6	; 0x06
    751e:	8f 81       	ldd	r24, Y+7	; 0x07
    7520:	98 85       	ldd	r25, Y+8	; 0x08
    7522:	20 e0       	ldi	r18, 0x00	; 0
    7524:	30 e0       	ldi	r19, 0x00	; 0
    7526:	40 e8       	ldi	r20, 0x80	; 128
    7528:	5f e3       	ldi	r21, 0x3F	; 63
    752a:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    752e:	88 23       	and	r24, r24
    7530:	0c f0       	brlt	.+2      	; 0x7534 <send_to_pc+0x76>
    7532:	10 e0       	ldi	r17, 0x00	; 0
    7534:	11 23       	and	r17, r17
    7536:	29 f0       	breq	.+10     	; 0x7542 <send_to_pc+0x84>
		__ticks = 1;
    7538:	81 e0       	ldi	r24, 0x01	; 1
    753a:	90 e0       	ldi	r25, 0x00	; 0
    753c:	9a 87       	std	Y+10, r25	; 0x0a
    753e:	89 87       	std	Y+9, r24	; 0x09
    7540:	46 c0       	rjmp	.+140    	; 0x75ce <send_to_pc+0x110>
	else if (__tmp > 65535)
    7542:	11 e0       	ldi	r17, 0x01	; 1
    7544:	6d 81       	ldd	r22, Y+5	; 0x05
    7546:	7e 81       	ldd	r23, Y+6	; 0x06
    7548:	8f 81       	ldd	r24, Y+7	; 0x07
    754a:	98 85       	ldd	r25, Y+8	; 0x08
    754c:	20 e0       	ldi	r18, 0x00	; 0
    754e:	3f ef       	ldi	r19, 0xFF	; 255
    7550:	4f e7       	ldi	r20, 0x7F	; 127
    7552:	57 e4       	ldi	r21, 0x47	; 71
    7554:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    7558:	18 16       	cp	r1, r24
    755a:	0c f0       	brlt	.+2      	; 0x755e <send_to_pc+0xa0>
    755c:	10 e0       	ldi	r17, 0x00	; 0
    755e:	11 23       	and	r17, r17
    7560:	61 f1       	breq	.+88     	; 0x75ba <send_to_pc+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7562:	69 81       	ldd	r22, Y+1	; 0x01
    7564:	7a 81       	ldd	r23, Y+2	; 0x02
    7566:	8b 81       	ldd	r24, Y+3	; 0x03
    7568:	9c 81       	ldd	r25, Y+4	; 0x04
    756a:	20 e0       	ldi	r18, 0x00	; 0
    756c:	30 e0       	ldi	r19, 0x00	; 0
    756e:	40 e2       	ldi	r20, 0x20	; 32
    7570:	51 e4       	ldi	r21, 0x41	; 65
    7572:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    7576:	dc 01       	movw	r26, r24
    7578:	cb 01       	movw	r24, r22
    757a:	bc 01       	movw	r22, r24
    757c:	cd 01       	movw	r24, r26
    757e:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    7582:	dc 01       	movw	r26, r24
    7584:	cb 01       	movw	r24, r22
    7586:	9a 87       	std	Y+10, r25	; 0x0a
    7588:	89 87       	std	Y+9, r24	; 0x09
    758a:	12 c0       	rjmp	.+36     	; 0x75b0 <send_to_pc+0xf2>
    758c:	80 e7       	ldi	r24, 0x70	; 112
    758e:	91 e0       	ldi	r25, 0x01	; 1
    7590:	9c 87       	std	Y+12, r25	; 0x0c
    7592:	8b 87       	std	Y+11, r24	; 0x0b
    7594:	8b 85       	ldd	r24, Y+11	; 0x0b
    7596:	9c 85       	ldd	r25, Y+12	; 0x0c
    7598:	8c 01       	movw	r16, r24
    759a:	c8 01       	movw	r24, r16
    759c:	01 97       	sbiw	r24, 0x01	; 1
    759e:	f1 f7       	brne	.-4      	; 0x759c <send_to_pc+0xde>
    75a0:	8c 01       	movw	r16, r24
    75a2:	1c 87       	std	Y+12, r17	; 0x0c
    75a4:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    75a6:	89 85       	ldd	r24, Y+9	; 0x09
    75a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    75aa:	01 97       	sbiw	r24, 0x01	; 1
    75ac:	9a 87       	std	Y+10, r25	; 0x0a
    75ae:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    75b0:	89 85       	ldd	r24, Y+9	; 0x09
    75b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    75b4:	00 97       	sbiw	r24, 0x00	; 0
    75b6:	51 f7       	brne	.-44     	; 0x758c <send_to_pc+0xce>
    75b8:	17 c0       	rjmp	.+46     	; 0x75e8 <send_to_pc+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    75ba:	6d 81       	ldd	r22, Y+5	; 0x05
    75bc:	7e 81       	ldd	r23, Y+6	; 0x06
    75be:	8f 81       	ldd	r24, Y+7	; 0x07
    75c0:	98 85       	ldd	r25, Y+8	; 0x08
    75c2:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    75c6:	dc 01       	movw	r26, r24
    75c8:	cb 01       	movw	r24, r22
    75ca:	9a 87       	std	Y+10, r25	; 0x0a
    75cc:	89 87       	std	Y+9, r24	; 0x09
    75ce:	89 85       	ldd	r24, Y+9	; 0x09
    75d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    75d2:	9e 87       	std	Y+14, r25	; 0x0e
    75d4:	8d 87       	std	Y+13, r24	; 0x0d
    75d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    75d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    75da:	8c 01       	movw	r16, r24
    75dc:	f8 01       	movw	r30, r16
    75de:	31 97       	sbiw	r30, 0x01	; 1
    75e0:	f1 f7       	brne	.-4      	; 0x75de <send_to_pc+0x120>
    75e2:	8f 01       	movw	r16, r30
    75e4:	1e 87       	std	Y+14, r17	; 0x0e
    75e6:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(100);
	UDR0=obstacle_found;
    75e8:	86 ec       	ldi	r24, 0xC6	; 198
    75ea:	90 e0       	ldi	r25, 0x00	; 0
    75ec:	20 91 0a 02 	lds	r18, 0x020A
    75f0:	30 91 0b 02 	lds	r19, 0x020B
    75f4:	fc 01       	movw	r30, r24
    75f6:	20 83       	st	Z, r18
    75f8:	80 e0       	ldi	r24, 0x00	; 0
    75fa:	90 e0       	ldi	r25, 0x00	; 0
    75fc:	a8 ec       	ldi	r26, 0xC8	; 200
    75fe:	b2 e4       	ldi	r27, 0x42	; 66
    7600:	8f 87       	std	Y+15, r24	; 0x0f
    7602:	98 8b       	std	Y+16, r25	; 0x10
    7604:	a9 8b       	std	Y+17, r26	; 0x11
    7606:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7608:	6f 85       	ldd	r22, Y+15	; 0x0f
    760a:	78 89       	ldd	r23, Y+16	; 0x10
    760c:	89 89       	ldd	r24, Y+17	; 0x11
    760e:	9a 89       	ldd	r25, Y+18	; 0x12
    7610:	26 e6       	ldi	r18, 0x66	; 102
    7612:	36 e6       	ldi	r19, 0x66	; 102
    7614:	46 e6       	ldi	r20, 0x66	; 102
    7616:	55 e4       	ldi	r21, 0x45	; 69
    7618:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    761c:	dc 01       	movw	r26, r24
    761e:	cb 01       	movw	r24, r22
    7620:	8b 8b       	std	Y+19, r24	; 0x13
    7622:	9c 8b       	std	Y+20, r25	; 0x14
    7624:	ad 8b       	std	Y+21, r26	; 0x15
    7626:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    7628:	11 e0       	ldi	r17, 0x01	; 1
    762a:	6b 89       	ldd	r22, Y+19	; 0x13
    762c:	7c 89       	ldd	r23, Y+20	; 0x14
    762e:	8d 89       	ldd	r24, Y+21	; 0x15
    7630:	9e 89       	ldd	r25, Y+22	; 0x16
    7632:	20 e0       	ldi	r18, 0x00	; 0
    7634:	30 e0       	ldi	r19, 0x00	; 0
    7636:	40 e8       	ldi	r20, 0x80	; 128
    7638:	5f e3       	ldi	r21, 0x3F	; 63
    763a:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    763e:	88 23       	and	r24, r24
    7640:	0c f0       	brlt	.+2      	; 0x7644 <send_to_pc+0x186>
    7642:	10 e0       	ldi	r17, 0x00	; 0
    7644:	11 23       	and	r17, r17
    7646:	29 f0       	breq	.+10     	; 0x7652 <send_to_pc+0x194>
		__ticks = 1;
    7648:	81 e0       	ldi	r24, 0x01	; 1
    764a:	90 e0       	ldi	r25, 0x00	; 0
    764c:	98 8f       	std	Y+24, r25	; 0x18
    764e:	8f 8b       	std	Y+23, r24	; 0x17
    7650:	46 c0       	rjmp	.+140    	; 0x76de <send_to_pc+0x220>
	else if (__tmp > 65535)
    7652:	11 e0       	ldi	r17, 0x01	; 1
    7654:	6b 89       	ldd	r22, Y+19	; 0x13
    7656:	7c 89       	ldd	r23, Y+20	; 0x14
    7658:	8d 89       	ldd	r24, Y+21	; 0x15
    765a:	9e 89       	ldd	r25, Y+22	; 0x16
    765c:	20 e0       	ldi	r18, 0x00	; 0
    765e:	3f ef       	ldi	r19, 0xFF	; 255
    7660:	4f e7       	ldi	r20, 0x7F	; 127
    7662:	57 e4       	ldi	r21, 0x47	; 71
    7664:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    7668:	18 16       	cp	r1, r24
    766a:	0c f0       	brlt	.+2      	; 0x766e <send_to_pc+0x1b0>
    766c:	10 e0       	ldi	r17, 0x00	; 0
    766e:	11 23       	and	r17, r17
    7670:	61 f1       	breq	.+88     	; 0x76ca <send_to_pc+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7672:	6f 85       	ldd	r22, Y+15	; 0x0f
    7674:	78 89       	ldd	r23, Y+16	; 0x10
    7676:	89 89       	ldd	r24, Y+17	; 0x11
    7678:	9a 89       	ldd	r25, Y+18	; 0x12
    767a:	20 e0       	ldi	r18, 0x00	; 0
    767c:	30 e0       	ldi	r19, 0x00	; 0
    767e:	40 e2       	ldi	r20, 0x20	; 32
    7680:	51 e4       	ldi	r21, 0x41	; 65
    7682:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    7686:	dc 01       	movw	r26, r24
    7688:	cb 01       	movw	r24, r22
    768a:	bc 01       	movw	r22, r24
    768c:	cd 01       	movw	r24, r26
    768e:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    7692:	dc 01       	movw	r26, r24
    7694:	cb 01       	movw	r24, r22
    7696:	98 8f       	std	Y+24, r25	; 0x18
    7698:	8f 8b       	std	Y+23, r24	; 0x17
    769a:	12 c0       	rjmp	.+36     	; 0x76c0 <send_to_pc+0x202>
    769c:	80 e7       	ldi	r24, 0x70	; 112
    769e:	91 e0       	ldi	r25, 0x01	; 1
    76a0:	9a 8f       	std	Y+26, r25	; 0x1a
    76a2:	89 8f       	std	Y+25, r24	; 0x19
    76a4:	89 8d       	ldd	r24, Y+25	; 0x19
    76a6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    76a8:	8c 01       	movw	r16, r24
    76aa:	c8 01       	movw	r24, r16
    76ac:	01 97       	sbiw	r24, 0x01	; 1
    76ae:	f1 f7       	brne	.-4      	; 0x76ac <send_to_pc+0x1ee>
    76b0:	8c 01       	movw	r16, r24
    76b2:	1a 8f       	std	Y+26, r17	; 0x1a
    76b4:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    76b6:	8f 89       	ldd	r24, Y+23	; 0x17
    76b8:	98 8d       	ldd	r25, Y+24	; 0x18
    76ba:	01 97       	sbiw	r24, 0x01	; 1
    76bc:	98 8f       	std	Y+24, r25	; 0x18
    76be:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    76c0:	8f 89       	ldd	r24, Y+23	; 0x17
    76c2:	98 8d       	ldd	r25, Y+24	; 0x18
    76c4:	00 97       	sbiw	r24, 0x00	; 0
    76c6:	51 f7       	brne	.-44     	; 0x769c <send_to_pc+0x1de>
    76c8:	17 c0       	rjmp	.+46     	; 0x76f8 <send_to_pc+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    76ca:	6b 89       	ldd	r22, Y+19	; 0x13
    76cc:	7c 89       	ldd	r23, Y+20	; 0x14
    76ce:	8d 89       	ldd	r24, Y+21	; 0x15
    76d0:	9e 89       	ldd	r25, Y+22	; 0x16
    76d2:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    76d6:	dc 01       	movw	r26, r24
    76d8:	cb 01       	movw	r24, r22
    76da:	98 8f       	std	Y+24, r25	; 0x18
    76dc:	8f 8b       	std	Y+23, r24	; 0x17
    76de:	8f 89       	ldd	r24, Y+23	; 0x17
    76e0:	98 8d       	ldd	r25, Y+24	; 0x18
    76e2:	9c 8f       	std	Y+28, r25	; 0x1c
    76e4:	8b 8f       	std	Y+27, r24	; 0x1b
    76e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    76e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    76ea:	8c 01       	movw	r16, r24
    76ec:	f8 01       	movw	r30, r16
    76ee:	31 97       	sbiw	r30, 0x01	; 1
    76f0:	f1 f7       	brne	.-4      	; 0x76ee <send_to_pc+0x230>
    76f2:	8f 01       	movw	r16, r30
    76f4:	1c 8f       	std	Y+28, r17	; 0x1c
    76f6:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(100);
	UDR0=left_object_type;
    76f8:	86 ec       	ldi	r24, 0xC6	; 198
    76fa:	90 e0       	ldi	r25, 0x00	; 0
    76fc:	20 91 06 02 	lds	r18, 0x0206
    7700:	30 91 07 02 	lds	r19, 0x0207
    7704:	fc 01       	movw	r30, r24
    7706:	20 83       	st	Z, r18
    7708:	80 e0       	ldi	r24, 0x00	; 0
    770a:	90 e0       	ldi	r25, 0x00	; 0
    770c:	a8 ec       	ldi	r26, 0xC8	; 200
    770e:	b2 e4       	ldi	r27, 0x42	; 66
    7710:	8d 8f       	std	Y+29, r24	; 0x1d
    7712:	9e 8f       	std	Y+30, r25	; 0x1e
    7714:	af 8f       	std	Y+31, r26	; 0x1f
    7716:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7718:	6d 8d       	ldd	r22, Y+29	; 0x1d
    771a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    771c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    771e:	98 a1       	lds	r25, 0x48
    7720:	26 e6       	ldi	r18, 0x66	; 102
    7722:	36 e6       	ldi	r19, 0x66	; 102
    7724:	46 e6       	ldi	r20, 0x66	; 102
    7726:	55 e4       	ldi	r21, 0x45	; 69
    7728:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    772c:	dc 01       	movw	r26, r24
    772e:	cb 01       	movw	r24, r22
    7730:	89 a3       	lds	r24, 0x59
    7732:	9a a3       	lds	r25, 0x5a
    7734:	ab a3       	lds	r26, 0x5b
    7736:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    7738:	11 e0       	ldi	r17, 0x01	; 1
    773a:	69 a1       	lds	r22, 0x49
    773c:	7a a1       	lds	r23, 0x4a
    773e:	8b a1       	lds	r24, 0x4b
    7740:	9c a1       	lds	r25, 0x4c
    7742:	20 e0       	ldi	r18, 0x00	; 0
    7744:	30 e0       	ldi	r19, 0x00	; 0
    7746:	40 e8       	ldi	r20, 0x80	; 128
    7748:	5f e3       	ldi	r21, 0x3F	; 63
    774a:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    774e:	88 23       	and	r24, r24
    7750:	0c f0       	brlt	.+2      	; 0x7754 <send_to_pc+0x296>
    7752:	10 e0       	ldi	r17, 0x00	; 0
    7754:	11 23       	and	r17, r17
    7756:	29 f0       	breq	.+10     	; 0x7762 <send_to_pc+0x2a4>
		__ticks = 1;
    7758:	81 e0       	ldi	r24, 0x01	; 1
    775a:	90 e0       	ldi	r25, 0x00	; 0
    775c:	9e a3       	lds	r25, 0x5e
    775e:	8d a3       	lds	r24, 0x5d
    7760:	46 c0       	rjmp	.+140    	; 0x77ee <send_to_pc+0x330>
	else if (__tmp > 65535)
    7762:	11 e0       	ldi	r17, 0x01	; 1
    7764:	69 a1       	lds	r22, 0x49
    7766:	7a a1       	lds	r23, 0x4a
    7768:	8b a1       	lds	r24, 0x4b
    776a:	9c a1       	lds	r25, 0x4c
    776c:	20 e0       	ldi	r18, 0x00	; 0
    776e:	3f ef       	ldi	r19, 0xFF	; 255
    7770:	4f e7       	ldi	r20, 0x7F	; 127
    7772:	57 e4       	ldi	r21, 0x47	; 71
    7774:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    7778:	18 16       	cp	r1, r24
    777a:	0c f0       	brlt	.+2      	; 0x777e <send_to_pc+0x2c0>
    777c:	10 e0       	ldi	r17, 0x00	; 0
    777e:	11 23       	and	r17, r17
    7780:	61 f1       	breq	.+88     	; 0x77da <send_to_pc+0x31c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7782:	6d 8d       	ldd	r22, Y+29	; 0x1d
    7784:	7e 8d       	ldd	r23, Y+30	; 0x1e
    7786:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7788:	98 a1       	lds	r25, 0x48
    778a:	20 e0       	ldi	r18, 0x00	; 0
    778c:	30 e0       	ldi	r19, 0x00	; 0
    778e:	40 e2       	ldi	r20, 0x20	; 32
    7790:	51 e4       	ldi	r21, 0x41	; 65
    7792:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    7796:	dc 01       	movw	r26, r24
    7798:	cb 01       	movw	r24, r22
    779a:	bc 01       	movw	r22, r24
    779c:	cd 01       	movw	r24, r26
    779e:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    77a2:	dc 01       	movw	r26, r24
    77a4:	cb 01       	movw	r24, r22
    77a6:	9e a3       	lds	r25, 0x5e
    77a8:	8d a3       	lds	r24, 0x5d
    77aa:	12 c0       	rjmp	.+36     	; 0x77d0 <send_to_pc+0x312>
    77ac:	80 e7       	ldi	r24, 0x70	; 112
    77ae:	91 e0       	ldi	r25, 0x01	; 1
    77b0:	98 a7       	lds	r25, 0x78
    77b2:	8f a3       	lds	r24, 0x5f
    77b4:	8f a1       	lds	r24, 0x4f
    77b6:	98 a5       	lds	r25, 0x68
    77b8:	8c 01       	movw	r16, r24
    77ba:	c8 01       	movw	r24, r16
    77bc:	01 97       	sbiw	r24, 0x01	; 1
    77be:	f1 f7       	brne	.-4      	; 0x77bc <send_to_pc+0x2fe>
    77c0:	8c 01       	movw	r16, r24
    77c2:	18 a7       	lds	r17, 0x78
    77c4:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    77c6:	8d a1       	lds	r24, 0x4d
    77c8:	9e a1       	lds	r25, 0x4e
    77ca:	01 97       	sbiw	r24, 0x01	; 1
    77cc:	9e a3       	lds	r25, 0x5e
    77ce:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    77d0:	8d a1       	lds	r24, 0x4d
    77d2:	9e a1       	lds	r25, 0x4e
    77d4:	00 97       	sbiw	r24, 0x00	; 0
    77d6:	51 f7       	brne	.-44     	; 0x77ac <send_to_pc+0x2ee>
    77d8:	17 c0       	rjmp	.+46     	; 0x7808 <send_to_pc+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    77da:	69 a1       	lds	r22, 0x49
    77dc:	7a a1       	lds	r23, 0x4a
    77de:	8b a1       	lds	r24, 0x4b
    77e0:	9c a1       	lds	r25, 0x4c
    77e2:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    77e6:	dc 01       	movw	r26, r24
    77e8:	cb 01       	movw	r24, r22
    77ea:	9e a3       	lds	r25, 0x5e
    77ec:	8d a3       	lds	r24, 0x5d
    77ee:	8d a1       	lds	r24, 0x4d
    77f0:	9e a1       	lds	r25, 0x4e
    77f2:	9a a7       	lds	r25, 0x7a
    77f4:	89 a7       	lds	r24, 0x79
    77f6:	89 a5       	lds	r24, 0x69
    77f8:	9a a5       	lds	r25, 0x6a
    77fa:	8c 01       	movw	r16, r24
    77fc:	f8 01       	movw	r30, r16
    77fe:	31 97       	sbiw	r30, 0x01	; 1
    7800:	f1 f7       	brne	.-4      	; 0x77fe <send_to_pc+0x340>
    7802:	8f 01       	movw	r16, r30
    7804:	1a a7       	lds	r17, 0x7a
    7806:	09 a7       	lds	r16, 0x79
	_delay_ms(100);
	UDR0=right_object_type;
    7808:	86 ec       	ldi	r24, 0xC6	; 198
    780a:	90 e0       	ldi	r25, 0x00	; 0
    780c:	20 91 08 02 	lds	r18, 0x0208
    7810:	30 91 09 02 	lds	r19, 0x0209
    7814:	fc 01       	movw	r30, r24
    7816:	20 83       	st	Z, r18
    7818:	80 e0       	ldi	r24, 0x00	; 0
    781a:	90 e0       	ldi	r25, 0x00	; 0
    781c:	a8 ec       	ldi	r26, 0xC8	; 200
    781e:	b2 e4       	ldi	r27, 0x42	; 66
    7820:	8b a7       	lds	r24, 0x7b
    7822:	9c a7       	lds	r25, 0x7c
    7824:	ad a7       	lds	r26, 0x7d
    7826:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7828:	6b a5       	lds	r22, 0x6b
    782a:	7c a5       	lds	r23, 0x6c
    782c:	8d a5       	lds	r24, 0x6d
    782e:	9e a5       	lds	r25, 0x6e
    7830:	26 e6       	ldi	r18, 0x66	; 102
    7832:	36 e6       	ldi	r19, 0x66	; 102
    7834:	46 e6       	ldi	r20, 0x66	; 102
    7836:	55 e4       	ldi	r21, 0x45	; 69
    7838:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    783c:	dc 01       	movw	r26, r24
    783e:	cb 01       	movw	r24, r22
    7840:	8f a7       	lds	r24, 0x7f
    7842:	98 ab       	sts	0x58, r25
    7844:	a9 ab       	sts	0x59, r26
    7846:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    7848:	11 e0       	ldi	r17, 0x01	; 1
    784a:	6f a5       	lds	r22, 0x6f
    784c:	78 a9       	sts	0x48, r23
    784e:	89 a9       	sts	0x49, r24
    7850:	9a a9       	sts	0x4a, r25
    7852:	20 e0       	ldi	r18, 0x00	; 0
    7854:	30 e0       	ldi	r19, 0x00	; 0
    7856:	40 e8       	ldi	r20, 0x80	; 128
    7858:	5f e3       	ldi	r21, 0x3F	; 63
    785a:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    785e:	88 23       	and	r24, r24
    7860:	0c f0       	brlt	.+2      	; 0x7864 <send_to_pc+0x3a6>
    7862:	10 e0       	ldi	r17, 0x00	; 0
    7864:	11 23       	and	r17, r17
    7866:	29 f0       	breq	.+10     	; 0x7872 <send_to_pc+0x3b4>
		__ticks = 1;
    7868:	81 e0       	ldi	r24, 0x01	; 1
    786a:	90 e0       	ldi	r25, 0x00	; 0
    786c:	9c ab       	sts	0x5c, r25
    786e:	8b ab       	sts	0x5b, r24
    7870:	46 c0       	rjmp	.+140    	; 0x78fe <send_to_pc+0x440>
	else if (__tmp > 65535)
    7872:	11 e0       	ldi	r17, 0x01	; 1
    7874:	6f a5       	lds	r22, 0x6f
    7876:	78 a9       	sts	0x48, r23
    7878:	89 a9       	sts	0x49, r24
    787a:	9a a9       	sts	0x4a, r25
    787c:	20 e0       	ldi	r18, 0x00	; 0
    787e:	3f ef       	ldi	r19, 0xFF	; 255
    7880:	4f e7       	ldi	r20, 0x7F	; 127
    7882:	57 e4       	ldi	r21, 0x47	; 71
    7884:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    7888:	18 16       	cp	r1, r24
    788a:	0c f0       	brlt	.+2      	; 0x788e <send_to_pc+0x3d0>
    788c:	10 e0       	ldi	r17, 0x00	; 0
    788e:	11 23       	and	r17, r17
    7890:	61 f1       	breq	.+88     	; 0x78ea <send_to_pc+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7892:	6b a5       	lds	r22, 0x6b
    7894:	7c a5       	lds	r23, 0x6c
    7896:	8d a5       	lds	r24, 0x6d
    7898:	9e a5       	lds	r25, 0x6e
    789a:	20 e0       	ldi	r18, 0x00	; 0
    789c:	30 e0       	ldi	r19, 0x00	; 0
    789e:	40 e2       	ldi	r20, 0x20	; 32
    78a0:	51 e4       	ldi	r21, 0x41	; 65
    78a2:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    78a6:	dc 01       	movw	r26, r24
    78a8:	cb 01       	movw	r24, r22
    78aa:	bc 01       	movw	r22, r24
    78ac:	cd 01       	movw	r24, r26
    78ae:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    78b2:	dc 01       	movw	r26, r24
    78b4:	cb 01       	movw	r24, r22
    78b6:	9c ab       	sts	0x5c, r25
    78b8:	8b ab       	sts	0x5b, r24
    78ba:	12 c0       	rjmp	.+36     	; 0x78e0 <send_to_pc+0x422>
    78bc:	80 e7       	ldi	r24, 0x70	; 112
    78be:	91 e0       	ldi	r25, 0x01	; 1
    78c0:	9e ab       	sts	0x5e, r25
    78c2:	8d ab       	sts	0x5d, r24
    78c4:	8d a9       	sts	0x4d, r24
    78c6:	9e a9       	sts	0x4e, r25
    78c8:	8c 01       	movw	r16, r24
    78ca:	c8 01       	movw	r24, r16
    78cc:	01 97       	sbiw	r24, 0x01	; 1
    78ce:	f1 f7       	brne	.-4      	; 0x78cc <send_to_pc+0x40e>
    78d0:	8c 01       	movw	r16, r24
    78d2:	1e ab       	sts	0x5e, r17
    78d4:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    78d6:	8b a9       	sts	0x4b, r24
    78d8:	9c a9       	sts	0x4c, r25
    78da:	01 97       	sbiw	r24, 0x01	; 1
    78dc:	9c ab       	sts	0x5c, r25
    78de:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    78e0:	8b a9       	sts	0x4b, r24
    78e2:	9c a9       	sts	0x4c, r25
    78e4:	00 97       	sbiw	r24, 0x00	; 0
    78e6:	51 f7       	brne	.-44     	; 0x78bc <send_to_pc+0x3fe>
    78e8:	17 c0       	rjmp	.+46     	; 0x7918 <send_to_pc+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    78ea:	6f a5       	lds	r22, 0x6f
    78ec:	78 a9       	sts	0x48, r23
    78ee:	89 a9       	sts	0x49, r24
    78f0:	9a a9       	sts	0x4a, r25
    78f2:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    78f6:	dc 01       	movw	r26, r24
    78f8:	cb 01       	movw	r24, r22
    78fa:	9c ab       	sts	0x5c, r25
    78fc:	8b ab       	sts	0x5b, r24
    78fe:	8b a9       	sts	0x4b, r24
    7900:	9c a9       	sts	0x4c, r25
    7902:	98 af       	sts	0x78, r25
    7904:	8f ab       	sts	0x5f, r24
    7906:	8f a9       	sts	0x4f, r24
    7908:	98 ad       	sts	0x68, r25
    790a:	8c 01       	movw	r16, r24
    790c:	f8 01       	movw	r30, r16
    790e:	31 97       	sbiw	r30, 0x01	; 1
    7910:	f1 f7       	brne	.-4      	; 0x790e <send_to_pc+0x450>
    7912:	8f 01       	movw	r16, r30
    7914:	18 af       	sts	0x78, r17
    7916:	0f ab       	sts	0x5f, r16
	_delay_ms(100);
	UDR0=shape_type;
    7918:	86 ec       	ldi	r24, 0xC6	; 198
    791a:	90 e0       	ldi	r25, 0x00	; 0
    791c:	20 91 05 02 	lds	r18, 0x0205
    7920:	fc 01       	movw	r30, r24
    7922:	20 83       	st	Z, r18
    7924:	80 e0       	ldi	r24, 0x00	; 0
    7926:	90 e0       	ldi	r25, 0x00	; 0
    7928:	a8 ec       	ldi	r26, 0xC8	; 200
    792a:	b2 e4       	ldi	r27, 0x42	; 66
    792c:	89 af       	sts	0x79, r24
    792e:	9a af       	sts	0x7a, r25
    7930:	ab af       	sts	0x7b, r26
    7932:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7934:	69 ad       	sts	0x69, r22
    7936:	7a ad       	sts	0x6a, r23
    7938:	8b ad       	sts	0x6b, r24
    793a:	9c ad       	sts	0x6c, r25
    793c:	26 e6       	ldi	r18, 0x66	; 102
    793e:	36 e6       	ldi	r19, 0x66	; 102
    7940:	46 e6       	ldi	r20, 0x66	; 102
    7942:	55 e4       	ldi	r21, 0x45	; 69
    7944:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    7948:	dc 01       	movw	r26, r24
    794a:	cb 01       	movw	r24, r22
    794c:	9e 01       	movw	r18, r28
    794e:	23 5c       	subi	r18, 0xC3	; 195
    7950:	3f 4f       	sbci	r19, 0xFF	; 255
    7952:	f9 01       	movw	r30, r18
    7954:	80 83       	st	Z, r24
    7956:	91 83       	std	Z+1, r25	; 0x01
    7958:	a2 83       	std	Z+2, r26	; 0x02
    795a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    795c:	11 e0       	ldi	r17, 0x01	; 1
    795e:	ce 01       	movw	r24, r28
    7960:	cd 96       	adiw	r24, 0x3d	; 61
    7962:	fc 01       	movw	r30, r24
    7964:	60 81       	ld	r22, Z
    7966:	71 81       	ldd	r23, Z+1	; 0x01
    7968:	82 81       	ldd	r24, Z+2	; 0x02
    796a:	93 81       	ldd	r25, Z+3	; 0x03
    796c:	20 e0       	ldi	r18, 0x00	; 0
    796e:	30 e0       	ldi	r19, 0x00	; 0
    7970:	40 e8       	ldi	r20, 0x80	; 128
    7972:	5f e3       	ldi	r21, 0x3F	; 63
    7974:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    7978:	88 23       	and	r24, r24
    797a:	0c f0       	brlt	.+2      	; 0x797e <send_to_pc+0x4c0>
    797c:	10 e0       	ldi	r17, 0x00	; 0
    797e:	11 23       	and	r17, r17
    7980:	49 f0       	breq	.+18     	; 0x7994 <send_to_pc+0x4d6>
		__ticks = 1;
    7982:	ce 01       	movw	r24, r28
    7984:	8f 5b       	subi	r24, 0xBF	; 191
    7986:	9f 4f       	sbci	r25, 0xFF	; 255
    7988:	21 e0       	ldi	r18, 0x01	; 1
    798a:	30 e0       	ldi	r19, 0x00	; 0
    798c:	fc 01       	movw	r30, r24
    798e:	31 83       	std	Z+1, r19	; 0x01
    7990:	20 83       	st	Z, r18
    7992:	6e c0       	rjmp	.+220    	; 0x7a70 <send_to_pc+0x5b2>
	else if (__tmp > 65535)
    7994:	11 e0       	ldi	r17, 0x01	; 1
    7996:	ce 01       	movw	r24, r28
    7998:	cd 96       	adiw	r24, 0x3d	; 61
    799a:	fc 01       	movw	r30, r24
    799c:	60 81       	ld	r22, Z
    799e:	71 81       	ldd	r23, Z+1	; 0x01
    79a0:	82 81       	ldd	r24, Z+2	; 0x02
    79a2:	93 81       	ldd	r25, Z+3	; 0x03
    79a4:	20 e0       	ldi	r18, 0x00	; 0
    79a6:	3f ef       	ldi	r19, 0xFF	; 255
    79a8:	4f e7       	ldi	r20, 0x7F	; 127
    79aa:	57 e4       	ldi	r21, 0x47	; 71
    79ac:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    79b0:	18 16       	cp	r1, r24
    79b2:	0c f0       	brlt	.+2      	; 0x79b6 <send_to_pc+0x4f8>
    79b4:	10 e0       	ldi	r17, 0x00	; 0
    79b6:	11 23       	and	r17, r17
    79b8:	09 f4       	brne	.+2      	; 0x79bc <send_to_pc+0x4fe>
    79ba:	49 c0       	rjmp	.+146    	; 0x7a4e <send_to_pc+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    79bc:	69 ad       	sts	0x69, r22
    79be:	7a ad       	sts	0x6a, r23
    79c0:	8b ad       	sts	0x6b, r24
    79c2:	9c ad       	sts	0x6c, r25
    79c4:	20 e0       	ldi	r18, 0x00	; 0
    79c6:	30 e0       	ldi	r19, 0x00	; 0
    79c8:	40 e2       	ldi	r20, 0x20	; 32
    79ca:	51 e4       	ldi	r21, 0x41	; 65
    79cc:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    79d0:	dc 01       	movw	r26, r24
    79d2:	cb 01       	movw	r24, r22
    79d4:	8e 01       	movw	r16, r28
    79d6:	0f 5b       	subi	r16, 0xBF	; 191
    79d8:	1f 4f       	sbci	r17, 0xFF	; 255
    79da:	bc 01       	movw	r22, r24
    79dc:	cd 01       	movw	r24, r26
    79de:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    79e2:	dc 01       	movw	r26, r24
    79e4:	cb 01       	movw	r24, r22
    79e6:	f8 01       	movw	r30, r16
    79e8:	91 83       	std	Z+1, r25	; 0x01
    79ea:	80 83       	st	Z, r24
    79ec:	27 c0       	rjmp	.+78     	; 0x7a3c <send_to_pc+0x57e>
    79ee:	ce 01       	movw	r24, r28
    79f0:	8d 5b       	subi	r24, 0xBD	; 189
    79f2:	9f 4f       	sbci	r25, 0xFF	; 255
    79f4:	20 e7       	ldi	r18, 0x70	; 112
    79f6:	31 e0       	ldi	r19, 0x01	; 1
    79f8:	fc 01       	movw	r30, r24
    79fa:	31 83       	std	Z+1, r19	; 0x01
    79fc:	20 83       	st	Z, r18
    79fe:	ce 01       	movw	r24, r28
    7a00:	8d 5b       	subi	r24, 0xBD	; 189
    7a02:	9f 4f       	sbci	r25, 0xFF	; 255
    7a04:	fc 01       	movw	r30, r24
    7a06:	80 81       	ld	r24, Z
    7a08:	91 81       	ldd	r25, Z+1	; 0x01
    7a0a:	8c 01       	movw	r16, r24
    7a0c:	c8 01       	movw	r24, r16
    7a0e:	01 97       	sbiw	r24, 0x01	; 1
    7a10:	f1 f7       	brne	.-4      	; 0x7a0e <send_to_pc+0x550>
    7a12:	8c 01       	movw	r16, r24
    7a14:	ce 01       	movw	r24, r28
    7a16:	8d 5b       	subi	r24, 0xBD	; 189
    7a18:	9f 4f       	sbci	r25, 0xFF	; 255
    7a1a:	fc 01       	movw	r30, r24
    7a1c:	11 83       	std	Z+1, r17	; 0x01
    7a1e:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7a20:	ce 01       	movw	r24, r28
    7a22:	8f 5b       	subi	r24, 0xBF	; 191
    7a24:	9f 4f       	sbci	r25, 0xFF	; 255
    7a26:	9e 01       	movw	r18, r28
    7a28:	2f 5b       	subi	r18, 0xBF	; 191
    7a2a:	3f 4f       	sbci	r19, 0xFF	; 255
    7a2c:	f9 01       	movw	r30, r18
    7a2e:	20 81       	ld	r18, Z
    7a30:	31 81       	ldd	r19, Z+1	; 0x01
    7a32:	21 50       	subi	r18, 0x01	; 1
    7a34:	30 40       	sbci	r19, 0x00	; 0
    7a36:	fc 01       	movw	r30, r24
    7a38:	31 83       	std	Z+1, r19	; 0x01
    7a3a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7a3c:	ce 01       	movw	r24, r28
    7a3e:	8f 5b       	subi	r24, 0xBF	; 191
    7a40:	9f 4f       	sbci	r25, 0xFF	; 255
    7a42:	fc 01       	movw	r30, r24
    7a44:	80 81       	ld	r24, Z
    7a46:	91 81       	ldd	r25, Z+1	; 0x01
    7a48:	00 97       	sbiw	r24, 0x00	; 0
    7a4a:	89 f6       	brne	.-94     	; 0x79ee <send_to_pc+0x530>
    7a4c:	2e c0       	rjmp	.+92     	; 0x7aaa <send_to_pc+0x5ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7a4e:	8e 01       	movw	r16, r28
    7a50:	0f 5b       	subi	r16, 0xBF	; 191
    7a52:	1f 4f       	sbci	r17, 0xFF	; 255
    7a54:	ce 01       	movw	r24, r28
    7a56:	cd 96       	adiw	r24, 0x3d	; 61
    7a58:	fc 01       	movw	r30, r24
    7a5a:	60 81       	ld	r22, Z
    7a5c:	71 81       	ldd	r23, Z+1	; 0x01
    7a5e:	82 81       	ldd	r24, Z+2	; 0x02
    7a60:	93 81       	ldd	r25, Z+3	; 0x03
    7a62:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    7a66:	dc 01       	movw	r26, r24
    7a68:	cb 01       	movw	r24, r22
    7a6a:	f8 01       	movw	r30, r16
    7a6c:	91 83       	std	Z+1, r25	; 0x01
    7a6e:	80 83       	st	Z, r24
    7a70:	ce 01       	movw	r24, r28
    7a72:	8b 5b       	subi	r24, 0xBB	; 187
    7a74:	9f 4f       	sbci	r25, 0xFF	; 255
    7a76:	9e 01       	movw	r18, r28
    7a78:	2f 5b       	subi	r18, 0xBF	; 191
    7a7a:	3f 4f       	sbci	r19, 0xFF	; 255
    7a7c:	f9 01       	movw	r30, r18
    7a7e:	20 81       	ld	r18, Z
    7a80:	31 81       	ldd	r19, Z+1	; 0x01
    7a82:	fc 01       	movw	r30, r24
    7a84:	31 83       	std	Z+1, r19	; 0x01
    7a86:	20 83       	st	Z, r18
    7a88:	ce 01       	movw	r24, r28
    7a8a:	8b 5b       	subi	r24, 0xBB	; 187
    7a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    7a8e:	fc 01       	movw	r30, r24
    7a90:	80 81       	ld	r24, Z
    7a92:	91 81       	ldd	r25, Z+1	; 0x01
    7a94:	8c 01       	movw	r16, r24
    7a96:	c8 01       	movw	r24, r16
    7a98:	01 97       	sbiw	r24, 0x01	; 1
    7a9a:	f1 f7       	brne	.-4      	; 0x7a98 <send_to_pc+0x5da>
    7a9c:	8c 01       	movw	r16, r24
    7a9e:	ce 01       	movw	r24, r28
    7aa0:	8b 5b       	subi	r24, 0xBB	; 187
    7aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    7aa4:	fc 01       	movw	r30, r24
    7aa6:	11 83       	std	Z+1, r17	; 0x01
    7aa8:	00 83       	st	Z, r16
	_delay_ms(100);
	UDR0=' ';
    7aaa:	86 ec       	ldi	r24, 0xC6	; 198
    7aac:	90 e0       	ldi	r25, 0x00	; 0
    7aae:	20 e2       	ldi	r18, 0x20	; 32
    7ab0:	fc 01       	movw	r30, r24
    7ab2:	20 83       	st	Z, r18
	UDR0=' ';
    7ab4:	86 ec       	ldi	r24, 0xC6	; 198
    7ab6:	90 e0       	ldi	r25, 0x00	; 0
    7ab8:	20 e2       	ldi	r18, 0x20	; 32
    7aba:	fc 01       	movw	r30, r24
    7abc:	20 83       	st	Z, r18
	if(flag_Shape == 1)
    7abe:	80 91 28 02 	lds	r24, 0x0228
    7ac2:	81 30       	cpi	r24, 0x01	; 1
    7ac4:	09 f0       	breq	.+2      	; 0x7ac8 <send_to_pc+0x60a>
    7ac6:	d3 c0       	rjmp	.+422    	; 0x7c6e <send_to_pc+0x7b0>
    7ac8:	9e 01       	movw	r18, r28
    7aca:	29 5b       	subi	r18, 0xB9	; 185
    7acc:	3f 4f       	sbci	r19, 0xFF	; 255
    7ace:	80 e0       	ldi	r24, 0x00	; 0
    7ad0:	90 e8       	ldi	r25, 0x80	; 128
    7ad2:	ab eb       	ldi	r26, 0xBB	; 187
    7ad4:	b4 e4       	ldi	r27, 0x44	; 68
    7ad6:	f9 01       	movw	r30, r18
    7ad8:	80 83       	st	Z, r24
    7ada:	91 83       	std	Z+1, r25	; 0x01
    7adc:	a2 83       	std	Z+2, r26	; 0x02
    7ade:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7ae0:	8e 01       	movw	r16, r28
    7ae2:	05 5b       	subi	r16, 0xB5	; 181
    7ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    7ae6:	ce 01       	movw	r24, r28
    7ae8:	89 5b       	subi	r24, 0xB9	; 185
    7aea:	9f 4f       	sbci	r25, 0xFF	; 255
    7aec:	fc 01       	movw	r30, r24
    7aee:	60 81       	ld	r22, Z
    7af0:	71 81       	ldd	r23, Z+1	; 0x01
    7af2:	82 81       	ldd	r24, Z+2	; 0x02
    7af4:	93 81       	ldd	r25, Z+3	; 0x03
    7af6:	26 e6       	ldi	r18, 0x66	; 102
    7af8:	36 e6       	ldi	r19, 0x66	; 102
    7afa:	46 e6       	ldi	r20, 0x66	; 102
    7afc:	55 e4       	ldi	r21, 0x45	; 69
    7afe:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    7b02:	dc 01       	movw	r26, r24
    7b04:	cb 01       	movw	r24, r22
    7b06:	f8 01       	movw	r30, r16
    7b08:	80 83       	st	Z, r24
    7b0a:	91 83       	std	Z+1, r25	; 0x01
    7b0c:	a2 83       	std	Z+2, r26	; 0x02
    7b0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7b10:	ce 01       	movw	r24, r28
    7b12:	85 5b       	subi	r24, 0xB5	; 181
    7b14:	9f 4f       	sbci	r25, 0xFF	; 255
    7b16:	11 e0       	ldi	r17, 0x01	; 1
    7b18:	fc 01       	movw	r30, r24
    7b1a:	60 81       	ld	r22, Z
    7b1c:	71 81       	ldd	r23, Z+1	; 0x01
    7b1e:	82 81       	ldd	r24, Z+2	; 0x02
    7b20:	93 81       	ldd	r25, Z+3	; 0x03
    7b22:	20 e0       	ldi	r18, 0x00	; 0
    7b24:	30 e0       	ldi	r19, 0x00	; 0
    7b26:	40 e8       	ldi	r20, 0x80	; 128
    7b28:	5f e3       	ldi	r21, 0x3F	; 63
    7b2a:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    7b2e:	88 23       	and	r24, r24
    7b30:	0c f0       	brlt	.+2      	; 0x7b34 <send_to_pc+0x676>
    7b32:	10 e0       	ldi	r17, 0x00	; 0
    7b34:	11 23       	and	r17, r17
    7b36:	49 f0       	breq	.+18     	; 0x7b4a <send_to_pc+0x68c>
		__ticks = 1;
    7b38:	ce 01       	movw	r24, r28
    7b3a:	81 5b       	subi	r24, 0xB1	; 177
    7b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    7b3e:	21 e0       	ldi	r18, 0x01	; 1
    7b40:	30 e0       	ldi	r19, 0x00	; 0
    7b42:	fc 01       	movw	r30, r24
    7b44:	31 83       	std	Z+1, r19	; 0x01
    7b46:	20 83       	st	Z, r18
    7b48:	74 c0       	rjmp	.+232    	; 0x7c32 <send_to_pc+0x774>
	else if (__tmp > 65535)
    7b4a:	ce 01       	movw	r24, r28
    7b4c:	85 5b       	subi	r24, 0xB5	; 181
    7b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    7b50:	11 e0       	ldi	r17, 0x01	; 1
    7b52:	fc 01       	movw	r30, r24
    7b54:	60 81       	ld	r22, Z
    7b56:	71 81       	ldd	r23, Z+1	; 0x01
    7b58:	82 81       	ldd	r24, Z+2	; 0x02
    7b5a:	93 81       	ldd	r25, Z+3	; 0x03
    7b5c:	20 e0       	ldi	r18, 0x00	; 0
    7b5e:	3f ef       	ldi	r19, 0xFF	; 255
    7b60:	4f e7       	ldi	r20, 0x7F	; 127
    7b62:	57 e4       	ldi	r21, 0x47	; 71
    7b64:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    7b68:	18 16       	cp	r1, r24
    7b6a:	0c f0       	brlt	.+2      	; 0x7b6e <send_to_pc+0x6b0>
    7b6c:	10 e0       	ldi	r17, 0x00	; 0
    7b6e:	11 23       	and	r17, r17
    7b70:	09 f4       	brne	.+2      	; 0x7b74 <send_to_pc+0x6b6>
    7b72:	4d c0       	rjmp	.+154    	; 0x7c0e <send_to_pc+0x750>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7b74:	ce 01       	movw	r24, r28
    7b76:	89 5b       	subi	r24, 0xB9	; 185
    7b78:	9f 4f       	sbci	r25, 0xFF	; 255
    7b7a:	fc 01       	movw	r30, r24
    7b7c:	60 81       	ld	r22, Z
    7b7e:	71 81       	ldd	r23, Z+1	; 0x01
    7b80:	82 81       	ldd	r24, Z+2	; 0x02
    7b82:	93 81       	ldd	r25, Z+3	; 0x03
    7b84:	20 e0       	ldi	r18, 0x00	; 0
    7b86:	30 e0       	ldi	r19, 0x00	; 0
    7b88:	40 e2       	ldi	r20, 0x20	; 32
    7b8a:	51 e4       	ldi	r21, 0x41	; 65
    7b8c:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    7b90:	dc 01       	movw	r26, r24
    7b92:	cb 01       	movw	r24, r22
    7b94:	8e 01       	movw	r16, r28
    7b96:	01 5b       	subi	r16, 0xB1	; 177
    7b98:	1f 4f       	sbci	r17, 0xFF	; 255
    7b9a:	bc 01       	movw	r22, r24
    7b9c:	cd 01       	movw	r24, r26
    7b9e:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    7ba2:	dc 01       	movw	r26, r24
    7ba4:	cb 01       	movw	r24, r22
    7ba6:	f8 01       	movw	r30, r16
    7ba8:	91 83       	std	Z+1, r25	; 0x01
    7baa:	80 83       	st	Z, r24
    7bac:	27 c0       	rjmp	.+78     	; 0x7bfc <send_to_pc+0x73e>
    7bae:	ce 01       	movw	r24, r28
    7bb0:	8f 5a       	subi	r24, 0xAF	; 175
    7bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    7bb4:	20 e7       	ldi	r18, 0x70	; 112
    7bb6:	31 e0       	ldi	r19, 0x01	; 1
    7bb8:	fc 01       	movw	r30, r24
    7bba:	31 83       	std	Z+1, r19	; 0x01
    7bbc:	20 83       	st	Z, r18
    7bbe:	ce 01       	movw	r24, r28
    7bc0:	8f 5a       	subi	r24, 0xAF	; 175
    7bc2:	9f 4f       	sbci	r25, 0xFF	; 255
    7bc4:	fc 01       	movw	r30, r24
    7bc6:	80 81       	ld	r24, Z
    7bc8:	91 81       	ldd	r25, Z+1	; 0x01
    7bca:	8c 01       	movw	r16, r24
    7bcc:	c8 01       	movw	r24, r16
    7bce:	01 97       	sbiw	r24, 0x01	; 1
    7bd0:	f1 f7       	brne	.-4      	; 0x7bce <send_to_pc+0x710>
    7bd2:	8c 01       	movw	r16, r24
    7bd4:	ce 01       	movw	r24, r28
    7bd6:	8f 5a       	subi	r24, 0xAF	; 175
    7bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    7bda:	fc 01       	movw	r30, r24
    7bdc:	11 83       	std	Z+1, r17	; 0x01
    7bde:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7be0:	ce 01       	movw	r24, r28
    7be2:	81 5b       	subi	r24, 0xB1	; 177
    7be4:	9f 4f       	sbci	r25, 0xFF	; 255
    7be6:	9e 01       	movw	r18, r28
    7be8:	21 5b       	subi	r18, 0xB1	; 177
    7bea:	3f 4f       	sbci	r19, 0xFF	; 255
    7bec:	f9 01       	movw	r30, r18
    7bee:	20 81       	ld	r18, Z
    7bf0:	31 81       	ldd	r19, Z+1	; 0x01
    7bf2:	21 50       	subi	r18, 0x01	; 1
    7bf4:	30 40       	sbci	r19, 0x00	; 0
    7bf6:	fc 01       	movw	r30, r24
    7bf8:	31 83       	std	Z+1, r19	; 0x01
    7bfa:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7bfc:	ce 01       	movw	r24, r28
    7bfe:	81 5b       	subi	r24, 0xB1	; 177
    7c00:	9f 4f       	sbci	r25, 0xFF	; 255
    7c02:	fc 01       	movw	r30, r24
    7c04:	80 81       	ld	r24, Z
    7c06:	91 81       	ldd	r25, Z+1	; 0x01
    7c08:	00 97       	sbiw	r24, 0x00	; 0
    7c0a:	89 f6       	brne	.-94     	; 0x7bae <send_to_pc+0x6f0>
    7c0c:	02 c1       	rjmp	.+516    	; 0x7e12 <send_to_pc+0x954>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7c0e:	8e 01       	movw	r16, r28
    7c10:	01 5b       	subi	r16, 0xB1	; 177
    7c12:	1f 4f       	sbci	r17, 0xFF	; 255
    7c14:	ce 01       	movw	r24, r28
    7c16:	85 5b       	subi	r24, 0xB5	; 181
    7c18:	9f 4f       	sbci	r25, 0xFF	; 255
    7c1a:	fc 01       	movw	r30, r24
    7c1c:	60 81       	ld	r22, Z
    7c1e:	71 81       	ldd	r23, Z+1	; 0x01
    7c20:	82 81       	ldd	r24, Z+2	; 0x02
    7c22:	93 81       	ldd	r25, Z+3	; 0x03
    7c24:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    7c28:	dc 01       	movw	r26, r24
    7c2a:	cb 01       	movw	r24, r22
    7c2c:	f8 01       	movw	r30, r16
    7c2e:	91 83       	std	Z+1, r25	; 0x01
    7c30:	80 83       	st	Z, r24
    7c32:	ce 01       	movw	r24, r28
    7c34:	8d 5a       	subi	r24, 0xAD	; 173
    7c36:	9f 4f       	sbci	r25, 0xFF	; 255
    7c38:	9e 01       	movw	r18, r28
    7c3a:	21 5b       	subi	r18, 0xB1	; 177
    7c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    7c3e:	f9 01       	movw	r30, r18
    7c40:	20 81       	ld	r18, Z
    7c42:	31 81       	ldd	r19, Z+1	; 0x01
    7c44:	fc 01       	movw	r30, r24
    7c46:	31 83       	std	Z+1, r19	; 0x01
    7c48:	20 83       	st	Z, r18
    7c4a:	ce 01       	movw	r24, r28
    7c4c:	8d 5a       	subi	r24, 0xAD	; 173
    7c4e:	9f 4f       	sbci	r25, 0xFF	; 255
    7c50:	fc 01       	movw	r30, r24
    7c52:	80 81       	ld	r24, Z
    7c54:	91 81       	ldd	r25, Z+1	; 0x01
    7c56:	8c 01       	movw	r16, r24
    7c58:	c8 01       	movw	r24, r16
    7c5a:	01 97       	sbiw	r24, 0x01	; 1
    7c5c:	f1 f7       	brne	.-4      	; 0x7c5a <send_to_pc+0x79c>
    7c5e:	8c 01       	movw	r16, r24
    7c60:	ce 01       	movw	r24, r28
    7c62:	8d 5a       	subi	r24, 0xAD	; 173
    7c64:	9f 4f       	sbci	r25, 0xFF	; 255
    7c66:	fc 01       	movw	r30, r24
    7c68:	11 83       	std	Z+1, r17	; 0x01
    7c6a:	00 83       	st	Z, r16
    7c6c:	d2 c0       	rjmp	.+420    	; 0x7e12 <send_to_pc+0x954>
    7c6e:	9e 01       	movw	r18, r28
    7c70:	2b 5a       	subi	r18, 0xAB	; 171
    7c72:	3f 4f       	sbci	r19, 0xFF	; 255
    7c74:	80 e0       	ldi	r24, 0x00	; 0
    7c76:	90 e0       	ldi	r25, 0x00	; 0
    7c78:	aa ef       	ldi	r26, 0xFA	; 250
    7c7a:	b3 e4       	ldi	r27, 0x43	; 67
    7c7c:	f9 01       	movw	r30, r18
    7c7e:	80 83       	st	Z, r24
    7c80:	91 83       	std	Z+1, r25	; 0x01
    7c82:	a2 83       	std	Z+2, r26	; 0x02
    7c84:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7c86:	8e 01       	movw	r16, r28
    7c88:	07 5a       	subi	r16, 0xA7	; 167
    7c8a:	1f 4f       	sbci	r17, 0xFF	; 255
    7c8c:	ce 01       	movw	r24, r28
    7c8e:	8b 5a       	subi	r24, 0xAB	; 171
    7c90:	9f 4f       	sbci	r25, 0xFF	; 255
    7c92:	fc 01       	movw	r30, r24
    7c94:	60 81       	ld	r22, Z
    7c96:	71 81       	ldd	r23, Z+1	; 0x01
    7c98:	82 81       	ldd	r24, Z+2	; 0x02
    7c9a:	93 81       	ldd	r25, Z+3	; 0x03
    7c9c:	26 e6       	ldi	r18, 0x66	; 102
    7c9e:	36 e6       	ldi	r19, 0x66	; 102
    7ca0:	46 e6       	ldi	r20, 0x66	; 102
    7ca2:	55 e4       	ldi	r21, 0x45	; 69
    7ca4:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    7ca8:	dc 01       	movw	r26, r24
    7caa:	cb 01       	movw	r24, r22
    7cac:	f8 01       	movw	r30, r16
    7cae:	80 83       	st	Z, r24
    7cb0:	91 83       	std	Z+1, r25	; 0x01
    7cb2:	a2 83       	std	Z+2, r26	; 0x02
    7cb4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7cb6:	ce 01       	movw	r24, r28
    7cb8:	87 5a       	subi	r24, 0xA7	; 167
    7cba:	9f 4f       	sbci	r25, 0xFF	; 255
    7cbc:	11 e0       	ldi	r17, 0x01	; 1
    7cbe:	fc 01       	movw	r30, r24
    7cc0:	60 81       	ld	r22, Z
    7cc2:	71 81       	ldd	r23, Z+1	; 0x01
    7cc4:	82 81       	ldd	r24, Z+2	; 0x02
    7cc6:	93 81       	ldd	r25, Z+3	; 0x03
    7cc8:	20 e0       	ldi	r18, 0x00	; 0
    7cca:	30 e0       	ldi	r19, 0x00	; 0
    7ccc:	40 e8       	ldi	r20, 0x80	; 128
    7cce:	5f e3       	ldi	r21, 0x3F	; 63
    7cd0:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    7cd4:	88 23       	and	r24, r24
    7cd6:	0c f0       	brlt	.+2      	; 0x7cda <send_to_pc+0x81c>
    7cd8:	10 e0       	ldi	r17, 0x00	; 0
    7cda:	11 23       	and	r17, r17
    7cdc:	49 f0       	breq	.+18     	; 0x7cf0 <send_to_pc+0x832>
		__ticks = 1;
    7cde:	ce 01       	movw	r24, r28
    7ce0:	83 5a       	subi	r24, 0xA3	; 163
    7ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    7ce4:	21 e0       	ldi	r18, 0x01	; 1
    7ce6:	30 e0       	ldi	r19, 0x00	; 0
    7ce8:	fc 01       	movw	r30, r24
    7cea:	31 83       	std	Z+1, r19	; 0x01
    7cec:	20 83       	st	Z, r18
    7cee:	74 c0       	rjmp	.+232    	; 0x7dd8 <send_to_pc+0x91a>
	else if (__tmp > 65535)
    7cf0:	ce 01       	movw	r24, r28
    7cf2:	87 5a       	subi	r24, 0xA7	; 167
    7cf4:	9f 4f       	sbci	r25, 0xFF	; 255
    7cf6:	11 e0       	ldi	r17, 0x01	; 1
    7cf8:	fc 01       	movw	r30, r24
    7cfa:	60 81       	ld	r22, Z
    7cfc:	71 81       	ldd	r23, Z+1	; 0x01
    7cfe:	82 81       	ldd	r24, Z+2	; 0x02
    7d00:	93 81       	ldd	r25, Z+3	; 0x03
    7d02:	20 e0       	ldi	r18, 0x00	; 0
    7d04:	3f ef       	ldi	r19, 0xFF	; 255
    7d06:	4f e7       	ldi	r20, 0x7F	; 127
    7d08:	57 e4       	ldi	r21, 0x47	; 71
    7d0a:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    7d0e:	18 16       	cp	r1, r24
    7d10:	0c f0       	brlt	.+2      	; 0x7d14 <send_to_pc+0x856>
    7d12:	10 e0       	ldi	r17, 0x00	; 0
    7d14:	11 23       	and	r17, r17
    7d16:	09 f4       	brne	.+2      	; 0x7d1a <send_to_pc+0x85c>
    7d18:	4d c0       	rjmp	.+154    	; 0x7db4 <send_to_pc+0x8f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7d1a:	ce 01       	movw	r24, r28
    7d1c:	8b 5a       	subi	r24, 0xAB	; 171
    7d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    7d20:	fc 01       	movw	r30, r24
    7d22:	60 81       	ld	r22, Z
    7d24:	71 81       	ldd	r23, Z+1	; 0x01
    7d26:	82 81       	ldd	r24, Z+2	; 0x02
    7d28:	93 81       	ldd	r25, Z+3	; 0x03
    7d2a:	20 e0       	ldi	r18, 0x00	; 0
    7d2c:	30 e0       	ldi	r19, 0x00	; 0
    7d2e:	40 e2       	ldi	r20, 0x20	; 32
    7d30:	51 e4       	ldi	r21, 0x41	; 65
    7d32:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    7d36:	dc 01       	movw	r26, r24
    7d38:	cb 01       	movw	r24, r22
    7d3a:	8e 01       	movw	r16, r28
    7d3c:	03 5a       	subi	r16, 0xA3	; 163
    7d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    7d40:	bc 01       	movw	r22, r24
    7d42:	cd 01       	movw	r24, r26
    7d44:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    7d48:	dc 01       	movw	r26, r24
    7d4a:	cb 01       	movw	r24, r22
    7d4c:	f8 01       	movw	r30, r16
    7d4e:	91 83       	std	Z+1, r25	; 0x01
    7d50:	80 83       	st	Z, r24
    7d52:	27 c0       	rjmp	.+78     	; 0x7da2 <send_to_pc+0x8e4>
    7d54:	ce 01       	movw	r24, r28
    7d56:	81 5a       	subi	r24, 0xA1	; 161
    7d58:	9f 4f       	sbci	r25, 0xFF	; 255
    7d5a:	20 e7       	ldi	r18, 0x70	; 112
    7d5c:	31 e0       	ldi	r19, 0x01	; 1
    7d5e:	fc 01       	movw	r30, r24
    7d60:	31 83       	std	Z+1, r19	; 0x01
    7d62:	20 83       	st	Z, r18
    7d64:	ce 01       	movw	r24, r28
    7d66:	81 5a       	subi	r24, 0xA1	; 161
    7d68:	9f 4f       	sbci	r25, 0xFF	; 255
    7d6a:	fc 01       	movw	r30, r24
    7d6c:	80 81       	ld	r24, Z
    7d6e:	91 81       	ldd	r25, Z+1	; 0x01
    7d70:	8c 01       	movw	r16, r24
    7d72:	c8 01       	movw	r24, r16
    7d74:	01 97       	sbiw	r24, 0x01	; 1
    7d76:	f1 f7       	brne	.-4      	; 0x7d74 <send_to_pc+0x8b6>
    7d78:	8c 01       	movw	r16, r24
    7d7a:	ce 01       	movw	r24, r28
    7d7c:	81 5a       	subi	r24, 0xA1	; 161
    7d7e:	9f 4f       	sbci	r25, 0xFF	; 255
    7d80:	fc 01       	movw	r30, r24
    7d82:	11 83       	std	Z+1, r17	; 0x01
    7d84:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7d86:	ce 01       	movw	r24, r28
    7d88:	83 5a       	subi	r24, 0xA3	; 163
    7d8a:	9f 4f       	sbci	r25, 0xFF	; 255
    7d8c:	9e 01       	movw	r18, r28
    7d8e:	23 5a       	subi	r18, 0xA3	; 163
    7d90:	3f 4f       	sbci	r19, 0xFF	; 255
    7d92:	f9 01       	movw	r30, r18
    7d94:	20 81       	ld	r18, Z
    7d96:	31 81       	ldd	r19, Z+1	; 0x01
    7d98:	21 50       	subi	r18, 0x01	; 1
    7d9a:	30 40       	sbci	r19, 0x00	; 0
    7d9c:	fc 01       	movw	r30, r24
    7d9e:	31 83       	std	Z+1, r19	; 0x01
    7da0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7da2:	ce 01       	movw	r24, r28
    7da4:	83 5a       	subi	r24, 0xA3	; 163
    7da6:	9f 4f       	sbci	r25, 0xFF	; 255
    7da8:	fc 01       	movw	r30, r24
    7daa:	80 81       	ld	r24, Z
    7dac:	91 81       	ldd	r25, Z+1	; 0x01
    7dae:	00 97       	sbiw	r24, 0x00	; 0
    7db0:	89 f6       	brne	.-94     	; 0x7d54 <send_to_pc+0x896>
    7db2:	2f c0       	rjmp	.+94     	; 0x7e12 <send_to_pc+0x954>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7db4:	8e 01       	movw	r16, r28
    7db6:	03 5a       	subi	r16, 0xA3	; 163
    7db8:	1f 4f       	sbci	r17, 0xFF	; 255
    7dba:	ce 01       	movw	r24, r28
    7dbc:	87 5a       	subi	r24, 0xA7	; 167
    7dbe:	9f 4f       	sbci	r25, 0xFF	; 255
    7dc0:	fc 01       	movw	r30, r24
    7dc2:	60 81       	ld	r22, Z
    7dc4:	71 81       	ldd	r23, Z+1	; 0x01
    7dc6:	82 81       	ldd	r24, Z+2	; 0x02
    7dc8:	93 81       	ldd	r25, Z+3	; 0x03
    7dca:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    7dce:	dc 01       	movw	r26, r24
    7dd0:	cb 01       	movw	r24, r22
    7dd2:	f8 01       	movw	r30, r16
    7dd4:	91 83       	std	Z+1, r25	; 0x01
    7dd6:	80 83       	st	Z, r24
    7dd8:	ce 01       	movw	r24, r28
    7dda:	8f 59       	subi	r24, 0x9F	; 159
    7ddc:	9f 4f       	sbci	r25, 0xFF	; 255
    7dde:	9e 01       	movw	r18, r28
    7de0:	23 5a       	subi	r18, 0xA3	; 163
    7de2:	3f 4f       	sbci	r19, 0xFF	; 255
    7de4:	f9 01       	movw	r30, r18
    7de6:	20 81       	ld	r18, Z
    7de8:	31 81       	ldd	r19, Z+1	; 0x01
    7dea:	fc 01       	movw	r30, r24
    7dec:	31 83       	std	Z+1, r19	; 0x01
    7dee:	20 83       	st	Z, r18
    7df0:	ce 01       	movw	r24, r28
    7df2:	8f 59       	subi	r24, 0x9F	; 159
    7df4:	9f 4f       	sbci	r25, 0xFF	; 255
    7df6:	fc 01       	movw	r30, r24
    7df8:	80 81       	ld	r24, Z
    7dfa:	91 81       	ldd	r25, Z+1	; 0x01
    7dfc:	8c 01       	movw	r16, r24
    7dfe:	c8 01       	movw	r24, r16
    7e00:	01 97       	sbiw	r24, 0x01	; 1
    7e02:	f1 f7       	brne	.-4      	; 0x7e00 <send_to_pc+0x942>
    7e04:	8c 01       	movw	r16, r24
    7e06:	ce 01       	movw	r24, r28
    7e08:	8f 59       	subi	r24, 0x9F	; 159
    7e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    7e0c:	fc 01       	movw	r30, r24
    7e0e:	11 83       	std	Z+1, r17	; 0x01
    7e10:	00 83       	st	Z, r16
	else
	{
		_delay_ms(500);
	}
	//obstacle_found='0';   required when first obstacle is detected
}
    7e12:	ce 59       	subi	r28, 0x9E	; 158
    7e14:	df 4f       	sbci	r29, 0xFF	; 255
    7e16:	0f b6       	in	r0, 0x3f	; 63
    7e18:	f8 94       	cli
    7e1a:	de bf       	out	0x3e, r29	; 62
    7e1c:	0f be       	out	0x3f, r0	; 63
    7e1e:	cd bf       	out	0x3d, r28	; 61
    7e20:	df 91       	pop	r29
    7e22:	cf 91       	pop	r28
    7e24:	1f 91       	pop	r17
    7e26:	0f 91       	pop	r16
    7e28:	08 95       	ret

00007e2a <main>:


/*************************************************************** Main Function ************************************************/
int main()
{
    7e2a:	0f 93       	push	r16
    7e2c:	1f 93       	push	r17
    7e2e:	cf 93       	push	r28
    7e30:	df 93       	push	r29
    7e32:	cd b7       	in	r28, 0x3d	; 61
    7e34:	de b7       	in	r29, 0x3e	; 62
    7e36:	ce 57       	subi	r28, 0x7E	; 126
    7e38:	d0 40       	sbci	r29, 0x00	; 0
    7e3a:	0f b6       	in	r0, 0x3f	; 63
    7e3c:	f8 94       	cli
    7e3e:	de bf       	out	0x3e, r29	; 62
    7e40:	0f be       	out	0x3f, r0	; 63
    7e42:	cd bf       	out	0x3d, r28	; 61
	init_devices();
    7e44:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <init_devices>
	i2c_init();
    7e48:	0e 94 95 00 	call	0x12a	; 0x12a <i2c_init>
	lcd_set_4bit();
    7e4c:	0e 94 a1 02 	call	0x542	; 0x542 <lcd_set_4bit>
	lcd_init();
    7e50:	0e 94 97 08 	call	0x112e	; 0x112e <lcd_init>
	color_sensor_scaling();
    7e54:	0e 94 d7 13 	call	0x27ae	; 0x27ae <color_sensor_scaling>
	
	servo_1(70);
    7e58:	86 e4       	ldi	r24, 0x46	; 70
    7e5a:	0e 94 23 11 	call	0x2246	; 0x2246 <servo_1>
    7e5e:	80 e0       	ldi	r24, 0x00	; 0
    7e60:	90 e0       	ldi	r25, 0x00	; 0
    7e62:	a8 e4       	ldi	r26, 0x48	; 72
    7e64:	b3 e4       	ldi	r27, 0x43	; 67
    7e66:	89 83       	std	Y+1, r24	; 0x01
    7e68:	9a 83       	std	Y+2, r25	; 0x02
    7e6a:	ab 83       	std	Y+3, r26	; 0x03
    7e6c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7e6e:	69 81       	ldd	r22, Y+1	; 0x01
    7e70:	7a 81       	ldd	r23, Y+2	; 0x02
    7e72:	8b 81       	ldd	r24, Y+3	; 0x03
    7e74:	9c 81       	ldd	r25, Y+4	; 0x04
    7e76:	26 e6       	ldi	r18, 0x66	; 102
    7e78:	36 e6       	ldi	r19, 0x66	; 102
    7e7a:	46 e6       	ldi	r20, 0x66	; 102
    7e7c:	55 e4       	ldi	r21, 0x45	; 69
    7e7e:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    7e82:	dc 01       	movw	r26, r24
    7e84:	cb 01       	movw	r24, r22
    7e86:	8d 83       	std	Y+5, r24	; 0x05
    7e88:	9e 83       	std	Y+6, r25	; 0x06
    7e8a:	af 83       	std	Y+7, r26	; 0x07
    7e8c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    7e8e:	11 e0       	ldi	r17, 0x01	; 1
    7e90:	6d 81       	ldd	r22, Y+5	; 0x05
    7e92:	7e 81       	ldd	r23, Y+6	; 0x06
    7e94:	8f 81       	ldd	r24, Y+7	; 0x07
    7e96:	98 85       	ldd	r25, Y+8	; 0x08
    7e98:	20 e0       	ldi	r18, 0x00	; 0
    7e9a:	30 e0       	ldi	r19, 0x00	; 0
    7e9c:	40 e8       	ldi	r20, 0x80	; 128
    7e9e:	5f e3       	ldi	r21, 0x3F	; 63
    7ea0:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    7ea4:	88 23       	and	r24, r24
    7ea6:	0c f0       	brlt	.+2      	; 0x7eaa <main+0x80>
    7ea8:	10 e0       	ldi	r17, 0x00	; 0
    7eaa:	11 23       	and	r17, r17
    7eac:	29 f0       	breq	.+10     	; 0x7eb8 <main+0x8e>
		__ticks = 1;
    7eae:	81 e0       	ldi	r24, 0x01	; 1
    7eb0:	90 e0       	ldi	r25, 0x00	; 0
    7eb2:	9a 87       	std	Y+10, r25	; 0x0a
    7eb4:	89 87       	std	Y+9, r24	; 0x09
    7eb6:	46 c0       	rjmp	.+140    	; 0x7f44 <main+0x11a>
	else if (__tmp > 65535)
    7eb8:	11 e0       	ldi	r17, 0x01	; 1
    7eba:	6d 81       	ldd	r22, Y+5	; 0x05
    7ebc:	7e 81       	ldd	r23, Y+6	; 0x06
    7ebe:	8f 81       	ldd	r24, Y+7	; 0x07
    7ec0:	98 85       	ldd	r25, Y+8	; 0x08
    7ec2:	20 e0       	ldi	r18, 0x00	; 0
    7ec4:	3f ef       	ldi	r19, 0xFF	; 255
    7ec6:	4f e7       	ldi	r20, 0x7F	; 127
    7ec8:	57 e4       	ldi	r21, 0x47	; 71
    7eca:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    7ece:	18 16       	cp	r1, r24
    7ed0:	0c f0       	brlt	.+2      	; 0x7ed4 <main+0xaa>
    7ed2:	10 e0       	ldi	r17, 0x00	; 0
    7ed4:	11 23       	and	r17, r17
    7ed6:	61 f1       	breq	.+88     	; 0x7f30 <main+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7ed8:	69 81       	ldd	r22, Y+1	; 0x01
    7eda:	7a 81       	ldd	r23, Y+2	; 0x02
    7edc:	8b 81       	ldd	r24, Y+3	; 0x03
    7ede:	9c 81       	ldd	r25, Y+4	; 0x04
    7ee0:	20 e0       	ldi	r18, 0x00	; 0
    7ee2:	30 e0       	ldi	r19, 0x00	; 0
    7ee4:	40 e2       	ldi	r20, 0x20	; 32
    7ee6:	51 e4       	ldi	r21, 0x41	; 65
    7ee8:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    7eec:	dc 01       	movw	r26, r24
    7eee:	cb 01       	movw	r24, r22
    7ef0:	bc 01       	movw	r22, r24
    7ef2:	cd 01       	movw	r24, r26
    7ef4:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    7ef8:	dc 01       	movw	r26, r24
    7efa:	cb 01       	movw	r24, r22
    7efc:	9a 87       	std	Y+10, r25	; 0x0a
    7efe:	89 87       	std	Y+9, r24	; 0x09
    7f00:	12 c0       	rjmp	.+36     	; 0x7f26 <main+0xfc>
    7f02:	80 e7       	ldi	r24, 0x70	; 112
    7f04:	91 e0       	ldi	r25, 0x01	; 1
    7f06:	9c 87       	std	Y+12, r25	; 0x0c
    7f08:	8b 87       	std	Y+11, r24	; 0x0b
    7f0a:	8b 85       	ldd	r24, Y+11	; 0x0b
    7f0c:	9c 85       	ldd	r25, Y+12	; 0x0c
    7f0e:	8c 01       	movw	r16, r24
    7f10:	c8 01       	movw	r24, r16
    7f12:	01 97       	sbiw	r24, 0x01	; 1
    7f14:	f1 f7       	brne	.-4      	; 0x7f12 <main+0xe8>
    7f16:	8c 01       	movw	r16, r24
    7f18:	1c 87       	std	Y+12, r17	; 0x0c
    7f1a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7f1c:	89 85       	ldd	r24, Y+9	; 0x09
    7f1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7f20:	01 97       	sbiw	r24, 0x01	; 1
    7f22:	9a 87       	std	Y+10, r25	; 0x0a
    7f24:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7f26:	89 85       	ldd	r24, Y+9	; 0x09
    7f28:	9a 85       	ldd	r25, Y+10	; 0x0a
    7f2a:	00 97       	sbiw	r24, 0x00	; 0
    7f2c:	51 f7       	brne	.-44     	; 0x7f02 <main+0xd8>
    7f2e:	17 c0       	rjmp	.+46     	; 0x7f5e <main+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7f30:	6d 81       	ldd	r22, Y+5	; 0x05
    7f32:	7e 81       	ldd	r23, Y+6	; 0x06
    7f34:	8f 81       	ldd	r24, Y+7	; 0x07
    7f36:	98 85       	ldd	r25, Y+8	; 0x08
    7f38:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    7f3c:	dc 01       	movw	r26, r24
    7f3e:	cb 01       	movw	r24, r22
    7f40:	9a 87       	std	Y+10, r25	; 0x0a
    7f42:	89 87       	std	Y+9, r24	; 0x09
    7f44:	89 85       	ldd	r24, Y+9	; 0x09
    7f46:	9a 85       	ldd	r25, Y+10	; 0x0a
    7f48:	9e 87       	std	Y+14, r25	; 0x0e
    7f4a:	8d 87       	std	Y+13, r24	; 0x0d
    7f4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    7f4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    7f50:	8c 01       	movw	r16, r24
    7f52:	f8 01       	movw	r30, r16
    7f54:	31 97       	sbiw	r30, 0x01	; 1
    7f56:	f1 f7       	brne	.-4      	; 0x7f54 <main+0x12a>
    7f58:	8f 01       	movw	r16, r30
    7f5a:	1e 87       	std	Y+14, r17	; 0x0e
    7f5c:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(200);                        //repositioning the servo at default angle(80 degrees)
	servo_1_free();
    7f5e:	0e 94 71 11 	call	0x22e2	; 0x22e2 <servo_1_free>
	
	//I2C device id check
	check_status(i2c_getbyte(DEV_ADD, WHO_AM_I,&devid));
    7f62:	23 e9       	ldi	r18, 0x93	; 147
    7f64:	32 e0       	ldi	r19, 0x02	; 2
    7f66:	80 ed       	ldi	r24, 0xD0	; 208
    7f68:	65 e7       	ldi	r22, 0x75	; 117
    7f6a:	a9 01       	movw	r20, r18
    7f6c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <i2c_getbyte>
    7f70:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <check_status>
	if(devid != DEV_ID_VAL)
    7f74:	80 91 93 02 	lds	r24, 0x0293
    7f78:	88 36       	cpi	r24, 0x68	; 104
    7f7a:	09 f4       	brne	.+2      	; 0x7f7e <main+0x154>
    7f7c:	09 c1       	rjmp	.+530    	; 0x8190 <main+0x366>
	{
		lcd_cursor(1,2);
    7f7e:	81 e0       	ldi	r24, 0x01	; 1
    7f80:	62 e0       	ldi	r22, 0x02	; 2
    7f82:	0e 94 8c 0c 	call	0x1918	; 0x1918 <lcd_cursor>
    7f86:	80 e0       	ldi	r24, 0x00	; 0
    7f88:	90 e0       	ldi	r25, 0x00	; 0
    7f8a:	a8 e4       	ldi	r26, 0x48	; 72
    7f8c:	b2 e4       	ldi	r27, 0x42	; 66
    7f8e:	8f 87       	std	Y+15, r24	; 0x0f
    7f90:	98 8b       	std	Y+16, r25	; 0x10
    7f92:	a9 8b       	std	Y+17, r26	; 0x11
    7f94:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    7f96:	6f 85       	ldd	r22, Y+15	; 0x0f
    7f98:	78 89       	ldd	r23, Y+16	; 0x10
    7f9a:	89 89       	ldd	r24, Y+17	; 0x11
    7f9c:	9a 89       	ldd	r25, Y+18	; 0x12
    7f9e:	26 e6       	ldi	r18, 0x66	; 102
    7fa0:	36 e6       	ldi	r19, 0x66	; 102
    7fa2:	46 e6       	ldi	r20, 0x66	; 102
    7fa4:	55 e4       	ldi	r21, 0x45	; 69
    7fa6:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    7faa:	dc 01       	movw	r26, r24
    7fac:	cb 01       	movw	r24, r22
    7fae:	8b 8b       	std	Y+19, r24	; 0x13
    7fb0:	9c 8b       	std	Y+20, r25	; 0x14
    7fb2:	ad 8b       	std	Y+21, r26	; 0x15
    7fb4:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    7fb6:	11 e0       	ldi	r17, 0x01	; 1
    7fb8:	6b 89       	ldd	r22, Y+19	; 0x13
    7fba:	7c 89       	ldd	r23, Y+20	; 0x14
    7fbc:	8d 89       	ldd	r24, Y+21	; 0x15
    7fbe:	9e 89       	ldd	r25, Y+22	; 0x16
    7fc0:	20 e0       	ldi	r18, 0x00	; 0
    7fc2:	30 e0       	ldi	r19, 0x00	; 0
    7fc4:	40 e8       	ldi	r20, 0x80	; 128
    7fc6:	5f e3       	ldi	r21, 0x3F	; 63
    7fc8:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    7fcc:	88 23       	and	r24, r24
    7fce:	0c f0       	brlt	.+2      	; 0x7fd2 <main+0x1a8>
    7fd0:	10 e0       	ldi	r17, 0x00	; 0
    7fd2:	11 23       	and	r17, r17
    7fd4:	29 f0       	breq	.+10     	; 0x7fe0 <main+0x1b6>
		__ticks = 1;
    7fd6:	81 e0       	ldi	r24, 0x01	; 1
    7fd8:	90 e0       	ldi	r25, 0x00	; 0
    7fda:	98 8f       	std	Y+24, r25	; 0x18
    7fdc:	8f 8b       	std	Y+23, r24	; 0x17
    7fde:	46 c0       	rjmp	.+140    	; 0x806c <main+0x242>
	else if (__tmp > 65535)
    7fe0:	11 e0       	ldi	r17, 0x01	; 1
    7fe2:	6b 89       	ldd	r22, Y+19	; 0x13
    7fe4:	7c 89       	ldd	r23, Y+20	; 0x14
    7fe6:	8d 89       	ldd	r24, Y+21	; 0x15
    7fe8:	9e 89       	ldd	r25, Y+22	; 0x16
    7fea:	20 e0       	ldi	r18, 0x00	; 0
    7fec:	3f ef       	ldi	r19, 0xFF	; 255
    7fee:	4f e7       	ldi	r20, 0x7F	; 127
    7ff0:	57 e4       	ldi	r21, 0x47	; 71
    7ff2:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    7ff6:	18 16       	cp	r1, r24
    7ff8:	0c f0       	brlt	.+2      	; 0x7ffc <main+0x1d2>
    7ffa:	10 e0       	ldi	r17, 0x00	; 0
    7ffc:	11 23       	and	r17, r17
    7ffe:	61 f1       	breq	.+88     	; 0x8058 <main+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8000:	6f 85       	ldd	r22, Y+15	; 0x0f
    8002:	78 89       	ldd	r23, Y+16	; 0x10
    8004:	89 89       	ldd	r24, Y+17	; 0x11
    8006:	9a 89       	ldd	r25, Y+18	; 0x12
    8008:	20 e0       	ldi	r18, 0x00	; 0
    800a:	30 e0       	ldi	r19, 0x00	; 0
    800c:	40 e2       	ldi	r20, 0x20	; 32
    800e:	51 e4       	ldi	r21, 0x41	; 65
    8010:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    8014:	dc 01       	movw	r26, r24
    8016:	cb 01       	movw	r24, r22
    8018:	bc 01       	movw	r22, r24
    801a:	cd 01       	movw	r24, r26
    801c:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    8020:	dc 01       	movw	r26, r24
    8022:	cb 01       	movw	r24, r22
    8024:	98 8f       	std	Y+24, r25	; 0x18
    8026:	8f 8b       	std	Y+23, r24	; 0x17
    8028:	12 c0       	rjmp	.+36     	; 0x804e <main+0x224>
    802a:	80 e7       	ldi	r24, 0x70	; 112
    802c:	91 e0       	ldi	r25, 0x01	; 1
    802e:	9a 8f       	std	Y+26, r25	; 0x1a
    8030:	89 8f       	std	Y+25, r24	; 0x19
    8032:	89 8d       	ldd	r24, Y+25	; 0x19
    8034:	9a 8d       	ldd	r25, Y+26	; 0x1a
    8036:	8c 01       	movw	r16, r24
    8038:	c8 01       	movw	r24, r16
    803a:	01 97       	sbiw	r24, 0x01	; 1
    803c:	f1 f7       	brne	.-4      	; 0x803a <main+0x210>
    803e:	8c 01       	movw	r16, r24
    8040:	1a 8f       	std	Y+26, r17	; 0x1a
    8042:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8044:	8f 89       	ldd	r24, Y+23	; 0x17
    8046:	98 8d       	ldd	r25, Y+24	; 0x18
    8048:	01 97       	sbiw	r24, 0x01	; 1
    804a:	98 8f       	std	Y+24, r25	; 0x18
    804c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    804e:	8f 89       	ldd	r24, Y+23	; 0x17
    8050:	98 8d       	ldd	r25, Y+24	; 0x18
    8052:	00 97       	sbiw	r24, 0x00	; 0
    8054:	51 f7       	brne	.-44     	; 0x802a <main+0x200>
    8056:	17 c0       	rjmp	.+46     	; 0x8086 <main+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8058:	6b 89       	ldd	r22, Y+19	; 0x13
    805a:	7c 89       	ldd	r23, Y+20	; 0x14
    805c:	8d 89       	ldd	r24, Y+21	; 0x15
    805e:	9e 89       	ldd	r25, Y+22	; 0x16
    8060:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    8064:	dc 01       	movw	r26, r24
    8066:	cb 01       	movw	r24, r22
    8068:	98 8f       	std	Y+24, r25	; 0x18
    806a:	8f 8b       	std	Y+23, r24	; 0x17
    806c:	8f 89       	ldd	r24, Y+23	; 0x17
    806e:	98 8d       	ldd	r25, Y+24	; 0x18
    8070:	9c 8f       	std	Y+28, r25	; 0x1c
    8072:	8b 8f       	std	Y+27, r24	; 0x1b
    8074:	8b 8d       	ldd	r24, Y+27	; 0x1b
    8076:	9c 8d       	ldd	r25, Y+28	; 0x1c
    8078:	8c 01       	movw	r16, r24
    807a:	f8 01       	movw	r30, r16
    807c:	31 97       	sbiw	r30, 0x01	; 1
    807e:	f1 f7       	brne	.-4      	; 0x807c <main+0x252>
    8080:	8f 01       	movw	r16, r30
    8082:	1c 8f       	std	Y+28, r17	; 0x1c
    8084:	0b 8f       	std	Y+27, r16	; 0x1b
		_delay_ms(50);
		lcd_string("Wrng Dev ID");
    8086:	8a e1       	ldi	r24, 0x1A	; 26
    8088:	92 e0       	ldi	r25, 0x02	; 2
    808a:	0e 94 6d 0c 	call	0x18da	; 0x18da <lcd_string>
    808e:	80 e0       	ldi	r24, 0x00	; 0
    8090:	90 e0       	ldi	r25, 0x00	; 0
    8092:	a8 e4       	ldi	r26, 0x48	; 72
    8094:	b2 e4       	ldi	r27, 0x42	; 66
    8096:	8d 8f       	std	Y+29, r24	; 0x1d
    8098:	9e 8f       	std	Y+30, r25	; 0x1e
    809a:	af 8f       	std	Y+31, r26	; 0x1f
    809c:	b8 a3       	lds	r27, 0x58
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    809e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    80a0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    80a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    80a4:	98 a1       	lds	r25, 0x48
    80a6:	26 e6       	ldi	r18, 0x66	; 102
    80a8:	36 e6       	ldi	r19, 0x66	; 102
    80aa:	46 e6       	ldi	r20, 0x66	; 102
    80ac:	55 e4       	ldi	r21, 0x45	; 69
    80ae:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    80b2:	dc 01       	movw	r26, r24
    80b4:	cb 01       	movw	r24, r22
    80b6:	89 a3       	lds	r24, 0x59
    80b8:	9a a3       	lds	r25, 0x5a
    80ba:	ab a3       	lds	r26, 0x5b
    80bc:	bc a3       	lds	r27, 0x5c
	if (__tmp < 1.0)
    80be:	11 e0       	ldi	r17, 0x01	; 1
    80c0:	69 a1       	lds	r22, 0x49
    80c2:	7a a1       	lds	r23, 0x4a
    80c4:	8b a1       	lds	r24, 0x4b
    80c6:	9c a1       	lds	r25, 0x4c
    80c8:	20 e0       	ldi	r18, 0x00	; 0
    80ca:	30 e0       	ldi	r19, 0x00	; 0
    80cc:	40 e8       	ldi	r20, 0x80	; 128
    80ce:	5f e3       	ldi	r21, 0x3F	; 63
    80d0:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    80d4:	88 23       	and	r24, r24
    80d6:	0c f0       	brlt	.+2      	; 0x80da <main+0x2b0>
    80d8:	10 e0       	ldi	r17, 0x00	; 0
    80da:	11 23       	and	r17, r17
    80dc:	29 f0       	breq	.+10     	; 0x80e8 <main+0x2be>
		__ticks = 1;
    80de:	81 e0       	ldi	r24, 0x01	; 1
    80e0:	90 e0       	ldi	r25, 0x00	; 0
    80e2:	9e a3       	lds	r25, 0x5e
    80e4:	8d a3       	lds	r24, 0x5d
    80e6:	46 c0       	rjmp	.+140    	; 0x8174 <main+0x34a>
	else if (__tmp > 65535)
    80e8:	11 e0       	ldi	r17, 0x01	; 1
    80ea:	69 a1       	lds	r22, 0x49
    80ec:	7a a1       	lds	r23, 0x4a
    80ee:	8b a1       	lds	r24, 0x4b
    80f0:	9c a1       	lds	r25, 0x4c
    80f2:	20 e0       	ldi	r18, 0x00	; 0
    80f4:	3f ef       	ldi	r19, 0xFF	; 255
    80f6:	4f e7       	ldi	r20, 0x7F	; 127
    80f8:	57 e4       	ldi	r21, 0x47	; 71
    80fa:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    80fe:	18 16       	cp	r1, r24
    8100:	0c f0       	brlt	.+2      	; 0x8104 <main+0x2da>
    8102:	10 e0       	ldi	r17, 0x00	; 0
    8104:	11 23       	and	r17, r17
    8106:	61 f1       	breq	.+88     	; 0x8160 <main+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8108:	6d 8d       	ldd	r22, Y+29	; 0x1d
    810a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    810c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    810e:	98 a1       	lds	r25, 0x48
    8110:	20 e0       	ldi	r18, 0x00	; 0
    8112:	30 e0       	ldi	r19, 0x00	; 0
    8114:	40 e2       	ldi	r20, 0x20	; 32
    8116:	51 e4       	ldi	r21, 0x41	; 65
    8118:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    811c:	dc 01       	movw	r26, r24
    811e:	cb 01       	movw	r24, r22
    8120:	bc 01       	movw	r22, r24
    8122:	cd 01       	movw	r24, r26
    8124:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    8128:	dc 01       	movw	r26, r24
    812a:	cb 01       	movw	r24, r22
    812c:	9e a3       	lds	r25, 0x5e
    812e:	8d a3       	lds	r24, 0x5d
    8130:	12 c0       	rjmp	.+36     	; 0x8156 <main+0x32c>
    8132:	80 e7       	ldi	r24, 0x70	; 112
    8134:	91 e0       	ldi	r25, 0x01	; 1
    8136:	98 a7       	lds	r25, 0x78
    8138:	8f a3       	lds	r24, 0x5f
    813a:	8f a1       	lds	r24, 0x4f
    813c:	98 a5       	lds	r25, 0x68
    813e:	8c 01       	movw	r16, r24
    8140:	c8 01       	movw	r24, r16
    8142:	01 97       	sbiw	r24, 0x01	; 1
    8144:	f1 f7       	brne	.-4      	; 0x8142 <main+0x318>
    8146:	8c 01       	movw	r16, r24
    8148:	18 a7       	lds	r17, 0x78
    814a:	0f a3       	lds	r16, 0x5f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    814c:	8d a1       	lds	r24, 0x4d
    814e:	9e a1       	lds	r25, 0x4e
    8150:	01 97       	sbiw	r24, 0x01	; 1
    8152:	9e a3       	lds	r25, 0x5e
    8154:	8d a3       	lds	r24, 0x5d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8156:	8d a1       	lds	r24, 0x4d
    8158:	9e a1       	lds	r25, 0x4e
    815a:	00 97       	sbiw	r24, 0x00	; 0
    815c:	51 f7       	brne	.-44     	; 0x8132 <main+0x308>
    815e:	17 c0       	rjmp	.+46     	; 0x818e <main+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8160:	69 a1       	lds	r22, 0x49
    8162:	7a a1       	lds	r23, 0x4a
    8164:	8b a1       	lds	r24, 0x4b
    8166:	9c a1       	lds	r25, 0x4c
    8168:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    816c:	dc 01       	movw	r26, r24
    816e:	cb 01       	movw	r24, r22
    8170:	9e a3       	lds	r25, 0x5e
    8172:	8d a3       	lds	r24, 0x5d
    8174:	8d a1       	lds	r24, 0x4d
    8176:	9e a1       	lds	r25, 0x4e
    8178:	9a a7       	lds	r25, 0x7a
    817a:	89 a7       	lds	r24, 0x79
    817c:	89 a5       	lds	r24, 0x69
    817e:	9a a5       	lds	r25, 0x6a
    8180:	8c 01       	movw	r16, r24
    8182:	f8 01       	movw	r30, r16
    8184:	31 97       	sbiw	r30, 0x01	; 1
    8186:	f1 f7       	brne	.-4      	; 0x8184 <main+0x35a>
    8188:	8f 01       	movw	r16, r30
    818a:	1a a7       	lds	r17, 0x7a
    818c:	09 a7       	lds	r16, 0x79
		_delay_ms(50);
		while(1);			//Invalid Device id
    818e:	ff cf       	rjmp	.-2      	; 0x818e <main+0x364>
	}
	check_status(i2c_sendbyte(DEV_ADD, INIT_REG, INIT_VAL)); //initializing the device when device id is correct.
    8190:	80 ed       	ldi	r24, 0xD0	; 208
    8192:	6b e6       	ldi	r22, 0x6B	; 107
    8194:	40 e0       	ldi	r20, 0x00	; 0
    8196:	0e 94 21 01 	call	0x242	; 0x242 <i2c_sendbyte>
    819a:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <check_status>
	check_status(i2c_sendbyte(DEV_ADD, INIT_REG_ACC, INIT_VAL)); //initializing the device when device id is correct.
    819e:	80 ed       	ldi	r24, 0xD0	; 208
    81a0:	6c e1       	ldi	r22, 0x1C	; 28
    81a2:	40 e0       	ldi	r20, 0x00	; 0
    81a4:	0e 94 21 01 	call	0x242	; 0x242 <i2c_sendbyte>
    81a8:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <check_status>
	check_status(i2c_sendbyte(DEV_ADD, INIT_REG_GYRO, INIT_VAL)); //initializing the device when device id is correct.
    81ac:	80 ed       	ldi	r24, 0xD0	; 208
    81ae:	6b e1       	ldi	r22, 0x1B	; 27
    81b0:	40 e0       	ldi	r20, 0x00	; 0
    81b2:	0e 94 21 01 	call	0x242	; 0x242 <i2c_sendbyte>
    81b6:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <check_status>
	
	run=1;
    81ba:	81 e0       	ldi	r24, 0x01	; 1
    81bc:	80 93 27 02 	sts	0x0227, r24
    81c0:	01 c0       	rjmp	.+2      	; 0x81c4 <main+0x39a>
				shape_type='3';
				lcd_print(1,1,3,3);
				_delay_ms(20);	
			}
		}
	}
    81c2:	00 00       	nop
	check_status(i2c_sendbyte(DEV_ADD, INIT_REG_GYRO, INIT_VAL)); //initializing the device when device id is correct.
	
	run=1;
	while(1)
	{
        sensor_refresh();        //refreshes the ADC values of the sensors.
    81c4:	0e 94 03 16 	call	0x2c06	; 0x2c06 <sensor_refresh>
  
		if((L>0x17 && C>0x17 && R>0x17)||(L<0x17 && C>0x17 && R>0x17)||(L>0x17 && C>0x17 && R<0x17))    //node detector
    81c8:	80 91 37 02 	lds	r24, 0x0237
    81cc:	88 31       	cpi	r24, 0x18	; 24
    81ce:	40 f0       	brcs	.+16     	; 0x81e0 <main+0x3b6>
    81d0:	80 91 38 02 	lds	r24, 0x0238
    81d4:	88 31       	cpi	r24, 0x18	; 24
    81d6:	20 f0       	brcs	.+8      	; 0x81e0 <main+0x3b6>
    81d8:	80 91 39 02 	lds	r24, 0x0239
    81dc:	88 31       	cpi	r24, 0x18	; 24
    81de:	d8 f4       	brcc	.+54     	; 0x8216 <main+0x3ec>
    81e0:	80 91 37 02 	lds	r24, 0x0237
    81e4:	87 31       	cpi	r24, 0x17	; 23
    81e6:	40 f4       	brcc	.+16     	; 0x81f8 <main+0x3ce>
    81e8:	80 91 38 02 	lds	r24, 0x0238
    81ec:	88 31       	cpi	r24, 0x18	; 24
    81ee:	20 f0       	brcs	.+8      	; 0x81f8 <main+0x3ce>
    81f0:	80 91 39 02 	lds	r24, 0x0239
    81f4:	88 31       	cpi	r24, 0x18	; 24
    81f6:	78 f4       	brcc	.+30     	; 0x8216 <main+0x3ec>
    81f8:	80 91 37 02 	lds	r24, 0x0237
    81fc:	88 31       	cpi	r24, 0x18	; 24
    81fe:	08 f4       	brcc	.+2      	; 0x8202 <main+0x3d8>
    8200:	98 c0       	rjmp	.+304    	; 0x8332 <main+0x508>
    8202:	80 91 38 02 	lds	r24, 0x0238
    8206:	88 31       	cpi	r24, 0x18	; 24
    8208:	08 f4       	brcc	.+2      	; 0x820c <main+0x3e2>
    820a:	93 c0       	rjmp	.+294    	; 0x8332 <main+0x508>
    820c:	80 91 39 02 	lds	r24, 0x0239
    8210:	87 31       	cpi	r24, 0x17	; 23
    8212:	08 f0       	brcs	.+2      	; 0x8216 <main+0x3ec>
    8214:	8e c0       	rjmp	.+284    	; 0x8332 <main+0x508>
		{
			if(flag_node==0)
    8216:	80 91 26 02 	lds	r24, 0x0226
    821a:	88 23       	and	r24, r24
    821c:	09 f0       	breq	.+2      	; 0x8220 <main+0x3f6>
    821e:	87 c0       	rjmp	.+270    	; 0x832e <main+0x504>
			{
				stop_bot();
    8220:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    8224:	80 e0       	ldi	r24, 0x00	; 0
    8226:	90 e0       	ldi	r25, 0x00	; 0
    8228:	a8 ec       	ldi	r26, 0xC8	; 200
    822a:	b3 e4       	ldi	r27, 0x43	; 67
    822c:	8b a7       	lds	r24, 0x7b
    822e:	9c a7       	lds	r25, 0x7c
    8230:	ad a7       	lds	r26, 0x7d
    8232:	be a7       	lds	r27, 0x7e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8234:	6b a5       	lds	r22, 0x6b
    8236:	7c a5       	lds	r23, 0x6c
    8238:	8d a5       	lds	r24, 0x6d
    823a:	9e a5       	lds	r25, 0x6e
    823c:	26 e6       	ldi	r18, 0x66	; 102
    823e:	36 e6       	ldi	r19, 0x66	; 102
    8240:	46 e6       	ldi	r20, 0x66	; 102
    8242:	55 e4       	ldi	r21, 0x45	; 69
    8244:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    8248:	dc 01       	movw	r26, r24
    824a:	cb 01       	movw	r24, r22
    824c:	8f a7       	lds	r24, 0x7f
    824e:	98 ab       	sts	0x58, r25
    8250:	a9 ab       	sts	0x59, r26
    8252:	ba ab       	sts	0x5a, r27
	if (__tmp < 1.0)
    8254:	11 e0       	ldi	r17, 0x01	; 1
    8256:	6f a5       	lds	r22, 0x6f
    8258:	78 a9       	sts	0x48, r23
    825a:	89 a9       	sts	0x49, r24
    825c:	9a a9       	sts	0x4a, r25
    825e:	20 e0       	ldi	r18, 0x00	; 0
    8260:	30 e0       	ldi	r19, 0x00	; 0
    8262:	40 e8       	ldi	r20, 0x80	; 128
    8264:	5f e3       	ldi	r21, 0x3F	; 63
    8266:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    826a:	88 23       	and	r24, r24
    826c:	0c f0       	brlt	.+2      	; 0x8270 <main+0x446>
    826e:	10 e0       	ldi	r17, 0x00	; 0
    8270:	11 23       	and	r17, r17
    8272:	29 f0       	breq	.+10     	; 0x827e <main+0x454>
		__ticks = 1;
    8274:	81 e0       	ldi	r24, 0x01	; 1
    8276:	90 e0       	ldi	r25, 0x00	; 0
    8278:	9c ab       	sts	0x5c, r25
    827a:	8b ab       	sts	0x5b, r24
    827c:	46 c0       	rjmp	.+140    	; 0x830a <main+0x4e0>
	else if (__tmp > 65535)
    827e:	11 e0       	ldi	r17, 0x01	; 1
    8280:	6f a5       	lds	r22, 0x6f
    8282:	78 a9       	sts	0x48, r23
    8284:	89 a9       	sts	0x49, r24
    8286:	9a a9       	sts	0x4a, r25
    8288:	20 e0       	ldi	r18, 0x00	; 0
    828a:	3f ef       	ldi	r19, 0xFF	; 255
    828c:	4f e7       	ldi	r20, 0x7F	; 127
    828e:	57 e4       	ldi	r21, 0x47	; 71
    8290:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    8294:	18 16       	cp	r1, r24
    8296:	0c f0       	brlt	.+2      	; 0x829a <main+0x470>
    8298:	10 e0       	ldi	r17, 0x00	; 0
    829a:	11 23       	and	r17, r17
    829c:	61 f1       	breq	.+88     	; 0x82f6 <main+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    829e:	6b a5       	lds	r22, 0x6b
    82a0:	7c a5       	lds	r23, 0x6c
    82a2:	8d a5       	lds	r24, 0x6d
    82a4:	9e a5       	lds	r25, 0x6e
    82a6:	20 e0       	ldi	r18, 0x00	; 0
    82a8:	30 e0       	ldi	r19, 0x00	; 0
    82aa:	40 e2       	ldi	r20, 0x20	; 32
    82ac:	51 e4       	ldi	r21, 0x41	; 65
    82ae:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    82b2:	dc 01       	movw	r26, r24
    82b4:	cb 01       	movw	r24, r22
    82b6:	bc 01       	movw	r22, r24
    82b8:	cd 01       	movw	r24, r26
    82ba:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    82be:	dc 01       	movw	r26, r24
    82c0:	cb 01       	movw	r24, r22
    82c2:	9c ab       	sts	0x5c, r25
    82c4:	8b ab       	sts	0x5b, r24
    82c6:	12 c0       	rjmp	.+36     	; 0x82ec <main+0x4c2>
    82c8:	80 e7       	ldi	r24, 0x70	; 112
    82ca:	91 e0       	ldi	r25, 0x01	; 1
    82cc:	9e ab       	sts	0x5e, r25
    82ce:	8d ab       	sts	0x5d, r24
    82d0:	8d a9       	sts	0x4d, r24
    82d2:	9e a9       	sts	0x4e, r25
    82d4:	8c 01       	movw	r16, r24
    82d6:	c8 01       	movw	r24, r16
    82d8:	01 97       	sbiw	r24, 0x01	; 1
    82da:	f1 f7       	brne	.-4      	; 0x82d8 <main+0x4ae>
    82dc:	8c 01       	movw	r16, r24
    82de:	1e ab       	sts	0x5e, r17
    82e0:	0d ab       	sts	0x5d, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    82e2:	8b a9       	sts	0x4b, r24
    82e4:	9c a9       	sts	0x4c, r25
    82e6:	01 97       	sbiw	r24, 0x01	; 1
    82e8:	9c ab       	sts	0x5c, r25
    82ea:	8b ab       	sts	0x5b, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    82ec:	8b a9       	sts	0x4b, r24
    82ee:	9c a9       	sts	0x4c, r25
    82f0:	00 97       	sbiw	r24, 0x00	; 0
    82f2:	51 f7       	brne	.-44     	; 0x82c8 <main+0x49e>
    82f4:	17 c0       	rjmp	.+46     	; 0x8324 <main+0x4fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    82f6:	6f a5       	lds	r22, 0x6f
    82f8:	78 a9       	sts	0x48, r23
    82fa:	89 a9       	sts	0x49, r24
    82fc:	9a a9       	sts	0x4a, r25
    82fe:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    8302:	dc 01       	movw	r26, r24
    8304:	cb 01       	movw	r24, r22
    8306:	9c ab       	sts	0x5c, r25
    8308:	8b ab       	sts	0x5b, r24
    830a:	8b a9       	sts	0x4b, r24
    830c:	9c a9       	sts	0x4c, r25
    830e:	98 af       	sts	0x78, r25
    8310:	8f ab       	sts	0x5f, r24
    8312:	8f a9       	sts	0x4f, r24
    8314:	98 ad       	sts	0x68, r25
    8316:	8c 01       	movw	r16, r24
    8318:	f8 01       	movw	r30, r16
    831a:	31 97       	sbiw	r30, 0x01	; 1
    831c:	f1 f7       	brne	.-4      	; 0x831a <main+0x4f0>
    831e:	8f 01       	movw	r16, r30
    8320:	18 af       	sts	0x78, r17
    8322:	0f ab       	sts	0x5f, r16
				_delay_ms(400);
				node_detector();
    8324:	0e 94 8c 37 	call	0x6f18	; 0x6f18 <node_detector>
				flag_node=1;
    8328:	81 e0       	ldi	r24, 0x01	; 1
    832a:	80 93 26 02 	sts	0x0226, r24
			}
			 sensor_refresh(); 
    832e:	0e 94 03 16 	call	0x2c06	; 0x2c06 <sensor_refresh>
		}
		
		if((IR3 < 0x70) && (pathL < 30))            //condition for obstacle detection
    8332:	80 91 3c 02 	lds	r24, 0x023C
    8336:	80 37       	cpi	r24, 0x70	; 112
    8338:	08 f0       	brcs	.+2      	; 0x833c <main+0x512>
    833a:	cc c0       	rjmp	.+408    	; 0x84d4 <main+0x6aa>
    833c:	80 91 35 02 	lds	r24, 0x0235
    8340:	8e 31       	cpi	r24, 0x1E	; 30
    8342:	08 f0       	brcs	.+2      	; 0x8346 <main+0x51c>
    8344:	c7 c0       	rjmp	.+398    	; 0x84d4 <main+0x6aa>
		{
			stop_bot();
    8346:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
    834a:	80 e0       	ldi	r24, 0x00	; 0
    834c:	90 e0       	ldi	r25, 0x00	; 0
    834e:	a8 ec       	ldi	r26, 0xC8	; 200
    8350:	b3 e4       	ldi	r27, 0x43	; 67
    8352:	89 af       	sts	0x79, r24
    8354:	9a af       	sts	0x7a, r25
    8356:	ab af       	sts	0x7b, r26
    8358:	bc af       	sts	0x7c, r27
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    835a:	69 ad       	sts	0x69, r22
    835c:	7a ad       	sts	0x6a, r23
    835e:	8b ad       	sts	0x6b, r24
    8360:	9c ad       	sts	0x6c, r25
    8362:	26 e6       	ldi	r18, 0x66	; 102
    8364:	36 e6       	ldi	r19, 0x66	; 102
    8366:	46 e6       	ldi	r20, 0x66	; 102
    8368:	55 e4       	ldi	r21, 0x45	; 69
    836a:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    836e:	dc 01       	movw	r26, r24
    8370:	cb 01       	movw	r24, r22
    8372:	9e 01       	movw	r18, r28
    8374:	23 5c       	subi	r18, 0xC3	; 195
    8376:	3f 4f       	sbci	r19, 0xFF	; 255
    8378:	f9 01       	movw	r30, r18
    837a:	80 83       	st	Z, r24
    837c:	91 83       	std	Z+1, r25	; 0x01
    837e:	a2 83       	std	Z+2, r26	; 0x02
    8380:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8382:	11 e0       	ldi	r17, 0x01	; 1
    8384:	ce 01       	movw	r24, r28
    8386:	cd 96       	adiw	r24, 0x3d	; 61
    8388:	fc 01       	movw	r30, r24
    838a:	60 81       	ld	r22, Z
    838c:	71 81       	ldd	r23, Z+1	; 0x01
    838e:	82 81       	ldd	r24, Z+2	; 0x02
    8390:	93 81       	ldd	r25, Z+3	; 0x03
    8392:	20 e0       	ldi	r18, 0x00	; 0
    8394:	30 e0       	ldi	r19, 0x00	; 0
    8396:	40 e8       	ldi	r20, 0x80	; 128
    8398:	5f e3       	ldi	r21, 0x3F	; 63
    839a:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    839e:	88 23       	and	r24, r24
    83a0:	0c f0       	brlt	.+2      	; 0x83a4 <main+0x57a>
    83a2:	10 e0       	ldi	r17, 0x00	; 0
    83a4:	11 23       	and	r17, r17
    83a6:	49 f0       	breq	.+18     	; 0x83ba <main+0x590>
		__ticks = 1;
    83a8:	ce 01       	movw	r24, r28
    83aa:	8f 5b       	subi	r24, 0xBF	; 191
    83ac:	9f 4f       	sbci	r25, 0xFF	; 255
    83ae:	21 e0       	ldi	r18, 0x01	; 1
    83b0:	30 e0       	ldi	r19, 0x00	; 0
    83b2:	fc 01       	movw	r30, r24
    83b4:	31 83       	std	Z+1, r19	; 0x01
    83b6:	20 83       	st	Z, r18
    83b8:	6e c0       	rjmp	.+220    	; 0x8496 <main+0x66c>
	else if (__tmp > 65535)
    83ba:	11 e0       	ldi	r17, 0x01	; 1
    83bc:	ce 01       	movw	r24, r28
    83be:	cd 96       	adiw	r24, 0x3d	; 61
    83c0:	fc 01       	movw	r30, r24
    83c2:	60 81       	ld	r22, Z
    83c4:	71 81       	ldd	r23, Z+1	; 0x01
    83c6:	82 81       	ldd	r24, Z+2	; 0x02
    83c8:	93 81       	ldd	r25, Z+3	; 0x03
    83ca:	20 e0       	ldi	r18, 0x00	; 0
    83cc:	3f ef       	ldi	r19, 0xFF	; 255
    83ce:	4f e7       	ldi	r20, 0x7F	; 127
    83d0:	57 e4       	ldi	r21, 0x47	; 71
    83d2:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    83d6:	18 16       	cp	r1, r24
    83d8:	0c f0       	brlt	.+2      	; 0x83dc <main+0x5b2>
    83da:	10 e0       	ldi	r17, 0x00	; 0
    83dc:	11 23       	and	r17, r17
    83de:	09 f4       	brne	.+2      	; 0x83e2 <main+0x5b8>
    83e0:	49 c0       	rjmp	.+146    	; 0x8474 <main+0x64a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    83e2:	69 ad       	sts	0x69, r22
    83e4:	7a ad       	sts	0x6a, r23
    83e6:	8b ad       	sts	0x6b, r24
    83e8:	9c ad       	sts	0x6c, r25
    83ea:	20 e0       	ldi	r18, 0x00	; 0
    83ec:	30 e0       	ldi	r19, 0x00	; 0
    83ee:	40 e2       	ldi	r20, 0x20	; 32
    83f0:	51 e4       	ldi	r21, 0x41	; 65
    83f2:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    83f6:	dc 01       	movw	r26, r24
    83f8:	cb 01       	movw	r24, r22
    83fa:	8e 01       	movw	r16, r28
    83fc:	0f 5b       	subi	r16, 0xBF	; 191
    83fe:	1f 4f       	sbci	r17, 0xFF	; 255
    8400:	bc 01       	movw	r22, r24
    8402:	cd 01       	movw	r24, r26
    8404:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    8408:	dc 01       	movw	r26, r24
    840a:	cb 01       	movw	r24, r22
    840c:	f8 01       	movw	r30, r16
    840e:	91 83       	std	Z+1, r25	; 0x01
    8410:	80 83       	st	Z, r24
    8412:	27 c0       	rjmp	.+78     	; 0x8462 <main+0x638>
    8414:	ce 01       	movw	r24, r28
    8416:	8d 5b       	subi	r24, 0xBD	; 189
    8418:	9f 4f       	sbci	r25, 0xFF	; 255
    841a:	20 e7       	ldi	r18, 0x70	; 112
    841c:	31 e0       	ldi	r19, 0x01	; 1
    841e:	fc 01       	movw	r30, r24
    8420:	31 83       	std	Z+1, r19	; 0x01
    8422:	20 83       	st	Z, r18
    8424:	ce 01       	movw	r24, r28
    8426:	8d 5b       	subi	r24, 0xBD	; 189
    8428:	9f 4f       	sbci	r25, 0xFF	; 255
    842a:	fc 01       	movw	r30, r24
    842c:	80 81       	ld	r24, Z
    842e:	91 81       	ldd	r25, Z+1	; 0x01
    8430:	8c 01       	movw	r16, r24
    8432:	c8 01       	movw	r24, r16
    8434:	01 97       	sbiw	r24, 0x01	; 1
    8436:	f1 f7       	brne	.-4      	; 0x8434 <main+0x60a>
    8438:	8c 01       	movw	r16, r24
    843a:	ce 01       	movw	r24, r28
    843c:	8d 5b       	subi	r24, 0xBD	; 189
    843e:	9f 4f       	sbci	r25, 0xFF	; 255
    8440:	fc 01       	movw	r30, r24
    8442:	11 83       	std	Z+1, r17	; 0x01
    8444:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8446:	ce 01       	movw	r24, r28
    8448:	8f 5b       	subi	r24, 0xBF	; 191
    844a:	9f 4f       	sbci	r25, 0xFF	; 255
    844c:	9e 01       	movw	r18, r28
    844e:	2f 5b       	subi	r18, 0xBF	; 191
    8450:	3f 4f       	sbci	r19, 0xFF	; 255
    8452:	f9 01       	movw	r30, r18
    8454:	20 81       	ld	r18, Z
    8456:	31 81       	ldd	r19, Z+1	; 0x01
    8458:	21 50       	subi	r18, 0x01	; 1
    845a:	30 40       	sbci	r19, 0x00	; 0
    845c:	fc 01       	movw	r30, r24
    845e:	31 83       	std	Z+1, r19	; 0x01
    8460:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8462:	ce 01       	movw	r24, r28
    8464:	8f 5b       	subi	r24, 0xBF	; 191
    8466:	9f 4f       	sbci	r25, 0xFF	; 255
    8468:	fc 01       	movw	r30, r24
    846a:	80 81       	ld	r24, Z
    846c:	91 81       	ldd	r25, Z+1	; 0x01
    846e:	00 97       	sbiw	r24, 0x00	; 0
    8470:	89 f6       	brne	.-94     	; 0x8414 <main+0x5ea>
    8472:	2e c0       	rjmp	.+92     	; 0x84d0 <main+0x6a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8474:	8e 01       	movw	r16, r28
    8476:	0f 5b       	subi	r16, 0xBF	; 191
    8478:	1f 4f       	sbci	r17, 0xFF	; 255
    847a:	ce 01       	movw	r24, r28
    847c:	cd 96       	adiw	r24, 0x3d	; 61
    847e:	fc 01       	movw	r30, r24
    8480:	60 81       	ld	r22, Z
    8482:	71 81       	ldd	r23, Z+1	; 0x01
    8484:	82 81       	ldd	r24, Z+2	; 0x02
    8486:	93 81       	ldd	r25, Z+3	; 0x03
    8488:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    848c:	dc 01       	movw	r26, r24
    848e:	cb 01       	movw	r24, r22
    8490:	f8 01       	movw	r30, r16
    8492:	91 83       	std	Z+1, r25	; 0x01
    8494:	80 83       	st	Z, r24
    8496:	ce 01       	movw	r24, r28
    8498:	8b 5b       	subi	r24, 0xBB	; 187
    849a:	9f 4f       	sbci	r25, 0xFF	; 255
    849c:	9e 01       	movw	r18, r28
    849e:	2f 5b       	subi	r18, 0xBF	; 191
    84a0:	3f 4f       	sbci	r19, 0xFF	; 255
    84a2:	f9 01       	movw	r30, r18
    84a4:	20 81       	ld	r18, Z
    84a6:	31 81       	ldd	r19, Z+1	; 0x01
    84a8:	fc 01       	movw	r30, r24
    84aa:	31 83       	std	Z+1, r19	; 0x01
    84ac:	20 83       	st	Z, r18
    84ae:	ce 01       	movw	r24, r28
    84b0:	8b 5b       	subi	r24, 0xBB	; 187
    84b2:	9f 4f       	sbci	r25, 0xFF	; 255
    84b4:	fc 01       	movw	r30, r24
    84b6:	80 81       	ld	r24, Z
    84b8:	91 81       	ldd	r25, Z+1	; 0x01
    84ba:	8c 01       	movw	r16, r24
    84bc:	c8 01       	movw	r24, r16
    84be:	01 97       	sbiw	r24, 0x01	; 1
    84c0:	f1 f7       	brne	.-4      	; 0x84be <main+0x694>
    84c2:	8c 01       	movw	r16, r24
    84c4:	ce 01       	movw	r24, r28
    84c6:	8b 5b       	subi	r24, 0xBB	; 187
    84c8:	9f 4f       	sbci	r25, 0xFF	; 255
    84ca:	fc 01       	movw	r30, r24
    84cc:	11 83       	std	Z+1, r17	; 0x01
    84ce:	00 83       	st	Z, r16
			_delay_ms(400);
			obstacle_detector();     
    84d0:	0e 94 37 37 	call	0x6e6e	; 0x6e6e <obstacle_detector>
		}
		
		if((pathL > 20) || (pathR > 20))           //to avoid multiple node count
    84d4:	80 91 35 02 	lds	r24, 0x0235
    84d8:	85 31       	cpi	r24, 0x15	; 21
    84da:	20 f4       	brcc	.+8      	; 0x84e4 <main+0x6ba>
    84dc:	80 91 36 02 	lds	r24, 0x0236
    84e0:	85 31       	cpi	r24, 0x15	; 21
    84e2:	10 f0       	brcs	.+4      	; 0x84e8 <main+0x6be>
		{
			flag_node=0;
    84e4:	10 92 26 02 	sts	0x0226, r1
		}
		
		if ((SHARP1 > 100 && SHARP1 < 160) && ( flag_left_object==0 ) && (pathL > 30 && pathL < 50))      //when left object is detected.
    84e8:	80 91 3f 02 	lds	r24, 0x023F
    84ec:	85 36       	cpi	r24, 0x65	; 101
    84ee:	48 f1       	brcs	.+82     	; 0x8542 <main+0x718>
    84f0:	80 91 3f 02 	lds	r24, 0x023F
    84f4:	80 3a       	cpi	r24, 0xA0	; 160
    84f6:	28 f5       	brcc	.+74     	; 0x8542 <main+0x718>
    84f8:	80 91 33 02 	lds	r24, 0x0233
    84fc:	88 23       	and	r24, r24
    84fe:	09 f5       	brne	.+66     	; 0x8542 <main+0x718>
    8500:	80 91 35 02 	lds	r24, 0x0235
    8504:	8f 31       	cpi	r24, 0x1F	; 31
    8506:	e8 f0       	brcs	.+58     	; 0x8542 <main+0x718>
    8508:	80 91 35 02 	lds	r24, 0x0235
    850c:	82 33       	cpi	r24, 0x32	; 50
    850e:	c8 f4       	brcc	.+50     	; 0x8542 <main+0x718>
		{
			flag_left_object=1;
    8510:	81 e0       	ldi	r24, 0x01	; 1
    8512:	80 93 33 02 	sts	0x0233, r24
			IR1=ADC_Conversion(4);
    8516:	84 e0       	ldi	r24, 0x04	; 4
    8518:	0e 94 82 11 	call	0x2304	; 0x2304 <ADC_Conversion>
    851c:	80 93 3a 02 	sts	0x023A, r24
			if(IR1 < 146)
    8520:	80 91 3a 02 	lds	r24, 0x023A
    8524:	82 39       	cpi	r24, 0x92	; 146
    8526:	68 f4       	brcc	.+26     	; 0x8542 <main+0x718>
			{
				stop_bot();
    8528:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
				object_detector();
    852c:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <object_detector>
				flag_left_object=2;
    8530:	82 e0       	ldi	r24, 0x02	; 2
    8532:	80 93 33 02 	sts	0x0233, r24
				forward();
    8536:	0e 94 fe 11 	call	0x23fc	; 0x23fc <forward>
				velocity(140,140);
    853a:	8c e8       	ldi	r24, 0x8C	; 140
    853c:	6c e8       	ldi	r22, 0x8C	; 140
    853e:	0e 94 c6 11 	call	0x238c	; 0x238c <velocity>
			}		
		}
		SHARP5=ADC_Conversion(13); 
    8542:	8d e0       	ldi	r24, 0x0D	; 13
    8544:	0e 94 82 11 	call	0x2304	; 0x2304 <ADC_Conversion>
    8548:	80 93 40 02 	sts	0x0240, r24
		if ((SHARP5 > 48 && SHARP5 < 100) && (flag_right_object==0) && (pathR > 30 && pathR < 50))       //when right object is detected
    854c:	80 91 40 02 	lds	r24, 0x0240
    8550:	81 33       	cpi	r24, 0x31	; 49
    8552:	48 f1       	brcs	.+82     	; 0x85a6 <main+0x77c>
    8554:	80 91 40 02 	lds	r24, 0x0240
    8558:	84 36       	cpi	r24, 0x64	; 100
    855a:	28 f5       	brcc	.+74     	; 0x85a6 <main+0x77c>
    855c:	80 91 34 02 	lds	r24, 0x0234
    8560:	88 23       	and	r24, r24
    8562:	09 f5       	brne	.+66     	; 0x85a6 <main+0x77c>
    8564:	80 91 36 02 	lds	r24, 0x0236
    8568:	8f 31       	cpi	r24, 0x1F	; 31
    856a:	e8 f0       	brcs	.+58     	; 0x85a6 <main+0x77c>
    856c:	80 91 36 02 	lds	r24, 0x0236
    8570:	82 33       	cpi	r24, 0x32	; 50
    8572:	c8 f4       	brcc	.+50     	; 0x85a6 <main+0x77c>
		{
			flag_right_object=1;
    8574:	81 e0       	ldi	r24, 0x01	; 1
    8576:	80 93 34 02 	sts	0x0234, r24
			IR5=ADC_Conversion(8);
    857a:	88 e0       	ldi	r24, 0x08	; 8
    857c:	0e 94 82 11 	call	0x2304	; 0x2304 <ADC_Conversion>
    8580:	80 93 3e 02 	sts	0x023E, r24
			if (IR5 < 152)
    8584:	80 91 3e 02 	lds	r24, 0x023E
    8588:	88 39       	cpi	r24, 0x98	; 152
    858a:	68 f4       	brcc	.+26     	; 0x85a6 <main+0x77c>
			{
				stop_bot();
    858c:	0e 94 26 12 	call	0x244c	; 0x244c <stop_bot>
				object_detector();
    8590:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <object_detector>
				flag_right_object=2;
    8594:	82 e0       	ldi	r24, 0x02	; 2
    8596:	80 93 34 02 	sts	0x0234, r24
				forward();
    859a:	0e 94 fe 11 	call	0x23fc	; 0x23fc <forward>
				velocity(140,140);
    859e:	8c e8       	ldi	r24, 0x8C	; 140
    85a0:	6c e8       	ldi	r22, 0x8C	; 140
    85a2:	0e 94 c6 11 	call	0x238c	; 0x238c <velocity>
			}
			
		}
		if((flag_Shape == 0) && (IR1<100 && IR5<100) && (pathL > 20 && pathL < 60))    //tunnel detection   (flag_S4==0) && 
    85a6:	80 91 28 02 	lds	r24, 0x0228
    85aa:	88 23       	and	r24, r24
    85ac:	09 f0       	breq	.+2      	; 0x85b0 <main+0x786>
    85ae:	f8 c0       	rjmp	.+496    	; 0x87a0 <main+0x976>
    85b0:	80 91 3a 02 	lds	r24, 0x023A
    85b4:	84 36       	cpi	r24, 0x64	; 100
    85b6:	08 f0       	brcs	.+2      	; 0x85ba <main+0x790>
    85b8:	f3 c0       	rjmp	.+486    	; 0x87a0 <main+0x976>
    85ba:	80 91 3e 02 	lds	r24, 0x023E
    85be:	84 36       	cpi	r24, 0x64	; 100
    85c0:	08 f0       	brcs	.+2      	; 0x85c4 <main+0x79a>
    85c2:	ee c0       	rjmp	.+476    	; 0x87a0 <main+0x976>
    85c4:	80 91 35 02 	lds	r24, 0x0235
    85c8:	85 31       	cpi	r24, 0x15	; 21
    85ca:	08 f4       	brcc	.+2      	; 0x85ce <main+0x7a4>
    85cc:	e9 c0       	rjmp	.+466    	; 0x87a0 <main+0x976>
    85ce:	80 91 35 02 	lds	r24, 0x0235
    85d2:	8c 33       	cpi	r24, 0x3C	; 60
    85d4:	08 f0       	brcs	.+2      	; 0x85d8 <main+0x7ae>
    85d6:	e4 c0       	rjmp	.+456    	; 0x87a0 <main+0x976>
		{
			flag_S4=1;
    85d8:	81 e0       	ldi	r24, 0x01	; 1
    85da:	80 93 2d 02 	sts	0x022D, r24
			flag_Shape=1;
    85de:	81 e0       	ldi	r24, 0x01	; 1
    85e0:	80 93 28 02 	sts	0x0228, r24
			shape_type='4';
    85e4:	84 e3       	ldi	r24, 0x34	; 52
    85e6:	80 93 05 02 	sts	0x0205, r24
			buzzer_beep();
    85ea:	0e 94 55 10 	call	0x20aa	; 0x20aa <buzzer_beep>
			servo_1(95);
    85ee:	8f e5       	ldi	r24, 0x5F	; 95
    85f0:	0e 94 23 11 	call	0x2246	; 0x2246 <servo_1>
    85f4:	9e 01       	movw	r18, r28
    85f6:	29 5b       	subi	r18, 0xB9	; 185
    85f8:	3f 4f       	sbci	r19, 0xFF	; 255
    85fa:	80 e0       	ldi	r24, 0x00	; 0
    85fc:	90 e0       	ldi	r25, 0x00	; 0
    85fe:	a8 ec       	ldi	r26, 0xC8	; 200
    8600:	b2 e4       	ldi	r27, 0x42	; 66
    8602:	f9 01       	movw	r30, r18
    8604:	80 83       	st	Z, r24
    8606:	91 83       	std	Z+1, r25	; 0x01
    8608:	a2 83       	std	Z+2, r26	; 0x02
    860a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    860c:	8e 01       	movw	r16, r28
    860e:	05 5b       	subi	r16, 0xB5	; 181
    8610:	1f 4f       	sbci	r17, 0xFF	; 255
    8612:	ce 01       	movw	r24, r28
    8614:	89 5b       	subi	r24, 0xB9	; 185
    8616:	9f 4f       	sbci	r25, 0xFF	; 255
    8618:	fc 01       	movw	r30, r24
    861a:	60 81       	ld	r22, Z
    861c:	71 81       	ldd	r23, Z+1	; 0x01
    861e:	82 81       	ldd	r24, Z+2	; 0x02
    8620:	93 81       	ldd	r25, Z+3	; 0x03
    8622:	26 e6       	ldi	r18, 0x66	; 102
    8624:	36 e6       	ldi	r19, 0x66	; 102
    8626:	46 e6       	ldi	r20, 0x66	; 102
    8628:	55 e4       	ldi	r21, 0x45	; 69
    862a:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    862e:	dc 01       	movw	r26, r24
    8630:	cb 01       	movw	r24, r22
    8632:	f8 01       	movw	r30, r16
    8634:	80 83       	st	Z, r24
    8636:	91 83       	std	Z+1, r25	; 0x01
    8638:	a2 83       	std	Z+2, r26	; 0x02
    863a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    863c:	ce 01       	movw	r24, r28
    863e:	85 5b       	subi	r24, 0xB5	; 181
    8640:	9f 4f       	sbci	r25, 0xFF	; 255
    8642:	11 e0       	ldi	r17, 0x01	; 1
    8644:	fc 01       	movw	r30, r24
    8646:	60 81       	ld	r22, Z
    8648:	71 81       	ldd	r23, Z+1	; 0x01
    864a:	82 81       	ldd	r24, Z+2	; 0x02
    864c:	93 81       	ldd	r25, Z+3	; 0x03
    864e:	20 e0       	ldi	r18, 0x00	; 0
    8650:	30 e0       	ldi	r19, 0x00	; 0
    8652:	40 e8       	ldi	r20, 0x80	; 128
    8654:	5f e3       	ldi	r21, 0x3F	; 63
    8656:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    865a:	88 23       	and	r24, r24
    865c:	0c f0       	brlt	.+2      	; 0x8660 <main+0x836>
    865e:	10 e0       	ldi	r17, 0x00	; 0
    8660:	11 23       	and	r17, r17
    8662:	49 f0       	breq	.+18     	; 0x8676 <main+0x84c>
		__ticks = 1;
    8664:	ce 01       	movw	r24, r28
    8666:	81 5b       	subi	r24, 0xB1	; 177
    8668:	9f 4f       	sbci	r25, 0xFF	; 255
    866a:	21 e0       	ldi	r18, 0x01	; 1
    866c:	30 e0       	ldi	r19, 0x00	; 0
    866e:	fc 01       	movw	r30, r24
    8670:	31 83       	std	Z+1, r19	; 0x01
    8672:	20 83       	st	Z, r18
    8674:	74 c0       	rjmp	.+232    	; 0x875e <main+0x934>
	else if (__tmp > 65535)
    8676:	ce 01       	movw	r24, r28
    8678:	85 5b       	subi	r24, 0xB5	; 181
    867a:	9f 4f       	sbci	r25, 0xFF	; 255
    867c:	11 e0       	ldi	r17, 0x01	; 1
    867e:	fc 01       	movw	r30, r24
    8680:	60 81       	ld	r22, Z
    8682:	71 81       	ldd	r23, Z+1	; 0x01
    8684:	82 81       	ldd	r24, Z+2	; 0x02
    8686:	93 81       	ldd	r25, Z+3	; 0x03
    8688:	20 e0       	ldi	r18, 0x00	; 0
    868a:	3f ef       	ldi	r19, 0xFF	; 255
    868c:	4f e7       	ldi	r20, 0x7F	; 127
    868e:	57 e4       	ldi	r21, 0x47	; 71
    8690:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    8694:	18 16       	cp	r1, r24
    8696:	0c f0       	brlt	.+2      	; 0x869a <main+0x870>
    8698:	10 e0       	ldi	r17, 0x00	; 0
    869a:	11 23       	and	r17, r17
    869c:	09 f4       	brne	.+2      	; 0x86a0 <main+0x876>
    869e:	4d c0       	rjmp	.+154    	; 0x873a <main+0x910>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    86a0:	ce 01       	movw	r24, r28
    86a2:	89 5b       	subi	r24, 0xB9	; 185
    86a4:	9f 4f       	sbci	r25, 0xFF	; 255
    86a6:	fc 01       	movw	r30, r24
    86a8:	60 81       	ld	r22, Z
    86aa:	71 81       	ldd	r23, Z+1	; 0x01
    86ac:	82 81       	ldd	r24, Z+2	; 0x02
    86ae:	93 81       	ldd	r25, Z+3	; 0x03
    86b0:	20 e0       	ldi	r18, 0x00	; 0
    86b2:	30 e0       	ldi	r19, 0x00	; 0
    86b4:	40 e2       	ldi	r20, 0x20	; 32
    86b6:	51 e4       	ldi	r21, 0x41	; 65
    86b8:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    86bc:	dc 01       	movw	r26, r24
    86be:	cb 01       	movw	r24, r22
    86c0:	8e 01       	movw	r16, r28
    86c2:	01 5b       	subi	r16, 0xB1	; 177
    86c4:	1f 4f       	sbci	r17, 0xFF	; 255
    86c6:	bc 01       	movw	r22, r24
    86c8:	cd 01       	movw	r24, r26
    86ca:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    86ce:	dc 01       	movw	r26, r24
    86d0:	cb 01       	movw	r24, r22
    86d2:	f8 01       	movw	r30, r16
    86d4:	91 83       	std	Z+1, r25	; 0x01
    86d6:	80 83       	st	Z, r24
    86d8:	27 c0       	rjmp	.+78     	; 0x8728 <main+0x8fe>
    86da:	ce 01       	movw	r24, r28
    86dc:	8f 5a       	subi	r24, 0xAF	; 175
    86de:	9f 4f       	sbci	r25, 0xFF	; 255
    86e0:	20 e7       	ldi	r18, 0x70	; 112
    86e2:	31 e0       	ldi	r19, 0x01	; 1
    86e4:	fc 01       	movw	r30, r24
    86e6:	31 83       	std	Z+1, r19	; 0x01
    86e8:	20 83       	st	Z, r18
    86ea:	ce 01       	movw	r24, r28
    86ec:	8f 5a       	subi	r24, 0xAF	; 175
    86ee:	9f 4f       	sbci	r25, 0xFF	; 255
    86f0:	fc 01       	movw	r30, r24
    86f2:	80 81       	ld	r24, Z
    86f4:	91 81       	ldd	r25, Z+1	; 0x01
    86f6:	8c 01       	movw	r16, r24
    86f8:	c8 01       	movw	r24, r16
    86fa:	01 97       	sbiw	r24, 0x01	; 1
    86fc:	f1 f7       	brne	.-4      	; 0x86fa <main+0x8d0>
    86fe:	8c 01       	movw	r16, r24
    8700:	ce 01       	movw	r24, r28
    8702:	8f 5a       	subi	r24, 0xAF	; 175
    8704:	9f 4f       	sbci	r25, 0xFF	; 255
    8706:	fc 01       	movw	r30, r24
    8708:	11 83       	std	Z+1, r17	; 0x01
    870a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    870c:	ce 01       	movw	r24, r28
    870e:	81 5b       	subi	r24, 0xB1	; 177
    8710:	9f 4f       	sbci	r25, 0xFF	; 255
    8712:	9e 01       	movw	r18, r28
    8714:	21 5b       	subi	r18, 0xB1	; 177
    8716:	3f 4f       	sbci	r19, 0xFF	; 255
    8718:	f9 01       	movw	r30, r18
    871a:	20 81       	ld	r18, Z
    871c:	31 81       	ldd	r19, Z+1	; 0x01
    871e:	21 50       	subi	r18, 0x01	; 1
    8720:	30 40       	sbci	r19, 0x00	; 0
    8722:	fc 01       	movw	r30, r24
    8724:	31 83       	std	Z+1, r19	; 0x01
    8726:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8728:	ce 01       	movw	r24, r28
    872a:	81 5b       	subi	r24, 0xB1	; 177
    872c:	9f 4f       	sbci	r25, 0xFF	; 255
    872e:	fc 01       	movw	r30, r24
    8730:	80 81       	ld	r24, Z
    8732:	91 81       	ldd	r25, Z+1	; 0x01
    8734:	00 97       	sbiw	r24, 0x00	; 0
    8736:	89 f6       	brne	.-94     	; 0x86da <main+0x8b0>
    8738:	2f c0       	rjmp	.+94     	; 0x8798 <main+0x96e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    873a:	8e 01       	movw	r16, r28
    873c:	01 5b       	subi	r16, 0xB1	; 177
    873e:	1f 4f       	sbci	r17, 0xFF	; 255
    8740:	ce 01       	movw	r24, r28
    8742:	85 5b       	subi	r24, 0xB5	; 181
    8744:	9f 4f       	sbci	r25, 0xFF	; 255
    8746:	fc 01       	movw	r30, r24
    8748:	60 81       	ld	r22, Z
    874a:	71 81       	ldd	r23, Z+1	; 0x01
    874c:	82 81       	ldd	r24, Z+2	; 0x02
    874e:	93 81       	ldd	r25, Z+3	; 0x03
    8750:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    8754:	dc 01       	movw	r26, r24
    8756:	cb 01       	movw	r24, r22
    8758:	f8 01       	movw	r30, r16
    875a:	91 83       	std	Z+1, r25	; 0x01
    875c:	80 83       	st	Z, r24
    875e:	ce 01       	movw	r24, r28
    8760:	8d 5a       	subi	r24, 0xAD	; 173
    8762:	9f 4f       	sbci	r25, 0xFF	; 255
    8764:	9e 01       	movw	r18, r28
    8766:	21 5b       	subi	r18, 0xB1	; 177
    8768:	3f 4f       	sbci	r19, 0xFF	; 255
    876a:	f9 01       	movw	r30, r18
    876c:	20 81       	ld	r18, Z
    876e:	31 81       	ldd	r19, Z+1	; 0x01
    8770:	fc 01       	movw	r30, r24
    8772:	31 83       	std	Z+1, r19	; 0x01
    8774:	20 83       	st	Z, r18
    8776:	ce 01       	movw	r24, r28
    8778:	8d 5a       	subi	r24, 0xAD	; 173
    877a:	9f 4f       	sbci	r25, 0xFF	; 255
    877c:	fc 01       	movw	r30, r24
    877e:	80 81       	ld	r24, Z
    8780:	91 81       	ldd	r25, Z+1	; 0x01
    8782:	8c 01       	movw	r16, r24
    8784:	c8 01       	movw	r24, r16
    8786:	01 97       	sbiw	r24, 0x01	; 1
    8788:	f1 f7       	brne	.-4      	; 0x8786 <main+0x95c>
    878a:	8c 01       	movw	r16, r24
    878c:	ce 01       	movw	r24, r28
    878e:	8d 5a       	subi	r24, 0xAD	; 173
    8790:	9f 4f       	sbci	r25, 0xFF	; 255
    8792:	fc 01       	movw	r30, r24
    8794:	11 83       	std	Z+1, r17	; 0x01
    8796:	00 83       	st	Z, r16
			_delay_ms(100);
			servo_1_free();
    8798:	0e 94 71 11 	call	0x22e2	; 0x22e2 <servo_1_free>
			tunnel_traveller();
    879c:	0e 94 06 1a 	call	0x340c	; 0x340c <tunnel_traveller>
		}
		
        // line follower
		sensor_refresh();
    87a0:	0e 94 03 16 	call	0x2c06	; 0x2c06 <sensor_refresh>
    87a4:	03 c0       	rjmp	.+6      	; 0x87ac <main+0x982>
		{
			right_degrees(6);  //soft right}
			velocity(150,150);
			C=ADC_Conversion(2);
			if(C>0x17)
				goto L1;
    87a6:	00 00       	nop
    87a8:	01 c0       	rjmp	.+2      	; 0x87ac <main+0x982>
		{
			 left_degrees(6);    //soft left
			 velocity(150,150);
			 C=ADC_Conversion(2);  
			 if(C>0x17)
				goto L1;
    87aa:	00 00       	nop
			tunnel_traveller();
		}
		
        // line follower
		sensor_refresh();
	L1:	if((L<0x17 && C>0x17 && R<0x17))        // 010 
    87ac:	80 91 37 02 	lds	r24, 0x0237
    87b0:	87 31       	cpi	r24, 0x17	; 23
    87b2:	88 f4       	brcc	.+34     	; 0x87d6 <main+0x9ac>
    87b4:	80 91 38 02 	lds	r24, 0x0238
    87b8:	88 31       	cpi	r24, 0x18	; 24
    87ba:	68 f0       	brcs	.+26     	; 0x87d6 <main+0x9ac>
    87bc:	80 91 39 02 	lds	r24, 0x0239
    87c0:	87 31       	cpi	r24, 0x17	; 23
    87c2:	48 f4       	brcc	.+18     	; 0x87d6 <main+0x9ac>
		{
			forward_mm(5);
    87c4:	85 e0       	ldi	r24, 0x05	; 5
    87c6:	90 e0       	ldi	r25, 0x00	; 0
    87c8:	0e 94 4d 13 	call	0x269a	; 0x269a <forward_mm>
			velocity(170,172);	
    87cc:	8a ea       	ldi	r24, 0xAA	; 170
    87ce:	6c ea       	ldi	r22, 0xAC	; 172
    87d0:	0e 94 c6 11 	call	0x238c	; 0x238c <velocity>
    87d4:	51 c0       	rjmp	.+162    	; 0x8878 <main+0xa4e>
		}
		else if((L<0x17 && C<0x17 && R>0x17))   // 001 0r 011
    87d6:	80 91 37 02 	lds	r24, 0x0237
    87da:	87 31       	cpi	r24, 0x17	; 23
    87dc:	f8 f4       	brcc	.+62     	; 0x881c <main+0x9f2>
    87de:	80 91 38 02 	lds	r24, 0x0238
    87e2:	87 31       	cpi	r24, 0x17	; 23
    87e4:	d8 f4       	brcc	.+54     	; 0x881c <main+0x9f2>
    87e6:	80 91 39 02 	lds	r24, 0x0239
    87ea:	88 31       	cpi	r24, 0x18	; 24
    87ec:	b8 f0       	brcs	.+46     	; 0x881c <main+0x9f2>
		{
			right_degrees(6);  //soft right}
    87ee:	86 e0       	ldi	r24, 0x06	; 6
    87f0:	90 e0       	ldi	r25, 0x00	; 0
    87f2:	0e 94 c1 12 	call	0x2582	; 0x2582 <right_degrees>
			velocity(150,150);
    87f6:	86 e9       	ldi	r24, 0x96	; 150
    87f8:	66 e9       	ldi	r22, 0x96	; 150
    87fa:	0e 94 c6 11 	call	0x238c	; 0x238c <velocity>
			C=ADC_Conversion(2);
    87fe:	82 e0       	ldi	r24, 0x02	; 2
    8800:	0e 94 82 11 	call	0x2304	; 0x2304 <ADC_Conversion>
    8804:	80 93 38 02 	sts	0x0238, r24
			if(C>0x17)
    8808:	80 91 38 02 	lds	r24, 0x0238
    880c:	88 31       	cpi	r24, 0x18	; 24
    880e:	58 f6       	brcc	.-106    	; 0x87a6 <main+0x97c>
				goto L1;
			flag_S1_count++;
    8810:	80 91 2a 02 	lds	r24, 0x022A
    8814:	8f 5f       	subi	r24, 0xFF	; 255
    8816:	80 93 2a 02 	sts	0x022A, r24
    881a:	2e c0       	rjmp	.+92     	; 0x8878 <main+0xa4e>
		}
		
		else if((L>0x17 && C<0x17 && R<0x17))   // 100
    881c:	80 91 37 02 	lds	r24, 0x0237
    8820:	88 31       	cpi	r24, 0x18	; 24
    8822:	00 f1       	brcs	.+64     	; 0x8864 <main+0xa3a>
    8824:	80 91 38 02 	lds	r24, 0x0238
    8828:	87 31       	cpi	r24, 0x17	; 23
    882a:	e0 f4       	brcc	.+56     	; 0x8864 <main+0xa3a>
    882c:	80 91 39 02 	lds	r24, 0x0239
    8830:	87 31       	cpi	r24, 0x17	; 23
    8832:	c0 f4       	brcc	.+48     	; 0x8864 <main+0xa3a>
		{
			 left_degrees(6);    //soft left
    8834:	86 e0       	ldi	r24, 0x06	; 6
    8836:	90 e0       	ldi	r25, 0x00	; 0
    8838:	0e 94 ae 12 	call	0x255c	; 0x255c <left_degrees>
			 velocity(150,150);
    883c:	86 e9       	ldi	r24, 0x96	; 150
    883e:	66 e9       	ldi	r22, 0x96	; 150
    8840:	0e 94 c6 11 	call	0x238c	; 0x238c <velocity>
			 C=ADC_Conversion(2);  
    8844:	82 e0       	ldi	r24, 0x02	; 2
    8846:	0e 94 82 11 	call	0x2304	; 0x2304 <ADC_Conversion>
    884a:	80 93 38 02 	sts	0x0238, r24
			 if(C>0x17)
    884e:	80 91 38 02 	lds	r24, 0x0238
    8852:	88 31       	cpi	r24, 0x18	; 24
    8854:	08 f0       	brcs	.+2      	; 0x8858 <main+0xa2e>
    8856:	a9 cf       	rjmp	.-174    	; 0x87aa <main+0x980>
				goto L1;
			 flag_S1_count++;
    8858:	80 91 2a 02 	lds	r24, 0x022A
    885c:	8f 5f       	subi	r24, 0xFF	; 255
    885e:	80 93 2a 02 	sts	0x022A, r24
    8862:	0a c0       	rjmp	.+20     	; 0x8878 <main+0xa4e>
		}
		else
		{
			forward_mm(10);
    8864:	8a e0       	ldi	r24, 0x0A	; 10
    8866:	90 e0       	ldi	r25, 0x00	; 0
    8868:	0e 94 4d 13 	call	0x269a	; 0x269a <forward_mm>
			velocity(170,172);
    886c:	8a ea       	ldi	r24, 0xAA	; 170
    886e:	6c ea       	ldi	r22, 0xAC	; 172
    8870:	0e 94 c6 11 	call	0x238c	; 0x238c <velocity>
			sensor_refresh();
    8874:	0e 94 03 16 	call	0x2c06	; 0x2c06 <sensor_refresh>
		}
		
		if((flag_S1_count >= 10) && (flag_S1 == 1) && ( flag_Shape == 1 ))
    8878:	80 91 2a 02 	lds	r24, 0x022A
    887c:	8a 30       	cpi	r24, 0x0A	; 10
    887e:	08 f4       	brcc	.+2      	; 0x8882 <main+0xa58>
    8880:	ee c0       	rjmp	.+476    	; 0x8a5e <main+0xc34>
    8882:	80 91 29 02 	lds	r24, 0x0229
    8886:	81 30       	cpi	r24, 0x01	; 1
    8888:	09 f0       	breq	.+2      	; 0x888c <main+0xa62>
    888a:	e9 c0       	rjmp	.+466    	; 0x8a5e <main+0xc34>
    888c:	80 91 28 02 	lds	r24, 0x0228
    8890:	81 30       	cpi	r24, 0x01	; 1
    8892:	09 f0       	breq	.+2      	; 0x8896 <main+0xa6c>
    8894:	e4 c0       	rjmp	.+456    	; 0x8a5e <main+0xc34>
		{
			buzzer_beep();
    8896:	0e 94 55 10 	call	0x20aa	; 0x20aa <buzzer_beep>
			shape_type='1';
    889a:	81 e3       	ldi	r24, 0x31	; 49
    889c:	80 93 05 02 	sts	0x0205, r24
			lcd_print(1,1,1,3);
    88a0:	81 e0       	ldi	r24, 0x01	; 1
    88a2:	61 e0       	ldi	r22, 0x01	; 1
    88a4:	41 e0       	ldi	r20, 0x01	; 1
    88a6:	50 e0       	ldi	r21, 0x00	; 0
    88a8:	23 e0       	ldi	r18, 0x03	; 3
    88aa:	30 e0       	ldi	r19, 0x00	; 0
    88ac:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_print>
    88b0:	9e 01       	movw	r18, r28
    88b2:	2b 5a       	subi	r18, 0xAB	; 171
    88b4:	3f 4f       	sbci	r19, 0xFF	; 255
    88b6:	80 e0       	ldi	r24, 0x00	; 0
    88b8:	90 e0       	ldi	r25, 0x00	; 0
    88ba:	a0 ea       	ldi	r26, 0xA0	; 160
    88bc:	b1 e4       	ldi	r27, 0x41	; 65
    88be:	f9 01       	movw	r30, r18
    88c0:	80 83       	st	Z, r24
    88c2:	91 83       	std	Z+1, r25	; 0x01
    88c4:	a2 83       	std	Z+2, r26	; 0x02
    88c6:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    88c8:	8e 01       	movw	r16, r28
    88ca:	07 5a       	subi	r16, 0xA7	; 167
    88cc:	1f 4f       	sbci	r17, 0xFF	; 255
    88ce:	ce 01       	movw	r24, r28
    88d0:	8b 5a       	subi	r24, 0xAB	; 171
    88d2:	9f 4f       	sbci	r25, 0xFF	; 255
    88d4:	fc 01       	movw	r30, r24
    88d6:	60 81       	ld	r22, Z
    88d8:	71 81       	ldd	r23, Z+1	; 0x01
    88da:	82 81       	ldd	r24, Z+2	; 0x02
    88dc:	93 81       	ldd	r25, Z+3	; 0x03
    88de:	26 e6       	ldi	r18, 0x66	; 102
    88e0:	36 e6       	ldi	r19, 0x66	; 102
    88e2:	46 e6       	ldi	r20, 0x66	; 102
    88e4:	55 e4       	ldi	r21, 0x45	; 69
    88e6:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    88ea:	dc 01       	movw	r26, r24
    88ec:	cb 01       	movw	r24, r22
    88ee:	f8 01       	movw	r30, r16
    88f0:	80 83       	st	Z, r24
    88f2:	91 83       	std	Z+1, r25	; 0x01
    88f4:	a2 83       	std	Z+2, r26	; 0x02
    88f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    88f8:	ce 01       	movw	r24, r28
    88fa:	87 5a       	subi	r24, 0xA7	; 167
    88fc:	9f 4f       	sbci	r25, 0xFF	; 255
    88fe:	11 e0       	ldi	r17, 0x01	; 1
    8900:	fc 01       	movw	r30, r24
    8902:	60 81       	ld	r22, Z
    8904:	71 81       	ldd	r23, Z+1	; 0x01
    8906:	82 81       	ldd	r24, Z+2	; 0x02
    8908:	93 81       	ldd	r25, Z+3	; 0x03
    890a:	20 e0       	ldi	r18, 0x00	; 0
    890c:	30 e0       	ldi	r19, 0x00	; 0
    890e:	40 e8       	ldi	r20, 0x80	; 128
    8910:	5f e3       	ldi	r21, 0x3F	; 63
    8912:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    8916:	88 23       	and	r24, r24
    8918:	0c f0       	brlt	.+2      	; 0x891c <main+0xaf2>
    891a:	10 e0       	ldi	r17, 0x00	; 0
    891c:	11 23       	and	r17, r17
    891e:	49 f0       	breq	.+18     	; 0x8932 <main+0xb08>
		__ticks = 1;
    8920:	ce 01       	movw	r24, r28
    8922:	83 5a       	subi	r24, 0xA3	; 163
    8924:	9f 4f       	sbci	r25, 0xFF	; 255
    8926:	21 e0       	ldi	r18, 0x01	; 1
    8928:	30 e0       	ldi	r19, 0x00	; 0
    892a:	fc 01       	movw	r30, r24
    892c:	31 83       	std	Z+1, r19	; 0x01
    892e:	20 83       	st	Z, r18
    8930:	74 c0       	rjmp	.+232    	; 0x8a1a <main+0xbf0>
	else if (__tmp > 65535)
    8932:	ce 01       	movw	r24, r28
    8934:	87 5a       	subi	r24, 0xA7	; 167
    8936:	9f 4f       	sbci	r25, 0xFF	; 255
    8938:	11 e0       	ldi	r17, 0x01	; 1
    893a:	fc 01       	movw	r30, r24
    893c:	60 81       	ld	r22, Z
    893e:	71 81       	ldd	r23, Z+1	; 0x01
    8940:	82 81       	ldd	r24, Z+2	; 0x02
    8942:	93 81       	ldd	r25, Z+3	; 0x03
    8944:	20 e0       	ldi	r18, 0x00	; 0
    8946:	3f ef       	ldi	r19, 0xFF	; 255
    8948:	4f e7       	ldi	r20, 0x7F	; 127
    894a:	57 e4       	ldi	r21, 0x47	; 71
    894c:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    8950:	18 16       	cp	r1, r24
    8952:	0c f0       	brlt	.+2      	; 0x8956 <main+0xb2c>
    8954:	10 e0       	ldi	r17, 0x00	; 0
    8956:	11 23       	and	r17, r17
    8958:	09 f4       	brne	.+2      	; 0x895c <main+0xb32>
    895a:	4d c0       	rjmp	.+154    	; 0x89f6 <main+0xbcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    895c:	ce 01       	movw	r24, r28
    895e:	8b 5a       	subi	r24, 0xAB	; 171
    8960:	9f 4f       	sbci	r25, 0xFF	; 255
    8962:	fc 01       	movw	r30, r24
    8964:	60 81       	ld	r22, Z
    8966:	71 81       	ldd	r23, Z+1	; 0x01
    8968:	82 81       	ldd	r24, Z+2	; 0x02
    896a:	93 81       	ldd	r25, Z+3	; 0x03
    896c:	20 e0       	ldi	r18, 0x00	; 0
    896e:	30 e0       	ldi	r19, 0x00	; 0
    8970:	40 e2       	ldi	r20, 0x20	; 32
    8972:	51 e4       	ldi	r21, 0x41	; 65
    8974:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    8978:	dc 01       	movw	r26, r24
    897a:	cb 01       	movw	r24, r22
    897c:	8e 01       	movw	r16, r28
    897e:	03 5a       	subi	r16, 0xA3	; 163
    8980:	1f 4f       	sbci	r17, 0xFF	; 255
    8982:	bc 01       	movw	r22, r24
    8984:	cd 01       	movw	r24, r26
    8986:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    898a:	dc 01       	movw	r26, r24
    898c:	cb 01       	movw	r24, r22
    898e:	f8 01       	movw	r30, r16
    8990:	91 83       	std	Z+1, r25	; 0x01
    8992:	80 83       	st	Z, r24
    8994:	27 c0       	rjmp	.+78     	; 0x89e4 <main+0xbba>
    8996:	ce 01       	movw	r24, r28
    8998:	81 5a       	subi	r24, 0xA1	; 161
    899a:	9f 4f       	sbci	r25, 0xFF	; 255
    899c:	20 e7       	ldi	r18, 0x70	; 112
    899e:	31 e0       	ldi	r19, 0x01	; 1
    89a0:	fc 01       	movw	r30, r24
    89a2:	31 83       	std	Z+1, r19	; 0x01
    89a4:	20 83       	st	Z, r18
    89a6:	ce 01       	movw	r24, r28
    89a8:	81 5a       	subi	r24, 0xA1	; 161
    89aa:	9f 4f       	sbci	r25, 0xFF	; 255
    89ac:	fc 01       	movw	r30, r24
    89ae:	80 81       	ld	r24, Z
    89b0:	91 81       	ldd	r25, Z+1	; 0x01
    89b2:	8c 01       	movw	r16, r24
    89b4:	c8 01       	movw	r24, r16
    89b6:	01 97       	sbiw	r24, 0x01	; 1
    89b8:	f1 f7       	brne	.-4      	; 0x89b6 <main+0xb8c>
    89ba:	8c 01       	movw	r16, r24
    89bc:	ce 01       	movw	r24, r28
    89be:	81 5a       	subi	r24, 0xA1	; 161
    89c0:	9f 4f       	sbci	r25, 0xFF	; 255
    89c2:	fc 01       	movw	r30, r24
    89c4:	11 83       	std	Z+1, r17	; 0x01
    89c6:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    89c8:	ce 01       	movw	r24, r28
    89ca:	83 5a       	subi	r24, 0xA3	; 163
    89cc:	9f 4f       	sbci	r25, 0xFF	; 255
    89ce:	9e 01       	movw	r18, r28
    89d0:	23 5a       	subi	r18, 0xA3	; 163
    89d2:	3f 4f       	sbci	r19, 0xFF	; 255
    89d4:	f9 01       	movw	r30, r18
    89d6:	20 81       	ld	r18, Z
    89d8:	31 81       	ldd	r19, Z+1	; 0x01
    89da:	21 50       	subi	r18, 0x01	; 1
    89dc:	30 40       	sbci	r19, 0x00	; 0
    89de:	fc 01       	movw	r30, r24
    89e0:	31 83       	std	Z+1, r19	; 0x01
    89e2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    89e4:	ce 01       	movw	r24, r28
    89e6:	83 5a       	subi	r24, 0xA3	; 163
    89e8:	9f 4f       	sbci	r25, 0xFF	; 255
    89ea:	fc 01       	movw	r30, r24
    89ec:	80 81       	ld	r24, Z
    89ee:	91 81       	ldd	r25, Z+1	; 0x01
    89f0:	00 97       	sbiw	r24, 0x00	; 0
    89f2:	89 f6       	brne	.-94     	; 0x8996 <main+0xb6c>
    89f4:	2f c0       	rjmp	.+94     	; 0x8a54 <main+0xc2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    89f6:	8e 01       	movw	r16, r28
    89f8:	03 5a       	subi	r16, 0xA3	; 163
    89fa:	1f 4f       	sbci	r17, 0xFF	; 255
    89fc:	ce 01       	movw	r24, r28
    89fe:	87 5a       	subi	r24, 0xA7	; 167
    8a00:	9f 4f       	sbci	r25, 0xFF	; 255
    8a02:	fc 01       	movw	r30, r24
    8a04:	60 81       	ld	r22, Z
    8a06:	71 81       	ldd	r23, Z+1	; 0x01
    8a08:	82 81       	ldd	r24, Z+2	; 0x02
    8a0a:	93 81       	ldd	r25, Z+3	; 0x03
    8a0c:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    8a10:	dc 01       	movw	r26, r24
    8a12:	cb 01       	movw	r24, r22
    8a14:	f8 01       	movw	r30, r16
    8a16:	91 83       	std	Z+1, r25	; 0x01
    8a18:	80 83       	st	Z, r24
    8a1a:	ce 01       	movw	r24, r28
    8a1c:	8f 59       	subi	r24, 0x9F	; 159
    8a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    8a20:	9e 01       	movw	r18, r28
    8a22:	23 5a       	subi	r18, 0xA3	; 163
    8a24:	3f 4f       	sbci	r19, 0xFF	; 255
    8a26:	f9 01       	movw	r30, r18
    8a28:	20 81       	ld	r18, Z
    8a2a:	31 81       	ldd	r19, Z+1	; 0x01
    8a2c:	fc 01       	movw	r30, r24
    8a2e:	31 83       	std	Z+1, r19	; 0x01
    8a30:	20 83       	st	Z, r18
    8a32:	ce 01       	movw	r24, r28
    8a34:	8f 59       	subi	r24, 0x9F	; 159
    8a36:	9f 4f       	sbci	r25, 0xFF	; 255
    8a38:	fc 01       	movw	r30, r24
    8a3a:	80 81       	ld	r24, Z
    8a3c:	91 81       	ldd	r25, Z+1	; 0x01
    8a3e:	8c 01       	movw	r16, r24
    8a40:	c8 01       	movw	r24, r16
    8a42:	01 97       	sbiw	r24, 0x01	; 1
    8a44:	f1 f7       	brne	.-4      	; 0x8a42 <main+0xc18>
    8a46:	8c 01       	movw	r16, r24
    8a48:	ce 01       	movw	r24, r28
    8a4a:	8f 59       	subi	r24, 0x9F	; 159
    8a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    8a4e:	fc 01       	movw	r30, r24
    8a50:	11 83       	std	Z+1, r17	; 0x01
    8a52:	00 83       	st	Z, r16
			_delay_ms(20);
			flag_S1=2;
    8a54:	82 e0       	ldi	r24, 0x02	; 2
    8a56:	80 93 29 02 	sts	0x0229, r24
			flag_S1_count=0;
    8a5a:	10 92 2a 02 	sts	0x022A, r1
		}
		I2C_read();              //reads the I2C value
    8a5e:	0e 94 32 16 	call	0x2c64	; 0x2c64 <I2C_read>
		
		if((flag_Shape == 0) && ( rotation_z > 5000 ) && ( rotation_y < 100 ) && (pathR > 20 && pathR < 60))           //(flag_S1==0) &&
    8a62:	80 91 28 02 	lds	r24, 0x0228
    8a66:	88 23       	and	r24, r24
    8a68:	d9 f5       	brne	.+118    	; 0x8ae0 <main+0xcb6>
    8a6a:	80 91 5d 02 	lds	r24, 0x025D
    8a6e:	90 91 5e 02 	lds	r25, 0x025E
    8a72:	a0 91 5f 02 	lds	r26, 0x025F
    8a76:	b0 91 60 02 	lds	r27, 0x0260
    8a7a:	11 e0       	ldi	r17, 0x01	; 1
    8a7c:	bc 01       	movw	r22, r24
    8a7e:	cd 01       	movw	r24, r26
    8a80:	20 e0       	ldi	r18, 0x00	; 0
    8a82:	30 e4       	ldi	r19, 0x40	; 64
    8a84:	4c e9       	ldi	r20, 0x9C	; 156
    8a86:	55 e4       	ldi	r21, 0x45	; 69
    8a88:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    8a8c:	18 16       	cp	r1, r24
    8a8e:	0c f0       	brlt	.+2      	; 0x8a92 <main+0xc68>
    8a90:	10 e0       	ldi	r17, 0x00	; 0
    8a92:	11 23       	and	r17, r17
    8a94:	29 f1       	breq	.+74     	; 0x8ae0 <main+0xcb6>
    8a96:	80 91 59 02 	lds	r24, 0x0259
    8a9a:	90 91 5a 02 	lds	r25, 0x025A
    8a9e:	a0 91 5b 02 	lds	r26, 0x025B
    8aa2:	b0 91 5c 02 	lds	r27, 0x025C
    8aa6:	11 e0       	ldi	r17, 0x01	; 1
    8aa8:	bc 01       	movw	r22, r24
    8aaa:	cd 01       	movw	r24, r26
    8aac:	20 e0       	ldi	r18, 0x00	; 0
    8aae:	30 e0       	ldi	r19, 0x00	; 0
    8ab0:	48 ec       	ldi	r20, 0xC8	; 200
    8ab2:	52 e4       	ldi	r21, 0x42	; 66
    8ab4:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    8ab8:	88 23       	and	r24, r24
    8aba:	0c f0       	brlt	.+2      	; 0x8abe <main+0xc94>
    8abc:	10 e0       	ldi	r17, 0x00	; 0
    8abe:	11 23       	and	r17, r17
    8ac0:	79 f0       	breq	.+30     	; 0x8ae0 <main+0xcb6>
    8ac2:	80 91 36 02 	lds	r24, 0x0236
    8ac6:	85 31       	cpi	r24, 0x15	; 21
    8ac8:	58 f0       	brcs	.+22     	; 0x8ae0 <main+0xcb6>
    8aca:	80 91 36 02 	lds	r24, 0x0236
    8ace:	8c 33       	cpi	r24, 0x3C	; 60
    8ad0:	38 f4       	brcc	.+14     	; 0x8ae0 <main+0xcb6>
		{
			flag_S1=1;
    8ad2:	81 e0       	ldi	r24, 0x01	; 1
    8ad4:	80 93 29 02 	sts	0x0229, r24
			flag_Shape=1;				
    8ad8:	81 e0       	ldi	r24, 0x01	; 1
    8ada:	80 93 28 02 	sts	0x0228, r24
    8ade:	5e c2       	rjmp	.+1212   	; 0x8f9c <main+0x1172>
		}
		else if((flag_Shape == 0) && ( force_x > 5500 ) && (pathR > 20 && pathR < 40))            //  (flag_S2==0) &&     //bigger hump detector
    8ae0:	80 91 28 02 	lds	r24, 0x0228
    8ae4:	88 23       	and	r24, r24
    8ae6:	09 f0       	breq	.+2      	; 0x8aea <main+0xcc0>
    8ae8:	1f c1       	rjmp	.+574    	; 0x8d28 <main+0xefe>
    8aea:	80 91 55 02 	lds	r24, 0x0255
    8aee:	90 91 56 02 	lds	r25, 0x0256
    8af2:	a0 91 57 02 	lds	r26, 0x0257
    8af6:	b0 91 58 02 	lds	r27, 0x0258
    8afa:	11 e0       	ldi	r17, 0x01	; 1
    8afc:	bc 01       	movw	r22, r24
    8afe:	cd 01       	movw	r24, r26
    8b00:	20 e0       	ldi	r18, 0x00	; 0
    8b02:	30 ee       	ldi	r19, 0xE0	; 224
    8b04:	4b ea       	ldi	r20, 0xAB	; 171
    8b06:	55 e4       	ldi	r21, 0x45	; 69
    8b08:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    8b0c:	18 16       	cp	r1, r24
    8b0e:	0c f0       	brlt	.+2      	; 0x8b12 <main+0xce8>
    8b10:	10 e0       	ldi	r17, 0x00	; 0
    8b12:	11 23       	and	r17, r17
    8b14:	09 f4       	brne	.+2      	; 0x8b18 <main+0xcee>
    8b16:	08 c1       	rjmp	.+528    	; 0x8d28 <main+0xefe>
    8b18:	80 91 36 02 	lds	r24, 0x0236
    8b1c:	85 31       	cpi	r24, 0x15	; 21
    8b1e:	08 f4       	brcc	.+2      	; 0x8b22 <main+0xcf8>
    8b20:	03 c1       	rjmp	.+518    	; 0x8d28 <main+0xefe>
    8b22:	80 91 36 02 	lds	r24, 0x0236
    8b26:	88 32       	cpi	r24, 0x28	; 40
    8b28:	08 f0       	brcs	.+2      	; 0x8b2c <main+0xd02>
    8b2a:	fe c0       	rjmp	.+508    	; 0x8d28 <main+0xefe>
		{
			if (rotation_y > 700)
    8b2c:	80 91 59 02 	lds	r24, 0x0259
    8b30:	90 91 5a 02 	lds	r25, 0x025A
    8b34:	a0 91 5b 02 	lds	r26, 0x025B
    8b38:	b0 91 5c 02 	lds	r27, 0x025C
    8b3c:	11 e0       	ldi	r17, 0x01	; 1
    8b3e:	bc 01       	movw	r22, r24
    8b40:	cd 01       	movw	r24, r26
    8b42:	20 e0       	ldi	r18, 0x00	; 0
    8b44:	30 e0       	ldi	r19, 0x00	; 0
    8b46:	4f e2       	ldi	r20, 0x2F	; 47
    8b48:	54 e4       	ldi	r21, 0x44	; 68
    8b4a:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    8b4e:	18 16       	cp	r1, r24
    8b50:	0c f0       	brlt	.+2      	; 0x8b54 <main+0xd2a>
    8b52:	10 e0       	ldi	r17, 0x00	; 0
    8b54:	11 23       	and	r17, r17
    8b56:	09 f4       	brne	.+2      	; 0x8b5a <main+0xd30>
    8b58:	21 c2       	rjmp	.+1090   	; 0x8f9c <main+0x1172>
			{
				flag_S2=1;
    8b5a:	81 e0       	ldi	r24, 0x01	; 1
    8b5c:	80 93 2b 02 	sts	0x022B, r24
				flag_Shape=1;
    8b60:	81 e0       	ldi	r24, 0x01	; 1
    8b62:	80 93 28 02 	sts	0x0228, r24
				buzzer_beep();
    8b66:	0e 94 55 10 	call	0x20aa	; 0x20aa <buzzer_beep>
				shape_type='2';
    8b6a:	82 e3       	ldi	r24, 0x32	; 50
    8b6c:	80 93 05 02 	sts	0x0205, r24
				lcd_print(1,1,2,3);
    8b70:	81 e0       	ldi	r24, 0x01	; 1
    8b72:	61 e0       	ldi	r22, 0x01	; 1
    8b74:	42 e0       	ldi	r20, 0x02	; 2
    8b76:	50 e0       	ldi	r21, 0x00	; 0
    8b78:	23 e0       	ldi	r18, 0x03	; 3
    8b7a:	30 e0       	ldi	r19, 0x00	; 0
    8b7c:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_print>
    8b80:	9e 01       	movw	r18, r28
    8b82:	2d 59       	subi	r18, 0x9D	; 157
    8b84:	3f 4f       	sbci	r19, 0xFF	; 255
    8b86:	80 e0       	ldi	r24, 0x00	; 0
    8b88:	90 e0       	ldi	r25, 0x00	; 0
    8b8a:	a0 ea       	ldi	r26, 0xA0	; 160
    8b8c:	b1 e4       	ldi	r27, 0x41	; 65
    8b8e:	f9 01       	movw	r30, r18
    8b90:	80 83       	st	Z, r24
    8b92:	91 83       	std	Z+1, r25	; 0x01
    8b94:	a2 83       	std	Z+2, r26	; 0x02
    8b96:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8b98:	8e 01       	movw	r16, r28
    8b9a:	09 59       	subi	r16, 0x99	; 153
    8b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    8b9e:	ce 01       	movw	r24, r28
    8ba0:	8d 59       	subi	r24, 0x9D	; 157
    8ba2:	9f 4f       	sbci	r25, 0xFF	; 255
    8ba4:	fc 01       	movw	r30, r24
    8ba6:	60 81       	ld	r22, Z
    8ba8:	71 81       	ldd	r23, Z+1	; 0x01
    8baa:	82 81       	ldd	r24, Z+2	; 0x02
    8bac:	93 81       	ldd	r25, Z+3	; 0x03
    8bae:	26 e6       	ldi	r18, 0x66	; 102
    8bb0:	36 e6       	ldi	r19, 0x66	; 102
    8bb2:	46 e6       	ldi	r20, 0x66	; 102
    8bb4:	55 e4       	ldi	r21, 0x45	; 69
    8bb6:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    8bba:	dc 01       	movw	r26, r24
    8bbc:	cb 01       	movw	r24, r22
    8bbe:	f8 01       	movw	r30, r16
    8bc0:	80 83       	st	Z, r24
    8bc2:	91 83       	std	Z+1, r25	; 0x01
    8bc4:	a2 83       	std	Z+2, r26	; 0x02
    8bc6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8bc8:	ce 01       	movw	r24, r28
    8bca:	89 59       	subi	r24, 0x99	; 153
    8bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    8bce:	11 e0       	ldi	r17, 0x01	; 1
    8bd0:	fc 01       	movw	r30, r24
    8bd2:	60 81       	ld	r22, Z
    8bd4:	71 81       	ldd	r23, Z+1	; 0x01
    8bd6:	82 81       	ldd	r24, Z+2	; 0x02
    8bd8:	93 81       	ldd	r25, Z+3	; 0x03
    8bda:	20 e0       	ldi	r18, 0x00	; 0
    8bdc:	30 e0       	ldi	r19, 0x00	; 0
    8bde:	40 e8       	ldi	r20, 0x80	; 128
    8be0:	5f e3       	ldi	r21, 0x3F	; 63
    8be2:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    8be6:	88 23       	and	r24, r24
    8be8:	0c f0       	brlt	.+2      	; 0x8bec <main+0xdc2>
    8bea:	10 e0       	ldi	r17, 0x00	; 0
    8bec:	11 23       	and	r17, r17
    8bee:	49 f0       	breq	.+18     	; 0x8c02 <main+0xdd8>
		__ticks = 1;
    8bf0:	ce 01       	movw	r24, r28
    8bf2:	85 59       	subi	r24, 0x95	; 149
    8bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    8bf6:	21 e0       	ldi	r18, 0x01	; 1
    8bf8:	30 e0       	ldi	r19, 0x00	; 0
    8bfa:	fc 01       	movw	r30, r24
    8bfc:	31 83       	std	Z+1, r19	; 0x01
    8bfe:	20 83       	st	Z, r18
    8c00:	74 c0       	rjmp	.+232    	; 0x8cea <main+0xec0>
	else if (__tmp > 65535)
    8c02:	ce 01       	movw	r24, r28
    8c04:	89 59       	subi	r24, 0x99	; 153
    8c06:	9f 4f       	sbci	r25, 0xFF	; 255
    8c08:	11 e0       	ldi	r17, 0x01	; 1
    8c0a:	fc 01       	movw	r30, r24
    8c0c:	60 81       	ld	r22, Z
    8c0e:	71 81       	ldd	r23, Z+1	; 0x01
    8c10:	82 81       	ldd	r24, Z+2	; 0x02
    8c12:	93 81       	ldd	r25, Z+3	; 0x03
    8c14:	20 e0       	ldi	r18, 0x00	; 0
    8c16:	3f ef       	ldi	r19, 0xFF	; 255
    8c18:	4f e7       	ldi	r20, 0x7F	; 127
    8c1a:	57 e4       	ldi	r21, 0x47	; 71
    8c1c:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    8c20:	18 16       	cp	r1, r24
    8c22:	0c f0       	brlt	.+2      	; 0x8c26 <main+0xdfc>
    8c24:	10 e0       	ldi	r17, 0x00	; 0
    8c26:	11 23       	and	r17, r17
    8c28:	09 f4       	brne	.+2      	; 0x8c2c <main+0xe02>
    8c2a:	4d c0       	rjmp	.+154    	; 0x8cc6 <main+0xe9c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8c2c:	ce 01       	movw	r24, r28
    8c2e:	8d 59       	subi	r24, 0x9D	; 157
    8c30:	9f 4f       	sbci	r25, 0xFF	; 255
    8c32:	fc 01       	movw	r30, r24
    8c34:	60 81       	ld	r22, Z
    8c36:	71 81       	ldd	r23, Z+1	; 0x01
    8c38:	82 81       	ldd	r24, Z+2	; 0x02
    8c3a:	93 81       	ldd	r25, Z+3	; 0x03
    8c3c:	20 e0       	ldi	r18, 0x00	; 0
    8c3e:	30 e0       	ldi	r19, 0x00	; 0
    8c40:	40 e2       	ldi	r20, 0x20	; 32
    8c42:	51 e4       	ldi	r21, 0x41	; 65
    8c44:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    8c48:	dc 01       	movw	r26, r24
    8c4a:	cb 01       	movw	r24, r22
    8c4c:	8e 01       	movw	r16, r28
    8c4e:	05 59       	subi	r16, 0x95	; 149
    8c50:	1f 4f       	sbci	r17, 0xFF	; 255
    8c52:	bc 01       	movw	r22, r24
    8c54:	cd 01       	movw	r24, r26
    8c56:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    8c5a:	dc 01       	movw	r26, r24
    8c5c:	cb 01       	movw	r24, r22
    8c5e:	f8 01       	movw	r30, r16
    8c60:	91 83       	std	Z+1, r25	; 0x01
    8c62:	80 83       	st	Z, r24
    8c64:	27 c0       	rjmp	.+78     	; 0x8cb4 <main+0xe8a>
    8c66:	ce 01       	movw	r24, r28
    8c68:	83 59       	subi	r24, 0x93	; 147
    8c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    8c6c:	20 e7       	ldi	r18, 0x70	; 112
    8c6e:	31 e0       	ldi	r19, 0x01	; 1
    8c70:	fc 01       	movw	r30, r24
    8c72:	31 83       	std	Z+1, r19	; 0x01
    8c74:	20 83       	st	Z, r18
    8c76:	ce 01       	movw	r24, r28
    8c78:	83 59       	subi	r24, 0x93	; 147
    8c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    8c7c:	fc 01       	movw	r30, r24
    8c7e:	80 81       	ld	r24, Z
    8c80:	91 81       	ldd	r25, Z+1	; 0x01
    8c82:	8c 01       	movw	r16, r24
    8c84:	c8 01       	movw	r24, r16
    8c86:	01 97       	sbiw	r24, 0x01	; 1
    8c88:	f1 f7       	brne	.-4      	; 0x8c86 <main+0xe5c>
    8c8a:	8c 01       	movw	r16, r24
    8c8c:	ce 01       	movw	r24, r28
    8c8e:	83 59       	subi	r24, 0x93	; 147
    8c90:	9f 4f       	sbci	r25, 0xFF	; 255
    8c92:	fc 01       	movw	r30, r24
    8c94:	11 83       	std	Z+1, r17	; 0x01
    8c96:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8c98:	ce 01       	movw	r24, r28
    8c9a:	85 59       	subi	r24, 0x95	; 149
    8c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    8c9e:	9e 01       	movw	r18, r28
    8ca0:	25 59       	subi	r18, 0x95	; 149
    8ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    8ca4:	f9 01       	movw	r30, r18
    8ca6:	20 81       	ld	r18, Z
    8ca8:	31 81       	ldd	r19, Z+1	; 0x01
    8caa:	21 50       	subi	r18, 0x01	; 1
    8cac:	30 40       	sbci	r19, 0x00	; 0
    8cae:	fc 01       	movw	r30, r24
    8cb0:	31 83       	std	Z+1, r19	; 0x01
    8cb2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8cb4:	ce 01       	movw	r24, r28
    8cb6:	85 59       	subi	r24, 0x95	; 149
    8cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    8cba:	fc 01       	movw	r30, r24
    8cbc:	80 81       	ld	r24, Z
    8cbe:	91 81       	ldd	r25, Z+1	; 0x01
    8cc0:	00 97       	sbiw	r24, 0x00	; 0
    8cc2:	89 f6       	brne	.-94     	; 0x8c66 <main+0xe3c>
    8cc4:	30 c0       	rjmp	.+96     	; 0x8d26 <main+0xefc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8cc6:	8e 01       	movw	r16, r28
    8cc8:	05 59       	subi	r16, 0x95	; 149
    8cca:	1f 4f       	sbci	r17, 0xFF	; 255
    8ccc:	ce 01       	movw	r24, r28
    8cce:	89 59       	subi	r24, 0x99	; 153
    8cd0:	9f 4f       	sbci	r25, 0xFF	; 255
    8cd2:	fc 01       	movw	r30, r24
    8cd4:	60 81       	ld	r22, Z
    8cd6:	71 81       	ldd	r23, Z+1	; 0x01
    8cd8:	82 81       	ldd	r24, Z+2	; 0x02
    8cda:	93 81       	ldd	r25, Z+3	; 0x03
    8cdc:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    8ce0:	dc 01       	movw	r26, r24
    8ce2:	cb 01       	movw	r24, r22
    8ce4:	f8 01       	movw	r30, r16
    8ce6:	91 83       	std	Z+1, r25	; 0x01
    8ce8:	80 83       	st	Z, r24
    8cea:	ce 01       	movw	r24, r28
    8cec:	81 59       	subi	r24, 0x91	; 145
    8cee:	9f 4f       	sbci	r25, 0xFF	; 255
    8cf0:	9e 01       	movw	r18, r28
    8cf2:	25 59       	subi	r18, 0x95	; 149
    8cf4:	3f 4f       	sbci	r19, 0xFF	; 255
    8cf6:	f9 01       	movw	r30, r18
    8cf8:	20 81       	ld	r18, Z
    8cfa:	31 81       	ldd	r19, Z+1	; 0x01
    8cfc:	fc 01       	movw	r30, r24
    8cfe:	31 83       	std	Z+1, r19	; 0x01
    8d00:	20 83       	st	Z, r18
    8d02:	ce 01       	movw	r24, r28
    8d04:	81 59       	subi	r24, 0x91	; 145
    8d06:	9f 4f       	sbci	r25, 0xFF	; 255
    8d08:	fc 01       	movw	r30, r24
    8d0a:	80 81       	ld	r24, Z
    8d0c:	91 81       	ldd	r25, Z+1	; 0x01
    8d0e:	8c 01       	movw	r16, r24
    8d10:	c8 01       	movw	r24, r16
    8d12:	01 97       	sbiw	r24, 0x01	; 1
    8d14:	f1 f7       	brne	.-4      	; 0x8d12 <main+0xee8>
    8d16:	8c 01       	movw	r16, r24
    8d18:	ce 01       	movw	r24, r28
    8d1a:	81 59       	subi	r24, 0x91	; 145
    8d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    8d1e:	fc 01       	movw	r30, r24
    8d20:	11 83       	std	Z+1, r17	; 0x01
    8d22:	00 83       	st	Z, r16
			flag_S1=1;
			flag_Shape=1;				
		}
		else if((flag_Shape == 0) && ( force_x > 5500 ) && (pathR > 20 && pathR < 40))            //  (flag_S2==0) &&     //bigger hump detector
		{
			if (rotation_y > 700)
    8d24:	3b c1       	rjmp	.+630    	; 0x8f9c <main+0x1172>
    8d26:	3a c1       	rjmp	.+628    	; 0x8f9c <main+0x1172>
				shape_type='2';
				lcd_print(1,1,2,3);
				_delay_ms(20);
			}
		}
		else if((flag_Shape == 0) && ( force_x > 3300 && force_x < 4300 ) && (pathR > 25 && pathR < 40 ))        //(flag_S3==0) &&     //smaller hump detector
    8d28:	80 91 28 02 	lds	r24, 0x0228
    8d2c:	88 23       	and	r24, r24
    8d2e:	09 f0       	breq	.+2      	; 0x8d32 <main+0xf08>
    8d30:	48 ca       	rjmp	.-2928   	; 0x81c2 <main+0x398>
    8d32:	80 91 55 02 	lds	r24, 0x0255
    8d36:	90 91 56 02 	lds	r25, 0x0256
    8d3a:	a0 91 57 02 	lds	r26, 0x0257
    8d3e:	b0 91 58 02 	lds	r27, 0x0258
    8d42:	11 e0       	ldi	r17, 0x01	; 1
    8d44:	bc 01       	movw	r22, r24
    8d46:	cd 01       	movw	r24, r26
    8d48:	20 e0       	ldi	r18, 0x00	; 0
    8d4a:	30 e4       	ldi	r19, 0x40	; 64
    8d4c:	4e e4       	ldi	r20, 0x4E	; 78
    8d4e:	55 e4       	ldi	r21, 0x45	; 69
    8d50:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    8d54:	18 16       	cp	r1, r24
    8d56:	0c f0       	brlt	.+2      	; 0x8d5a <main+0xf30>
    8d58:	10 e0       	ldi	r17, 0x00	; 0
    8d5a:	11 23       	and	r17, r17
    8d5c:	09 f4       	brne	.+2      	; 0x8d60 <main+0xf36>
    8d5e:	31 ca       	rjmp	.-2974   	; 0x81c2 <main+0x398>
    8d60:	80 91 55 02 	lds	r24, 0x0255
    8d64:	90 91 56 02 	lds	r25, 0x0256
    8d68:	a0 91 57 02 	lds	r26, 0x0257
    8d6c:	b0 91 58 02 	lds	r27, 0x0258
    8d70:	11 e0       	ldi	r17, 0x01	; 1
    8d72:	bc 01       	movw	r22, r24
    8d74:	cd 01       	movw	r24, r26
    8d76:	20 e0       	ldi	r18, 0x00	; 0
    8d78:	30 e6       	ldi	r19, 0x60	; 96
    8d7a:	46 e8       	ldi	r20, 0x86	; 134
    8d7c:	55 e4       	ldi	r21, 0x45	; 69
    8d7e:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    8d82:	88 23       	and	r24, r24
    8d84:	0c f0       	brlt	.+2      	; 0x8d88 <main+0xf5e>
    8d86:	10 e0       	ldi	r17, 0x00	; 0
    8d88:	11 23       	and	r17, r17
    8d8a:	09 f4       	brne	.+2      	; 0x8d8e <main+0xf64>
    8d8c:	1a ca       	rjmp	.-3020   	; 0x81c2 <main+0x398>
    8d8e:	80 91 36 02 	lds	r24, 0x0236
    8d92:	8a 31       	cpi	r24, 0x1A	; 26
    8d94:	08 f4       	brcc	.+2      	; 0x8d98 <main+0xf6e>
    8d96:	15 ca       	rjmp	.-3030   	; 0x81c2 <main+0x398>
    8d98:	80 91 36 02 	lds	r24, 0x0236
    8d9c:	88 32       	cpi	r24, 0x28	; 40
    8d9e:	08 f0       	brcs	.+2      	; 0x8da2 <main+0xf78>
    8da0:	10 ca       	rjmp	.-3040   	; 0x81c2 <main+0x398>
		{
			if (rotation_y > 700)
    8da2:	80 91 59 02 	lds	r24, 0x0259
    8da6:	90 91 5a 02 	lds	r25, 0x025A
    8daa:	a0 91 5b 02 	lds	r26, 0x025B
    8dae:	b0 91 5c 02 	lds	r27, 0x025C
    8db2:	11 e0       	ldi	r17, 0x01	; 1
    8db4:	bc 01       	movw	r22, r24
    8db6:	cd 01       	movw	r24, r26
    8db8:	20 e0       	ldi	r18, 0x00	; 0
    8dba:	30 e0       	ldi	r19, 0x00	; 0
    8dbc:	4f e2       	ldi	r20, 0x2F	; 47
    8dbe:	54 e4       	ldi	r21, 0x44	; 68
    8dc0:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    8dc4:	18 16       	cp	r1, r24
    8dc6:	0c f0       	brlt	.+2      	; 0x8dca <main+0xfa0>
    8dc8:	10 e0       	ldi	r17, 0x00	; 0
    8dca:	11 23       	and	r17, r17
    8dcc:	09 f4       	brne	.+2      	; 0x8dd0 <main+0xfa6>
    8dce:	f9 c9       	rjmp	.-3086   	; 0x81c2 <main+0x398>
			{
				flag_S3=1;
    8dd0:	81 e0       	ldi	r24, 0x01	; 1
    8dd2:	80 93 2c 02 	sts	0x022C, r24
				flag_Shape=1;
    8dd6:	81 e0       	ldi	r24, 0x01	; 1
    8dd8:	80 93 28 02 	sts	0x0228, r24
				buzzer_beep();
    8ddc:	0e 94 55 10 	call	0x20aa	; 0x20aa <buzzer_beep>
				shape_type='3';
    8de0:	83 e3       	ldi	r24, 0x33	; 51
    8de2:	80 93 05 02 	sts	0x0205, r24
				lcd_print(1,1,3,3);
    8de6:	81 e0       	ldi	r24, 0x01	; 1
    8de8:	61 e0       	ldi	r22, 0x01	; 1
    8dea:	43 e0       	ldi	r20, 0x03	; 3
    8dec:	50 e0       	ldi	r21, 0x00	; 0
    8dee:	23 e0       	ldi	r18, 0x03	; 3
    8df0:	30 e0       	ldi	r19, 0x00	; 0
    8df2:	0e 94 c2 0c 	call	0x1984	; 0x1984 <lcd_print>
    8df6:	9e 01       	movw	r18, r28
    8df8:	2f 58       	subi	r18, 0x8F	; 143
    8dfa:	3f 4f       	sbci	r19, 0xFF	; 255
    8dfc:	80 e0       	ldi	r24, 0x00	; 0
    8dfe:	90 e0       	ldi	r25, 0x00	; 0
    8e00:	a0 ea       	ldi	r26, 0xA0	; 160
    8e02:	b1 e4       	ldi	r27, 0x41	; 65
    8e04:	f9 01       	movw	r30, r18
    8e06:	80 83       	st	Z, r24
    8e08:	91 83       	std	Z+1, r25	; 0x01
    8e0a:	a2 83       	std	Z+2, r26	; 0x02
    8e0c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    8e0e:	8e 01       	movw	r16, r28
    8e10:	0b 58       	subi	r16, 0x8B	; 139
    8e12:	1f 4f       	sbci	r17, 0xFF	; 255
    8e14:	ce 01       	movw	r24, r28
    8e16:	8f 58       	subi	r24, 0x8F	; 143
    8e18:	9f 4f       	sbci	r25, 0xFF	; 255
    8e1a:	fc 01       	movw	r30, r24
    8e1c:	60 81       	ld	r22, Z
    8e1e:	71 81       	ldd	r23, Z+1	; 0x01
    8e20:	82 81       	ldd	r24, Z+2	; 0x02
    8e22:	93 81       	ldd	r25, Z+3	; 0x03
    8e24:	26 e6       	ldi	r18, 0x66	; 102
    8e26:	36 e6       	ldi	r19, 0x66	; 102
    8e28:	46 e6       	ldi	r20, 0x66	; 102
    8e2a:	55 e4       	ldi	r21, 0x45	; 69
    8e2c:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    8e30:	dc 01       	movw	r26, r24
    8e32:	cb 01       	movw	r24, r22
    8e34:	f8 01       	movw	r30, r16
    8e36:	80 83       	st	Z, r24
    8e38:	91 83       	std	Z+1, r25	; 0x01
    8e3a:	a2 83       	std	Z+2, r26	; 0x02
    8e3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    8e3e:	ce 01       	movw	r24, r28
    8e40:	8b 58       	subi	r24, 0x8B	; 139
    8e42:	9f 4f       	sbci	r25, 0xFF	; 255
    8e44:	11 e0       	ldi	r17, 0x01	; 1
    8e46:	fc 01       	movw	r30, r24
    8e48:	60 81       	ld	r22, Z
    8e4a:	71 81       	ldd	r23, Z+1	; 0x01
    8e4c:	82 81       	ldd	r24, Z+2	; 0x02
    8e4e:	93 81       	ldd	r25, Z+3	; 0x03
    8e50:	20 e0       	ldi	r18, 0x00	; 0
    8e52:	30 e0       	ldi	r19, 0x00	; 0
    8e54:	40 e8       	ldi	r20, 0x80	; 128
    8e56:	5f e3       	ldi	r21, 0x3F	; 63
    8e58:	0e 94 34 48 	call	0x9068	; 0x9068 <__cmpsf2>
    8e5c:	88 23       	and	r24, r24
    8e5e:	0c f0       	brlt	.+2      	; 0x8e62 <main+0x1038>
    8e60:	10 e0       	ldi	r17, 0x00	; 0
    8e62:	11 23       	and	r17, r17
    8e64:	49 f0       	breq	.+18     	; 0x8e78 <main+0x104e>
		__ticks = 1;
    8e66:	ce 01       	movw	r24, r28
    8e68:	87 58       	subi	r24, 0x87	; 135
    8e6a:	9f 4f       	sbci	r25, 0xFF	; 255
    8e6c:	21 e0       	ldi	r18, 0x01	; 1
    8e6e:	30 e0       	ldi	r19, 0x00	; 0
    8e70:	fc 01       	movw	r30, r24
    8e72:	31 83       	std	Z+1, r19	; 0x01
    8e74:	20 83       	st	Z, r18
    8e76:	74 c0       	rjmp	.+232    	; 0x8f60 <main+0x1136>
	else if (__tmp > 65535)
    8e78:	ce 01       	movw	r24, r28
    8e7a:	8b 58       	subi	r24, 0x8B	; 139
    8e7c:	9f 4f       	sbci	r25, 0xFF	; 255
    8e7e:	11 e0       	ldi	r17, 0x01	; 1
    8e80:	fc 01       	movw	r30, r24
    8e82:	60 81       	ld	r22, Z
    8e84:	71 81       	ldd	r23, Z+1	; 0x01
    8e86:	82 81       	ldd	r24, Z+2	; 0x02
    8e88:	93 81       	ldd	r25, Z+3	; 0x03
    8e8a:	20 e0       	ldi	r18, 0x00	; 0
    8e8c:	3f ef       	ldi	r19, 0xFF	; 255
    8e8e:	4f e7       	ldi	r20, 0x7F	; 127
    8e90:	57 e4       	ldi	r21, 0x47	; 71
    8e92:	0e 94 7e 49 	call	0x92fc	; 0x92fc <__gesf2>
    8e96:	18 16       	cp	r1, r24
    8e98:	0c f0       	brlt	.+2      	; 0x8e9c <main+0x1072>
    8e9a:	10 e0       	ldi	r17, 0x00	; 0
    8e9c:	11 23       	and	r17, r17
    8e9e:	09 f4       	brne	.+2      	; 0x8ea2 <main+0x1078>
    8ea0:	4d c0       	rjmp	.+154    	; 0x8f3c <main+0x1112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8ea2:	ce 01       	movw	r24, r28
    8ea4:	8f 58       	subi	r24, 0x8F	; 143
    8ea6:	9f 4f       	sbci	r25, 0xFF	; 255
    8ea8:	fc 01       	movw	r30, r24
    8eaa:	60 81       	ld	r22, Z
    8eac:	71 81       	ldd	r23, Z+1	; 0x01
    8eae:	82 81       	ldd	r24, Z+2	; 0x02
    8eb0:	93 81       	ldd	r25, Z+3	; 0x03
    8eb2:	20 e0       	ldi	r18, 0x00	; 0
    8eb4:	30 e0       	ldi	r19, 0x00	; 0
    8eb6:	40 e2       	ldi	r20, 0x20	; 32
    8eb8:	51 e4       	ldi	r21, 0x41	; 65
    8eba:	0e 94 82 49 	call	0x9304	; 0x9304 <__mulsf3>
    8ebe:	dc 01       	movw	r26, r24
    8ec0:	cb 01       	movw	r24, r22
    8ec2:	8e 01       	movw	r16, r28
    8ec4:	07 58       	subi	r16, 0x87	; 135
    8ec6:	1f 4f       	sbci	r17, 0xFF	; 255
    8ec8:	bc 01       	movw	r22, r24
    8eca:	cd 01       	movw	r24, r26
    8ecc:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    8ed0:	dc 01       	movw	r26, r24
    8ed2:	cb 01       	movw	r24, r22
    8ed4:	f8 01       	movw	r30, r16
    8ed6:	91 83       	std	Z+1, r25	; 0x01
    8ed8:	80 83       	st	Z, r24
    8eda:	27 c0       	rjmp	.+78     	; 0x8f2a <main+0x1100>
    8edc:	ce 01       	movw	r24, r28
    8ede:	85 58       	subi	r24, 0x85	; 133
    8ee0:	9f 4f       	sbci	r25, 0xFF	; 255
    8ee2:	20 e7       	ldi	r18, 0x70	; 112
    8ee4:	31 e0       	ldi	r19, 0x01	; 1
    8ee6:	fc 01       	movw	r30, r24
    8ee8:	31 83       	std	Z+1, r19	; 0x01
    8eea:	20 83       	st	Z, r18
    8eec:	ce 01       	movw	r24, r28
    8eee:	85 58       	subi	r24, 0x85	; 133
    8ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    8ef2:	fc 01       	movw	r30, r24
    8ef4:	80 81       	ld	r24, Z
    8ef6:	91 81       	ldd	r25, Z+1	; 0x01
    8ef8:	8c 01       	movw	r16, r24
    8efa:	c8 01       	movw	r24, r16
    8efc:	01 97       	sbiw	r24, 0x01	; 1
    8efe:	f1 f7       	brne	.-4      	; 0x8efc <main+0x10d2>
    8f00:	8c 01       	movw	r16, r24
    8f02:	ce 01       	movw	r24, r28
    8f04:	85 58       	subi	r24, 0x85	; 133
    8f06:	9f 4f       	sbci	r25, 0xFF	; 255
    8f08:	fc 01       	movw	r30, r24
    8f0a:	11 83       	std	Z+1, r17	; 0x01
    8f0c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8f0e:	ce 01       	movw	r24, r28
    8f10:	87 58       	subi	r24, 0x87	; 135
    8f12:	9f 4f       	sbci	r25, 0xFF	; 255
    8f14:	9e 01       	movw	r18, r28
    8f16:	27 58       	subi	r18, 0x87	; 135
    8f18:	3f 4f       	sbci	r19, 0xFF	; 255
    8f1a:	f9 01       	movw	r30, r18
    8f1c:	20 81       	ld	r18, Z
    8f1e:	31 81       	ldd	r19, Z+1	; 0x01
    8f20:	21 50       	subi	r18, 0x01	; 1
    8f22:	30 40       	sbci	r19, 0x00	; 0
    8f24:	fc 01       	movw	r30, r24
    8f26:	31 83       	std	Z+1, r19	; 0x01
    8f28:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8f2a:	ce 01       	movw	r24, r28
    8f2c:	87 58       	subi	r24, 0x87	; 135
    8f2e:	9f 4f       	sbci	r25, 0xFF	; 255
    8f30:	fc 01       	movw	r30, r24
    8f32:	80 81       	ld	r24, Z
    8f34:	91 81       	ldd	r25, Z+1	; 0x01
    8f36:	00 97       	sbiw	r24, 0x00	; 0
    8f38:	89 f6       	brne	.-94     	; 0x8edc <main+0x10b2>
    8f3a:	30 c0       	rjmp	.+96     	; 0x8f9c <main+0x1172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8f3c:	8e 01       	movw	r16, r28
    8f3e:	07 58       	subi	r16, 0x87	; 135
    8f40:	1f 4f       	sbci	r17, 0xFF	; 255
    8f42:	ce 01       	movw	r24, r28
    8f44:	8b 58       	subi	r24, 0x8B	; 139
    8f46:	9f 4f       	sbci	r25, 0xFF	; 255
    8f48:	fc 01       	movw	r30, r24
    8f4a:	60 81       	ld	r22, Z
    8f4c:	71 81       	ldd	r23, Z+1	; 0x01
    8f4e:	82 81       	ldd	r24, Z+2	; 0x02
    8f50:	93 81       	ldd	r25, Z+3	; 0x03
    8f52:	0e 94 a0 48 	call	0x9140	; 0x9140 <__fixunssfsi>
    8f56:	dc 01       	movw	r26, r24
    8f58:	cb 01       	movw	r24, r22
    8f5a:	f8 01       	movw	r30, r16
    8f5c:	91 83       	std	Z+1, r25	; 0x01
    8f5e:	80 83       	st	Z, r24
    8f60:	ce 01       	movw	r24, r28
    8f62:	83 58       	subi	r24, 0x83	; 131
    8f64:	9f 4f       	sbci	r25, 0xFF	; 255
    8f66:	9e 01       	movw	r18, r28
    8f68:	27 58       	subi	r18, 0x87	; 135
    8f6a:	3f 4f       	sbci	r19, 0xFF	; 255
    8f6c:	f9 01       	movw	r30, r18
    8f6e:	20 81       	ld	r18, Z
    8f70:	31 81       	ldd	r19, Z+1	; 0x01
    8f72:	fc 01       	movw	r30, r24
    8f74:	31 83       	std	Z+1, r19	; 0x01
    8f76:	20 83       	st	Z, r18
    8f78:	ce 01       	movw	r24, r28
    8f7a:	83 58       	subi	r24, 0x83	; 131
    8f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    8f7e:	fc 01       	movw	r30, r24
    8f80:	80 81       	ld	r24, Z
    8f82:	91 81       	ldd	r25, Z+1	; 0x01
    8f84:	8c 01       	movw	r16, r24
    8f86:	c8 01       	movw	r24, r16
    8f88:	01 97       	sbiw	r24, 0x01	; 1
    8f8a:	f1 f7       	brne	.-4      	; 0x8f88 <main+0x115e>
    8f8c:	8c 01       	movw	r16, r24
    8f8e:	ce 01       	movw	r24, r28
    8f90:	83 58       	subi	r24, 0x83	; 131
    8f92:	9f 4f       	sbci	r25, 0xFF	; 255
    8f94:	fc 01       	movw	r30, r24
    8f96:	11 83       	std	Z+1, r17	; 0x01
    8f98:	00 83       	st	Z, r16
				_delay_ms(20);	
			}
		}
	}
    8f9a:	13 c9       	rjmp	.-3546   	; 0x81c2 <main+0x398>
    8f9c:	12 c9       	rjmp	.-3548   	; 0x81c2 <main+0x398>

00008f9e <__subsf3>:
    8f9e:	50 58       	subi	r21, 0x80	; 128

00008fa0 <__addsf3>:
    8fa0:	bb 27       	eor	r27, r27
    8fa2:	aa 27       	eor	r26, r26
    8fa4:	0e d0       	rcall	.+28     	; 0x8fc2 <__addsf3x>
    8fa6:	70 c1       	rjmp	.+736    	; 0x9288 <__fp_round>
    8fa8:	61 d1       	rcall	.+706    	; 0x926c <__fp_pscA>
    8faa:	30 f0       	brcs	.+12     	; 0x8fb8 <__addsf3+0x18>
    8fac:	66 d1       	rcall	.+716    	; 0x927a <__fp_pscB>
    8fae:	20 f0       	brcs	.+8      	; 0x8fb8 <__addsf3+0x18>
    8fb0:	31 f4       	brne	.+12     	; 0x8fbe <__addsf3+0x1e>
    8fb2:	9f 3f       	cpi	r25, 0xFF	; 255
    8fb4:	11 f4       	brne	.+4      	; 0x8fba <__addsf3+0x1a>
    8fb6:	1e f4       	brtc	.+6      	; 0x8fbe <__addsf3+0x1e>
    8fb8:	56 c1       	rjmp	.+684    	; 0x9266 <__fp_nan>
    8fba:	0e f4       	brtc	.+2      	; 0x8fbe <__addsf3+0x1e>
    8fbc:	e0 95       	com	r30
    8fbe:	e7 fb       	bst	r30, 7
    8fc0:	4c c1       	rjmp	.+664    	; 0x925a <__fp_inf>

00008fc2 <__addsf3x>:
    8fc2:	e9 2f       	mov	r30, r25
    8fc4:	72 d1       	rcall	.+740    	; 0x92aa <__fp_split3>
    8fc6:	80 f3       	brcs	.-32     	; 0x8fa8 <__addsf3+0x8>
    8fc8:	ba 17       	cp	r27, r26
    8fca:	62 07       	cpc	r22, r18
    8fcc:	73 07       	cpc	r23, r19
    8fce:	84 07       	cpc	r24, r20
    8fd0:	95 07       	cpc	r25, r21
    8fd2:	18 f0       	brcs	.+6      	; 0x8fda <__addsf3x+0x18>
    8fd4:	71 f4       	brne	.+28     	; 0x8ff2 <__addsf3x+0x30>
    8fd6:	9e f5       	brtc	.+102    	; 0x903e <__addsf3x+0x7c>
    8fd8:	8a c1       	rjmp	.+788    	; 0x92ee <__fp_zero>
    8fda:	0e f4       	brtc	.+2      	; 0x8fde <__addsf3x+0x1c>
    8fdc:	e0 95       	com	r30
    8fde:	0b 2e       	mov	r0, r27
    8fe0:	ba 2f       	mov	r27, r26
    8fe2:	a0 2d       	mov	r26, r0
    8fe4:	0b 01       	movw	r0, r22
    8fe6:	b9 01       	movw	r22, r18
    8fe8:	90 01       	movw	r18, r0
    8fea:	0c 01       	movw	r0, r24
    8fec:	ca 01       	movw	r24, r20
    8fee:	a0 01       	movw	r20, r0
    8ff0:	11 24       	eor	r1, r1
    8ff2:	ff 27       	eor	r31, r31
    8ff4:	59 1b       	sub	r21, r25
    8ff6:	99 f0       	breq	.+38     	; 0x901e <__addsf3x+0x5c>
    8ff8:	59 3f       	cpi	r21, 0xF9	; 249
    8ffa:	50 f4       	brcc	.+20     	; 0x9010 <__addsf3x+0x4e>
    8ffc:	50 3e       	cpi	r21, 0xE0	; 224
    8ffe:	68 f1       	brcs	.+90     	; 0x905a <__addsf3x+0x98>
    9000:	1a 16       	cp	r1, r26
    9002:	f0 40       	sbci	r31, 0x00	; 0
    9004:	a2 2f       	mov	r26, r18
    9006:	23 2f       	mov	r18, r19
    9008:	34 2f       	mov	r19, r20
    900a:	44 27       	eor	r20, r20
    900c:	58 5f       	subi	r21, 0xF8	; 248
    900e:	f3 cf       	rjmp	.-26     	; 0x8ff6 <__addsf3x+0x34>
    9010:	46 95       	lsr	r20
    9012:	37 95       	ror	r19
    9014:	27 95       	ror	r18
    9016:	a7 95       	ror	r26
    9018:	f0 40       	sbci	r31, 0x00	; 0
    901a:	53 95       	inc	r21
    901c:	c9 f7       	brne	.-14     	; 0x9010 <__addsf3x+0x4e>
    901e:	7e f4       	brtc	.+30     	; 0x903e <__addsf3x+0x7c>
    9020:	1f 16       	cp	r1, r31
    9022:	ba 0b       	sbc	r27, r26
    9024:	62 0b       	sbc	r22, r18
    9026:	73 0b       	sbc	r23, r19
    9028:	84 0b       	sbc	r24, r20
    902a:	ba f0       	brmi	.+46     	; 0x905a <__addsf3x+0x98>
    902c:	91 50       	subi	r25, 0x01	; 1
    902e:	a1 f0       	breq	.+40     	; 0x9058 <__addsf3x+0x96>
    9030:	ff 0f       	add	r31, r31
    9032:	bb 1f       	adc	r27, r27
    9034:	66 1f       	adc	r22, r22
    9036:	77 1f       	adc	r23, r23
    9038:	88 1f       	adc	r24, r24
    903a:	c2 f7       	brpl	.-16     	; 0x902c <__addsf3x+0x6a>
    903c:	0e c0       	rjmp	.+28     	; 0x905a <__addsf3x+0x98>
    903e:	ba 0f       	add	r27, r26
    9040:	62 1f       	adc	r22, r18
    9042:	73 1f       	adc	r23, r19
    9044:	84 1f       	adc	r24, r20
    9046:	48 f4       	brcc	.+18     	; 0x905a <__addsf3x+0x98>
    9048:	87 95       	ror	r24
    904a:	77 95       	ror	r23
    904c:	67 95       	ror	r22
    904e:	b7 95       	ror	r27
    9050:	f7 95       	ror	r31
    9052:	9e 3f       	cpi	r25, 0xFE	; 254
    9054:	08 f0       	brcs	.+2      	; 0x9058 <__addsf3x+0x96>
    9056:	b3 cf       	rjmp	.-154    	; 0x8fbe <__addsf3+0x1e>
    9058:	93 95       	inc	r25
    905a:	88 0f       	add	r24, r24
    905c:	08 f0       	brcs	.+2      	; 0x9060 <__addsf3x+0x9e>
    905e:	99 27       	eor	r25, r25
    9060:	ee 0f       	add	r30, r30
    9062:	97 95       	ror	r25
    9064:	87 95       	ror	r24
    9066:	08 95       	ret

00009068 <__cmpsf2>:
    9068:	d4 d0       	rcall	.+424    	; 0x9212 <__fp_cmp>
    906a:	08 f4       	brcc	.+2      	; 0x906e <__cmpsf2+0x6>
    906c:	81 e0       	ldi	r24, 0x01	; 1
    906e:	08 95       	ret

00009070 <__divsf3>:
    9070:	0c d0       	rcall	.+24     	; 0x908a <__divsf3x>
    9072:	0a c1       	rjmp	.+532    	; 0x9288 <__fp_round>
    9074:	02 d1       	rcall	.+516    	; 0x927a <__fp_pscB>
    9076:	40 f0       	brcs	.+16     	; 0x9088 <__divsf3+0x18>
    9078:	f9 d0       	rcall	.+498    	; 0x926c <__fp_pscA>
    907a:	30 f0       	brcs	.+12     	; 0x9088 <__divsf3+0x18>
    907c:	21 f4       	brne	.+8      	; 0x9086 <__divsf3+0x16>
    907e:	5f 3f       	cpi	r21, 0xFF	; 255
    9080:	19 f0       	breq	.+6      	; 0x9088 <__divsf3+0x18>
    9082:	eb c0       	rjmp	.+470    	; 0x925a <__fp_inf>
    9084:	51 11       	cpse	r21, r1
    9086:	34 c1       	rjmp	.+616    	; 0x92f0 <__fp_szero>
    9088:	ee c0       	rjmp	.+476    	; 0x9266 <__fp_nan>

0000908a <__divsf3x>:
    908a:	0f d1       	rcall	.+542    	; 0x92aa <__fp_split3>
    908c:	98 f3       	brcs	.-26     	; 0x9074 <__divsf3+0x4>

0000908e <__divsf3_pse>:
    908e:	99 23       	and	r25, r25
    9090:	c9 f3       	breq	.-14     	; 0x9084 <__divsf3+0x14>
    9092:	55 23       	and	r21, r21
    9094:	b1 f3       	breq	.-20     	; 0x9082 <__divsf3+0x12>
    9096:	95 1b       	sub	r25, r21
    9098:	55 0b       	sbc	r21, r21
    909a:	bb 27       	eor	r27, r27
    909c:	aa 27       	eor	r26, r26
    909e:	62 17       	cp	r22, r18
    90a0:	73 07       	cpc	r23, r19
    90a2:	84 07       	cpc	r24, r20
    90a4:	38 f0       	brcs	.+14     	; 0x90b4 <__divsf3_pse+0x26>
    90a6:	9f 5f       	subi	r25, 0xFF	; 255
    90a8:	5f 4f       	sbci	r21, 0xFF	; 255
    90aa:	22 0f       	add	r18, r18
    90ac:	33 1f       	adc	r19, r19
    90ae:	44 1f       	adc	r20, r20
    90b0:	aa 1f       	adc	r26, r26
    90b2:	a9 f3       	breq	.-22     	; 0x909e <__divsf3_pse+0x10>
    90b4:	33 d0       	rcall	.+102    	; 0x911c <__divsf3_pse+0x8e>
    90b6:	0e 2e       	mov	r0, r30
    90b8:	3a f0       	brmi	.+14     	; 0x90c8 <__divsf3_pse+0x3a>
    90ba:	e0 e8       	ldi	r30, 0x80	; 128
    90bc:	30 d0       	rcall	.+96     	; 0x911e <__divsf3_pse+0x90>
    90be:	91 50       	subi	r25, 0x01	; 1
    90c0:	50 40       	sbci	r21, 0x00	; 0
    90c2:	e6 95       	lsr	r30
    90c4:	00 1c       	adc	r0, r0
    90c6:	ca f7       	brpl	.-14     	; 0x90ba <__divsf3_pse+0x2c>
    90c8:	29 d0       	rcall	.+82     	; 0x911c <__divsf3_pse+0x8e>
    90ca:	fe 2f       	mov	r31, r30
    90cc:	27 d0       	rcall	.+78     	; 0x911c <__divsf3_pse+0x8e>
    90ce:	66 0f       	add	r22, r22
    90d0:	77 1f       	adc	r23, r23
    90d2:	88 1f       	adc	r24, r24
    90d4:	bb 1f       	adc	r27, r27
    90d6:	26 17       	cp	r18, r22
    90d8:	37 07       	cpc	r19, r23
    90da:	48 07       	cpc	r20, r24
    90dc:	ab 07       	cpc	r26, r27
    90de:	b0 e8       	ldi	r27, 0x80	; 128
    90e0:	09 f0       	breq	.+2      	; 0x90e4 <__divsf3_pse+0x56>
    90e2:	bb 0b       	sbc	r27, r27
    90e4:	80 2d       	mov	r24, r0
    90e6:	bf 01       	movw	r22, r30
    90e8:	ff 27       	eor	r31, r31
    90ea:	93 58       	subi	r25, 0x83	; 131
    90ec:	5f 4f       	sbci	r21, 0xFF	; 255
    90ee:	2a f0       	brmi	.+10     	; 0x90fa <__divsf3_pse+0x6c>
    90f0:	9e 3f       	cpi	r25, 0xFE	; 254
    90f2:	51 05       	cpc	r21, r1
    90f4:	68 f0       	brcs	.+26     	; 0x9110 <__divsf3_pse+0x82>
    90f6:	b1 c0       	rjmp	.+354    	; 0x925a <__fp_inf>
    90f8:	fb c0       	rjmp	.+502    	; 0x92f0 <__fp_szero>
    90fa:	5f 3f       	cpi	r21, 0xFF	; 255
    90fc:	ec f3       	brlt	.-6      	; 0x90f8 <__divsf3_pse+0x6a>
    90fe:	98 3e       	cpi	r25, 0xE8	; 232
    9100:	dc f3       	brlt	.-10     	; 0x90f8 <__divsf3_pse+0x6a>
    9102:	86 95       	lsr	r24
    9104:	77 95       	ror	r23
    9106:	67 95       	ror	r22
    9108:	b7 95       	ror	r27
    910a:	f7 95       	ror	r31
    910c:	9f 5f       	subi	r25, 0xFF	; 255
    910e:	c9 f7       	brne	.-14     	; 0x9102 <__divsf3_pse+0x74>
    9110:	88 0f       	add	r24, r24
    9112:	91 1d       	adc	r25, r1
    9114:	96 95       	lsr	r25
    9116:	87 95       	ror	r24
    9118:	97 f9       	bld	r25, 7
    911a:	08 95       	ret
    911c:	e1 e0       	ldi	r30, 0x01	; 1
    911e:	66 0f       	add	r22, r22
    9120:	77 1f       	adc	r23, r23
    9122:	88 1f       	adc	r24, r24
    9124:	bb 1f       	adc	r27, r27
    9126:	62 17       	cp	r22, r18
    9128:	73 07       	cpc	r23, r19
    912a:	84 07       	cpc	r24, r20
    912c:	ba 07       	cpc	r27, r26
    912e:	20 f0       	brcs	.+8      	; 0x9138 <__divsf3_pse+0xaa>
    9130:	62 1b       	sub	r22, r18
    9132:	73 0b       	sbc	r23, r19
    9134:	84 0b       	sbc	r24, r20
    9136:	ba 0b       	sbc	r27, r26
    9138:	ee 1f       	adc	r30, r30
    913a:	88 f7       	brcc	.-30     	; 0x911e <__divsf3_pse+0x90>
    913c:	e0 95       	com	r30
    913e:	08 95       	ret

00009140 <__fixunssfsi>:
    9140:	bc d0       	rcall	.+376    	; 0x92ba <__fp_splitA>
    9142:	88 f0       	brcs	.+34     	; 0x9166 <__fixunssfsi+0x26>
    9144:	9f 57       	subi	r25, 0x7F	; 127
    9146:	90 f0       	brcs	.+36     	; 0x916c <__fixunssfsi+0x2c>
    9148:	b9 2f       	mov	r27, r25
    914a:	99 27       	eor	r25, r25
    914c:	b7 51       	subi	r27, 0x17	; 23
    914e:	a0 f0       	brcs	.+40     	; 0x9178 <__fixunssfsi+0x38>
    9150:	d1 f0       	breq	.+52     	; 0x9186 <__fixunssfsi+0x46>
    9152:	66 0f       	add	r22, r22
    9154:	77 1f       	adc	r23, r23
    9156:	88 1f       	adc	r24, r24
    9158:	99 1f       	adc	r25, r25
    915a:	1a f0       	brmi	.+6      	; 0x9162 <__fixunssfsi+0x22>
    915c:	ba 95       	dec	r27
    915e:	c9 f7       	brne	.-14     	; 0x9152 <__fixunssfsi+0x12>
    9160:	12 c0       	rjmp	.+36     	; 0x9186 <__fixunssfsi+0x46>
    9162:	b1 30       	cpi	r27, 0x01	; 1
    9164:	81 f0       	breq	.+32     	; 0x9186 <__fixunssfsi+0x46>
    9166:	c3 d0       	rcall	.+390    	; 0x92ee <__fp_zero>
    9168:	b1 e0       	ldi	r27, 0x01	; 1
    916a:	08 95       	ret
    916c:	c0 c0       	rjmp	.+384    	; 0x92ee <__fp_zero>
    916e:	67 2f       	mov	r22, r23
    9170:	78 2f       	mov	r23, r24
    9172:	88 27       	eor	r24, r24
    9174:	b8 5f       	subi	r27, 0xF8	; 248
    9176:	39 f0       	breq	.+14     	; 0x9186 <__fixunssfsi+0x46>
    9178:	b9 3f       	cpi	r27, 0xF9	; 249
    917a:	cc f3       	brlt	.-14     	; 0x916e <__fixunssfsi+0x2e>
    917c:	86 95       	lsr	r24
    917e:	77 95       	ror	r23
    9180:	67 95       	ror	r22
    9182:	b3 95       	inc	r27
    9184:	d9 f7       	brne	.-10     	; 0x917c <__fixunssfsi+0x3c>
    9186:	3e f4       	brtc	.+14     	; 0x9196 <__fixunssfsi+0x56>
    9188:	90 95       	com	r25
    918a:	80 95       	com	r24
    918c:	70 95       	com	r23
    918e:	61 95       	neg	r22
    9190:	7f 4f       	sbci	r23, 0xFF	; 255
    9192:	8f 4f       	sbci	r24, 0xFF	; 255
    9194:	9f 4f       	sbci	r25, 0xFF	; 255
    9196:	08 95       	ret

00009198 <__floatunsisf>:
    9198:	e8 94       	clt
    919a:	09 c0       	rjmp	.+18     	; 0x91ae <__floatsisf+0x12>

0000919c <__floatsisf>:
    919c:	97 fb       	bst	r25, 7
    919e:	3e f4       	brtc	.+14     	; 0x91ae <__floatsisf+0x12>
    91a0:	90 95       	com	r25
    91a2:	80 95       	com	r24
    91a4:	70 95       	com	r23
    91a6:	61 95       	neg	r22
    91a8:	7f 4f       	sbci	r23, 0xFF	; 255
    91aa:	8f 4f       	sbci	r24, 0xFF	; 255
    91ac:	9f 4f       	sbci	r25, 0xFF	; 255
    91ae:	99 23       	and	r25, r25
    91b0:	a9 f0       	breq	.+42     	; 0x91dc <__floatsisf+0x40>
    91b2:	f9 2f       	mov	r31, r25
    91b4:	96 e9       	ldi	r25, 0x96	; 150
    91b6:	bb 27       	eor	r27, r27
    91b8:	93 95       	inc	r25
    91ba:	f6 95       	lsr	r31
    91bc:	87 95       	ror	r24
    91be:	77 95       	ror	r23
    91c0:	67 95       	ror	r22
    91c2:	b7 95       	ror	r27
    91c4:	f1 11       	cpse	r31, r1
    91c6:	f8 cf       	rjmp	.-16     	; 0x91b8 <__floatsisf+0x1c>
    91c8:	fa f4       	brpl	.+62     	; 0x9208 <__floatsisf+0x6c>
    91ca:	bb 0f       	add	r27, r27
    91cc:	11 f4       	brne	.+4      	; 0x91d2 <__floatsisf+0x36>
    91ce:	60 ff       	sbrs	r22, 0
    91d0:	1b c0       	rjmp	.+54     	; 0x9208 <__floatsisf+0x6c>
    91d2:	6f 5f       	subi	r22, 0xFF	; 255
    91d4:	7f 4f       	sbci	r23, 0xFF	; 255
    91d6:	8f 4f       	sbci	r24, 0xFF	; 255
    91d8:	9f 4f       	sbci	r25, 0xFF	; 255
    91da:	16 c0       	rjmp	.+44     	; 0x9208 <__floatsisf+0x6c>
    91dc:	88 23       	and	r24, r24
    91de:	11 f0       	breq	.+4      	; 0x91e4 <__floatsisf+0x48>
    91e0:	96 e9       	ldi	r25, 0x96	; 150
    91e2:	11 c0       	rjmp	.+34     	; 0x9206 <__floatsisf+0x6a>
    91e4:	77 23       	and	r23, r23
    91e6:	21 f0       	breq	.+8      	; 0x91f0 <__floatsisf+0x54>
    91e8:	9e e8       	ldi	r25, 0x8E	; 142
    91ea:	87 2f       	mov	r24, r23
    91ec:	76 2f       	mov	r23, r22
    91ee:	05 c0       	rjmp	.+10     	; 0x91fa <__floatsisf+0x5e>
    91f0:	66 23       	and	r22, r22
    91f2:	71 f0       	breq	.+28     	; 0x9210 <__floatsisf+0x74>
    91f4:	96 e8       	ldi	r25, 0x86	; 134
    91f6:	86 2f       	mov	r24, r22
    91f8:	70 e0       	ldi	r23, 0x00	; 0
    91fa:	60 e0       	ldi	r22, 0x00	; 0
    91fc:	2a f0       	brmi	.+10     	; 0x9208 <__floatsisf+0x6c>
    91fe:	9a 95       	dec	r25
    9200:	66 0f       	add	r22, r22
    9202:	77 1f       	adc	r23, r23
    9204:	88 1f       	adc	r24, r24
    9206:	da f7       	brpl	.-10     	; 0x91fe <__floatsisf+0x62>
    9208:	88 0f       	add	r24, r24
    920a:	96 95       	lsr	r25
    920c:	87 95       	ror	r24
    920e:	97 f9       	bld	r25, 7
    9210:	08 95       	ret

00009212 <__fp_cmp>:
    9212:	99 0f       	add	r25, r25
    9214:	00 08       	sbc	r0, r0
    9216:	55 0f       	add	r21, r21
    9218:	aa 0b       	sbc	r26, r26
    921a:	e0 e8       	ldi	r30, 0x80	; 128
    921c:	fe ef       	ldi	r31, 0xFE	; 254
    921e:	16 16       	cp	r1, r22
    9220:	17 06       	cpc	r1, r23
    9222:	e8 07       	cpc	r30, r24
    9224:	f9 07       	cpc	r31, r25
    9226:	c0 f0       	brcs	.+48     	; 0x9258 <__fp_cmp+0x46>
    9228:	12 16       	cp	r1, r18
    922a:	13 06       	cpc	r1, r19
    922c:	e4 07       	cpc	r30, r20
    922e:	f5 07       	cpc	r31, r21
    9230:	98 f0       	brcs	.+38     	; 0x9258 <__fp_cmp+0x46>
    9232:	62 1b       	sub	r22, r18
    9234:	73 0b       	sbc	r23, r19
    9236:	84 0b       	sbc	r24, r20
    9238:	95 0b       	sbc	r25, r21
    923a:	39 f4       	brne	.+14     	; 0x924a <__fp_cmp+0x38>
    923c:	0a 26       	eor	r0, r26
    923e:	61 f0       	breq	.+24     	; 0x9258 <__fp_cmp+0x46>
    9240:	23 2b       	or	r18, r19
    9242:	24 2b       	or	r18, r20
    9244:	25 2b       	or	r18, r21
    9246:	21 f4       	brne	.+8      	; 0x9250 <__fp_cmp+0x3e>
    9248:	08 95       	ret
    924a:	0a 26       	eor	r0, r26
    924c:	09 f4       	brne	.+2      	; 0x9250 <__fp_cmp+0x3e>
    924e:	a1 40       	sbci	r26, 0x01	; 1
    9250:	a6 95       	lsr	r26
    9252:	8f ef       	ldi	r24, 0xFF	; 255
    9254:	81 1d       	adc	r24, r1
    9256:	81 1d       	adc	r24, r1
    9258:	08 95       	ret

0000925a <__fp_inf>:
    925a:	97 f9       	bld	r25, 7
    925c:	9f 67       	ori	r25, 0x7F	; 127
    925e:	80 e8       	ldi	r24, 0x80	; 128
    9260:	70 e0       	ldi	r23, 0x00	; 0
    9262:	60 e0       	ldi	r22, 0x00	; 0
    9264:	08 95       	ret

00009266 <__fp_nan>:
    9266:	9f ef       	ldi	r25, 0xFF	; 255
    9268:	80 ec       	ldi	r24, 0xC0	; 192
    926a:	08 95       	ret

0000926c <__fp_pscA>:
    926c:	00 24       	eor	r0, r0
    926e:	0a 94       	dec	r0
    9270:	16 16       	cp	r1, r22
    9272:	17 06       	cpc	r1, r23
    9274:	18 06       	cpc	r1, r24
    9276:	09 06       	cpc	r0, r25
    9278:	08 95       	ret

0000927a <__fp_pscB>:
    927a:	00 24       	eor	r0, r0
    927c:	0a 94       	dec	r0
    927e:	12 16       	cp	r1, r18
    9280:	13 06       	cpc	r1, r19
    9282:	14 06       	cpc	r1, r20
    9284:	05 06       	cpc	r0, r21
    9286:	08 95       	ret

00009288 <__fp_round>:
    9288:	09 2e       	mov	r0, r25
    928a:	03 94       	inc	r0
    928c:	00 0c       	add	r0, r0
    928e:	11 f4       	brne	.+4      	; 0x9294 <__fp_round+0xc>
    9290:	88 23       	and	r24, r24
    9292:	52 f0       	brmi	.+20     	; 0x92a8 <__fp_round+0x20>
    9294:	bb 0f       	add	r27, r27
    9296:	40 f4       	brcc	.+16     	; 0x92a8 <__fp_round+0x20>
    9298:	bf 2b       	or	r27, r31
    929a:	11 f4       	brne	.+4      	; 0x92a0 <__fp_round+0x18>
    929c:	60 ff       	sbrs	r22, 0
    929e:	04 c0       	rjmp	.+8      	; 0x92a8 <__fp_round+0x20>
    92a0:	6f 5f       	subi	r22, 0xFF	; 255
    92a2:	7f 4f       	sbci	r23, 0xFF	; 255
    92a4:	8f 4f       	sbci	r24, 0xFF	; 255
    92a6:	9f 4f       	sbci	r25, 0xFF	; 255
    92a8:	08 95       	ret

000092aa <__fp_split3>:
    92aa:	57 fd       	sbrc	r21, 7
    92ac:	90 58       	subi	r25, 0x80	; 128
    92ae:	44 0f       	add	r20, r20
    92b0:	55 1f       	adc	r21, r21
    92b2:	59 f0       	breq	.+22     	; 0x92ca <__fp_splitA+0x10>
    92b4:	5f 3f       	cpi	r21, 0xFF	; 255
    92b6:	71 f0       	breq	.+28     	; 0x92d4 <__fp_splitA+0x1a>
    92b8:	47 95       	ror	r20

000092ba <__fp_splitA>:
    92ba:	88 0f       	add	r24, r24
    92bc:	97 fb       	bst	r25, 7
    92be:	99 1f       	adc	r25, r25
    92c0:	61 f0       	breq	.+24     	; 0x92da <__fp_splitA+0x20>
    92c2:	9f 3f       	cpi	r25, 0xFF	; 255
    92c4:	79 f0       	breq	.+30     	; 0x92e4 <__fp_splitA+0x2a>
    92c6:	87 95       	ror	r24
    92c8:	08 95       	ret
    92ca:	12 16       	cp	r1, r18
    92cc:	13 06       	cpc	r1, r19
    92ce:	14 06       	cpc	r1, r20
    92d0:	55 1f       	adc	r21, r21
    92d2:	f2 cf       	rjmp	.-28     	; 0x92b8 <__fp_split3+0xe>
    92d4:	46 95       	lsr	r20
    92d6:	f1 df       	rcall	.-30     	; 0x92ba <__fp_splitA>
    92d8:	08 c0       	rjmp	.+16     	; 0x92ea <__fp_splitA+0x30>
    92da:	16 16       	cp	r1, r22
    92dc:	17 06       	cpc	r1, r23
    92de:	18 06       	cpc	r1, r24
    92e0:	99 1f       	adc	r25, r25
    92e2:	f1 cf       	rjmp	.-30     	; 0x92c6 <__fp_splitA+0xc>
    92e4:	86 95       	lsr	r24
    92e6:	71 05       	cpc	r23, r1
    92e8:	61 05       	cpc	r22, r1
    92ea:	08 94       	sec
    92ec:	08 95       	ret

000092ee <__fp_zero>:
    92ee:	e8 94       	clt

000092f0 <__fp_szero>:
    92f0:	bb 27       	eor	r27, r27
    92f2:	66 27       	eor	r22, r22
    92f4:	77 27       	eor	r23, r23
    92f6:	cb 01       	movw	r24, r22
    92f8:	97 f9       	bld	r25, 7
    92fa:	08 95       	ret

000092fc <__gesf2>:
    92fc:	8a df       	rcall	.-236    	; 0x9212 <__fp_cmp>
    92fe:	08 f4       	brcc	.+2      	; 0x9302 <__gesf2+0x6>
    9300:	8f ef       	ldi	r24, 0xFF	; 255
    9302:	08 95       	ret

00009304 <__mulsf3>:
    9304:	0b d0       	rcall	.+22     	; 0x931c <__mulsf3x>
    9306:	c0 cf       	rjmp	.-128    	; 0x9288 <__fp_round>
    9308:	b1 df       	rcall	.-158    	; 0x926c <__fp_pscA>
    930a:	28 f0       	brcs	.+10     	; 0x9316 <__mulsf3+0x12>
    930c:	b6 df       	rcall	.-148    	; 0x927a <__fp_pscB>
    930e:	18 f0       	brcs	.+6      	; 0x9316 <__mulsf3+0x12>
    9310:	95 23       	and	r25, r21
    9312:	09 f0       	breq	.+2      	; 0x9316 <__mulsf3+0x12>
    9314:	a2 cf       	rjmp	.-188    	; 0x925a <__fp_inf>
    9316:	a7 cf       	rjmp	.-178    	; 0x9266 <__fp_nan>
    9318:	11 24       	eor	r1, r1
    931a:	ea cf       	rjmp	.-44     	; 0x92f0 <__fp_szero>

0000931c <__mulsf3x>:
    931c:	c6 df       	rcall	.-116    	; 0x92aa <__fp_split3>
    931e:	a0 f3       	brcs	.-24     	; 0x9308 <__mulsf3+0x4>

00009320 <__mulsf3_pse>:
    9320:	95 9f       	mul	r25, r21
    9322:	d1 f3       	breq	.-12     	; 0x9318 <__mulsf3+0x14>
    9324:	95 0f       	add	r25, r21
    9326:	50 e0       	ldi	r21, 0x00	; 0
    9328:	55 1f       	adc	r21, r21
    932a:	62 9f       	mul	r22, r18
    932c:	f0 01       	movw	r30, r0
    932e:	72 9f       	mul	r23, r18
    9330:	bb 27       	eor	r27, r27
    9332:	f0 0d       	add	r31, r0
    9334:	b1 1d       	adc	r27, r1
    9336:	63 9f       	mul	r22, r19
    9338:	aa 27       	eor	r26, r26
    933a:	f0 0d       	add	r31, r0
    933c:	b1 1d       	adc	r27, r1
    933e:	aa 1f       	adc	r26, r26
    9340:	64 9f       	mul	r22, r20
    9342:	66 27       	eor	r22, r22
    9344:	b0 0d       	add	r27, r0
    9346:	a1 1d       	adc	r26, r1
    9348:	66 1f       	adc	r22, r22
    934a:	82 9f       	mul	r24, r18
    934c:	22 27       	eor	r18, r18
    934e:	b0 0d       	add	r27, r0
    9350:	a1 1d       	adc	r26, r1
    9352:	62 1f       	adc	r22, r18
    9354:	73 9f       	mul	r23, r19
    9356:	b0 0d       	add	r27, r0
    9358:	a1 1d       	adc	r26, r1
    935a:	62 1f       	adc	r22, r18
    935c:	83 9f       	mul	r24, r19
    935e:	a0 0d       	add	r26, r0
    9360:	61 1d       	adc	r22, r1
    9362:	22 1f       	adc	r18, r18
    9364:	74 9f       	mul	r23, r20
    9366:	33 27       	eor	r19, r19
    9368:	a0 0d       	add	r26, r0
    936a:	61 1d       	adc	r22, r1
    936c:	23 1f       	adc	r18, r19
    936e:	84 9f       	mul	r24, r20
    9370:	60 0d       	add	r22, r0
    9372:	21 1d       	adc	r18, r1
    9374:	82 2f       	mov	r24, r18
    9376:	76 2f       	mov	r23, r22
    9378:	6a 2f       	mov	r22, r26
    937a:	11 24       	eor	r1, r1
    937c:	9f 57       	subi	r25, 0x7F	; 127
    937e:	50 40       	sbci	r21, 0x00	; 0
    9380:	8a f0       	brmi	.+34     	; 0x93a4 <__mulsf3_pse+0x84>
    9382:	e1 f0       	breq	.+56     	; 0x93bc <__mulsf3_pse+0x9c>
    9384:	88 23       	and	r24, r24
    9386:	4a f0       	brmi	.+18     	; 0x939a <__mulsf3_pse+0x7a>
    9388:	ee 0f       	add	r30, r30
    938a:	ff 1f       	adc	r31, r31
    938c:	bb 1f       	adc	r27, r27
    938e:	66 1f       	adc	r22, r22
    9390:	77 1f       	adc	r23, r23
    9392:	88 1f       	adc	r24, r24
    9394:	91 50       	subi	r25, 0x01	; 1
    9396:	50 40       	sbci	r21, 0x00	; 0
    9398:	a9 f7       	brne	.-22     	; 0x9384 <__mulsf3_pse+0x64>
    939a:	9e 3f       	cpi	r25, 0xFE	; 254
    939c:	51 05       	cpc	r21, r1
    939e:	70 f0       	brcs	.+28     	; 0x93bc <__mulsf3_pse+0x9c>
    93a0:	5c cf       	rjmp	.-328    	; 0x925a <__fp_inf>
    93a2:	a6 cf       	rjmp	.-180    	; 0x92f0 <__fp_szero>
    93a4:	5f 3f       	cpi	r21, 0xFF	; 255
    93a6:	ec f3       	brlt	.-6      	; 0x93a2 <__mulsf3_pse+0x82>
    93a8:	98 3e       	cpi	r25, 0xE8	; 232
    93aa:	dc f3       	brlt	.-10     	; 0x93a2 <__mulsf3_pse+0x82>
    93ac:	86 95       	lsr	r24
    93ae:	77 95       	ror	r23
    93b0:	67 95       	ror	r22
    93b2:	b7 95       	ror	r27
    93b4:	f7 95       	ror	r31
    93b6:	e7 95       	ror	r30
    93b8:	9f 5f       	subi	r25, 0xFF	; 255
    93ba:	c1 f7       	brne	.-16     	; 0x93ac <__mulsf3_pse+0x8c>
    93bc:	fe 2b       	or	r31, r30
    93be:	88 0f       	add	r24, r24
    93c0:	91 1d       	adc	r25, r1
    93c2:	96 95       	lsr	r25
    93c4:	87 95       	ror	r24
    93c6:	97 f9       	bld	r25, 7
    93c8:	08 95       	ret

000093ca <__udivmodhi4>:
    93ca:	aa 1b       	sub	r26, r26
    93cc:	bb 1b       	sub	r27, r27
    93ce:	51 e1       	ldi	r21, 0x11	; 17
    93d0:	07 c0       	rjmp	.+14     	; 0x93e0 <__udivmodhi4_ep>

000093d2 <__udivmodhi4_loop>:
    93d2:	aa 1f       	adc	r26, r26
    93d4:	bb 1f       	adc	r27, r27
    93d6:	a6 17       	cp	r26, r22
    93d8:	b7 07       	cpc	r27, r23
    93da:	10 f0       	brcs	.+4      	; 0x93e0 <__udivmodhi4_ep>
    93dc:	a6 1b       	sub	r26, r22
    93de:	b7 0b       	sbc	r27, r23

000093e0 <__udivmodhi4_ep>:
    93e0:	88 1f       	adc	r24, r24
    93e2:	99 1f       	adc	r25, r25
    93e4:	5a 95       	dec	r21
    93e6:	a9 f7       	brne	.-22     	; 0x93d2 <__udivmodhi4_loop>
    93e8:	80 95       	com	r24
    93ea:	90 95       	com	r25
    93ec:	bc 01       	movw	r22, r24
    93ee:	cd 01       	movw	r24, r26
    93f0:	08 95       	ret

000093f2 <_exit>:
    93f2:	f8 94       	cli

000093f4 <__stop_program>:
    93f4:	ff cf       	rjmp	.-2      	; 0x93f4 <__stop_program>
