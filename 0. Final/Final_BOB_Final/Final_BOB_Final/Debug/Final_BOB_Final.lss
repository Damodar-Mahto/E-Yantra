
Final_BOB_Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800200  0000245e  000024f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000245e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000078  00800224  00800224  00002516  2**0
                  ALLOC
  3 .stab         00001ed8  00000000  00000000  00002518  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006a5  00000000  00000000  000043f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00004a98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029b5  00000000  00000000  00004b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003ff  00000000  00000000  000074ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c9f  00000000  00000000  000078ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000654  00000000  00000000  0000858c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000879  00000000  00000000  00008be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fe8  00000000  00000000  00009459  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 99 04 	jmp	0x932	; 0x932 <__vector_4>
      14:	0c 94 6f 04 	jmp	0x8de	; 0x8de <__vector_5>
      18:	0c 94 45 04 	jmp	0x88a	; 0x88a <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e5       	ldi	r30, 0x5E	; 94
      fc:	f4 e2       	ldi	r31, 0x24	; 36
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 32       	cpi	r26, 0x24	; 36
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a4 e2       	ldi	r26, 0x24	; 36
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ac 39       	cpi	r26, 0x9C	; 156
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <main>
     122:	0c 94 2d 12 	jmp	0x245a	; 0x245a <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <i2c_init>:
arguments		:	none
return value	:	void
*********************************/
void i2c_init()
{
	TWSR = 0x00;
     12a:	10 92 b9 00 	sts	0x00B9, r1
	TWCR = 0x00;
     12e:	ec eb       	ldi	r30, 0xBC	; 188
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	10 82       	st	Z, r1
	TWCR = i2cen | done | eack;		//enables i2c , ack bit and clears TWINT bit
     134:	84 ec       	ldi	r24, 0xC4	; 196
     136:	80 83       	st	Z, r24
	TWBR = 0X0A;					//400khz speed for TWI in 14745600 hz clock frequency
     138:	8a e0       	ldi	r24, 0x0A	; 10
     13a:	80 93 b8 00 	sts	0x00B8, r24
}
     13e:	08 95       	ret

00000140 <i2c_start>:
arguments		:	none
return value	:	void
********************************/
void i2c_start()
{
	TWCR |= start | eack;			//starting transmission ie TWSTA bit is made high
     140:	ec eb       	ldi	r30, 0xBC	; 188
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	80 81       	ld	r24, Z
     146:	80 66       	ori	r24, 0x60	; 96
     148:	80 83       	st	Z, r24
}
     14a:	08 95       	ret

0000014c <clear_twint>:
arguments		:	none	
return value	:	void
********************************/
void clear_twint()
{
	TWCR |= done;					//clearing TWINT bit
     14c:	ec eb       	ldi	r30, 0xBC	; 188
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	80 68       	ori	r24, 0x80	; 128
     154:	80 83       	st	Z, r24
}
     156:	08 95       	ret

00000158 <wait>:
arguments		:	none
return value	:	void
*********************************/
void wait()
{
	while(!(TWCR & done));			//waiting for TWINT bit to be high ie to complete transmission
     158:	ec eb       	ldi	r30, 0xBC	; 188
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	80 81       	ld	r24, Z
     15e:	88 23       	and	r24, r24
     160:	ec f7       	brge	.-6      	; 0x15c <wait+0x4>
}
     162:	08 95       	ret

00000164 <i2c_stop>:
arguments		:	none
return value	:	void
********************************/
void i2c_stop()
{
	TWCR |= stop;					//TWSTO bit is set high
     164:	ec eb       	ldi	r30, 0xBC	; 188
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	80 81       	ld	r24, Z
     16a:	80 61       	ori	r24, 0x10	; 16
     16c:	80 83       	st	Z, r24
}
     16e:	08 95       	ret

00000170 <i2c_getstatus>:
return value	:	UINT8 (returns the status)
********************************/
UINT8 i2c_getstatus()
{
	UINT8 status;
	status = TWSR & 0xF8;			//5 bits of TWSR register gives the status
     170:	80 91 b9 00 	lds	r24, 0x00B9
	return status;
}
     174:	88 7f       	andi	r24, 0xF8	; 248
     176:	08 95       	ret

00000178 <i2c_write>:
arguments		:	UINT8 data(the byte which is to be written)
return value	:	void
*********************************/
void i2c_write(UINT8 data)
{
	TWDR = data;					//writing data or add to TWDR register
     178:	80 93 bb 00 	sts	0x00BB, r24
}
     17c:	08 95       	ret

0000017e <i2c_get>:
arguments		:	INT8 *data (points to the byte to which the data needs to be copied)
return value	:	void
*********************************/
void i2c_get(INT8 *data)
{
	*data = TWDR;					//copying data from TWDR register
     17e:	20 91 bb 00 	lds	r18, 0x00BB
     182:	fc 01       	movw	r30, r24
     184:	20 83       	st	Z, r18
}
     186:	08 95       	ret

00000188 <i2c_sendbyte>:
					UINT8 int_add (address of the internal register of the slave),
					UINT8 data(byte of data which needs to be sent)
return value	:	enum (value which tells if the transmission was succesfull or not)
********************************/
STAT i2c_sendbyte(UINT8 dev_add, UINT8 int_add,UINT8 data)
{
     188:	1f 93       	push	r17
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	18 2f       	mov	r17, r24
     190:	c6 2f       	mov	r28, r22
     192:	d4 2f       	mov	r29, r20
	i2c_start();					//starting transmission
     194:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_start>
	wait();							//then wait for succesfull transmission
     198:	0e 94 ac 00 	call	0x158	; 0x158 <wait>
	if(i2c_getstatus() != 0x08)		//check status
     19c:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_getstatus>
     1a0:	88 30       	cpi	r24, 0x08	; 8
     1a2:	51 f5       	brne	.+84     	; 0x1f8 <i2c_sendbyte+0x70>
		return START_ERR;

	i2c_write(dev_add | write);		//writing slave + write to TWDR
     1a4:	81 2f       	mov	r24, r17
     1a6:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_write>
	TWCR &= ~start;
     1aa:	ec eb       	ldi	r30, 0xBC	; 188
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	80 81       	ld	r24, Z
     1b0:	8f 7d       	andi	r24, 0xDF	; 223
     1b2:	80 83       	st	Z, r24
	clear_twint();					//clear TWINT bit starts transmission
     1b4:	0e 94 a6 00 	call	0x14c	; 0x14c <clear_twint>
	wait();
     1b8:	0e 94 ac 00 	call	0x158	; 0x158 <wait>
	if(i2c_getstatus()!=0x18)
     1bc:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_getstatus>
     1c0:	88 31       	cpi	r24, 0x18	; 24
     1c2:	e1 f4       	brne	.+56     	; 0x1fc <i2c_sendbyte+0x74>
		return SLAVEW_ERR;

	i2c_write(int_add);				//writing int_add to TWDR
     1c4:	8c 2f       	mov	r24, r28
     1c6:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_write>
	clear_twint();
     1ca:	0e 94 a6 00 	call	0x14c	; 0x14c <clear_twint>
	wait();
     1ce:	0e 94 ac 00 	call	0x158	; 0x158 <wait>
	if(i2c_getstatus()!=0x28)
     1d2:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_getstatus>
     1d6:	88 32       	cpi	r24, 0x28	; 40
     1d8:	99 f4       	brne	.+38     	; 0x200 <i2c_sendbyte+0x78>
	{	return WRITE_ERR;	}

	i2c_write(data);				//writing one byte of data...to write multi byte | with 0x80
     1da:	8d 2f       	mov	r24, r29
     1dc:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_write>
	clear_twint();
     1e0:	0e 94 a6 00 	call	0x14c	; 0x14c <clear_twint>
	wait();
     1e4:	0e 94 ac 00 	call	0x158	; 0x158 <wait>
	if(i2c_getstatus()!=0x28)
     1e8:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_getstatus>
     1ec:	88 32       	cpi	r24, 0x28	; 40
     1ee:	51 f4       	brne	.+20     	; 0x204 <i2c_sendbyte+0x7c>
		return WRITE_ERR;

	i2c_stop();
     1f0:	0e 94 b2 00 	call	0x164	; 0x164 <i2c_stop>

	return OK;
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	07 c0       	rjmp	.+14     	; 0x206 <i2c_sendbyte+0x7e>
STAT i2c_sendbyte(UINT8 dev_add, UINT8 int_add,UINT8 data)
{
	i2c_start();					//starting transmission
	wait();							//then wait for succesfull transmission
	if(i2c_getstatus() != 0x08)		//check status
		return START_ERR;
     1f8:	88 ef       	ldi	r24, 0xF8	; 248
     1fa:	05 c0       	rjmp	.+10     	; 0x206 <i2c_sendbyte+0x7e>
	i2c_write(dev_add | write);		//writing slave + write to TWDR
	TWCR &= ~start;
	clear_twint();					//clear TWINT bit starts transmission
	wait();
	if(i2c_getstatus()!=0x18)
		return SLAVEW_ERR;
     1fc:	89 ef       	ldi	r24, 0xF9	; 249
     1fe:	03 c0       	rjmp	.+6      	; 0x206 <i2c_sendbyte+0x7e>

	i2c_write(int_add);				//writing int_add to TWDR
	clear_twint();
	wait();
	if(i2c_getstatus()!=0x28)
	{	return WRITE_ERR;	}
     200:	8b ef       	ldi	r24, 0xFB	; 251
     202:	01 c0       	rjmp	.+2      	; 0x206 <i2c_sendbyte+0x7e>

	i2c_write(data);				//writing one byte of data...to write multi byte | with 0x80
	clear_twint();
	wait();
	if(i2c_getstatus()!=0x28)
		return WRITE_ERR;
     204:	8b ef       	ldi	r24, 0xFB	; 251

	i2c_stop();

	return OK;
}
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	1f 91       	pop	r17
     20c:	08 95       	ret

0000020e <i2c_getbyte>:
					UINT8 int_add (address of the internal register of the slave),
					INT8 *data(points to the byte to which the data needs to be copied)					
return value	:	enum (value which tells if the transmission was succesfull or not)
********************************/
STAT i2c_getbyte(UINT8 dev_add,UINT8 int_add,INT8 *data)
{
     20e:	0f 93       	push	r16
     210:	1f 93       	push	r17
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	c8 2f       	mov	r28, r24
     218:	d6 2f       	mov	r29, r22
     21a:	8a 01       	movw	r16, r20
	i2c_start();					//starting transmission
     21c:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_start>
	wait();							//then wait for succesfull transmission
     220:	0e 94 ac 00 	call	0x158	; 0x158 <wait>
	if(i2c_getstatus() != 0x08)		//checking status
     224:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_getstatus>
     228:	88 30       	cpi	r24, 0x08	; 8
     22a:	09 f0       	breq	.+2      	; 0x22e <i2c_getbyte+0x20>
     22c:	48 c0       	rjmp	.+144    	; 0x2be <i2c_getbyte+0xb0>
		return START_ERR;

	i2c_write(dev_add | write);		//writing slave + write to TWDR
     22e:	8c 2f       	mov	r24, r28
     230:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_write>
	TWCR &= ~start;
     234:	ec eb       	ldi	r30, 0xBC	; 188
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	80 81       	ld	r24, Z
     23a:	8f 7d       	andi	r24, 0xDF	; 223
     23c:	80 83       	st	Z, r24
	clear_twint();					//clear TWINT bit and starts transmission
     23e:	0e 94 a6 00 	call	0x14c	; 0x14c <clear_twint>
	wait();
     242:	0e 94 ac 00 	call	0x158	; 0x158 <wait>
	if(i2c_getstatus()!=0x18)
     246:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_getstatus>
     24a:	88 31       	cpi	r24, 0x18	; 24
     24c:	d1 f5       	brne	.+116    	; 0x2c2 <i2c_getbyte+0xb4>
		return SLAVEW_ERR;	

	i2c_write(int_add);				//writing int_add to TWDR
     24e:	8d 2f       	mov	r24, r29
     250:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_write>
	clear_twint();
     254:	0e 94 a6 00 	call	0x14c	; 0x14c <clear_twint>
	wait();
     258:	0e 94 ac 00 	call	0x158	; 0x158 <wait>
	if(i2c_getstatus()!=0x28)
     25c:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_getstatus>
     260:	88 32       	cpi	r24, 0x28	; 40
     262:	89 f5       	brne	.+98     	; 0x2c6 <i2c_getbyte+0xb8>
		return WRITE_ERR;

	i2c_start();					//repeated start
     264:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_start>
	wait();
     268:	0e 94 ac 00 	call	0x158	; 0x158 <wait>
	if(i2c_getstatus() != 0x10)
     26c:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_getstatus>
     270:	80 31       	cpi	r24, 0x10	; 16
     272:	59 f5       	brne	.+86     	; 0x2ca <i2c_getbyte+0xbc>
		return REPSTART_ERR;

	i2c_write(dev_add | read);		//writing slave + read to TWDR register
     274:	8c 2f       	mov	r24, r28
     276:	81 60       	ori	r24, 0x01	; 1
     278:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_write>
	TWCR &= ~start;
     27c:	ec eb       	ldi	r30, 0xBC	; 188
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	80 81       	ld	r24, Z
     282:	8f 7d       	andi	r24, 0xDF	; 223
     284:	80 83       	st	Z, r24
	clear_twint();
     286:	0e 94 a6 00 	call	0x14c	; 0x14c <clear_twint>
	wait();
     28a:	0e 94 ac 00 	call	0x158	; 0x158 <wait>
	if(i2c_getstatus()!=0x40)
     28e:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_getstatus>
     292:	80 34       	cpi	r24, 0x40	; 64
     294:	e1 f4       	brne	.+56     	; 0x2ce <i2c_getbyte+0xc0>
		return SLAVER_ERR;

	TWCR &= ~eack;
     296:	ec eb       	ldi	r30, 0xBC	; 188
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	80 81       	ld	r24, Z
     29c:	8f 7b       	andi	r24, 0xBF	; 191
     29e:	80 83       	st	Z, r24
	clear_twint();
     2a0:	0e 94 a6 00 	call	0x14c	; 0x14c <clear_twint>
	wait();
     2a4:	0e 94 ac 00 	call	0x158	; 0x158 <wait>
	if(i2c_getstatus()!=0x58)
     2a8:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_getstatus>
     2ac:	88 35       	cpi	r24, 0x58	; 88
     2ae:	89 f4       	brne	.+34     	; 0x2d2 <i2c_getbyte+0xc4>
		return READ_ERR;

	i2c_get(data);					//getting data to the char pointer
     2b0:	c8 01       	movw	r24, r16
     2b2:	0e 94 bf 00 	call	0x17e	; 0x17e <i2c_get>

	i2c_stop();						//stopping the transmission
     2b6:	0e 94 b2 00 	call	0x164	; 0x164 <i2c_stop>

	return OK;
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	0b c0       	rjmp	.+22     	; 0x2d4 <i2c_getbyte+0xc6>
STAT i2c_getbyte(UINT8 dev_add,UINT8 int_add,INT8 *data)
{
	i2c_start();					//starting transmission
	wait();							//then wait for succesfull transmission
	if(i2c_getstatus() != 0x08)		//checking status
		return START_ERR;
     2be:	88 ef       	ldi	r24, 0xF8	; 248
     2c0:	09 c0       	rjmp	.+18     	; 0x2d4 <i2c_getbyte+0xc6>
	i2c_write(dev_add | write);		//writing slave + write to TWDR
	TWCR &= ~start;
	clear_twint();					//clear TWINT bit and starts transmission
	wait();
	if(i2c_getstatus()!=0x18)
		return SLAVEW_ERR;	
     2c2:	89 ef       	ldi	r24, 0xF9	; 249
     2c4:	07 c0       	rjmp	.+14     	; 0x2d4 <i2c_getbyte+0xc6>

	i2c_write(int_add);				//writing int_add to TWDR
	clear_twint();
	wait();
	if(i2c_getstatus()!=0x28)
		return WRITE_ERR;
     2c6:	8b ef       	ldi	r24, 0xFB	; 251
     2c8:	05 c0       	rjmp	.+10     	; 0x2d4 <i2c_getbyte+0xc6>

	i2c_start();					//repeated start
	wait();
	if(i2c_getstatus() != 0x10)
		return REPSTART_ERR;
     2ca:	8d ef       	ldi	r24, 0xFD	; 253
     2cc:	03 c0       	rjmp	.+6      	; 0x2d4 <i2c_getbyte+0xc6>
	i2c_write(dev_add | read);		//writing slave + read to TWDR register
	TWCR &= ~start;
	clear_twint();
	wait();
	if(i2c_getstatus()!=0x40)
		return SLAVER_ERR;
     2ce:	8a ef       	ldi	r24, 0xFA	; 250
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <i2c_getbyte+0xc6>

	TWCR &= ~eack;
	clear_twint();
	wait();
	if(i2c_getstatus()!=0x58)
		return READ_ERR;
     2d2:	8c ef       	ldi	r24, 0xFC	; 252
	i2c_get(data);					//getting data to the char pointer

	i2c_stop();						//stopping the transmission

	return OK;
}
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	1f 91       	pop	r17
     2da:	0f 91       	pop	r16
     2dc:	08 95       	ret

000002de <i2c_read_multi_byte>:
					UINT16 n(no of bytes which needs to be read)
					INT8 *data(points to the byte to which the data needs to be copied)	
return value	:	enum (value which tells if the transmission was succesfull or not)
*********************************/
STAT i2c_read_multi_byte(UINT8 dev_add,UINT8 int_add,UINT16 n,INT8 *data)
{
     2de:	8f 92       	push	r8
     2e0:	9f 92       	push	r9
     2e2:	af 92       	push	r10
     2e4:	bf 92       	push	r11
     2e6:	cf 92       	push	r12
     2e8:	df 92       	push	r13
     2ea:	ef 92       	push	r14
     2ec:	ff 92       	push	r15
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	c8 2f       	mov	r28, r24
     2f8:	06 2f       	mov	r16, r22
     2fa:	5a 01       	movw	r10, r20
     2fc:	69 01       	movw	r12, r18
	UINT16 i;
	i2c_start();					//starting transmission
     2fe:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_start>
	wait();							//then wait for succesfull transmission
     302:	0e 94 ac 00 	call	0x158	; 0x158 <wait>
	if(i2c_getstatus() != 0x08)		//check status
     306:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_getstatus>
     30a:	88 30       	cpi	r24, 0x08	; 8
     30c:	09 f0       	breq	.+2      	; 0x310 <i2c_read_multi_byte+0x32>
     30e:	73 c0       	rjmp	.+230    	; 0x3f6 <i2c_read_multi_byte+0x118>
		return START_ERR;

	i2c_write(dev_add | write);		//writing slave + write to TWDR
     310:	8c 2f       	mov	r24, r28
     312:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_write>
	TWCR &=~start;					//to avoid transmitting start bit again
     316:	ec eb       	ldi	r30, 0xBC	; 188
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	80 81       	ld	r24, Z
     31c:	8f 7d       	andi	r24, 0xDF	; 223
     31e:	80 83       	st	Z, r24
	clear_twint();					//clear TWINT bit and starts transmission
     320:	0e 94 a6 00 	call	0x14c	; 0x14c <clear_twint>
	wait();
     324:	0e 94 ac 00 	call	0x158	; 0x158 <wait>
	if(i2c_getstatus()!=0x18)
     328:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_getstatus>
     32c:	88 31       	cpi	r24, 0x18	; 24
     32e:	09 f0       	breq	.+2      	; 0x332 <i2c_read_multi_byte+0x54>
     330:	64 c0       	rjmp	.+200    	; 0x3fa <i2c_read_multi_byte+0x11c>
		return SLAVEW_ERR;

	i2c_write(int_add | 0x80);		//to read multi-byte logical or(|) the register with 0x80
     332:	80 2f       	mov	r24, r16
     334:	80 68       	ori	r24, 0x80	; 128
     336:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_write>
	clear_twint();
     33a:	0e 94 a6 00 	call	0x14c	; 0x14c <clear_twint>
	wait();
     33e:	0e 94 ac 00 	call	0x158	; 0x158 <wait>
	if(i2c_getstatus()!=0x28)
     342:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_getstatus>
     346:	88 32       	cpi	r24, 0x28	; 40
     348:	09 f0       	breq	.+2      	; 0x34c <i2c_read_multi_byte+0x6e>
     34a:	59 c0       	rjmp	.+178    	; 0x3fe <i2c_read_multi_byte+0x120>
		return WRITE_ERR;

	i2c_start();					//repeated start
     34c:	0e 94 a0 00 	call	0x140	; 0x140 <i2c_start>
	wait();
     350:	0e 94 ac 00 	call	0x158	; 0x158 <wait>
	if(i2c_getstatus() != 0x10)
     354:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_getstatus>
     358:	80 31       	cpi	r24, 0x10	; 16
     35a:	09 f0       	breq	.+2      	; 0x35e <i2c_read_multi_byte+0x80>
     35c:	52 c0       	rjmp	.+164    	; 0x402 <i2c_read_multi_byte+0x124>
		return REPSTART_ERR;

	i2c_write(dev_add | read);		//writing slave + read to TWDR register
     35e:	8c 2f       	mov	r24, r28
     360:	81 60       	ori	r24, 0x01	; 1
     362:	0e 94 bc 00 	call	0x178	; 0x178 <i2c_write>
	TWCR &= ~start;
     366:	ec eb       	ldi	r30, 0xBC	; 188
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	8f 7d       	andi	r24, 0xDF	; 223
     36e:	80 83       	st	Z, r24
	clear_twint();
     370:	0e 94 a6 00 	call	0x14c	; 0x14c <clear_twint>
	wait();
     374:	0e 94 ac 00 	call	0x158	; 0x158 <wait>
	if(i2c_getstatus()!=0x40)
     378:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_getstatus>
     37c:	80 34       	cpi	r24, 0x40	; 64
     37e:	09 f0       	breq	.+2      	; 0x382 <i2c_read_multi_byte+0xa4>
     380:	42 c0       	rjmp	.+132    	; 0x406 <i2c_read_multi_byte+0x128>
		return SLAVER_ERR;

	for(i=0;i<n;i++)
     382:	a1 14       	cp	r10, r1
     384:	b1 04       	cpc	r11, r1
     386:	99 f1       	breq	.+102    	; 0x3ee <i2c_read_multi_byte+0x110>
     388:	c0 e0       	ldi	r28, 0x00	; 0
     38a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if(i==(n-1))				//if last byte send nack
     38c:	75 01       	movw	r14, r10
     38e:	08 94       	sec
     390:	e1 08       	sbc	r14, r1
     392:	f1 08       	sbc	r15, r1
				return NACK_ERR;	
			i2c_get(&data[i]);		
		}
		else
		{
			TWCR |= eack;			//sending ACK
     394:	0c eb       	ldi	r16, 0xBC	; 188
     396:	10 e0       	ldi	r17, 0x00	; 0
			TWCR &= ~eack;			//sending NACK since it is the last bit
			clear_twint();
			wait();
			if(i2c_getstatus()!=0x58)
				return NACK_ERR;	
			i2c_get(&data[i]);		
     398:	46 01       	movw	r8, r12
     39a:	8e 0c       	add	r8, r14
     39c:	9f 1c       	adc	r9, r15
	if(i2c_getstatus()!=0x40)
		return SLAVER_ERR;

	for(i=0;i<n;i++)
	{
		if(i==(n-1))				//if last byte send nack
     39e:	ec 16       	cp	r14, r28
     3a0:	fd 06       	cpc	r15, r29
     3a2:	81 f4       	brne	.+32     	; 0x3c4 <i2c_read_multi_byte+0xe6>
		{
			TWCR &= ~eack;			//sending NACK since it is the last bit
     3a4:	f8 01       	movw	r30, r16
     3a6:	80 81       	ld	r24, Z
     3a8:	8f 7b       	andi	r24, 0xBF	; 191
     3aa:	80 83       	st	Z, r24
			clear_twint();
     3ac:	0e 94 a6 00 	call	0x14c	; 0x14c <clear_twint>
			wait();
     3b0:	0e 94 ac 00 	call	0x158	; 0x158 <wait>
			if(i2c_getstatus()!=0x58)
     3b4:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_getstatus>
     3b8:	88 35       	cpi	r24, 0x58	; 88
     3ba:	39 f5       	brne	.+78     	; 0x40a <i2c_read_multi_byte+0x12c>
				return NACK_ERR;	
			i2c_get(&data[i]);		
     3bc:	c4 01       	movw	r24, r8
     3be:	0e 94 bf 00 	call	0x17e	; 0x17e <i2c_get>
     3c2:	11 c0       	rjmp	.+34     	; 0x3e6 <i2c_read_multi_byte+0x108>
		}
		else
		{
			TWCR |= eack;			//sending ACK
     3c4:	f8 01       	movw	r30, r16
     3c6:	80 81       	ld	r24, Z
     3c8:	80 64       	ori	r24, 0x40	; 64
     3ca:	80 83       	st	Z, r24
			clear_twint();
     3cc:	0e 94 a6 00 	call	0x14c	; 0x14c <clear_twint>
			wait();
     3d0:	0e 94 ac 00 	call	0x158	; 0x158 <wait>
			if(i2c_getstatus()!=0x50)
     3d4:	0e 94 b8 00 	call	0x170	; 0x170 <i2c_getstatus>
     3d8:	80 35       	cpi	r24, 0x50	; 80
     3da:	c9 f4       	brne	.+50     	; 0x40e <i2c_read_multi_byte+0x130>
				return ACK_ERR;	

			i2c_get(&data[i]);		//getting required data
     3dc:	c6 01       	movw	r24, r12
     3de:	8c 0f       	add	r24, r28
     3e0:	9d 1f       	adc	r25, r29
     3e2:	0e 94 bf 00 	call	0x17e	; 0x17e <i2c_get>
	clear_twint();
	wait();
	if(i2c_getstatus()!=0x40)
		return SLAVER_ERR;

	for(i=0;i<n;i++)
     3e6:	21 96       	adiw	r28, 0x01	; 1
     3e8:	ca 15       	cp	r28, r10
     3ea:	db 05       	cpc	r29, r11
     3ec:	c1 f6       	brne	.-80     	; 0x39e <i2c_read_multi_byte+0xc0>

			i2c_get(&data[i]);		//getting required data
		}
	}

	i2c_stop();						//stopping the transmission
     3ee:	0e 94 b2 00 	call	0x164	; 0x164 <i2c_stop>

	return OK;	
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	0d c0       	rjmp	.+26     	; 0x410 <i2c_read_multi_byte+0x132>
{
	UINT16 i;
	i2c_start();					//starting transmission
	wait();							//then wait for succesfull transmission
	if(i2c_getstatus() != 0x08)		//check status
		return START_ERR;
     3f6:	88 ef       	ldi	r24, 0xF8	; 248
     3f8:	0b c0       	rjmp	.+22     	; 0x410 <i2c_read_multi_byte+0x132>
	i2c_write(dev_add | write);		//writing slave + write to TWDR
	TWCR &=~start;					//to avoid transmitting start bit again
	clear_twint();					//clear TWINT bit and starts transmission
	wait();
	if(i2c_getstatus()!=0x18)
		return SLAVEW_ERR;
     3fa:	89 ef       	ldi	r24, 0xF9	; 249
     3fc:	09 c0       	rjmp	.+18     	; 0x410 <i2c_read_multi_byte+0x132>

	i2c_write(int_add | 0x80);		//to read multi-byte logical or(|) the register with 0x80
	clear_twint();
	wait();
	if(i2c_getstatus()!=0x28)
		return WRITE_ERR;
     3fe:	8b ef       	ldi	r24, 0xFB	; 251
     400:	07 c0       	rjmp	.+14     	; 0x410 <i2c_read_multi_byte+0x132>

	i2c_start();					//repeated start
	wait();
	if(i2c_getstatus() != 0x10)
		return REPSTART_ERR;
     402:	8d ef       	ldi	r24, 0xFD	; 253
     404:	05 c0       	rjmp	.+10     	; 0x410 <i2c_read_multi_byte+0x132>
	i2c_write(dev_add | read);		//writing slave + read to TWDR register
	TWCR &= ~start;
	clear_twint();
	wait();
	if(i2c_getstatus()!=0x40)
		return SLAVER_ERR;
     406:	8a ef       	ldi	r24, 0xFA	; 250
     408:	03 c0       	rjmp	.+6      	; 0x410 <i2c_read_multi_byte+0x132>
		{
			TWCR &= ~eack;			//sending NACK since it is the last bit
			clear_twint();
			wait();
			if(i2c_getstatus()!=0x58)
				return NACK_ERR;	
     40a:	8f ef       	ldi	r24, 0xFF	; 255
     40c:	01 c0       	rjmp	.+2      	; 0x410 <i2c_read_multi_byte+0x132>
		{
			TWCR |= eack;			//sending ACK
			clear_twint();
			wait();
			if(i2c_getstatus()!=0x50)
				return ACK_ERR;	
     40e:	8e ef       	ldi	r24, 0xFE	; 254
	}

	i2c_stop();						//stopping the transmission

	return OK;	
}
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	1f 91       	pop	r17
     416:	0f 91       	pop	r16
     418:	ff 90       	pop	r15
     41a:	ef 90       	pop	r14
     41c:	df 90       	pop	r13
     41e:	cf 90       	pop	r12
     420:	bf 90       	pop	r11
     422:	af 90       	pop	r10
     424:	9f 90       	pop	r9
     426:	8f 90       	pop	r8
     428:	08 95       	ret

0000042a <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     42a:	86 e6       	ldi	r24, 0x66	; 102
     42c:	9e e0       	ldi	r25, 0x0E	; 14
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <lcd_set_4bit+0x4>
     432:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     434:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     436:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     438:	80 e3       	ldi	r24, 0x30	; 48
     43a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     43c:	42 9a       	sbi	0x08, 2	; 8
     43e:	ef ef       	ldi	r30, 0xFF	; 255
     440:	f7 e4       	ldi	r31, 0x47	; 71
     442:	31 97       	sbiw	r30, 0x01	; 1
     444:	f1 f7       	brne	.-4      	; 0x442 <lcd_set_4bit+0x18>
     446:	00 c0       	rjmp	.+0      	; 0x448 <lcd_set_4bit+0x1e>
     448:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     44a:	42 98       	cbi	0x08, 2	; 8
     44c:	e6 e6       	ldi	r30, 0x66	; 102
     44e:	fe e0       	ldi	r31, 0x0E	; 14
     450:	31 97       	sbiw	r30, 0x01	; 1
     452:	f1 f7       	brne	.-4      	; 0x450 <lcd_set_4bit+0x26>
     454:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     456:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     458:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     45a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     45c:	42 9a       	sbi	0x08, 2	; 8
     45e:	ef ef       	ldi	r30, 0xFF	; 255
     460:	f7 e4       	ldi	r31, 0x47	; 71
     462:	31 97       	sbiw	r30, 0x01	; 1
     464:	f1 f7       	brne	.-4      	; 0x462 <lcd_set_4bit+0x38>
     466:	00 c0       	rjmp	.+0      	; 0x468 <lcd_set_4bit+0x3e>
     468:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     46a:	42 98       	cbi	0x08, 2	; 8
     46c:	e6 e6       	ldi	r30, 0x66	; 102
     46e:	fe e0       	ldi	r31, 0x0E	; 14
     470:	31 97       	sbiw	r30, 0x01	; 1
     472:	f1 f7       	brne	.-4      	; 0x470 <lcd_set_4bit+0x46>
     474:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     476:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     478:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     47a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     47c:	42 9a       	sbi	0x08, 2	; 8
     47e:	8f ef       	ldi	r24, 0xFF	; 255
     480:	97 e4       	ldi	r25, 0x47	; 71
     482:	01 97       	sbiw	r24, 0x01	; 1
     484:	f1 f7       	brne	.-4      	; 0x482 <lcd_set_4bit+0x58>
     486:	00 c0       	rjmp	.+0      	; 0x488 <lcd_set_4bit+0x5e>
     488:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     48a:	42 98       	cbi	0x08, 2	; 8
     48c:	e6 e6       	ldi	r30, 0x66	; 102
     48e:	fe e0       	ldi	r31, 0x0E	; 14
     490:	31 97       	sbiw	r30, 0x01	; 1
     492:	f1 f7       	brne	.-4      	; 0x490 <lcd_set_4bit+0x66>
     494:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     496:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     498:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     49a:	80 e2       	ldi	r24, 0x20	; 32
     49c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     49e:	42 9a       	sbi	0x08, 2	; 8
     4a0:	8f ef       	ldi	r24, 0xFF	; 255
     4a2:	97 e4       	ldi	r25, 0x47	; 71
     4a4:	01 97       	sbiw	r24, 0x01	; 1
     4a6:	f1 f7       	brne	.-4      	; 0x4a4 <lcd_set_4bit+0x7a>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <lcd_set_4bit+0x80>
     4aa:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     4ac:	42 98       	cbi	0x08, 2	; 8

	
}
     4ae:	08 95       	ret

000004b0 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     4b0:	98 b1       	in	r25, 0x08	; 8
     4b2:	9f 70       	andi	r25, 0x0F	; 15
     4b4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     4b6:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     4b8:	28 2f       	mov	r18, r24
     4ba:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     4bc:	92 2b       	or	r25, r18
     4be:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     4c0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     4c2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     4c4:	42 9a       	sbi	0x08, 2	; 8
     4c6:	ef ef       	ldi	r30, 0xFF	; 255
     4c8:	f7 e4       	ldi	r31, 0x47	; 71
     4ca:	31 97       	sbiw	r30, 0x01	; 1
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <lcd_wr_command+0x1a>
     4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <lcd_wr_command+0x20>
     4d0:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     4d2:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     4d4:	98 b1       	in	r25, 0x08	; 8
     4d6:	9f 70       	andi	r25, 0x0F	; 15
     4d8:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     4da:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     4dc:	82 95       	swap	r24
     4de:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     4e0:	89 2b       	or	r24, r25
     4e2:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     4e4:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     4e6:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     4e8:	42 9a       	sbi	0x08, 2	; 8
     4ea:	8f ef       	ldi	r24, 0xFF	; 255
     4ec:	97 e4       	ldi	r25, 0x47	; 71
     4ee:	01 97       	sbiw	r24, 0x01	; 1
     4f0:	f1 f7       	brne	.-4      	; 0x4ee <lcd_wr_command+0x3e>
     4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <lcd_wr_command+0x44>
     4f4:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     4f6:	42 98       	cbi	0x08, 2	; 8
}
     4f8:	08 95       	ret

000004fa <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     4fa:	0e 94 15 02 	call	0x42a	; 0x42a <lcd_set_4bit>
     4fe:	86 e6       	ldi	r24, 0x66	; 102
     500:	9e e0       	ldi	r25, 0x0E	; 14
     502:	01 97       	sbiw	r24, 0x01	; 1
     504:	f1 f7       	brne	.-4      	; 0x502 <lcd_init+0x8>
     506:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     508:	88 e2       	ldi	r24, 0x28	; 40
     50a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <lcd_wr_command>
	lcd_wr_command(0x01);
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	0e 94 58 02 	call	0x4b0	; 0x4b0 <lcd_wr_command>
	lcd_wr_command(0x06);
     514:	86 e0       	ldi	r24, 0x06	; 6
     516:	0e 94 58 02 	call	0x4b0	; 0x4b0 <lcd_wr_command>
	lcd_wr_command(0x0E);
     51a:	8e e0       	ldi	r24, 0x0E	; 14
     51c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <lcd_wr_command>
	lcd_wr_command(0x80);
     520:	80 e8       	ldi	r24, 0x80	; 128
     522:	0e 94 58 02 	call	0x4b0	; 0x4b0 <lcd_wr_command>
		
}
     526:	08 95       	ret

00000528 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     528:	98 b1       	in	r25, 0x08	; 8
     52a:	9f 70       	andi	r25, 0x0F	; 15
     52c:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     52e:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     530:	28 2f       	mov	r18, r24
     532:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     534:	92 2b       	or	r25, r18
     536:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     538:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     53a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     53c:	42 9a       	sbi	0x08, 2	; 8
     53e:	ef ef       	ldi	r30, 0xFF	; 255
     540:	f7 e4       	ldi	r31, 0x47	; 71
     542:	31 97       	sbiw	r30, 0x01	; 1
     544:	f1 f7       	brne	.-4      	; 0x542 <lcd_wr_char+0x1a>
     546:	00 c0       	rjmp	.+0      	; 0x548 <lcd_wr_char+0x20>
     548:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     54a:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     54c:	98 b1       	in	r25, 0x08	; 8
     54e:	9f 70       	andi	r25, 0x0F	; 15
     550:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     552:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     554:	82 95       	swap	r24
     556:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     558:	89 2b       	or	r24, r25
     55a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     55c:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     55e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     560:	42 9a       	sbi	0x08, 2	; 8
     562:	8f ef       	ldi	r24, 0xFF	; 255
     564:	97 e4       	ldi	r25, 0x47	; 71
     566:	01 97       	sbiw	r24, 0x01	; 1
     568:	f1 f7       	brne	.-4      	; 0x566 <lcd_wr_char+0x3e>
     56a:	00 c0       	rjmp	.+0      	; 0x56c <lcd_wr_char+0x44>
     56c:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     56e:	42 98       	cbi	0x08, 2	; 8
}
     570:	08 95       	ret

00000572 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     572:	80 e8       	ldi	r24, 0x80	; 128
     574:	0e 94 58 02 	call	0x4b0	; 0x4b0 <lcd_wr_command>
}
     578:	08 95       	ret

0000057a <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	ec 01       	movw	r28, r24
	while(*str != '\0')
     580:	88 81       	ld	r24, Y
     582:	88 23       	and	r24, r24
     584:	31 f0       	breq	.+12     	; 0x592 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     586:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     588:	0e 94 94 02 	call	0x528	; 0x528 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     58c:	89 91       	ld	r24, Y+
     58e:	88 23       	and	r24, r24
     590:	d9 f7       	brne	.-10     	; 0x588 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	08 95       	ret

00000598 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     598:	82 30       	cpi	r24, 0x02	; 2
     59a:	79 f0       	breq	.+30     	; 0x5ba <lcd_cursor+0x22>
     59c:	83 30       	cpi	r24, 0x03	; 3
     59e:	18 f4       	brcc	.+6      	; 0x5a6 <lcd_cursor+0xe>
     5a0:	81 30       	cpi	r24, 0x01	; 1
     5a2:	c9 f4       	brne	.+50     	; 0x5d6 <lcd_cursor+0x3e>
     5a4:	05 c0       	rjmp	.+10     	; 0x5b0 <lcd_cursor+0x18>
     5a6:	83 30       	cpi	r24, 0x03	; 3
     5a8:	69 f0       	breq	.+26     	; 0x5c4 <lcd_cursor+0x2c>
     5aa:	84 30       	cpi	r24, 0x04	; 4
     5ac:	a1 f4       	brne	.+40     	; 0x5d6 <lcd_cursor+0x3e>
     5ae:	0f c0       	rjmp	.+30     	; 0x5ce <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     5b0:	86 2f       	mov	r24, r22
     5b2:	81 58       	subi	r24, 0x81	; 129
     5b4:	0e 94 58 02 	call	0x4b0	; 0x4b0 <lcd_wr_command>
     5b8:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     5ba:	86 2f       	mov	r24, r22
     5bc:	81 54       	subi	r24, 0x41	; 65
     5be:	0e 94 58 02 	call	0x4b0	; 0x4b0 <lcd_wr_command>
     5c2:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     5c4:	86 2f       	mov	r24, r22
     5c6:	8d 56       	subi	r24, 0x6D	; 109
     5c8:	0e 94 58 02 	call	0x4b0	; 0x4b0 <lcd_wr_command>
     5cc:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     5ce:	86 2f       	mov	r24, r22
     5d0:	8d 52       	subi	r24, 0x2D	; 45
     5d2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <lcd_wr_command>
     5d6:	08 95       	ret

000005d8 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	8a 01       	movw	r16, r20
     5e2:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     5e4:	88 23       	and	r24, r24
     5e6:	11 f0       	breq	.+4      	; 0x5ec <lcd_print+0x14>
     5e8:	66 23       	and	r22, r22
     5ea:	19 f4       	brne	.+6      	; 0x5f2 <lcd_print+0x1a>
	{
		lcd_home();
     5ec:	0e 94 b9 02 	call	0x572	; 0x572 <lcd_home>
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     5f2:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     5f6:	c5 30       	cpi	r28, 0x05	; 5
     5f8:	d1 05       	cpc	r29, r1
     5fa:	71 f4       	brne	.+28     	; 0x618 <lcd_print+0x40>
	{
		million=value/10000+48;
     5fc:	c8 01       	movw	r24, r16
     5fe:	60 e1       	ldi	r22, 0x10	; 16
     600:	77 e2       	ldi	r23, 0x27	; 39
     602:	0e 94 19 12 	call	0x2432	; 0x2432 <__udivmodhi4>
     606:	cb 01       	movw	r24, r22
     608:	c0 96       	adiw	r24, 0x30	; 48
     60a:	90 93 81 02 	sts	0x0281, r25
     60e:	80 93 80 02 	sts	0x0280, r24
		lcd_wr_char(million);
     612:	0e 94 94 02 	call	0x528	; 0x528 <lcd_wr_char>
     616:	03 c0       	rjmp	.+6      	; 0x61e <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     618:	c4 30       	cpi	r28, 0x04	; 4
     61a:	d1 05       	cpc	r29, r1
     61c:	b9 f4       	brne	.+46     	; 0x64c <lcd_print+0x74>
	{
		temp = value/1000;
     61e:	c8 01       	movw	r24, r16
     620:	68 ee       	ldi	r22, 0xE8	; 232
     622:	73 e0       	ldi	r23, 0x03	; 3
     624:	0e 94 19 12 	call	0x2432	; 0x2432 <__udivmodhi4>
     628:	cb 01       	movw	r24, r22
     62a:	70 93 83 02 	sts	0x0283, r23
     62e:	60 93 82 02 	sts	0x0282, r22
		thousand = temp%10 + 48;
     632:	6a e0       	ldi	r22, 0x0A	; 10
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	0e 94 19 12 	call	0x2432	; 0x2432 <__udivmodhi4>
     63a:	c0 96       	adiw	r24, 0x30	; 48
     63c:	90 93 9b 02 	sts	0x029B, r25
     640:	80 93 9a 02 	sts	0x029A, r24
		lcd_wr_char(thousand);
     644:	0e 94 94 02 	call	0x528	; 0x528 <lcd_wr_char>
		flag=1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	01 c0       	rjmp	.+2      	; 0x64e <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     64c:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     64e:	c3 30       	cpi	r28, 0x03	; 3
     650:	d1 05       	cpc	r29, r1
     652:	11 f0       	breq	.+4      	; 0x658 <lcd_print+0x80>
     654:	81 30       	cpi	r24, 0x01	; 1
     656:	b1 f4       	brne	.+44     	; 0x684 <lcd_print+0xac>
	{
		temp = value/100;
     658:	c8 01       	movw	r24, r16
     65a:	64 e6       	ldi	r22, 0x64	; 100
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	0e 94 19 12 	call	0x2432	; 0x2432 <__udivmodhi4>
     662:	cb 01       	movw	r24, r22
     664:	70 93 83 02 	sts	0x0283, r23
     668:	60 93 82 02 	sts	0x0282, r22
		hundred = temp%10 + 48;
     66c:	6a e0       	ldi	r22, 0x0A	; 10
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	0e 94 19 12 	call	0x2432	; 0x2432 <__udivmodhi4>
     674:	c0 96       	adiw	r24, 0x30	; 48
     676:	90 93 95 02 	sts	0x0295, r25
     67a:	80 93 94 02 	sts	0x0294, r24
		lcd_wr_char(hundred);
     67e:	0e 94 94 02 	call	0x528	; 0x528 <lcd_wr_char>
		flag=1;
     682:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     684:	c2 30       	cpi	r28, 0x02	; 2
     686:	d1 05       	cpc	r29, r1
     688:	11 f0       	breq	.+4      	; 0x68e <lcd_print+0xb6>
     68a:	81 30       	cpi	r24, 0x01	; 1
     68c:	b1 f4       	brne	.+44     	; 0x6ba <lcd_print+0xe2>
	{
		temp = value/10;
     68e:	2a e0       	ldi	r18, 0x0A	; 10
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	c8 01       	movw	r24, r16
     694:	b9 01       	movw	r22, r18
     696:	0e 94 19 12 	call	0x2432	; 0x2432 <__udivmodhi4>
     69a:	cb 01       	movw	r24, r22
     69c:	70 93 83 02 	sts	0x0283, r23
     6a0:	60 93 82 02 	sts	0x0282, r22
		tens = temp%10 + 48;
     6a4:	b9 01       	movw	r22, r18
     6a6:	0e 94 19 12 	call	0x2432	; 0x2432 <__udivmodhi4>
     6aa:	c0 96       	adiw	r24, 0x30	; 48
     6ac:	90 93 90 02 	sts	0x0290, r25
     6b0:	80 93 8f 02 	sts	0x028F, r24
		lcd_wr_char(tens);
     6b4:	0e 94 94 02 	call	0x528	; 0x528 <lcd_wr_char>
		flag=1;
     6b8:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     6ba:	c1 30       	cpi	r28, 0x01	; 1
     6bc:	d1 05       	cpc	r29, r1
     6be:	11 f0       	breq	.+4      	; 0x6c4 <lcd_print+0xec>
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	61 f4       	brne	.+24     	; 0x6dc <lcd_print+0x104>
	{
		unit = value%10 + 48;
     6c4:	c8 01       	movw	r24, r16
     6c6:	6a e0       	ldi	r22, 0x0A	; 10
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	0e 94 19 12 	call	0x2432	; 0x2432 <__udivmodhi4>
     6ce:	c0 96       	adiw	r24, 0x30	; 48
     6d0:	90 93 99 02 	sts	0x0299, r25
     6d4:	80 93 98 02 	sts	0x0298, r24
		lcd_wr_char(unit);
     6d8:	0e 94 94 02 	call	0x528	; 0x528 <lcd_wr_char>
	}
	if(digits>5)
     6dc:	c6 30       	cpi	r28, 0x06	; 6
     6de:	d1 05       	cpc	r29, r1
     6e0:	1c f0       	brlt	.+6      	; 0x6e8 <lcd_print+0x110>
	{
		lcd_wr_char('E');
     6e2:	85 e4       	ldi	r24, 0x45	; 69
     6e4:	0e 94 94 02 	call	0x528	; 0x528 <lcd_wr_char>
	}
	
}
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	08 95       	ret

000006f2 <buzzer_pin_config>:
/************************************************************************** PORT Initialization **********************************************************************/

//Function to initialize Buzzer
void buzzer_pin_config (void)
{
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     6f2:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     6f4:	43 98       	cbi	0x08, 3	; 8
}
     6f6:	08 95       	ret

000006f8 <left_encoder_pin_config>:

void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     6f8:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     6fa:	74 9a       	sbi	0x0e, 4	; 14
}
     6fc:	08 95       	ret

000006fe <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 5 pin as input
     6fe:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     700:	75 9a       	sbi	0x0e, 5	; 14
}
     702:	08 95       	ret

00000704 <lcd_port_config>:

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     704:	87 b1       	in	r24, 0x07	; 7
     706:	87 6f       	ori	r24, 0xF7	; 247
     708:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     70a:	88 b1       	in	r24, 0x08	; 8
     70c:	80 78       	andi	r24, 0x80	; 128
     70e:	88 b9       	out	0x08, r24	; 8
}
     710:	08 95       	ret

00000712 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
     712:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
     714:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
     716:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
     71a:	10 92 08 01 	sts	0x0108, r1
}
     71e:	08 95       	ret

00000720 <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
     720:	81 b1       	in	r24, 0x01	; 1
     722:	8f 60       	ori	r24, 0x0F	; 15
     724:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
     726:	82 b1       	in	r24, 0x02	; 2
     728:	80 7f       	andi	r24, 0xF0	; 240
     72a:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     72c:	ea e0       	ldi	r30, 0x0A	; 10
     72e:	f1 e0       	ldi	r31, 0x01	; 1
     730:	80 81       	ld	r24, Z
     732:	88 61       	ori	r24, 0x18	; 24
     734:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     736:	eb e0       	ldi	r30, 0x0B	; 11
     738:	f1 e0       	ldi	r31, 0x01	; 1
     73a:	80 81       	ld	r24, Z
     73c:	88 61       	ori	r24, 0x18	; 24
     73e:	80 83       	st	Z, r24
}
     740:	08 95       	ret

00000742 <color_sensor_pin_config>:

void color_sensor_pin_config(void)
{
	DDRD  = DDRD | 0xF7;   //set PD3 as input for color sensor output
     742:	8a b1       	in	r24, 0x0a	; 10
     744:	87 6f       	ori	r24, 0xF7	; 247
     746:	8a b9       	out	0x0a, r24	; 10
	PORTD = PORTD | 0x08;  //Enable internal pull-up for PD3 pin
     748:	5b 9a       	sbi	0x0b, 3	; 11
}
     74a:	08 95       	ret

0000074c <servo1_pin_config>:

//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
	DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     74c:	25 9a       	sbi	0x04, 5	; 4
	PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     74e:	2d 9a       	sbi	0x05, 5	; 5
}
     750:	08 95       	ret

00000752 <port_init>:

//Function to Initialize PORTS
void port_init()
{
	lcd_port_config();         //lcd pin configuration
     752:	0e 94 82 03 	call	0x704	; 0x704 <lcd_port_config>
	buzzer_pin_config ();
     756:	0e 94 79 03 	call	0x6f2	; 0x6f2 <buzzer_pin_config>
	lcd_port_config();
     75a:	0e 94 82 03 	call	0x704	; 0x704 <lcd_port_config>
	adc_pin_config();
     75e:	0e 94 89 03 	call	0x712	; 0x712 <adc_pin_config>
	motion_pin_config();	
     762:	0e 94 90 03 	call	0x720	; 0x720 <motion_pin_config>
	left_encoder_pin_config();   //left encoder pin config
     766:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <left_encoder_pin_config>
	right_encoder_pin_config();  //right encoder pin config
     76a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <right_encoder_pin_config>
    color_sensor_pin_config(); //color sensor pin configuration
     76e:	0e 94 a1 03 	call	0x742	; 0x742 <color_sensor_pin_config>
	servo1_pin_config();       //Configure PORTB 5 pin for servo motor 1 operation 
     772:	0e 94 a6 03 	call	0x74c	; 0x74c <servo1_pin_config>
}
     776:	08 95       	ret

00000778 <uart0_init>:

/****************************************************** Other Initializations ***************************************************************************/
void uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
     778:	e1 ec       	ldi	r30, 0xC1	; 193
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	10 82       	st	Z, r1
	UCSR0A = 0x00;
     77e:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C = 0x06;
     782:	86 e0       	ldi	r24, 0x06	; 6
     784:	80 93 c2 00 	sts	0x00C2, r24
	// UBRR0L = 0x47; //11059200 Hz
	UBRR0L = 0x5F; // 14745600 Hzset baud rate lo
     788:	8f e5       	ldi	r24, 0x5F	; 95
     78a:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0x00;       //set baud rate hi
     78e:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0B = 0x18;
     792:	88 e1       	ldi	r24, 0x18	; 24
     794:	80 83       	st	Z, r24
}
     796:	08 95       	ret

00000798 <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
     798:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     79a:	ea e6       	ldi	r30, 0x6A	; 106
     79c:	f0 e0       	ldi	r31, 0x00	; 0
     79e:	80 81       	ld	r24, Z
     7a0:	82 60       	ori	r24, 0x02	; 2
     7a2:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     7a4:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
     7a6:	78 94       	sei
}
     7a8:	08 95       	ret

000007aa <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
     7aa:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     7ac:	ea e6       	ldi	r30, 0x6A	; 106
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	80 81       	ld	r24, Z
     7b2:	88 60       	ori	r24, 0x08	; 8
     7b4:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     7b6:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
     7b8:	78 94       	sei
}
     7ba:	08 95       	ret

000007bc <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     7bc:	e1 e2       	ldi	r30, 0x21	; 33
     7be:	f1 e0       	ldi	r31, 0x01	; 1
     7c0:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     7c2:	8f ef       	ldi	r24, 0xFF	; 255
     7c4:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     7ce:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     7d2:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     7d6:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     7da:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     7de:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     7e2:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     7e6:	89 ea       	ldi	r24, 0xA9	; 169
     7e8:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     7ec:	8b e0       	ldi	r24, 0x0B	; 11
     7ee:	80 83       	st	Z, r24
}
     7f0:	08 95       	ret

000007f2 <timer1_init>:

// Timer 1 initialized in PWM mode for servo motor control
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     7f2:	e1 e8       	ldi	r30, 0x81	; 129
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     7f8:	8c ef       	ldi	r24, 0xFC	; 252
     7fa:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	80 93 84 00 	sts	0x0084, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
     804:	93 e0       	ldi	r25, 0x03	; 3
     806:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
     80a:	8f ef       	ldi	r24, 0xFF	; 255
     80c:	80 93 88 00 	sts	0x0088, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
     810:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
     814:	80 93 8a 00 	sts	0x008A, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
     818:	90 93 8d 00 	sts	0x008D, r25
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
     81c:	80 93 8c 00 	sts	0x008C, r24
 ICR1H  = 0x03;	
     820:	90 93 87 00 	sts	0x0087, r25
 ICR1L  = 0xFF;
     824:	80 93 86 00 	sts	0x0086, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     828:	8b ea       	ldi	r24, 0xAB	; 171
     82a:	80 93 80 00 	sts	0x0080, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
     82e:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     832:	8c e0       	ldi	r24, 0x0C	; 12
     834:	80 83       	st	Z, r24
}
     836:	08 95       	ret

00000838 <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
     838:	ea e7       	ldi	r30, 0x7A	; 122
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     83e:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     842:	80 e2       	ldi	r24, 0x20	; 32
     844:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     848:	80 e8       	ldi	r24, 0x80	; 128
     84a:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     84c:	86 e8       	ldi	r24, 0x86	; 134
     84e:	80 83       	st	Z, r24
}
     850:	08 95       	ret

00000852 <color_sensor_pin_interrupt_init>:

void color_sensor_pin_interrupt_init(void) //Interrupt 3 enable
{
	cli(); //Clears the global interrupt
     852:	f8 94       	cli
	EICRA = EICRA | 0x80; // INT3 is set to trigger with falling edge
     854:	e9 e6       	ldi	r30, 0x69	; 105
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	80 81       	ld	r24, Z
     85a:	80 68       	ori	r24, 0x80	; 128
     85c:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x08; // Unmask Interrupt INT3 for color sensor
     85e:	eb 9a       	sbi	0x1d, 3	; 29
	sei(); // Enables the global interrupt
     860:	78 94       	sei
}
     862:	08 95       	ret

00000864 <init_devices>:

void init_devices (void)
{
	cli();                  //Clears the global interrupts
     864:	f8 94       	cli
	port_init();
     866:	0e 94 a9 03 	call	0x752	; 0x752 <port_init>
	uart0_init();
     86a:	0e 94 bc 03 	call	0x778	; 0x778 <uart0_init>
	left_position_encoder_interrupt_init();
     86e:	0e 94 cc 03 	call	0x798	; 0x798 <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
     872:	0e 94 d5 03 	call	0x7aa	; 0x7aa <right_position_encoder_interrupt_init>
	timer5_init();
     876:	0e 94 de 03 	call	0x7bc	; 0x7bc <timer5_init>
	timer1_init();
     87a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <timer1_init>
	adc_init();
     87e:	0e 94 1c 04 	call	0x838	; 0x838 <adc_init>
	color_sensor_pin_interrupt_init();
     882:	0e 94 29 04 	call	0x852	; 0x852 <color_sensor_pin_interrupt_init>
	sei();                  //Enables the global interrupts
     886:	78 94       	sei
}
     888:	08 95       	ret

0000088a <__vector_6>:

/******************************* ISR *****************************************/

//ISR for right position encoder
ISR(INT5_vect)
{
     88a:	1f 92       	push	r1
     88c:	0f 92       	push	r0
     88e:	0f b6       	in	r0, 0x3f	; 63
     890:	0f 92       	push	r0
     892:	11 24       	eor	r1, r1
     894:	8f 93       	push	r24
     896:	9f 93       	push	r25
     898:	af 93       	push	r26
     89a:	bf 93       	push	r27
	ShaftCountRight++;  //increment right shaft position count
     89c:	80 91 3c 02 	lds	r24, 0x023C
     8a0:	90 91 3d 02 	lds	r25, 0x023D
     8a4:	a0 91 3e 02 	lds	r26, 0x023E
     8a8:	b0 91 3f 02 	lds	r27, 0x023F
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	a1 1d       	adc	r26, r1
     8b0:	b1 1d       	adc	r27, r1
     8b2:	80 93 3c 02 	sts	0x023C, r24
     8b6:	90 93 3d 02 	sts	0x023D, r25
     8ba:	a0 93 3e 02 	sts	0x023E, r26
     8be:	b0 93 3f 02 	sts	0x023F, r27
	pathR++;
     8c2:	80 91 4e 02 	lds	r24, 0x024E
     8c6:	8f 5f       	subi	r24, 0xFF	; 255
     8c8:	80 93 4e 02 	sts	0x024E, r24
}
     8cc:	bf 91       	pop	r27
     8ce:	af 91       	pop	r26
     8d0:	9f 91       	pop	r25
     8d2:	8f 91       	pop	r24
     8d4:	0f 90       	pop	r0
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	0f 90       	pop	r0
     8da:	1f 90       	pop	r1
     8dc:	18 95       	reti

000008de <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     8de:	1f 92       	push	r1
     8e0:	0f 92       	push	r0
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	0f 92       	push	r0
     8e6:	11 24       	eor	r1, r1
     8e8:	8f 93       	push	r24
     8ea:	9f 93       	push	r25
     8ec:	af 93       	push	r26
     8ee:	bf 93       	push	r27
	ShaftCountLeft++;  //increment left shaft position count
     8f0:	80 91 40 02 	lds	r24, 0x0240
     8f4:	90 91 41 02 	lds	r25, 0x0241
     8f8:	a0 91 42 02 	lds	r26, 0x0242
     8fc:	b0 91 43 02 	lds	r27, 0x0243
     900:	01 96       	adiw	r24, 0x01	; 1
     902:	a1 1d       	adc	r26, r1
     904:	b1 1d       	adc	r27, r1
     906:	80 93 40 02 	sts	0x0240, r24
     90a:	90 93 41 02 	sts	0x0241, r25
     90e:	a0 93 42 02 	sts	0x0242, r26
     912:	b0 93 43 02 	sts	0x0243, r27
	pathL++;
     916:	80 91 4f 02 	lds	r24, 0x024F
     91a:	8f 5f       	subi	r24, 0xFF	; 255
     91c:	80 93 4f 02 	sts	0x024F, r24
}
     920:	bf 91       	pop	r27
     922:	af 91       	pop	r26
     924:	9f 91       	pop	r25
     926:	8f 91       	pop	r24
     928:	0f 90       	pop	r0
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	0f 90       	pop	r0
     92e:	1f 90       	pop	r1
     930:	18 95       	reti

00000932 <__vector_4>:

//ISR for color sensor
ISR(INT3_vect)
{
     932:	1f 92       	push	r1
     934:	0f 92       	push	r0
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	0f 92       	push	r0
     93a:	11 24       	eor	r1, r1
     93c:	8f 93       	push	r24
     93e:	9f 93       	push	r25
     940:	af 93       	push	r26
     942:	bf 93       	push	r27
	pulse++; //increment on receiving pulse from the color sensor
     944:	80 91 36 02 	lds	r24, 0x0236
     948:	90 91 37 02 	lds	r25, 0x0237
     94c:	a0 91 38 02 	lds	r26, 0x0238
     950:	b0 91 39 02 	lds	r27, 0x0239
     954:	01 96       	adiw	r24, 0x01	; 1
     956:	a1 1d       	adc	r26, r1
     958:	b1 1d       	adc	r27, r1
     95a:	80 93 36 02 	sts	0x0236, r24
     95e:	90 93 37 02 	sts	0x0237, r25
     962:	a0 93 38 02 	sts	0x0238, r26
     966:	b0 93 39 02 	sts	0x0239, r27
}
     96a:	bf 91       	pop	r27
     96c:	af 91       	pop	r26
     96e:	9f 91       	pop	r25
     970:	8f 91       	pop	r24
     972:	0f 90       	pop	r0
     974:	0f be       	out	0x3f, r0	; 63
     976:	0f 90       	pop	r0
     978:	1f 90       	pop	r1
     97a:	18 95       	reti

0000097c <buzzer_beep>:

/******************************* ********************************** Functions *********************************************************/
// Function to beep buzzer for short time.
void buzzer_beep (void) 
{
	PORTC =PORTC | 0x08;    //turns on the buzzer PC3=1
     97c:	43 9a       	sbi	0x08, 3	; 8
     97e:	8f ef       	ldi	r24, 0xFF	; 255
     980:	9f e3       	ldi	r25, 0x3F	; 63
     982:	a2 e0       	ldi	r26, 0x02	; 2
     984:	81 50       	subi	r24, 0x01	; 1
     986:	90 40       	sbci	r25, 0x00	; 0
     988:	a0 40       	sbci	r26, 0x00	; 0
     98a:	e1 f7       	brne	.-8      	; 0x984 <buzzer_beep+0x8>
     98c:	00 c0       	rjmp	.+0      	; 0x98e <buzzer_beep+0x12>
     98e:	00 00       	nop
	_delay_ms(50);
	PORTC =PORTC & 0xF7;    //turns off the buzzer PC3=0
     990:	43 98       	cbi	0x08, 3	; 8
}
     992:	08 95       	ret

00000994 <buzzer_beep_long>:

//Function to beep buzzer for 10s and mar the end of scanning.
void buzzer_beep_long(void)
{
	PORTC =PORTC | 0x08;    //turns on the buzzer PC3=1
     994:	43 9a       	sbi	0x08, 3	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     996:	8a e0       	ldi	r24, 0x0A	; 10
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	01 97       	sbiw	r24, 0x01	; 1
     99c:	f1 f7       	brne	.-4      	; 0x99a <buzzer_beep_long+0x6>
	_delay_loop_2(10);
}
     99e:	08 95       	ret

000009a0 <servo_1>:
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	OCR1AH = 0x00;
     9a0:	10 92 89 00 	sts	0x0089, r1

//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
     9a4:	68 2f       	mov	r22, r24
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__floatunsisf>
     9b0:	2b e7       	ldi	r18, 0x7B	; 123
     9b2:	34 e1       	ldi	r19, 0x14	; 20
     9b4:	4e ee       	ldi	r20, 0xEE	; 238
     9b6:	5f e3       	ldi	r21, 0x3F	; 63
     9b8:	0e 94 cf 10 	call	0x219e	; 0x219e <__divsf3>
     9bc:	20 e0       	ldi	r18, 0x00	; 0
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	4c e0       	ldi	r20, 0x0C	; 12
     9c2:	52 e4       	ldi	r21, 0x42	; 66
     9c4:	0e 94 67 10 	call	0x20ce	; 0x20ce <__addsf3>
	OCR1AH = 0x00;
	OCR1AL = (unsigned char) PositionPanServo;
     9c8:	0e 94 37 11 	call	0x226e	; 0x226e <__fixunssfsi>
     9cc:	60 93 88 00 	sts	0x0088, r22
}
     9d0:	08 95       	ret

000009d2 <servo_1_free>:

void servo_1_free (void) //makes servo 1 free rotating for saving power
{
	OCR1AH = 0x03;
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	80 93 89 00 	sts	0x0089, r24
	OCR1AL = 0xFF; //Servo 1 off
     9d8:	8f ef       	ldi	r24, 0xFF	; 255
     9da:	80 93 88 00 	sts	0x0088, r24
}
     9de:	08 95       	ret

000009e0 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
	unsigned char a;
	if(Ch>7)
     9e0:	88 30       	cpi	r24, 0x08	; 8
     9e2:	18 f0       	brcs	.+6      	; 0x9ea <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
     9e4:	98 e0       	ldi	r25, 0x08	; 8
     9e6:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;  			
     9ea:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;	   		
     9ec:	80 62       	ori	r24, 0x20	; 32
     9ee:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     9f2:	ea e7       	ldi	r30, 0x7A	; 122
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	80 81       	ld	r24, Z
     9f8:	80 64       	ori	r24, 0x40	; 64
     9fa:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     9fc:	80 81       	ld	r24, Z
     9fe:	84 ff       	sbrs	r24, 4
     a00:	fd cf       	rjmp	.-6      	; 0x9fc <ADC_Conversion+0x1c>
	a=ADCH;
     a02:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     a06:	ea e7       	ldi	r30, 0x7A	; 122
     a08:	f0 e0       	ldi	r31, 0x00	; 0
     a0a:	90 81       	ld	r25, Z
     a0c:	90 61       	ori	r25, 0x10	; 16
     a0e:	90 83       	st	Z, r25
	ADCSRB = 0x00;
     a10:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     a14:	08 95       	ret

00000a16 <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     a16:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     a1a:	60 93 2a 01 	sts	0x012A, r22
}
     a1e:	08 95       	ret

00000a20 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
 PortARestore = PORTA; 		// reading the PORTA original status
     a20:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     a22:	90 7f       	andi	r25, 0xF0	; 240
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 		// removing upper nibbel for the protection
     a24:	8f 70       	andi	r24, 0x0F	; 15
 PortARestore = PORTA; 		// reading the PORTA original status
 PortARestore &= 0xF0; 		// making lower direction nibbel to 0
 PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     a26:	98 2b       	or	r25, r24
 PORTA = PortARestore; 		// executing the command
     a28:	92 b9       	out	0x02, r25	; 2
}
     a2a:	08 95       	ret

00000a2c <forward>:

void forward (void)
{
	motion_set (0x06);
     a2c:	86 e0       	ldi	r24, 0x06	; 6
     a2e:	0e 94 10 05 	call	0xa20	; 0xa20 <motion_set>
}
     a32:	08 95       	ret

00000a34 <left>:

void left (void) //Left wheel backward, Right wheel forward
{
	motion_set(0x05);
     a34:	85 e0       	ldi	r24, 0x05	; 5
     a36:	0e 94 10 05 	call	0xa20	; 0xa20 <motion_set>
}
     a3a:	08 95       	ret

00000a3c <right>:

void right (void) //Left wheel forward, Right wheel backward
{
	motion_set(0x0A);
     a3c:	8a e0       	ldi	r24, 0x0A	; 10
     a3e:	0e 94 10 05 	call	0xa20	; 0xa20 <motion_set>
}
     a42:	08 95       	ret

00000a44 <back>:

void back (void)
{
	motion_set (0x09);
     a44:	89 e0       	ldi	r24, 0x09	; 9
     a46:	0e 94 10 05 	call	0xa20	; 0xa20 <motion_set>
}
     a4a:	08 95       	ret

00000a4c <stop_bot>:

void stop_bot(void)
{
  motion_set (0x00);
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	0e 94 10 05 	call	0xa20	; 0xa20 <motion_set>
}
     a52:	08 95       	ret

00000a54 <angle_rotate>:
void angle_rotate(unsigned int Degrees)
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
     a54:	bc 01       	movw	r22, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__floatunsisf>
     a5e:	28 e4       	ldi	r18, 0x48	; 72
     a60:	31 ee       	ldi	r19, 0xE1	; 225
     a62:	42 e8       	ldi	r20, 0x82	; 130
     a64:	50 e4       	ldi	r21, 0x40	; 64
     a66:	0e 94 cf 10 	call	0x219e	; 0x219e <__divsf3>
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     a6a:	0e 94 37 11 	call	0x226e	; 0x226e <__fixunssfsi>
     a6e:	dc 01       	movw	r26, r24
     a70:	cb 01       	movw	r24, r22
     a72:	a0 e0       	ldi	r26, 0x00	; 0
     a74:	b0 e0       	ldi	r27, 0x00	; 0
	ShaftCountRight = 0;
     a76:	10 92 3c 02 	sts	0x023C, r1
     a7a:	10 92 3d 02 	sts	0x023D, r1
     a7e:	10 92 3e 02 	sts	0x023E, r1
     a82:	10 92 3f 02 	sts	0x023F, r1
	ShaftCountLeft = 0;
     a86:	10 92 40 02 	sts	0x0240, r1
     a8a:	10 92 41 02 	sts	0x0241, r1
     a8e:	10 92 42 02 	sts	0x0242, r1
     a92:	10 92 43 02 	sts	0x0243, r1

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) || (ShaftCountLeft >= ReqdShaftCountInt))
     a96:	40 91 3c 02 	lds	r20, 0x023C
     a9a:	50 91 3d 02 	lds	r21, 0x023D
     a9e:	60 91 3e 02 	lds	r22, 0x023E
     aa2:	70 91 3f 02 	lds	r23, 0x023F
     aa6:	48 17       	cp	r20, r24
     aa8:	59 07       	cpc	r21, r25
     aaa:	6a 07       	cpc	r22, r26
     aac:	7b 07       	cpc	r23, r27
     aae:	68 f4       	brcc	.+26     	; 0xaca <angle_rotate+0x76>
     ab0:	40 91 40 02 	lds	r20, 0x0240
     ab4:	50 91 41 02 	lds	r21, 0x0241
     ab8:	60 91 42 02 	lds	r22, 0x0242
     abc:	70 91 43 02 	lds	r23, 0x0243
     ac0:	48 17       	cp	r20, r24
     ac2:	59 07       	cpc	r21, r25
     ac4:	6a 07       	cpc	r22, r26
     ac6:	7b 07       	cpc	r23, r27
     ac8:	30 f3       	brcs	.-52     	; 0xa96 <angle_rotate+0x42>
		break;
	}
	stop_bot(); //Stop robot
     aca:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
}
     ace:	08 95       	ret

00000ad0 <left_degrees>:

void left_degrees(unsigned int Degrees)
{
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
     ad6:	0e 94 1a 05 	call	0xa34	; 0xa34 <left>
	angle_rotate(Degrees);
     ada:	ce 01       	movw	r24, r28
     adc:	0e 94 2a 05 	call	0xa54	; 0xa54 <angle_rotate>
}
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	08 95       	ret

00000ae6 <right_degrees>:

void right_degrees(unsigned int Degrees)
{
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
     aec:	0e 94 1e 05 	call	0xa3c	; 0xa3c <right>
	angle_rotate(Degrees);
     af0:	ce 01       	movw	r24, r28
     af2:	0e 94 2a 05 	call	0xa54	; 0xa54 <angle_rotate>
}
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	08 95       	ret

00000afc <linear_distance_mm>:
void linear_distance_mm(unsigned int DistanceInMM)
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
     afc:	bc 01       	movw	r22, r24
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__floatunsisf>
     b06:	25 ee       	ldi	r18, 0xE5	; 229
     b08:	30 ed       	ldi	r19, 0xD0	; 208
     b0a:	4a ea       	ldi	r20, 0xAA	; 170
     b0c:	50 e4       	ldi	r21, 0x40	; 64
     b0e:	0e 94 cf 10 	call	0x219e	; 0x219e <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     b12:	0e 94 37 11 	call	0x226e	; 0x226e <__fixunssfsi>
     b16:	46 2f       	mov	r20, r22
     b18:	57 2f       	mov	r21, r23
     b1a:	68 2f       	mov	r22, r24
     b1c:	79 2f       	mov	r23, r25
	
	ShaftCountRight = 0;
     b1e:	10 92 3c 02 	sts	0x023C, r1
     b22:	10 92 3d 02 	sts	0x023D, r1
     b26:	10 92 3e 02 	sts	0x023E, r1
     b2a:	10 92 3f 02 	sts	0x023F, r1
	ShaftCountLeft = 0;
     b2e:	10 92 40 02 	sts	0x0240, r1
     b32:	10 92 41 02 	sts	0x0241, r1
     b36:	10 92 42 02 	sts	0x0242, r1
     b3a:	10 92 43 02 	sts	0x0243, r1
	while(1)
	{
		if((ShaftCountRight > ReqdShaftCountInt)||(ShaftCountLeft > ReqdShaftCountInt))
     b3e:	80 91 3c 02 	lds	r24, 0x023C
     b42:	90 91 3d 02 	lds	r25, 0x023D
     b46:	a0 91 3e 02 	lds	r26, 0x023E
     b4a:	b0 91 3f 02 	lds	r27, 0x023F
     b4e:	48 17       	cp	r20, r24
     b50:	59 07       	cpc	r21, r25
     b52:	6a 07       	cpc	r22, r26
     b54:	7b 07       	cpc	r23, r27
     b56:	68 f0       	brcs	.+26     	; 0xb72 <linear_distance_mm+0x76>
     b58:	80 91 40 02 	lds	r24, 0x0240
     b5c:	90 91 41 02 	lds	r25, 0x0241
     b60:	a0 91 42 02 	lds	r26, 0x0242
     b64:	b0 91 43 02 	lds	r27, 0x0243
     b68:	48 17       	cp	r20, r24
     b6a:	59 07       	cpc	r21, r25
     b6c:	6a 07       	cpc	r22, r26
     b6e:	7b 07       	cpc	r23, r27
     b70:	30 f7       	brcc	.-52     	; 0xb3e <linear_distance_mm+0x42>
     b72:	08 95       	ret

00000b74 <forward_mm>:
	}
	//stop(); //Stop robot
}

void forward_mm(unsigned int DistanceInMM)
{
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	ec 01       	movw	r28, r24
	forward();
     b7a:	0e 94 16 05 	call	0xa2c	; 0xa2c <forward>
	linear_distance_mm(DistanceInMM);
     b7e:	ce 01       	movw	r24, r28
     b80:	0e 94 7e 05 	call	0xafc	; 0xafc <linear_distance_mm>
}
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	08 95       	ret

00000b8a <back_mm>:

void back_mm(unsigned int DistanceInMM)
{
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	ec 01       	movw	r28, r24
	back();
     b90:	0e 94 22 05 	call	0xa44	; 0xa44 <back>
	linear_distance_mm(DistanceInMM);
     b94:	ce 01       	movw	r24, r28
     b96:	0e 94 7e 05 	call	0xafc	; 0xafc <linear_distance_mm>
}
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	08 95       	ret

00000ba0 <filter_red>:

//Filter Selection
void filter_red(void)    //Used to select red filter
{
	//Filter Select - red filter
	PORTD = PORTD & 0xBF; //set S2 low
     ba0:	5e 98       	cbi	0x0b, 6	; 11
	PORTD = PORTD & 0x7F; //set S3 low
     ba2:	5f 98       	cbi	0x0b, 7	; 11
}
     ba4:	08 95       	ret

00000ba6 <filter_green>:

void filter_green(void)	//Used to select green filter
{
	//Filter Select - green filter
	PORTD = PORTD | 0x40; //set S2 High
     ba6:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD = PORTD | 0x80; //set S3 High
     ba8:	5f 9a       	sbi	0x0b, 7	; 11
}
     baa:	08 95       	ret

00000bac <filter_blue>:

void filter_blue(void)	//Used to select blue filter
{
	//Filter Select - blue filter
	PORTD = PORTD & 0xBF; //set S2 low
     bac:	5e 98       	cbi	0x0b, 6	; 11
	PORTD = PORTD | 0x80; //set S3 High
     bae:	5f 9a       	sbi	0x0b, 7	; 11
}
     bb0:	08 95       	ret

00000bb2 <filter_clear>:

void filter_clear(void)	//select no filter
{
	//Filter Select - no filter
	PORTD = PORTD | 0x40; //set S2 High
     bb2:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD = PORTD & 0x7F; //set S3 Low
     bb4:	5f 98       	cbi	0x0b, 7	; 11
}
     bb6:	08 95       	ret

00000bb8 <color_sensor_scaling>:

//Color Sensing Scaling - 20% 
void color_sensor_scaling()		
{
	//PORTD = PORTD & 0xEF;
	PORTD = PORTD | 0x10; //set S0 high
     bb8:	5c 9a       	sbi	0x0b, 4	; 11
	//PORTD = PORTD & 0xDF; //set S1 low
	PORTD = PORTD | 0x20; //set S1 high
     bba:	5d 9a       	sbi	0x0b, 5	; 11
}
     bbc:	08 95       	ret

00000bbe <red_read>:

void red_read(void) // function to select red filter 
{
	filter_red(); //select red filter
     bbe:	0e 94 d0 05 	call	0xba0	; 0xba0 <filter_red>
	pulse=0;
     bc2:	10 92 36 02 	sts	0x0236, r1
     bc6:	10 92 37 02 	sts	0x0237, r1
     bca:	10 92 38 02 	sts	0x0238, r1
     bce:	10 92 39 02 	sts	0x0239, r1
     bd2:	8f ef       	ldi	r24, 0xFF	; 255
     bd4:	9f e7       	ldi	r25, 0x7F	; 127
     bd6:	a4 e0       	ldi	r26, 0x04	; 4
     bd8:	81 50       	subi	r24, 0x01	; 1
     bda:	90 40       	sbci	r25, 0x00	; 0
     bdc:	a0 40       	sbci	r26, 0x00	; 0
     bde:	e1 f7       	brne	.-8      	; 0xbd8 <red_read+0x1a>
     be0:	00 c0       	rjmp	.+0      	; 0xbe2 <red_read+0x24>
     be2:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	red = pulse;  
     be4:	80 91 36 02 	lds	r24, 0x0236
     be8:	90 91 37 02 	lds	r25, 0x0237
     bec:	a0 91 38 02 	lds	r26, 0x0238
     bf0:	b0 91 39 02 	lds	r27, 0x0239
     bf4:	80 93 88 02 	sts	0x0288, r24
     bf8:	90 93 89 02 	sts	0x0289, r25
     bfc:	a0 93 8a 02 	sts	0x028A, r26
     c00:	b0 93 8b 02 	sts	0x028B, r27
}
     c04:	08 95       	ret

00000c06 <green_read>:

void green_read(void) // function to select green filter 
{
	filter_green(); //select green filter
     c06:	0e 94 d3 05 	call	0xba6	; 0xba6 <filter_green>
	pulse=0; 
     c0a:	10 92 36 02 	sts	0x0236, r1
     c0e:	10 92 37 02 	sts	0x0237, r1
     c12:	10 92 38 02 	sts	0x0238, r1
     c16:	10 92 39 02 	sts	0x0239, r1
     c1a:	8f ef       	ldi	r24, 0xFF	; 255
     c1c:	9f e7       	ldi	r25, 0x7F	; 127
     c1e:	a4 e0       	ldi	r26, 0x04	; 4
     c20:	81 50       	subi	r24, 0x01	; 1
     c22:	90 40       	sbci	r25, 0x00	; 0
     c24:	a0 40       	sbci	r26, 0x00	; 0
     c26:	e1 f7       	brne	.-8      	; 0xc20 <green_read+0x1a>
     c28:	00 c0       	rjmp	.+0      	; 0xc2a <green_read+0x24>
     c2a:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	green = pulse; 
     c2c:	80 91 36 02 	lds	r24, 0x0236
     c30:	90 91 37 02 	lds	r25, 0x0237
     c34:	a0 91 38 02 	lds	r26, 0x0238
     c38:	b0 91 39 02 	lds	r27, 0x0239
     c3c:	80 93 84 02 	sts	0x0284, r24
     c40:	90 93 85 02 	sts	0x0285, r25
     c44:	a0 93 86 02 	sts	0x0286, r26
     c48:	b0 93 87 02 	sts	0x0287, r27
}
     c4c:	08 95       	ret

00000c4e <blue_read>:

void blue_read(void) // function to select blue filter 
{
	filter_blue(); //select blue filter
     c4e:	0e 94 d6 05 	call	0xbac	; 0xbac <filter_blue>
	pulse=0; 
     c52:	10 92 36 02 	sts	0x0236, r1
     c56:	10 92 37 02 	sts	0x0237, r1
     c5a:	10 92 38 02 	sts	0x0238, r1
     c5e:	10 92 39 02 	sts	0x0239, r1
     c62:	8f ef       	ldi	r24, 0xFF	; 255
     c64:	9f e7       	ldi	r25, 0x7F	; 127
     c66:	a4 e0       	ldi	r26, 0x04	; 4
     c68:	81 50       	subi	r24, 0x01	; 1
     c6a:	90 40       	sbci	r25, 0x00	; 0
     c6c:	a0 40       	sbci	r26, 0x00	; 0
     c6e:	e1 f7       	brne	.-8      	; 0xc68 <blue_read+0x1a>
     c70:	00 c0       	rjmp	.+0      	; 0xc72 <blue_read+0x24>
     c72:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	blue = pulse;  
     c74:	80 91 36 02 	lds	r24, 0x0236
     c78:	90 91 37 02 	lds	r25, 0x0237
     c7c:	a0 91 38 02 	lds	r26, 0x0238
     c80:	b0 91 39 02 	lds	r27, 0x0239
     c84:	80 93 61 02 	sts	0x0261, r24
     c88:	90 93 62 02 	sts	0x0262, r25
     c8c:	a0 93 63 02 	sts	0x0263, r26
     c90:	b0 93 64 02 	sts	0x0264, r27
}
     c94:	08 95       	ret

00000c96 <sensor_refresh>:


void sensor_refresh()
{
	L= ADC_Conversion(3);	//Getting data of White Line Sensors
     c96:	83 e0       	ldi	r24, 0x03	; 3
     c98:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <ADC_Conversion>
     c9c:	80 93 4d 02 	sts	0x024D, r24
	C= ADC_Conversion(2);	
     ca0:	82 e0       	ldi	r24, 0x02	; 2
     ca2:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <ADC_Conversion>
     ca6:	80 93 4c 02 	sts	0x024C, r24
	R= ADC_Conversion(1);	
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <ADC_Conversion>
     cb0:	80 93 4b 02 	sts	0x024B, r24
	
	IR1=ADC_Conversion(4);
     cb4:	84 e0       	ldi	r24, 0x04	; 4
     cb6:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <ADC_Conversion>
     cba:	80 93 4a 02 	sts	0x024A, r24
	IR3=ADC_Conversion(6);  //Getting data of IR proximity Sensors
     cbe:	86 e0       	ldi	r24, 0x06	; 6
     cc0:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <ADC_Conversion>
     cc4:	80 93 48 02 	sts	0x0248, r24
	IR5=ADC_Conversion(8);
     cc8:	88 e0       	ldi	r24, 0x08	; 8
     cca:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <ADC_Conversion>
     cce:	80 93 46 02 	sts	0x0246, r24
	
	SHARP1=ADC_Conversion(9); //Getting data of Sharp Sensors
     cd2:	89 e0       	ldi	r24, 0x09	; 9
     cd4:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <ADC_Conversion>
     cd8:	80 93 45 02 	sts	0x0245, r24
	SHARP5=ADC_Conversion(13); 
     cdc:	8d e0       	ldi	r24, 0x0D	; 13
     cde:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <ADC_Conversion>
     ce2:	80 93 44 02 	sts	0x0244, r24
}
     ce6:	08 95       	ret

00000ce8 <I2C_read>:

//function to read the sensor values from GY-87 module
void I2C_read()
{
	i2c_read_multi_byte(DEV_ADD, X_ACC,2,acc_data_x);   //reading 2 data bytes and storing it into acc_data[2] array
     ce8:	80 ed       	ldi	r24, 0xD0	; 208
     cea:	6b e3       	ldi	r22, 0x3B	; 59
     cec:	42 e0       	ldi	r20, 0x02	; 2
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	2d e8       	ldi	r18, 0x8D	; 141
     cf2:	32 e0       	ldi	r19, 0x02	; 2
     cf4:	0e 94 6f 01 	call	0x2de	; 0x2de <i2c_read_multi_byte>
	i2c_read_multi_byte(DEV_ADD, Y_GYRO,2,gyro_data_y);   //reading 4 data bytes and storing it into gyro_data[2] array
     cf8:	80 ed       	ldi	r24, 0xD0	; 208
     cfa:	65 e4       	ldi	r22, 0x45	; 69
     cfc:	42 e0       	ldi	r20, 0x02	; 2
     cfe:	50 e0       	ldi	r21, 0x00	; 0
     d00:	26 e9       	ldi	r18, 0x96	; 150
     d02:	32 e0       	ldi	r19, 0x02	; 2
     d04:	0e 94 6f 01 	call	0x2de	; 0x2de <i2c_read_multi_byte>
	i2c_read_multi_byte(DEV_ADD, Z_GYRO,2,gyro_data_z);   //reading 4 data bytes and storing it into gyro_data[2] array
     d08:	80 ed       	ldi	r24, 0xD0	; 208
     d0a:	67 e4       	ldi	r22, 0x47	; 71
     d0c:	42 e0       	ldi	r20, 0x02	; 2
     d0e:	50 e0       	ldi	r21, 0x00	; 0
     d10:	21 e9       	ldi	r18, 0x91	; 145
     d12:	32 e0       	ldi	r19, 0x02	; 2
     d14:	0e 94 6f 01 	call	0x2de	; 0x2de <i2c_read_multi_byte>
    
	acc_x = acc_data_x[0];
     d18:	60 91 8d 02 	lds	r22, 0x028D
     d1c:	77 27       	eor	r23, r23
     d1e:	67 fd       	sbrc	r22, 7
     d20:	70 95       	com	r23
    acc_x = (acc_x << 8);
     d22:	76 2f       	mov	r23, r22
     d24:	66 27       	eor	r22, r22
    acc_x += acc_data_x[1];
     d26:	80 91 8e 02 	lds	r24, 0x028E
     d2a:	99 27       	eor	r25, r25
     d2c:	87 fd       	sbrc	r24, 7
     d2e:	90 95       	com	r25
     d30:	68 0f       	add	r22, r24
     d32:	79 1f       	adc	r23, r25
     d34:	70 93 35 02 	sts	0x0235, r23
     d38:	60 93 34 02 	sts	0x0234, r22
    force_x = acc_x;
     d3c:	88 27       	eor	r24, r24
     d3e:	77 fd       	sbrc	r23, 7
     d40:	80 95       	com	r24
     d42:	98 2f       	mov	r25, r24
     d44:	0e 94 65 11 	call	0x22ca	; 0x22ca <__floatsisf>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	80 93 2c 02 	sts	0x022C, r24
     d50:	90 93 2d 02 	sts	0x022D, r25
     d54:	a0 93 2e 02 	sts	0x022E, r26
     d58:	b0 93 2f 02 	sts	0x022F, r27
  
    gyro_y = gyro_data_y[0];
     d5c:	60 91 96 02 	lds	r22, 0x0296
     d60:	77 27       	eor	r23, r23
     d62:	67 fd       	sbrc	r22, 7
     d64:	70 95       	com	r23
    gyro_y = (gyro_y << 8);
     d66:	76 2f       	mov	r23, r22
     d68:	66 27       	eor	r22, r22
    gyro_y += gyro_data_y[1];
     d6a:	80 91 97 02 	lds	r24, 0x0297
     d6e:	99 27       	eor	r25, r25
     d70:	87 fd       	sbrc	r24, 7
     d72:	90 95       	com	r25
     d74:	68 0f       	add	r22, r24
     d76:	79 1f       	adc	r23, r25
     d78:	70 93 33 02 	sts	0x0233, r23
     d7c:	60 93 32 02 	sts	0x0232, r22
    rotation_y = gyro_y;
     d80:	88 27       	eor	r24, r24
     d82:	77 fd       	sbrc	r23, 7
     d84:	80 95       	com	r24
     d86:	98 2f       	mov	r25, r24
     d88:	0e 94 65 11 	call	0x22ca	; 0x22ca <__floatsisf>
     d8c:	dc 01       	movw	r26, r24
     d8e:	cb 01       	movw	r24, r22
     d90:	80 93 28 02 	sts	0x0228, r24
     d94:	90 93 29 02 	sts	0x0229, r25
     d98:	a0 93 2a 02 	sts	0x022A, r26
     d9c:	b0 93 2b 02 	sts	0x022B, r27
	
	
    gyro_z = gyro_data_z[0];
     da0:	60 91 91 02 	lds	r22, 0x0291
     da4:	77 27       	eor	r23, r23
     da6:	67 fd       	sbrc	r22, 7
     da8:	70 95       	com	r23
    gyro_z = (gyro_z << 8);
     daa:	76 2f       	mov	r23, r22
     dac:	66 27       	eor	r22, r22
    gyro_z += gyro_data_z[1];
     dae:	80 91 92 02 	lds	r24, 0x0292
     db2:	99 27       	eor	r25, r25
     db4:	87 fd       	sbrc	r24, 7
     db6:	90 95       	com	r25
     db8:	68 0f       	add	r22, r24
     dba:	79 1f       	adc	r23, r25
     dbc:	70 93 31 02 	sts	0x0231, r23
     dc0:	60 93 30 02 	sts	0x0230, r22
    rotation_z = gyro_z;
     dc4:	88 27       	eor	r24, r24
     dc6:	77 fd       	sbrc	r23, 7
     dc8:	80 95       	com	r24
     dca:	98 2f       	mov	r25, r24
     dcc:	0e 94 65 11 	call	0x22ca	; 0x22ca <__floatsisf>
     dd0:	dc 01       	movw	r26, r24
     dd2:	cb 01       	movw	r24, r22
     dd4:	80 93 24 02 	sts	0x0224, r24
     dd8:	90 93 25 02 	sts	0x0225, r25
     ddc:	a0 93 26 02 	sts	0x0226, r26
     de0:	b0 93 27 02 	sts	0x0227, r27
}
     de4:	08 95       	ret

00000de6 <colour_detector>:

//function to identify the colour of the object
unsigned char colour_detector()
{
	red_read(); //read the pulse count when red filter is selected
     de6:	0e 94 df 05 	call	0xbbe	; 0xbbe <red_read>
	green_read(); //read the pulse count when green filter is selected
     dea:	0e 94 03 06 	call	0xc06	; 0xc06 <green_read>
	blue_read(); //read the pulse count when blue filter is selected
     dee:	0e 94 27 06 	call	0xc4e	; 0xc4e <blue_read>
	
	if(red>450 && green>450 && blue>450)
     df2:	80 91 88 02 	lds	r24, 0x0288
     df6:	90 91 89 02 	lds	r25, 0x0289
     dfa:	a0 91 8a 02 	lds	r26, 0x028A
     dfe:	b0 91 8b 02 	lds	r27, 0x028B
     e02:	83 3c       	cpi	r24, 0xC3	; 195
     e04:	21 e0       	ldi	r18, 0x01	; 1
     e06:	92 07       	cpc	r25, r18
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	a2 07       	cpc	r26, r18
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	b2 07       	cpc	r27, r18
     e10:	08 f4       	brcc	.+2      	; 0xe14 <colour_detector+0x2e>
     e12:	a2 c0       	rjmp	.+324    	; 0xf58 <colour_detector+0x172>
     e14:	80 91 84 02 	lds	r24, 0x0284
     e18:	90 91 85 02 	lds	r25, 0x0285
     e1c:	a0 91 86 02 	lds	r26, 0x0286
     e20:	b0 91 87 02 	lds	r27, 0x0287
     e24:	83 3c       	cpi	r24, 0xC3	; 195
     e26:	21 e0       	ldi	r18, 0x01	; 1
     e28:	92 07       	cpc	r25, r18
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	a2 07       	cpc	r26, r18
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	b2 07       	cpc	r27, r18
     e32:	08 f4       	brcc	.+2      	; 0xe36 <colour_detector+0x50>
     e34:	93 c0       	rjmp	.+294    	; 0xf5c <colour_detector+0x176>
     e36:	80 91 61 02 	lds	r24, 0x0261
     e3a:	90 91 62 02 	lds	r25, 0x0262
     e3e:	a0 91 63 02 	lds	r26, 0x0263
     e42:	b0 91 64 02 	lds	r27, 0x0264
     e46:	83 3c       	cpi	r24, 0xC3	; 195
     e48:	21 e0       	ldi	r18, 0x01	; 1
     e4a:	92 07       	cpc	r25, r18
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	a2 07       	cpc	r26, r18
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	b2 07       	cpc	r27, r18
     e54:	08 f4       	brcc	.+2      	; 0xe58 <colour_detector+0x72>
     e56:	84 c0       	rjmp	.+264    	; 0xf60 <colour_detector+0x17a>
	{
		if(red>green && red>blue)
     e58:	40 91 88 02 	lds	r20, 0x0288
     e5c:	50 91 89 02 	lds	r21, 0x0289
     e60:	60 91 8a 02 	lds	r22, 0x028A
     e64:	70 91 8b 02 	lds	r23, 0x028B
     e68:	80 91 84 02 	lds	r24, 0x0284
     e6c:	90 91 85 02 	lds	r25, 0x0285
     e70:	a0 91 86 02 	lds	r26, 0x0286
     e74:	b0 91 87 02 	lds	r27, 0x0287
     e78:	84 17       	cp	r24, r20
     e7a:	95 07       	cpc	r25, r21
     e7c:	a6 07       	cpc	r26, r22
     e7e:	b7 07       	cpc	r27, r23
     e80:	b0 f4       	brcc	.+44     	; 0xeae <colour_detector+0xc8>
     e82:	40 91 88 02 	lds	r20, 0x0288
     e86:	50 91 89 02 	lds	r21, 0x0289
     e8a:	60 91 8a 02 	lds	r22, 0x028A
     e8e:	70 91 8b 02 	lds	r23, 0x028B
     e92:	80 91 61 02 	lds	r24, 0x0261
     e96:	90 91 62 02 	lds	r25, 0x0262
     e9a:	a0 91 63 02 	lds	r26, 0x0263
     e9e:	b0 91 64 02 	lds	r27, 0x0264
     ea2:	84 17       	cp	r24, r20
     ea4:	95 07       	cpc	r25, r21
     ea6:	a6 07       	cpc	r26, r22
     ea8:	b7 07       	cpc	r27, r23
     eaa:	08 f4       	brcc	.+2      	; 0xeae <colour_detector+0xc8>
     eac:	5b c0       	rjmp	.+182    	; 0xf64 <colour_detector+0x17e>
		{
			return 'R';
		}
		else if(green>red && green>blue)
     eae:	40 91 84 02 	lds	r20, 0x0284
     eb2:	50 91 85 02 	lds	r21, 0x0285
     eb6:	60 91 86 02 	lds	r22, 0x0286
     eba:	70 91 87 02 	lds	r23, 0x0287
     ebe:	80 91 88 02 	lds	r24, 0x0288
     ec2:	90 91 89 02 	lds	r25, 0x0289
     ec6:	a0 91 8a 02 	lds	r26, 0x028A
     eca:	b0 91 8b 02 	lds	r27, 0x028B
     ece:	84 17       	cp	r24, r20
     ed0:	95 07       	cpc	r25, r21
     ed2:	a6 07       	cpc	r26, r22
     ed4:	b7 07       	cpc	r27, r23
     ed6:	a8 f4       	brcc	.+42     	; 0xf02 <colour_detector+0x11c>
     ed8:	40 91 84 02 	lds	r20, 0x0284
     edc:	50 91 85 02 	lds	r21, 0x0285
     ee0:	60 91 86 02 	lds	r22, 0x0286
     ee4:	70 91 87 02 	lds	r23, 0x0287
     ee8:	80 91 61 02 	lds	r24, 0x0261
     eec:	90 91 62 02 	lds	r25, 0x0262
     ef0:	a0 91 63 02 	lds	r26, 0x0263
     ef4:	b0 91 64 02 	lds	r27, 0x0264
     ef8:	84 17       	cp	r24, r20
     efa:	95 07       	cpc	r25, r21
     efc:	a6 07       	cpc	r26, r22
     efe:	b7 07       	cpc	r27, r23
     f00:	98 f1       	brcs	.+102    	; 0xf68 <colour_detector+0x182>
		{
			return 'G';
		}
		else if(blue>green && blue>red)
     f02:	40 91 61 02 	lds	r20, 0x0261
     f06:	50 91 62 02 	lds	r21, 0x0262
     f0a:	60 91 63 02 	lds	r22, 0x0263
     f0e:	70 91 64 02 	lds	r23, 0x0264
     f12:	80 91 84 02 	lds	r24, 0x0284
     f16:	90 91 85 02 	lds	r25, 0x0285
     f1a:	a0 91 86 02 	lds	r26, 0x0286
     f1e:	b0 91 87 02 	lds	r27, 0x0287
     f22:	84 17       	cp	r24, r20
     f24:	95 07       	cpc	r25, r21
     f26:	a6 07       	cpc	r26, r22
     f28:	b7 07       	cpc	r27, r23
     f2a:	a8 f4       	brcc	.+42     	; 0xf56 <colour_detector+0x170>
     f2c:	40 91 61 02 	lds	r20, 0x0261
     f30:	50 91 62 02 	lds	r21, 0x0262
     f34:	60 91 63 02 	lds	r22, 0x0263
     f38:	70 91 64 02 	lds	r23, 0x0264
     f3c:	80 91 88 02 	lds	r24, 0x0288
     f40:	90 91 89 02 	lds	r25, 0x0289
     f44:	a0 91 8a 02 	lds	r26, 0x028A
     f48:	b0 91 8b 02 	lds	r27, 0x028B
     f4c:	84 17       	cp	r24, r20
     f4e:	95 07       	cpc	r25, r21
     f50:	a6 07       	cpc	r26, r22
     f52:	b7 07       	cpc	r27, r23
     f54:	58 f0       	brcs	.+22     	; 0xf6c <colour_detector+0x186>
     f56:	08 95       	ret
			return 'B';
		}
	}
	else
	{
		return '0';
     f58:	80 e3       	ldi	r24, 0x30	; 48
     f5a:	08 95       	ret
     f5c:	80 e3       	ldi	r24, 0x30	; 48
     f5e:	08 95       	ret
     f60:	80 e3       	ldi	r24, 0x30	; 48
     f62:	08 95       	ret
	
	if(red>450 && green>450 && blue>450)
	{
		if(red>green && red>blue)
		{
			return 'R';
     f64:	82 e5       	ldi	r24, 0x52	; 82
     f66:	08 95       	ret
		}
		else if(green>red && green>blue)
		{
			return 'G';
     f68:	87 e4       	ldi	r24, 0x47	; 71
     f6a:	08 95       	ret
		}
		else if(blue>green && blue>red)
		{
			return 'B';
     f6c:	82 e4       	ldi	r24, 0x42	; 66
	}
	else
	{
		return '0';
	}
}
     f6e:	08 95       	ret

00000f70 <object_detector>:

//function to detect the type of object
void object_detector()  
{
	if(flag_left_object==1)                     //when object is present only in left
     f70:	80 91 51 02 	lds	r24, 0x0251
     f74:	81 30       	cpi	r24, 0x01	; 1
     f76:	09 f5       	brne	.+66     	; 0xfba <object_detector+0x4a>
	{
		servo_1(20);
     f78:	84 e1       	ldi	r24, 0x14	; 20
     f7a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <servo_1>
     f7e:	8f ef       	ldi	r24, 0xFF	; 255
     f80:	9f ef       	ldi	r25, 0xFF	; 255
     f82:	ac e2       	ldi	r26, 0x2C	; 44
     f84:	81 50       	subi	r24, 0x01	; 1
     f86:	90 40       	sbci	r25, 0x00	; 0
     f88:	a0 40       	sbci	r26, 0x00	; 0
     f8a:	e1 f7       	brne	.-8      	; 0xf84 <object_detector+0x14>
     f8c:	00 c0       	rjmp	.+0      	; 0xf8e <object_detector+0x1e>
     f8e:	00 00       	nop
		_delay_ms(1000);
		left_object_type=colour_detector();                     //scanning left side
     f90:	0e 94 f3 06 	call	0xde6	; 0xde6 <colour_detector>
     f94:	80 93 1e 02 	sts	0x021E, r24
     f98:	10 92 1f 02 	sts	0x021F, r1
		
		servo_1(80);
     f9c:	80 e5       	ldi	r24, 0x50	; 80
     f9e:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <servo_1>
     fa2:	8f ef       	ldi	r24, 0xFF	; 255
     fa4:	9f e7       	ldi	r25, 0x7F	; 127
     fa6:	a6 e1       	ldi	r26, 0x16	; 22
     fa8:	81 50       	subi	r24, 0x01	; 1
     faa:	90 40       	sbci	r25, 0x00	; 0
     fac:	a0 40       	sbci	r26, 0x00	; 0
     fae:	e1 f7       	brne	.-8      	; 0xfa8 <object_detector+0x38>
     fb0:	00 c0       	rjmp	.+0      	; 0xfb2 <object_detector+0x42>
     fb2:	00 00       	nop
		_delay_ms(500);                        //repositioning the servo at default angle
		servo_1_free();
     fb4:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <servo_1_free>
     fb8:	08 95       	ret
	}
	else if(flag_right_object==1)                     //when object is present only in right
     fba:	80 91 50 02 	lds	r24, 0x0250
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	01 f5       	brne	.+64     	; 0x1002 <object_detector+0x92>
	{
		servo_1(190);
     fc2:	8e eb       	ldi	r24, 0xBE	; 190
     fc4:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <servo_1>
     fc8:	8f ef       	ldi	r24, 0xFF	; 255
     fca:	9f ef       	ldi	r25, 0xFF	; 255
     fcc:	a5 e3       	ldi	r26, 0x35	; 53
     fce:	81 50       	subi	r24, 0x01	; 1
     fd0:	90 40       	sbci	r25, 0x00	; 0
     fd2:	a0 40       	sbci	r26, 0x00	; 0
     fd4:	e1 f7       	brne	.-8      	; 0xfce <object_detector+0x5e>
     fd6:	00 c0       	rjmp	.+0      	; 0xfd8 <object_detector+0x68>
     fd8:	00 00       	nop
		_delay_ms(1200);
		right_object_type=colour_detector();                     //scanning right side
     fda:	0e 94 f3 06 	call	0xde6	; 0xde6 <colour_detector>
     fde:	80 93 1c 02 	sts	0x021C, r24
     fe2:	10 92 1d 02 	sts	0x021D, r1
		
		servo_1(80);
     fe6:	80 e5       	ldi	r24, 0x50	; 80
     fe8:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <servo_1>
     fec:	8f ef       	ldi	r24, 0xFF	; 255
     fee:	9f e7       	ldi	r25, 0x7F	; 127
     ff0:	af e1       	ldi	r26, 0x1F	; 31
     ff2:	81 50       	subi	r24, 0x01	; 1
     ff4:	90 40       	sbci	r25, 0x00	; 0
     ff6:	a0 40       	sbci	r26, 0x00	; 0
     ff8:	e1 f7       	brne	.-8      	; 0xff2 <object_detector+0x82>
     ffa:	00 c0       	rjmp	.+0      	; 0xffc <object_detector+0x8c>
     ffc:	00 00       	nop
		_delay_ms(700);                        //repositioning the servo at default angle
		servo_1_free();
     ffe:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <servo_1_free>
    1002:	08 95       	ret

00001004 <check_status>:
}

//to check the status of the I2C communication
void check_status(STAT status)
{
	if(status != OK)
    1004:	88 23       	and	r24, r24
    1006:	d9 f0       	breq	.+54     	; 0x103e <check_status+0x3a>
	{
		lcd_cursor(1,2);
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	62 e0       	ldi	r22, 0x02	; 2
    100c:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_cursor>
    1010:	8f ef       	ldi	r24, 0xFF	; 255
    1012:	9f e3       	ldi	r25, 0x3F	; 63
    1014:	a2 e0       	ldi	r26, 0x02	; 2
    1016:	81 50       	subi	r24, 0x01	; 1
    1018:	90 40       	sbci	r25, 0x00	; 0
    101a:	a0 40       	sbci	r26, 0x00	; 0
    101c:	e1 f7       	brne	.-8      	; 0x1016 <check_status+0x12>
    101e:	00 c0       	rjmp	.+0      	; 0x1020 <check_status+0x1c>
    1020:	00 00       	nop
		_delay_ms(50);
		lcd_string("Status Not OK");
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	92 e0       	ldi	r25, 0x02	; 2
    1026:	0e 94 bd 02 	call	0x57a	; 0x57a <lcd_string>
    102a:	8f ef       	ldi	r24, 0xFF	; 255
    102c:	9f e3       	ldi	r25, 0x3F	; 63
    102e:	a2 e0       	ldi	r26, 0x02	; 2
    1030:	81 50       	subi	r24, 0x01	; 1
    1032:	90 40       	sbci	r25, 0x00	; 0
    1034:	a0 40       	sbci	r26, 0x00	; 0
    1036:	e1 f7       	brne	.-8      	; 0x1030 <check_status+0x2c>
    1038:	00 c0       	rjmp	.+0      	; 0x103a <check_status+0x36>
    103a:	00 00       	nop
    103c:	ff cf       	rjmp	.-2      	; 0x103c <check_status+0x38>
    103e:	08 95       	ret

00001040 <right_turn>:
}
/*************************************************************** Algorithm ********************************************************/

void right_turn()   //to turn 90 degree right
{
	velocity(200,200);
    1040:	88 ec       	ldi	r24, 0xC8	; 200
    1042:	68 ec       	ldi	r22, 0xC8	; 200
    1044:	0e 94 0b 05 	call	0xa16	; 0xa16 <velocity>
	right_degrees(85);
    1048:	85 e5       	ldi	r24, 0x55	; 85
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 73 05 	call	0xae6	; 0xae6 <right_degrees>
	stop_bot();    	
    1050:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    1054:	8f ef       	ldi	r24, 0xFF	; 255
    1056:	9f e7       	ldi	r25, 0x7F	; 127
    1058:	ad e0       	ldi	r26, 0x0D	; 13
    105a:	81 50       	subi	r24, 0x01	; 1
    105c:	90 40       	sbci	r25, 0x00	; 0
    105e:	a0 40       	sbci	r26, 0x00	; 0
    1060:	e1 f7       	brne	.-8      	; 0x105a <right_turn+0x1a>
    1062:	00 c0       	rjmp	.+0      	; 0x1064 <right_turn+0x24>
    1064:	00 00       	nop
	_delay_ms(300);
	velocity(170,170);
    1066:	8a ea       	ldi	r24, 0xAA	; 170
    1068:	6a ea       	ldi	r22, 0xAA	; 170
    106a:	0e 94 0b 05 	call	0xa16	; 0xa16 <velocity>
}
    106e:	08 95       	ret

00001070 <left_turn>:

void left_turn()   //to turn 90 degree left
{
	velocity(200,200);
    1070:	88 ec       	ldi	r24, 0xC8	; 200
    1072:	68 ec       	ldi	r22, 0xC8	; 200
    1074:	0e 94 0b 05 	call	0xa16	; 0xa16 <velocity>
	left_degrees(85);
    1078:	85 e5       	ldi	r24, 0x55	; 85
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	0e 94 68 05 	call	0xad0	; 0xad0 <left_degrees>
	stop_bot();
    1080:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    1084:	8f ef       	ldi	r24, 0xFF	; 255
    1086:	9f e7       	ldi	r25, 0x7F	; 127
    1088:	ad e0       	ldi	r26, 0x0D	; 13
    108a:	81 50       	subi	r24, 0x01	; 1
    108c:	90 40       	sbci	r25, 0x00	; 0
    108e:	a0 40       	sbci	r26, 0x00	; 0
    1090:	e1 f7       	brne	.-8      	; 0x108a <left_turn+0x1a>
    1092:	00 c0       	rjmp	.+0      	; 0x1094 <left_turn+0x24>
    1094:	00 00       	nop
	_delay_ms(300);
	velocity(170,170);
    1096:	8a ea       	ldi	r24, 0xAA	; 170
    1098:	6a ea       	ldi	r22, 0xAA	; 170
    109a:	0e 94 0b 05 	call	0xa16	; 0xa16 <velocity>
}
    109e:	08 95       	ret

000010a0 <move_forward>:

void move_forward()       //to move forward until node is detected.
{
	sensor_refresh();
    10a0:	0e 94 4b 06 	call	0xc96	; 0xc96 <sensor_refresh>
	while(!((L>0x17 && C>0x17 && R>0x17) || (L<0x17 && C>0x17 && R>0x17) || (L>0x17 && C>0x17 && R<0x17) || (IR3 < 0x30)))
    10a4:	49 c0       	rjmp	.+146    	; 0x1138 <move_forward+0x98>
	{
		if((L<0x17 && C>0x17 && R<0x17))        // 010
    10a6:	80 91 4d 02 	lds	r24, 0x024D
    10aa:	87 31       	cpi	r24, 0x17	; 23
    10ac:	88 f4       	brcc	.+34     	; 0x10d0 <move_forward+0x30>
    10ae:	80 91 4c 02 	lds	r24, 0x024C
    10b2:	88 31       	cpi	r24, 0x18	; 24
    10b4:	68 f0       	brcs	.+26     	; 0x10d0 <move_forward+0x30>
    10b6:	80 91 4b 02 	lds	r24, 0x024B
    10ba:	87 31       	cpi	r24, 0x17	; 23
    10bc:	48 f4       	brcc	.+18     	; 0x10d0 <move_forward+0x30>
		{
			forward_mm(5);
    10be:	85 e0       	ldi	r24, 0x05	; 5
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	0e 94 ba 05 	call	0xb74	; 0xb74 <forward_mm>
			velocity(170,170);
    10c6:	8a ea       	ldi	r24, 0xAA	; 170
    10c8:	6a ea       	ldi	r22, 0xAA	; 170
    10ca:	0e 94 0b 05 	call	0xa16	; 0xa16 <velocity>
    10ce:	32 c0       	rjmp	.+100    	; 0x1134 <move_forward+0x94>
		}
		else if((L<0x17 && C<0x17 && R>0x17))   // 001 0r 011
    10d0:	80 91 4d 02 	lds	r24, 0x024D
    10d4:	87 31       	cpi	r24, 0x17	; 23
    10d6:	88 f4       	brcc	.+34     	; 0x10fa <move_forward+0x5a>
    10d8:	80 91 4c 02 	lds	r24, 0x024C
    10dc:	87 31       	cpi	r24, 0x17	; 23
    10de:	68 f4       	brcc	.+26     	; 0x10fa <move_forward+0x5a>
    10e0:	80 91 4b 02 	lds	r24, 0x024B
    10e4:	88 31       	cpi	r24, 0x18	; 24
    10e6:	48 f0       	brcs	.+18     	; 0x10fa <move_forward+0x5a>
		{
			right_degrees(6);  //soft right}
    10e8:	86 e0       	ldi	r24, 0x06	; 6
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	0e 94 73 05 	call	0xae6	; 0xae6 <right_degrees>
			velocity(150,150);
    10f0:	86 e9       	ldi	r24, 0x96	; 150
    10f2:	66 e9       	ldi	r22, 0x96	; 150
    10f4:	0e 94 0b 05 	call	0xa16	; 0xa16 <velocity>
    10f8:	1d c0       	rjmp	.+58     	; 0x1134 <move_forward+0x94>
		}
	
		else if((L>0x17 && C<0x17 && R<0x17))   // 100
    10fa:	80 91 4d 02 	lds	r24, 0x024D
    10fe:	88 31       	cpi	r24, 0x18	; 24
    1100:	88 f0       	brcs	.+34     	; 0x1124 <move_forward+0x84>
    1102:	80 91 4c 02 	lds	r24, 0x024C
    1106:	87 31       	cpi	r24, 0x17	; 23
    1108:	68 f4       	brcc	.+26     	; 0x1124 <move_forward+0x84>
    110a:	80 91 4b 02 	lds	r24, 0x024B
    110e:	87 31       	cpi	r24, 0x17	; 23
    1110:	48 f4       	brcc	.+18     	; 0x1124 <move_forward+0x84>
		{
			left_degrees(6);    //soft left
    1112:	86 e0       	ldi	r24, 0x06	; 6
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 68 05 	call	0xad0	; 0xad0 <left_degrees>
			velocity(150,150);
    111a:	86 e9       	ldi	r24, 0x96	; 150
    111c:	66 e9       	ldi	r22, 0x96	; 150
    111e:	0e 94 0b 05 	call	0xa16	; 0xa16 <velocity>
    1122:	08 c0       	rjmp	.+16     	; 0x1134 <move_forward+0x94>
		}
		else
		{
			forward_mm(10);
    1124:	8a e0       	ldi	r24, 0x0A	; 10
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	0e 94 ba 05 	call	0xb74	; 0xb74 <forward_mm>
			velocity(170,170);
    112c:	8a ea       	ldi	r24, 0xAA	; 170
    112e:	6a ea       	ldi	r22, 0xAA	; 170
    1130:	0e 94 0b 05 	call	0xa16	; 0xa16 <velocity>
		}
		sensor_refresh();
    1134:	0e 94 4b 06 	call	0xc96	; 0xc96 <sensor_refresh>
}

void move_forward()       //to move forward until node is detected.
{
	sensor_refresh();
	while(!((L>0x17 && C>0x17 && R>0x17) || (L<0x17 && C>0x17 && R>0x17) || (L>0x17 && C>0x17 && R<0x17) || (IR3 < 0x30)))
    1138:	80 91 4d 02 	lds	r24, 0x024D
    113c:	88 31       	cpi	r24, 0x18	; 24
    113e:	40 f0       	brcs	.+16     	; 0x1150 <move_forward+0xb0>
    1140:	80 91 4c 02 	lds	r24, 0x024C
    1144:	88 31       	cpi	r24, 0x18	; 24
    1146:	20 f0       	brcs	.+8      	; 0x1150 <move_forward+0xb0>
    1148:	80 91 4b 02 	lds	r24, 0x024B
    114c:	88 31       	cpi	r24, 0x18	; 24
    114e:	e8 f4       	brcc	.+58     	; 0x118a <move_forward+0xea>
    1150:	80 91 4d 02 	lds	r24, 0x024D
    1154:	87 31       	cpi	r24, 0x17	; 23
    1156:	40 f4       	brcc	.+16     	; 0x1168 <move_forward+0xc8>
    1158:	80 91 4c 02 	lds	r24, 0x024C
    115c:	88 31       	cpi	r24, 0x18	; 24
    115e:	20 f0       	brcs	.+8      	; 0x1168 <move_forward+0xc8>
    1160:	80 91 4b 02 	lds	r24, 0x024B
    1164:	88 31       	cpi	r24, 0x18	; 24
    1166:	88 f4       	brcc	.+34     	; 0x118a <move_forward+0xea>
    1168:	80 91 4d 02 	lds	r24, 0x024D
    116c:	88 31       	cpi	r24, 0x18	; 24
    116e:	40 f0       	brcs	.+16     	; 0x1180 <move_forward+0xe0>
    1170:	80 91 4c 02 	lds	r24, 0x024C
    1174:	88 31       	cpi	r24, 0x18	; 24
    1176:	20 f0       	brcs	.+8      	; 0x1180 <move_forward+0xe0>
    1178:	80 91 4b 02 	lds	r24, 0x024B
    117c:	87 31       	cpi	r24, 0x17	; 23
    117e:	28 f0       	brcs	.+10     	; 0x118a <move_forward+0xea>
    1180:	80 91 48 02 	lds	r24, 0x0248
    1184:	80 33       	cpi	r24, 0x30	; 48
    1186:	08 f0       	brcs	.+2      	; 0x118a <move_forward+0xea>
    1188:	8e cf       	rjmp	.-228    	; 0x10a6 <move_forward+0x6>
			forward_mm(10);
			velocity(170,170);
		}
		sensor_refresh();
	}
	if (IR3 < 0x30)
    118a:	80 91 48 02 	lds	r24, 0x0248
    118e:	80 33       	cpi	r24, 0x30	; 48
    1190:	88 f4       	brcc	.+34     	; 0x11b4 <move_forward+0x114>
	{
		stop_bot();
    1192:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    1196:	8f ef       	ldi	r24, 0xFF	; 255
    1198:	9f e7       	ldi	r25, 0x7F	; 127
    119a:	ad e0       	ldi	r26, 0x0D	; 13
    119c:	81 50       	subi	r24, 0x01	; 1
    119e:	90 40       	sbci	r25, 0x00	; 0
    11a0:	a0 40       	sbci	r26, 0x00	; 0
    11a2:	e1 f7       	brne	.-8      	; 0x119c <move_forward+0xfc>
    11a4:	00 c0       	rjmp	.+0      	; 0x11a6 <move_forward+0x106>
    11a6:	00 00       	nop
		_delay_ms(300);
		obstacle_found='1';
    11a8:	81 e3       	ldi	r24, 0x31	; 49
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	90 93 1b 02 	sts	0x021B, r25
    11b0:	80 93 1a 02 	sts	0x021A, r24
	}
	buzzer_beep();	
    11b4:	0e 94 be 04 	call	0x97c	; 0x97c <buzzer_beep>
}
    11b8:	08 95       	ret

000011ba <direction_calculator>:

unsigned char direction_calculator()      //to calculate the direction in the path previous to current node
{
	rmnder=node_count % 6;
    11ba:	20 91 5f 02 	lds	r18, 0x025F
    11be:	30 91 60 02 	lds	r19, 0x0260
    11c2:	c9 01       	movw	r24, r18
    11c4:	66 e0       	ldi	r22, 0x06	; 6
    11c6:	70 e0       	ldi	r23, 0x00	; 0
    11c8:	0e 94 19 12 	call	0x2432	; 0x2432 <__udivmodhi4>
    11cc:	48 2f       	mov	r20, r24
    11ce:	59 2f       	mov	r21, r25
    11d0:	80 93 53 02 	sts	0x0253, r24
    11d4:	90 93 54 02 	sts	0x0254, r25
	if (run == 1)
    11d8:	80 91 5d 02 	lds	r24, 0x025D
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	e9 f4       	brne	.+58     	; 0x121a <direction_calculator+0x60>
	{
		if(node_count == 0)
    11e0:	21 15       	cp	r18, r1
    11e2:	31 05       	cpc	r19, r1
    11e4:	c9 f1       	breq	.+114    	; 0x1258 <direction_calculator+0x9e>
		{
			return 'N';
		}
		else if(rmnder == 0)
    11e6:	41 15       	cp	r20, r1
    11e8:	51 05       	cpc	r21, r1
    11ea:	c1 f1       	breq	.+112    	; 0x125c <direction_calculator+0xa2>
		{
			return 'E';
		}
		else if((line_no == 1) || (line_no == 3) || (line_no == 5))
    11ec:	80 91 22 02 	lds	r24, 0x0222
    11f0:	90 91 23 02 	lds	r25, 0x0223
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	91 05       	cpc	r25, r1
    11f8:	99 f1       	breq	.+102    	; 0x1260 <direction_calculator+0xa6>
    11fa:	83 30       	cpi	r24, 0x03	; 3
    11fc:	91 05       	cpc	r25, r1
    11fe:	91 f1       	breq	.+100    	; 0x1264 <direction_calculator+0xaa>
    1200:	85 30       	cpi	r24, 0x05	; 5
    1202:	91 05       	cpc	r25, r1
    1204:	89 f1       	breq	.+98     	; 0x1268 <direction_calculator+0xae>
		{
			return 'N';
		}
		else if((line_no == 2) || (line_no == 4) || (line_no == 6))
    1206:	82 30       	cpi	r24, 0x02	; 2
    1208:	91 05       	cpc	r25, r1
    120a:	81 f1       	breq	.+96     	; 0x126c <direction_calculator+0xb2>
    120c:	84 30       	cpi	r24, 0x04	; 4
    120e:	91 05       	cpc	r25, r1
    1210:	79 f1       	breq	.+94     	; 0x1270 <direction_calculator+0xb6>
    1212:	86 30       	cpi	r24, 0x06	; 6
    1214:	91 05       	cpc	r25, r1
    1216:	f9 f4       	brne	.+62     	; 0x1256 <direction_calculator+0x9c>
    1218:	2d c0       	rjmp	.+90     	; 0x1274 <direction_calculator+0xba>
		{
			return 'S';
		}
	}
	else if(run == 2)
    121a:	82 30       	cpi	r24, 0x02	; 2
    121c:	e1 f4       	brne	.+56     	; 0x1256 <direction_calculator+0x9c>
	{
		if(node_count == 0)
    121e:	21 15       	cp	r18, r1
    1220:	31 05       	cpc	r19, r1
    1222:	51 f1       	breq	.+84     	; 0x1278 <direction_calculator+0xbe>
		{
			return 'W';
		}
		if(rmnder == 0)
    1224:	41 15       	cp	r20, r1
    1226:	51 05       	cpc	r21, r1
    1228:	49 f1       	breq	.+82     	; 0x127c <direction_calculator+0xc2>
		{
			return 'N';
		}
		else if((line_no == 1) || (line_no == 3) || (line_no == 5))
    122a:	80 91 22 02 	lds	r24, 0x0222
    122e:	90 91 23 02 	lds	r25, 0x0223
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	91 05       	cpc	r25, r1
    1236:	21 f1       	breq	.+72     	; 0x1280 <direction_calculator+0xc6>
    1238:	83 30       	cpi	r24, 0x03	; 3
    123a:	91 05       	cpc	r25, r1
    123c:	19 f1       	breq	.+70     	; 0x1284 <direction_calculator+0xca>
    123e:	85 30       	cpi	r24, 0x05	; 5
    1240:	91 05       	cpc	r25, r1
    1242:	11 f1       	breq	.+68     	; 0x1288 <direction_calculator+0xce>
		{
			return 'W';
		}
		else if((line_no == 2) || (line_no == 4) || (line_no == 6))
    1244:	82 30       	cpi	r24, 0x02	; 2
    1246:	91 05       	cpc	r25, r1
    1248:	09 f1       	breq	.+66     	; 0x128c <direction_calculator+0xd2>
    124a:	84 30       	cpi	r24, 0x04	; 4
    124c:	91 05       	cpc	r25, r1
    124e:	01 f1       	breq	.+64     	; 0x1290 <direction_calculator+0xd6>
    1250:	86 30       	cpi	r24, 0x06	; 6
    1252:	91 05       	cpc	r25, r1
    1254:	f9 f0       	breq	.+62     	; 0x1294 <direction_calculator+0xda>
    1256:	08 95       	ret
	rmnder=node_count % 6;
	if (run == 1)
	{
		if(node_count == 0)
		{
			return 'N';
    1258:	8e e4       	ldi	r24, 0x4E	; 78
    125a:	08 95       	ret
		}
		else if(rmnder == 0)
		{
			return 'E';
    125c:	85 e4       	ldi	r24, 0x45	; 69
    125e:	08 95       	ret
		}
		else if((line_no == 1) || (line_no == 3) || (line_no == 5))
		{
			return 'N';
    1260:	8e e4       	ldi	r24, 0x4E	; 78
    1262:	08 95       	ret
    1264:	8e e4       	ldi	r24, 0x4E	; 78
    1266:	08 95       	ret
    1268:	8e e4       	ldi	r24, 0x4E	; 78
    126a:	08 95       	ret
		}
		else if((line_no == 2) || (line_no == 4) || (line_no == 6))
		{
			return 'S';
    126c:	83 e5       	ldi	r24, 0x53	; 83
    126e:	08 95       	ret
    1270:	83 e5       	ldi	r24, 0x53	; 83
    1272:	08 95       	ret
    1274:	83 e5       	ldi	r24, 0x53	; 83
    1276:	08 95       	ret
	}
	else if(run == 2)
	{
		if(node_count == 0)
		{
			return 'W';
    1278:	87 e5       	ldi	r24, 0x57	; 87
    127a:	08 95       	ret
		}
		if(rmnder == 0)
		{
			return 'N';
    127c:	8e e4       	ldi	r24, 0x4E	; 78
    127e:	08 95       	ret
		}
		else if((line_no == 1) || (line_no == 3) || (line_no == 5))
		{
			return 'W';
    1280:	87 e5       	ldi	r24, 0x57	; 87
    1282:	08 95       	ret
    1284:	87 e5       	ldi	r24, 0x57	; 87
    1286:	08 95       	ret
    1288:	87 e5       	ldi	r24, 0x57	; 87
    128a:	08 95       	ret
		}
		else if((line_no == 2) || (line_no == 4) || (line_no == 6))
		{
			return 'E';
    128c:	85 e4       	ldi	r24, 0x45	; 69
    128e:	08 95       	ret
    1290:	85 e4       	ldi	r24, 0x45	; 69
    1292:	08 95       	ret
    1294:	85 e4       	ldi	r24, 0x45	; 69
		}
	}
}
    1296:	08 95       	ret

00001298 <obstacle_update>:

void obstacle_update()        //to update the obstacle count
{
	rmnder=node_count % 6;
    1298:	80 91 5f 02 	lds	r24, 0x025F
    129c:	90 91 60 02 	lds	r25, 0x0260
    12a0:	66 e0       	ldi	r22, 0x06	; 6
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	0e 94 19 12 	call	0x2432	; 0x2432 <__udivmodhi4>
    12a8:	ac 01       	movw	r20, r24
    12aa:	90 93 54 02 	sts	0x0254, r25
    12ae:	80 93 53 02 	sts	0x0253, r24
	if((line_no == 3) || (line_no == 5))
    12b2:	80 91 22 02 	lds	r24, 0x0222
    12b6:	90 91 23 02 	lds	r25, 0x0223
    12ba:	83 30       	cpi	r24, 0x03	; 3
    12bc:	91 05       	cpc	r25, r1
    12be:	19 f0       	breq	.+6      	; 0x12c6 <obstacle_update+0x2e>
    12c0:	85 30       	cpi	r24, 0x05	; 5
    12c2:	91 05       	cpc	r25, r1
    12c4:	c9 f4       	brne	.+50     	; 0x12f8 <obstacle_update+0x60>
	{
		obstacle_array[line_no - 1][rmnder - 1]=1;
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	67 e6       	ldi	r22, 0x67	; 103
    12ca:	72 e0       	ldi	r23, 0x02	; 2
    12cc:	9c 01       	movw	r18, r24
    12ce:	22 0f       	add	r18, r18
    12d0:	33 1f       	adc	r19, r19
    12d2:	22 0f       	add	r18, r18
    12d4:	33 1f       	adc	r19, r19
    12d6:	82 0f       	add	r24, r18
    12d8:	93 1f       	adc	r25, r19
    12da:	fb 01       	movw	r30, r22
    12dc:	e8 0f       	add	r30, r24
    12de:	f9 1f       	adc	r31, r25
    12e0:	e4 0f       	add	r30, r20
    12e2:	f5 1f       	adc	r31, r21
    12e4:	31 97       	sbiw	r30, 0x01	; 1
    12e6:	21 e0       	ldi	r18, 0x01	; 1
    12e8:	20 83       	st	Z, r18
		obstacle_array[line_no - 1][rmnder]=1;
    12ea:	84 0f       	add	r24, r20
    12ec:	95 1f       	adc	r25, r21
    12ee:	68 0f       	add	r22, r24
    12f0:	79 1f       	adc	r23, r25
    12f2:	fb 01       	movw	r30, r22
    12f4:	20 83       	st	Z, r18
    12f6:	08 95       	ret
	}
	else if((line_no == 2) || (line_no == 4))
    12f8:	82 30       	cpi	r24, 0x02	; 2
    12fa:	91 05       	cpc	r25, r1
    12fc:	19 f0       	breq	.+6      	; 0x1304 <obstacle_update+0x6c>
    12fe:	84 30       	cpi	r24, 0x04	; 4
    1300:	91 05       	cpc	r25, r1
    1302:	e1 f4       	brne	.+56     	; 0x133c <obstacle_update+0xa4>
	{
		obstacle_array[line_no - 1][5 - rmnder]=1;
    1304:	9c 01       	movw	r18, r24
    1306:	21 50       	subi	r18, 0x01	; 1
    1308:	30 40       	sbci	r19, 0x00	; 0
    130a:	e5 e0       	ldi	r30, 0x05	; 5
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	e4 1b       	sub	r30, r20
    1310:	f5 0b       	sbc	r31, r21
    1312:	67 e6       	ldi	r22, 0x67	; 103
    1314:	72 e0       	ldi	r23, 0x02	; 2
    1316:	c9 01       	movw	r24, r18
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	82 0f       	add	r24, r18
    1322:	93 1f       	adc	r25, r19
    1324:	e8 0f       	add	r30, r24
    1326:	f9 1f       	adc	r31, r25
    1328:	e6 0f       	add	r30, r22
    132a:	f7 1f       	adc	r31, r23
    132c:	21 e0       	ldi	r18, 0x01	; 1
    132e:	20 83       	st	Z, r18
		obstacle_array[line_no - 1][4 - rmnder]=1;
    1330:	84 1b       	sub	r24, r20
    1332:	95 0b       	sbc	r25, r21
    1334:	68 0f       	add	r22, r24
    1336:	79 1f       	adc	r23, r25
    1338:	fb 01       	movw	r30, r22
    133a:	24 83       	std	Z+4, r18	; 0x04
    133c:	08 95       	ret

0000133e <obstacle_check>:
	}
}

unsigned char obstacle_check()
{
	rmnder=node_count % 6;
    133e:	80 91 5f 02 	lds	r24, 0x025F
    1342:	90 91 60 02 	lds	r25, 0x0260
    1346:	66 e0       	ldi	r22, 0x06	; 6
    1348:	70 e0       	ldi	r23, 0x00	; 0
    134a:	0e 94 19 12 	call	0x2432	; 0x2432 <__udivmodhi4>
    134e:	90 93 54 02 	sts	0x0254, r25
    1352:	80 93 53 02 	sts	0x0253, r24
	if((line_no == 3) || (line_no == 5))
    1356:	20 91 22 02 	lds	r18, 0x0222
    135a:	30 91 23 02 	lds	r19, 0x0223
    135e:	23 30       	cpi	r18, 0x03	; 3
    1360:	31 05       	cpc	r19, r1
    1362:	19 f0       	breq	.+6      	; 0x136a <obstacle_check+0x2c>
    1364:	25 30       	cpi	r18, 0x05	; 5
    1366:	31 05       	cpc	r19, r1
    1368:	a1 f4       	brne	.+40     	; 0x1392 <obstacle_check+0x54>
	{
		if(obstacle_array[line_no - 2][rmnder - 1] == 1)
    136a:	22 50       	subi	r18, 0x02	; 2
    136c:	30 40       	sbci	r19, 0x00	; 0
    136e:	f9 01       	movw	r30, r18
    1370:	ee 0f       	add	r30, r30
    1372:	ff 1f       	adc	r31, r31
    1374:	ee 0f       	add	r30, r30
    1376:	ff 1f       	adc	r31, r31
    1378:	2e 0f       	add	r18, r30
    137a:	3f 1f       	adc	r19, r31
    137c:	82 0f       	add	r24, r18
    137e:	93 1f       	adc	r25, r19
    1380:	fc 01       	movw	r30, r24
    1382:	ea 59       	subi	r30, 0x9A	; 154
    1384:	fd 4f       	sbci	r31, 0xFD	; 253
		{
			return 1;
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 81       	ld	r25, Z
    138a:	91 30       	cpi	r25, 0x01	; 1
    138c:	19 f1       	breq	.+70     	; 0x13d4 <obstacle_check+0x96>
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	08 95       	ret
		else
		{
			return 0;
		}
	}
	else if((line_no == 2) || (line_no == 4) || (line_no == 6))
    1392:	22 30       	cpi	r18, 0x02	; 2
    1394:	31 05       	cpc	r19, r1
    1396:	31 f0       	breq	.+12     	; 0x13a4 <obstacle_check+0x66>
    1398:	24 30       	cpi	r18, 0x04	; 4
    139a:	31 05       	cpc	r19, r1
    139c:	19 f0       	breq	.+6      	; 0x13a4 <obstacle_check+0x66>
    139e:	26 30       	cpi	r18, 0x06	; 6
    13a0:	31 05       	cpc	r19, r1
    13a2:	c1 f4       	brne	.+48     	; 0x13d4 <obstacle_check+0x96>
	{
		if(obstacle_array[line_no - 2][5 - rmnder] == 1)
    13a4:	22 50       	subi	r18, 0x02	; 2
    13a6:	30 40       	sbci	r19, 0x00	; 0
    13a8:	e5 e0       	ldi	r30, 0x05	; 5
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	af 01       	movw	r20, r30
    13ae:	48 1b       	sub	r20, r24
    13b0:	59 0b       	sbc	r21, r25
    13b2:	f9 01       	movw	r30, r18
    13b4:	ee 0f       	add	r30, r30
    13b6:	ff 1f       	adc	r31, r31
    13b8:	ee 0f       	add	r30, r30
    13ba:	ff 1f       	adc	r31, r31
    13bc:	e2 0f       	add	r30, r18
    13be:	f3 1f       	adc	r31, r19
    13c0:	e4 0f       	add	r30, r20
    13c2:	f5 1f       	adc	r31, r21
    13c4:	e9 59       	subi	r30, 0x99	; 153
    13c6:	fd 4f       	sbci	r31, 0xFD	; 253
	rmnder=node_count % 6;
	if((line_no == 3) || (line_no == 5))
	{
		if(obstacle_array[line_no - 2][rmnder - 1] == 1)
		{
			return 1;
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 81       	ld	r25, Z
    13cc:	91 30       	cpi	r25, 0x01	; 1
    13ce:	11 f0       	breq	.+4      	; 0x13d4 <obstacle_check+0x96>
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	08 95       	ret
		else
		{
			return 0;
		}
	}
}
    13d4:	08 95       	ret

000013d6 <send_to_pc>:
/************************************************************ Send to PC ************************************************************/

//function to send the data to pc using UART0
void send_to_pc()
{
	stop_bot();
    13d6:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
	UDR0=path_direction;
    13da:	80 91 21 02 	lds	r24, 0x0221
    13de:	e6 ec       	ldi	r30, 0xC6	; 198
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 83       	st	Z, r24
    13e4:	8f ef       	ldi	r24, 0xFF	; 255
    13e6:	9f e7       	ldi	r25, 0x7F	; 127
    13e8:	a4 e0       	ldi	r26, 0x04	; 4
    13ea:	81 50       	subi	r24, 0x01	; 1
    13ec:	90 40       	sbci	r25, 0x00	; 0
    13ee:	a0 40       	sbci	r26, 0x00	; 0
    13f0:	e1 f7       	brne	.-8      	; 0x13ea <send_to_pc+0x14>
    13f2:	00 c0       	rjmp	.+0      	; 0x13f4 <send_to_pc+0x1e>
    13f4:	00 00       	nop
	_delay_ms(100);
	UDR0=obstacle_found;
    13f6:	80 91 1a 02 	lds	r24, 0x021A
    13fa:	90 91 1b 02 	lds	r25, 0x021B
    13fe:	80 83       	st	Z, r24
    1400:	8f ef       	ldi	r24, 0xFF	; 255
    1402:	9f e7       	ldi	r25, 0x7F	; 127
    1404:	a4 e0       	ldi	r26, 0x04	; 4
    1406:	81 50       	subi	r24, 0x01	; 1
    1408:	90 40       	sbci	r25, 0x00	; 0
    140a:	a0 40       	sbci	r26, 0x00	; 0
    140c:	e1 f7       	brne	.-8      	; 0x1406 <send_to_pc+0x30>
    140e:	00 c0       	rjmp	.+0      	; 0x1410 <send_to_pc+0x3a>
    1410:	00 00       	nop
	_delay_ms(100);
	UDR0=left_object_type;
    1412:	80 91 1e 02 	lds	r24, 0x021E
    1416:	80 83       	st	Z, r24
    1418:	8f ef       	ldi	r24, 0xFF	; 255
    141a:	9f e7       	ldi	r25, 0x7F	; 127
    141c:	a4 e0       	ldi	r26, 0x04	; 4
    141e:	81 50       	subi	r24, 0x01	; 1
    1420:	90 40       	sbci	r25, 0x00	; 0
    1422:	a0 40       	sbci	r26, 0x00	; 0
    1424:	e1 f7       	brne	.-8      	; 0x141e <send_to_pc+0x48>
    1426:	00 c0       	rjmp	.+0      	; 0x1428 <send_to_pc+0x52>
    1428:	00 00       	nop
	_delay_ms(100);
	UDR0=right_object_type;
    142a:	80 91 1c 02 	lds	r24, 0x021C
    142e:	80 83       	st	Z, r24
    1430:	8f ef       	ldi	r24, 0xFF	; 255
    1432:	9f e7       	ldi	r25, 0x7F	; 127
    1434:	a4 e0       	ldi	r26, 0x04	; 4
    1436:	81 50       	subi	r24, 0x01	; 1
    1438:	90 40       	sbci	r25, 0x00	; 0
    143a:	a0 40       	sbci	r26, 0x00	; 0
    143c:	e1 f7       	brne	.-8      	; 0x1436 <send_to_pc+0x60>
    143e:	00 c0       	rjmp	.+0      	; 0x1440 <send_to_pc+0x6a>
    1440:	00 00       	nop
	_delay_ms(100);
	UDR0=shape_type;
    1442:	80 91 20 02 	lds	r24, 0x0220
    1446:	80 83       	st	Z, r24
    1448:	8f ef       	ldi	r24, 0xFF	; 255
    144a:	9f e7       	ldi	r25, 0x7F	; 127
    144c:	a4 e0       	ldi	r26, 0x04	; 4
    144e:	81 50       	subi	r24, 0x01	; 1
    1450:	90 40       	sbci	r25, 0x00	; 0
    1452:	a0 40       	sbci	r26, 0x00	; 0
    1454:	e1 f7       	brne	.-8      	; 0x144e <send_to_pc+0x78>
    1456:	00 c0       	rjmp	.+0      	; 0x1458 <send_to_pc+0x82>
    1458:	00 00       	nop
	_delay_ms(100);
	UDR0=' ';
    145a:	80 e2       	ldi	r24, 0x20	; 32
    145c:	80 83       	st	Z, r24
	UDR0=' ';
    145e:	80 83       	st	Z, r24
	if(flag_Shape == 1)
    1460:	80 91 5c 02 	lds	r24, 0x025C
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	51 f4       	brne	.+20     	; 0x147c <send_to_pc+0xa6>
    1468:	8f ef       	ldi	r24, 0xFF	; 255
    146a:	9f ef       	ldi	r25, 0xFF	; 255
    146c:	ac e2       	ldi	r26, 0x2C	; 44
    146e:	81 50       	subi	r24, 0x01	; 1
    1470:	90 40       	sbci	r25, 0x00	; 0
    1472:	a0 40       	sbci	r26, 0x00	; 0
    1474:	e1 f7       	brne	.-8      	; 0x146e <send_to_pc+0x98>
    1476:	00 c0       	rjmp	.+0      	; 0x1478 <send_to_pc+0xa2>
    1478:	00 00       	nop
    147a:	08 95       	ret
    147c:	8f ef       	ldi	r24, 0xFF	; 255
    147e:	9f e7       	ldi	r25, 0x7F	; 127
    1480:	a6 e1       	ldi	r26, 0x16	; 22
    1482:	81 50       	subi	r24, 0x01	; 1
    1484:	90 40       	sbci	r25, 0x00	; 0
    1486:	a0 40       	sbci	r26, 0x00	; 0
    1488:	e1 f7       	brne	.-8      	; 0x1482 <send_to_pc+0xac>
    148a:	00 c0       	rjmp	.+0      	; 0x148c <send_to_pc+0xb6>
    148c:	00 00       	nop
    148e:	08 95       	ret

00001490 <node_detector>:


//this function will be used, when node is detected
void node_detector()
{
	buzzer_beep();
    1490:	0e 94 be 04 	call	0x97c	; 0x97c <buzzer_beep>
	path_direction = direction_calculator();
    1494:	0e 94 dd 08 	call	0x11ba	; 0x11ba <direction_calculator>
    1498:	80 93 21 02 	sts	0x0221, r24
	node_count++;
    149c:	80 91 5f 02 	lds	r24, 0x025F
    14a0:	90 91 60 02 	lds	r25, 0x0260
    14a4:	01 96       	adiw	r24, 0x01	; 1
    14a6:	90 93 60 02 	sts	0x0260, r25
    14aa:	80 93 5f 02 	sts	0x025F, r24
	
	if (node_count > 1)
    14ae:	82 30       	cpi	r24, 0x02	; 2
    14b0:	91 05       	cpc	r25, r1
    14b2:	10 f0       	brcs	.+4      	; 0x14b8 <node_detector+0x28>
	{
		send_to_pc();
    14b4:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <send_to_pc>
	}
	
	flag_left_object=0;
    14b8:	10 92 51 02 	sts	0x0251, r1
	flag_right_object=0;
    14bc:	10 92 50 02 	sts	0x0250, r1
	left_object_type='0';
    14c0:	80 e3       	ldi	r24, 0x30	; 48
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	90 93 1f 02 	sts	0x021F, r25
    14c8:	80 93 1e 02 	sts	0x021E, r24
	right_object_type='0';
    14cc:	90 93 1d 02 	sts	0x021D, r25
    14d0:	80 93 1c 02 	sts	0x021C, r24
	obstacle_found='0';
    14d4:	90 93 1b 02 	sts	0x021B, r25
    14d8:	80 93 1a 02 	sts	0x021A, r24
	pathL=0;
    14dc:	10 92 4f 02 	sts	0x024F, r1
	pathR=0;
    14e0:	10 92 4e 02 	sts	0x024E, r1
	flag_S1_count=0;
    14e4:	10 92 5a 02 	sts	0x025A, r1
	flag_S1=0;
    14e8:	10 92 5b 02 	sts	0x025B, r1
	flag_Shape=0;
    14ec:	10 92 5c 02 	sts	0x025C, r1
	shape_type='0';
    14f0:	80 e3       	ldi	r24, 0x30	; 48
    14f2:	80 93 20 02 	sts	0x0220, r24
	
	if((node_count == 36) && (run == 1))   //end of run=1,run=2 starts 
    14f6:	80 91 5f 02 	lds	r24, 0x025F
    14fa:	90 91 60 02 	lds	r25, 0x0260
    14fe:	84 32       	cpi	r24, 0x24	; 36
    1500:	91 05       	cpc	r25, r1
    1502:	09 f0       	breq	.+2      	; 0x1506 <node_detector+0x76>
    1504:	64 c0       	rjmp	.+200    	; 0x15ce <node_detector+0x13e>
    1506:	20 91 5d 02 	lds	r18, 0x025D
    150a:	21 30       	cpi	r18, 0x01	; 1
    150c:	09 f0       	breq	.+2      	; 0x1510 <node_detector+0x80>
    150e:	53 c0       	rjmp	.+166    	; 0x15b6 <node_detector+0x126>
	{
		//stop_bot();
		//_delay_ms(1000);
		forward_mm(53);
    1510:	85 e3       	ldi	r24, 0x35	; 53
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	0e 94 ba 05 	call	0xb74	; 0xb74 <forward_mm>
		stop_bot();
    1518:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    151c:	8f ef       	ldi	r24, 0xFF	; 255
    151e:	9f e7       	ldi	r25, 0x7F	; 127
    1520:	ad e0       	ldi	r26, 0x0D	; 13
    1522:	81 50       	subi	r24, 0x01	; 1
    1524:	90 40       	sbci	r25, 0x00	; 0
    1526:	a0 40       	sbci	r26, 0x00	; 0
    1528:	e1 f7       	brne	.-8      	; 0x1522 <node_detector+0x92>
    152a:	00 c0       	rjmp	.+0      	; 0x152c <node_detector+0x9c>
    152c:	00 00       	nop
		_delay_ms(300);
		right_turn();
    152e:	0e 94 20 08 	call	0x1040	; 0x1040 <right_turn>
		buzzer_beep();
    1532:	0e 94 be 04 	call	0x97c	; 0x97c <buzzer_beep>
		run=2;
    1536:	82 e0       	ldi	r24, 0x02	; 2
    1538:	80 93 5d 02 	sts	0x025D, r24
		node_count=1;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	90 93 60 02 	sts	0x0260, r25
    1544:	80 93 5f 02 	sts	0x025F, r24
		line_no=1;
    1548:	90 93 23 02 	sts	0x0223, r25
    154c:	80 93 22 02 	sts	0x0222, r24
		for (int i=0; i < 5; i++)
		{
			for(int j=0; j < 5; j++)
			{
				obstacle_array[i][j]=0;
    1550:	10 92 67 02 	sts	0x0267, r1
    1554:	10 92 68 02 	sts	0x0268, r1
    1558:	10 92 69 02 	sts	0x0269, r1
    155c:	10 92 6a 02 	sts	0x026A, r1
    1560:	10 92 6b 02 	sts	0x026B, r1
    1564:	10 92 6c 02 	sts	0x026C, r1
    1568:	10 92 6d 02 	sts	0x026D, r1
    156c:	10 92 6e 02 	sts	0x026E, r1
    1570:	10 92 6f 02 	sts	0x026F, r1
    1574:	10 92 70 02 	sts	0x0270, r1
    1578:	10 92 71 02 	sts	0x0271, r1
    157c:	10 92 72 02 	sts	0x0272, r1
    1580:	10 92 73 02 	sts	0x0273, r1
    1584:	10 92 74 02 	sts	0x0274, r1
    1588:	10 92 75 02 	sts	0x0275, r1
    158c:	10 92 76 02 	sts	0x0276, r1
    1590:	10 92 77 02 	sts	0x0277, r1
    1594:	10 92 78 02 	sts	0x0278, r1
    1598:	10 92 79 02 	sts	0x0279, r1
    159c:	10 92 7a 02 	sts	0x027A, r1
    15a0:	10 92 7b 02 	sts	0x027B, r1
    15a4:	10 92 7c 02 	sts	0x027C, r1
    15a8:	10 92 7d 02 	sts	0x027D, r1
    15ac:	10 92 7e 02 	sts	0x027E, r1
    15b0:	10 92 7f 02 	sts	0x027F, r1
    15b4:	0c c0       	rjmp	.+24     	; 0x15ce <node_detector+0x13e>
			}
		}
    }
	else if((node_count == 36) && (run == 2))  //finished scanning the arena, turn on buzzer and stop permanently
    15b6:	22 30       	cpi	r18, 0x02	; 2
    15b8:	09 f0       	breq	.+2      	; 0x15bc <node_detector+0x12c>
    15ba:	81 c0       	rjmp	.+258    	; 0x16be <node_detector+0x22e>
	{
		velocity(0,0);
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	60 e0       	ldi	r22, 0x00	; 0
    15c0:	0e 94 0b 05 	call	0xa16	; 0xa16 <velocity>
		stop_bot();
    15c4:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
		while(1)
		{
			buzzer_beep_long();
    15c8:	0e 94 ca 04 	call	0x994	; 0x994 <buzzer_beep_long>
    15cc:	fd cf       	rjmp	.-6      	; 0x15c8 <node_detector+0x138>
		}
		
	}
	
	quotient = node_count / 6;
    15ce:	80 91 5f 02 	lds	r24, 0x025F
    15d2:	90 91 60 02 	lds	r25, 0x0260
    15d6:	66 e0       	ldi	r22, 0x06	; 6
    15d8:	70 e0       	ldi	r23, 0x00	; 0
    15da:	0e 94 19 12 	call	0x2432	; 0x2432 <__udivmodhi4>
    15de:	26 2f       	mov	r18, r22
    15e0:	37 2f       	mov	r19, r23
    15e2:	60 93 55 02 	sts	0x0255, r22
    15e6:	70 93 56 02 	sts	0x0256, r23
	rmnder = node_count % 6;
    15ea:	48 2f       	mov	r20, r24
    15ec:	59 2f       	mov	r21, r25
    15ee:	80 93 53 02 	sts	0x0253, r24
    15f2:	90 93 54 02 	sts	0x0254, r25
	
	if(quotient == 1 || quotient == 3 || quotient == 5)   //at end of north and begining of south direction
    15f6:	21 30       	cpi	r18, 0x01	; 1
    15f8:	31 05       	cpc	r19, r1
    15fa:	31 f0       	breq	.+12     	; 0x1608 <node_detector+0x178>
    15fc:	23 30       	cpi	r18, 0x03	; 3
    15fe:	31 05       	cpc	r19, r1
    1600:	19 f0       	breq	.+6      	; 0x1608 <node_detector+0x178>
    1602:	25 30       	cpi	r18, 0x05	; 5
    1604:	31 05       	cpc	r19, r1
    1606:	59 f5       	brne	.+86     	; 0x165e <node_detector+0x1ce>
	{
		if((rmnder == 0) || (rmnder == 1))
    1608:	42 30       	cpi	r20, 0x02	; 2
    160a:	51 05       	cpc	r21, r1
    160c:	b0 f4       	brcc	.+44     	; 0x163a <node_detector+0x1aa>
		{
			forward_mm(53);
    160e:	85 e3       	ldi	r24, 0x35	; 53
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	0e 94 ba 05 	call	0xb74	; 0xb74 <forward_mm>
			stop_bot();
    1616:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    161a:	8f ef       	ldi	r24, 0xFF	; 255
    161c:	9f e7       	ldi	r25, 0x7F	; 127
    161e:	ad e0       	ldi	r26, 0x0D	; 13
    1620:	81 50       	subi	r24, 0x01	; 1
    1622:	90 40       	sbci	r25, 0x00	; 0
    1624:	a0 40       	sbci	r26, 0x00	; 0
    1626:	e1 f7       	brne	.-8      	; 0x1620 <node_detector+0x190>
    1628:	00 c0       	rjmp	.+0      	; 0x162a <node_detector+0x19a>
    162a:	00 00       	nop
			_delay_ms(300);
			right_turn();
    162c:	0e 94 20 08 	call	0x1040	; 0x1040 <right_turn>
			pathL=15;
    1630:	8f e0       	ldi	r24, 0x0F	; 15
    1632:	80 93 4f 02 	sts	0x024F, r24
			pathR=15;
    1636:	80 93 4e 02 	sts	0x024E, r24
		}
		if(rmnder == 1)
    163a:	80 91 53 02 	lds	r24, 0x0253
    163e:	90 91 54 02 	lds	r25, 0x0254
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	91 05       	cpc	r25, r1
    1646:	09 f0       	breq	.+2      	; 0x164a <node_detector+0x1ba>
    1648:	4b c0       	rjmp	.+150    	; 0x16e0 <node_detector+0x250>
		{
			line_no++;
    164a:	80 91 22 02 	lds	r24, 0x0222
    164e:	90 91 23 02 	lds	r25, 0x0223
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	90 93 23 02 	sts	0x0223, r25
    1658:	80 93 22 02 	sts	0x0222, r24
    165c:	08 95       	ret
		}
	}
	
	else if(quotient == 2 || quotient == 4)          //at end of south and begining of north direction
    165e:	22 30       	cpi	r18, 0x02	; 2
    1660:	31 05       	cpc	r19, r1
    1662:	19 f0       	breq	.+6      	; 0x166a <node_detector+0x1da>
    1664:	24 30       	cpi	r18, 0x04	; 4
    1666:	31 05       	cpc	r19, r1
    1668:	d9 f5       	brne	.+118    	; 0x16e0 <node_detector+0x250>
	{
		if((rmnder == 0) || (rmnder == 1))
    166a:	42 30       	cpi	r20, 0x02	; 2
    166c:	51 05       	cpc	r21, r1
    166e:	b0 f4       	brcc	.+44     	; 0x169c <node_detector+0x20c>
		{
		    forward_mm(53);
    1670:	85 e3       	ldi	r24, 0x35	; 53
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 ba 05 	call	0xb74	; 0xb74 <forward_mm>
			stop_bot();
    1678:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    167c:	8f ef       	ldi	r24, 0xFF	; 255
    167e:	9f e7       	ldi	r25, 0x7F	; 127
    1680:	ad e0       	ldi	r26, 0x0D	; 13
    1682:	81 50       	subi	r24, 0x01	; 1
    1684:	90 40       	sbci	r25, 0x00	; 0
    1686:	a0 40       	sbci	r26, 0x00	; 0
    1688:	e1 f7       	brne	.-8      	; 0x1682 <node_detector+0x1f2>
    168a:	00 c0       	rjmp	.+0      	; 0x168c <node_detector+0x1fc>
    168c:	00 00       	nop
			_delay_ms(300);
			left_turn();
    168e:	0e 94 38 08 	call	0x1070	; 0x1070 <left_turn>
			pathL=15;
    1692:	8f e0       	ldi	r24, 0x0F	; 15
    1694:	80 93 4f 02 	sts	0x024F, r24
			pathR=15;
    1698:	80 93 4e 02 	sts	0x024E, r24
			
		}
		if(rmnder == 1)
    169c:	80 91 53 02 	lds	r24, 0x0253
    16a0:	90 91 54 02 	lds	r25, 0x0254
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	91 05       	cpc	r25, r1
    16a8:	d9 f4       	brne	.+54     	; 0x16e0 <node_detector+0x250>
		{
			line_no++;
    16aa:	80 91 22 02 	lds	r24, 0x0222
    16ae:	90 91 23 02 	lds	r25, 0x0223
    16b2:	01 96       	adiw	r24, 0x01	; 1
    16b4:	90 93 23 02 	sts	0x0223, r25
    16b8:	80 93 22 02 	sts	0x0222, r24
    16bc:	08 95       	ret
			buzzer_beep_long();
		}
		
	}
	
	quotient = node_count / 6;
    16be:	66 e0       	ldi	r22, 0x06	; 6
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	0e 94 19 12 	call	0x2432	; 0x2432 <__udivmodhi4>
    16c6:	26 2f       	mov	r18, r22
    16c8:	37 2f       	mov	r19, r23
    16ca:	60 93 55 02 	sts	0x0255, r22
    16ce:	70 93 56 02 	sts	0x0256, r23
	rmnder = node_count % 6;
    16d2:	48 2f       	mov	r20, r24
    16d4:	59 2f       	mov	r21, r25
    16d6:	80 93 53 02 	sts	0x0253, r24
    16da:	90 93 54 02 	sts	0x0254, r25
    16de:	8e cf       	rjmp	.-228    	; 0x15fc <node_detector+0x16c>
    16e0:	08 95       	ret

000016e2 <tunnel_traveller>:
	}
}

void tunnel_traveller()             //this function is used to navigate through, when tunnel is detected.
{
	sensor_refresh();
    16e2:	0e 94 4b 06 	call	0xc96	; 0xc96 <sensor_refresh>
	while((L < 0x17) && (C < 0x17) && (R < 0x17))
    16e6:	80 91 4d 02 	lds	r24, 0x024D
    16ea:	87 31       	cpi	r24, 0x17	; 23
    16ec:	08 f0       	brcs	.+2      	; 0x16f0 <tunnel_traveller+0xe>
    16ee:	47 c0       	rjmp	.+142    	; 0x177e <tunnel_traveller+0x9c>
    16f0:	80 91 4c 02 	lds	r24, 0x024C
    16f4:	87 31       	cpi	r24, 0x17	; 23
    16f6:	08 f0       	brcs	.+2      	; 0x16fa <tunnel_traveller+0x18>
    16f8:	42 c0       	rjmp	.+132    	; 0x177e <tunnel_traveller+0x9c>
    16fa:	80 91 4b 02 	lds	r24, 0x024B
    16fe:	87 31       	cpi	r24, 0x17	; 23
    1700:	f0 f5       	brcc	.+124    	; 0x177e <tunnel_traveller+0x9c>
	{
		if(IR1>30 && IR5>30)
    1702:	80 91 4a 02 	lds	r24, 0x024A
    1706:	8f 31       	cpi	r24, 0x1F	; 31
    1708:	60 f0       	brcs	.+24     	; 0x1722 <tunnel_traveller+0x40>
    170a:	80 91 46 02 	lds	r24, 0x0246
    170e:	8f 31       	cpi	r24, 0x1F	; 31
    1710:	40 f0       	brcs	.+16     	; 0x1722 <tunnel_traveller+0x40>
		{
			velocity(140,140);
    1712:	8c e8       	ldi	r24, 0x8C	; 140
    1714:	6c e8       	ldi	r22, 0x8C	; 140
    1716:	0e 94 0b 05 	call	0xa16	; 0xa16 <velocity>
			forward_mm(6);
    171a:	86 e0       	ldi	r24, 0x06	; 6
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	0e 94 ba 05 	call	0xb74	; 0xb74 <forward_mm>
		}
		if(IR1<30)
    1722:	80 91 4a 02 	lds	r24, 0x024A
    1726:	8e 31       	cpi	r24, 0x1E	; 30
    1728:	60 f4       	brcc	.+24     	; 0x1742 <tunnel_traveller+0x60>
		{
			right_degrees(6);  //soft right
    172a:	86 e0       	ldi	r24, 0x06	; 6
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 94 73 05 	call	0xae6	; 0xae6 <right_degrees>
			velocity(140,140);
    1732:	8c e8       	ldi	r24, 0x8C	; 140
    1734:	6c e8       	ldi	r22, 0x8C	; 140
    1736:	0e 94 0b 05 	call	0xa16	; 0xa16 <velocity>
			forward_mm(10);
    173a:	8a e0       	ldi	r24, 0x0A	; 10
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	0e 94 ba 05 	call	0xb74	; 0xb74 <forward_mm>
		}
		if(IR5<30)
    1742:	80 91 46 02 	lds	r24, 0x0246
    1746:	8e 31       	cpi	r24, 0x1E	; 30
    1748:	60 f4       	brcc	.+24     	; 0x1762 <tunnel_traveller+0x80>
		{
			left_degrees(6);  //soft left
    174a:	86 e0       	ldi	r24, 0x06	; 6
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	0e 94 68 05 	call	0xad0	; 0xad0 <left_degrees>
			velocity(140,140);
    1752:	8c e8       	ldi	r24, 0x8C	; 140
    1754:	6c e8       	ldi	r22, 0x8C	; 140
    1756:	0e 94 0b 05 	call	0xa16	; 0xa16 <velocity>
			forward_mm(10);
    175a:	8a e0       	ldi	r24, 0x0A	; 10
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	0e 94 ba 05 	call	0xb74	; 0xb74 <forward_mm>
		}
		sensor_refresh();
    1762:	0e 94 4b 06 	call	0xc96	; 0xc96 <sensor_refresh>
}

void tunnel_traveller()             //this function is used to navigate through, when tunnel is detected.
{
	sensor_refresh();
	while((L < 0x17) && (C < 0x17) && (R < 0x17))
    1766:	80 91 4d 02 	lds	r24, 0x024D
    176a:	87 31       	cpi	r24, 0x17	; 23
    176c:	40 f4       	brcc	.+16     	; 0x177e <tunnel_traveller+0x9c>
    176e:	80 91 4c 02 	lds	r24, 0x024C
    1772:	87 31       	cpi	r24, 0x17	; 23
    1774:	20 f4       	brcc	.+8      	; 0x177e <tunnel_traveller+0x9c>
    1776:	80 91 4b 02 	lds	r24, 0x024B
    177a:	87 31       	cpi	r24, 0x17	; 23
    177c:	10 f2       	brcs	.-124    	; 0x1702 <tunnel_traveller+0x20>
			velocity(140,140);
			forward_mm(10);
		}
		sensor_refresh();
	}
	servo_1(70);
    177e:	86 e4       	ldi	r24, 0x46	; 70
    1780:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <servo_1>
    1784:	8f ef       	ldi	r24, 0xFF	; 255
    1786:	9f e7       	ldi	r25, 0x7F	; 127
    1788:	a4 e0       	ldi	r26, 0x04	; 4
    178a:	81 50       	subi	r24, 0x01	; 1
    178c:	90 40       	sbci	r25, 0x00	; 0
    178e:	a0 40       	sbci	r26, 0x00	; 0
    1790:	e1 f7       	brne	.-8      	; 0x178a <tunnel_traveller+0xa8>
    1792:	00 c0       	rjmp	.+0      	; 0x1794 <tunnel_traveller+0xb2>
    1794:	00 00       	nop
	_delay_ms(100);
	servo_1_free();
    1796:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <servo_1_free>
	node_detector();
    179a:	0e 94 48 0a 	call	0x1490	; 0x1490 <node_detector>
}
    179e:	08 95       	ret

000017a0 <alternate_path>:
	node_count++;
}

void alternate_path()  //alternate path chosen by bot when obstacle is detected
{
	velocity(200,200);
    17a0:	88 ec       	ldi	r24, 0xC8	; 200
    17a2:	68 ec       	ldi	r22, 0xC8	; 200
    17a4:	0e 94 0b 05 	call	0xa16	; 0xa16 <velocity>
	
	back_mm(40);
    17a8:	88 e2       	ldi	r24, 0x28	; 40
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	0e 94 c5 05 	call	0xb8a	; 0xb8a <back_mm>
	stop_bot();
    17b0:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    17b4:	8f ef       	ldi	r24, 0xFF	; 255
    17b6:	9f e7       	ldi	r25, 0x7F	; 127
    17b8:	ad e0       	ldi	r26, 0x0D	; 13
    17ba:	81 50       	subi	r24, 0x01	; 1
    17bc:	90 40       	sbci	r25, 0x00	; 0
    17be:	a0 40       	sbci	r26, 0x00	; 0
    17c0:	e1 f7       	brne	.-8      	; 0x17ba <alternate_path+0x1a>
    17c2:	00 c0       	rjmp	.+0      	; 0x17c4 <alternate_path+0x24>
    17c4:	00 00       	nop
	_delay_ms(300);
	
	left_turn();
    17c6:	0e 94 38 08 	call	0x1070	; 0x1070 <left_turn>
	stop_bot();
    17ca:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    17ce:	8f ef       	ldi	r24, 0xFF	; 255
    17d0:	9f e7       	ldi	r25, 0x7F	; 127
    17d2:	ad e0       	ldi	r26, 0x0D	; 13
    17d4:	81 50       	subi	r24, 0x01	; 1
    17d6:	90 40       	sbci	r25, 0x00	; 0
    17d8:	a0 40       	sbci	r26, 0x00	; 0
    17da:	e1 f7       	brne	.-8      	; 0x17d4 <alternate_path+0x34>
    17dc:	00 c0       	rjmp	.+0      	; 0x17de <alternate_path+0x3e>
    17de:	00 00       	nop
	_delay_ms(300);
	
	move_forward();
    17e0:	0e 94 50 08 	call	0x10a0	; 0x10a0 <move_forward>
	stop_bot();
    17e4:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    17e8:	8f ef       	ldi	r24, 0xFF	; 255
    17ea:	9f e7       	ldi	r25, 0x7F	; 127
    17ec:	ad e0       	ldi	r26, 0x0D	; 13
    17ee:	81 50       	subi	r24, 0x01	; 1
    17f0:	90 40       	sbci	r25, 0x00	; 0
    17f2:	a0 40       	sbci	r26, 0x00	; 0
    17f4:	e1 f7       	brne	.-8      	; 0x17ee <alternate_path+0x4e>
    17f6:	00 c0       	rjmp	.+0      	; 0x17f8 <alternate_path+0x58>
    17f8:	00 00       	nop
	_delay_ms(300);
	
	forward_mm(53);
    17fa:	85 e3       	ldi	r24, 0x35	; 53
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	0e 94 ba 05 	call	0xb74	; 0xb74 <forward_mm>
	stop_bot();
    1802:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    1806:	8f ef       	ldi	r24, 0xFF	; 255
    1808:	9f e7       	ldi	r25, 0x7F	; 127
    180a:	ad e0       	ldi	r26, 0x0D	; 13
    180c:	81 50       	subi	r24, 0x01	; 1
    180e:	90 40       	sbci	r25, 0x00	; 0
    1810:	a0 40       	sbci	r26, 0x00	; 0
    1812:	e1 f7       	brne	.-8      	; 0x180c <alternate_path+0x6c>
    1814:	00 c0       	rjmp	.+0      	; 0x1816 <alternate_path+0x76>
    1816:	00 00       	nop
	_delay_ms(300);
	
	right_turn();
    1818:	0e 94 20 08 	call	0x1040	; 0x1040 <right_turn>
	stop_bot();
    181c:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    1820:	8f ef       	ldi	r24, 0xFF	; 255
    1822:	9f e7       	ldi	r25, 0x7F	; 127
    1824:	ad e0       	ldi	r26, 0x0D	; 13
    1826:	81 50       	subi	r24, 0x01	; 1
    1828:	90 40       	sbci	r25, 0x00	; 0
    182a:	a0 40       	sbci	r26, 0x00	; 0
    182c:	e1 f7       	brne	.-8      	; 0x1826 <alternate_path+0x86>
    182e:	00 c0       	rjmp	.+0      	; 0x1830 <alternate_path+0x90>
    1830:	00 00       	nop
	_delay_ms(300);
	
	move_forward();
    1832:	0e 94 50 08 	call	0x10a0	; 0x10a0 <move_forward>
	forward_mm(20);
    1836:	84 e1       	ldi	r24, 0x14	; 20
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	0e 94 ba 05 	call	0xb74	; 0xb74 <forward_mm>
	send_to_pc();
    183e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <send_to_pc>
	
	move_forward();
    1842:	0e 94 50 08 	call	0x10a0	; 0x10a0 <move_forward>
	stop_bot();
    1846:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    184a:	8f ef       	ldi	r24, 0xFF	; 255
    184c:	9f e7       	ldi	r25, 0x7F	; 127
    184e:	ad e0       	ldi	r26, 0x0D	; 13
    1850:	81 50       	subi	r24, 0x01	; 1
    1852:	90 40       	sbci	r25, 0x00	; 0
    1854:	a0 40       	sbci	r26, 0x00	; 0
    1856:	e1 f7       	brne	.-8      	; 0x1850 <alternate_path+0xb0>
    1858:	00 c0       	rjmp	.+0      	; 0x185a <alternate_path+0xba>
    185a:	00 00       	nop
	_delay_ms(300);
	
	forward_mm(53);
    185c:	85 e3       	ldi	r24, 0x35	; 53
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0e 94 ba 05 	call	0xb74	; 0xb74 <forward_mm>
	stop_bot();
    1864:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    1868:	8f ef       	ldi	r24, 0xFF	; 255
    186a:	9f e7       	ldi	r25, 0x7F	; 127
    186c:	ad e0       	ldi	r26, 0x0D	; 13
    186e:	81 50       	subi	r24, 0x01	; 1
    1870:	90 40       	sbci	r25, 0x00	; 0
    1872:	a0 40       	sbci	r26, 0x00	; 0
    1874:	e1 f7       	brne	.-8      	; 0x186e <alternate_path+0xce>
    1876:	00 c0       	rjmp	.+0      	; 0x1878 <alternate_path+0xd8>
    1878:	00 00       	nop
	_delay_ms(300);
	
	right_turn();
    187a:	0e 94 20 08 	call	0x1040	; 0x1040 <right_turn>
	stop_bot();
    187e:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    1882:	8f ef       	ldi	r24, 0xFF	; 255
    1884:	9f e7       	ldi	r25, 0x7F	; 127
    1886:	ad e0       	ldi	r26, 0x0D	; 13
    1888:	81 50       	subi	r24, 0x01	; 1
    188a:	90 40       	sbci	r25, 0x00	; 0
    188c:	a0 40       	sbci	r26, 0x00	; 0
    188e:	e1 f7       	brne	.-8      	; 0x1888 <alternate_path+0xe8>
    1890:	00 c0       	rjmp	.+0      	; 0x1892 <alternate_path+0xf2>
    1892:	00 00       	nop
	_delay_ms(300);
	
	move_forward();
    1894:	0e 94 50 08 	call	0x10a0	; 0x10a0 <move_forward>
	stop_bot();
    1898:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    189c:	8f ef       	ldi	r24, 0xFF	; 255
    189e:	9f e7       	ldi	r25, 0x7F	; 127
    18a0:	ad e0       	ldi	r26, 0x0D	; 13
    18a2:	81 50       	subi	r24, 0x01	; 1
    18a4:	90 40       	sbci	r25, 0x00	; 0
    18a6:	a0 40       	sbci	r26, 0x00	; 0
    18a8:	e1 f7       	brne	.-8      	; 0x18a2 <alternate_path+0x102>
    18aa:	00 c0       	rjmp	.+0      	; 0x18ac <alternate_path+0x10c>
    18ac:	00 00       	nop
	_delay_ms(300);
	
	forward_mm(53);
    18ae:	85 e3       	ldi	r24, 0x35	; 53
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	0e 94 ba 05 	call	0xb74	; 0xb74 <forward_mm>
	stop_bot();
    18b6:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    18ba:	8f ef       	ldi	r24, 0xFF	; 255
    18bc:	9f e7       	ldi	r25, 0x7F	; 127
    18be:	ad e0       	ldi	r26, 0x0D	; 13
    18c0:	81 50       	subi	r24, 0x01	; 1
    18c2:	90 40       	sbci	r25, 0x00	; 0
    18c4:	a0 40       	sbci	r26, 0x00	; 0
    18c6:	e1 f7       	brne	.-8      	; 0x18c0 <alternate_path+0x120>
    18c8:	00 c0       	rjmp	.+0      	; 0x18ca <alternate_path+0x12a>
    18ca:	00 00       	nop
	_delay_ms(300);
	
	right_turn();
    18cc:	0e 94 20 08 	call	0x1040	; 0x1040 <right_turn>
	stop_bot();
    18d0:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    18d4:	8f ef       	ldi	r24, 0xFF	; 255
    18d6:	9f e7       	ldi	r25, 0x7F	; 127
    18d8:	ad e0       	ldi	r26, 0x0D	; 13
    18da:	81 50       	subi	r24, 0x01	; 1
    18dc:	90 40       	sbci	r25, 0x00	; 0
    18de:	a0 40       	sbci	r26, 0x00	; 0
    18e0:	e1 f7       	brne	.-8      	; 0x18da <alternate_path+0x13a>
    18e2:	00 c0       	rjmp	.+0      	; 0x18e4 <alternate_path+0x144>
    18e4:	00 00       	nop
	_delay_ms(300);
	
	move_forward();
    18e6:	0e 94 50 08 	call	0x10a0	; 0x10a0 <move_forward>
	stop_bot();
    18ea:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    18ee:	8f ef       	ldi	r24, 0xFF	; 255
    18f0:	9f e7       	ldi	r25, 0x7F	; 127
    18f2:	ad e0       	ldi	r26, 0x0D	; 13
    18f4:	81 50       	subi	r24, 0x01	; 1
    18f6:	90 40       	sbci	r25, 0x00	; 0
    18f8:	a0 40       	sbci	r26, 0x00	; 0
    18fa:	e1 f7       	brne	.-8      	; 0x18f4 <alternate_path+0x154>
    18fc:	00 c0       	rjmp	.+0      	; 0x18fe <alternate_path+0x15e>
    18fe:	00 00       	nop
	_delay_ms(300);
	
	stop_bot();
    1900:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    1904:	8f ef       	ldi	r24, 0xFF	; 255
    1906:	9f e7       	ldi	r25, 0x7F	; 127
    1908:	ad e0       	ldi	r26, 0x0D	; 13
    190a:	81 50       	subi	r24, 0x01	; 1
    190c:	90 40       	sbci	r25, 0x00	; 0
    190e:	a0 40       	sbci	r26, 0x00	; 0
    1910:	e1 f7       	brne	.-8      	; 0x190a <alternate_path+0x16a>
    1912:	00 c0       	rjmp	.+0      	; 0x1914 <alternate_path+0x174>
    1914:	00 00       	nop
	_delay_ms(300);
	
	left_degrees(180);
    1916:	84 eb       	ldi	r24, 0xB4	; 180
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	0e 94 68 05 	call	0xad0	; 0xad0 <left_degrees>
	stop_bot();
    191e:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    1922:	8f ef       	ldi	r24, 0xFF	; 255
    1924:	9f e7       	ldi	r25, 0x7F	; 127
    1926:	ad e0       	ldi	r26, 0x0D	; 13
    1928:	81 50       	subi	r24, 0x01	; 1
    192a:	90 40       	sbci	r25, 0x00	; 0
    192c:	a0 40       	sbci	r26, 0x00	; 0
    192e:	e1 f7       	brne	.-8      	; 0x1928 <alternate_path+0x188>
    1930:	00 c0       	rjmp	.+0      	; 0x1932 <alternate_path+0x192>
    1932:	00 00       	nop
	_delay_ms(300);
	
	back_mm(50);
    1934:	82 e3       	ldi	r24, 0x32	; 50
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	0e 94 c5 05 	call	0xb8a	; 0xb8a <back_mm>
	stop_bot();
    193c:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    1940:	8f ef       	ldi	r24, 0xFF	; 255
    1942:	9f e7       	ldi	r25, 0x7F	; 127
    1944:	ad e0       	ldi	r26, 0x0D	; 13
    1946:	81 50       	subi	r24, 0x01	; 1
    1948:	90 40       	sbci	r25, 0x00	; 0
    194a:	a0 40       	sbci	r26, 0x00	; 0
    194c:	e1 f7       	brne	.-8      	; 0x1946 <alternate_path+0x1a6>
    194e:	00 c0       	rjmp	.+0      	; 0x1950 <alternate_path+0x1b0>
    1950:	00 00       	nop
	_delay_ms(300);
	
	node_count++;
    1952:	80 91 5f 02 	lds	r24, 0x025F
    1956:	90 91 60 02 	lds	r25, 0x0260
    195a:	01 96       	adiw	r24, 0x01	; 1
    195c:	90 93 60 02 	sts	0x0260, r25
    1960:	80 93 5f 02 	sts	0x025F, r24
}
    1964:	08 95       	ret

00001966 <default_path>:
	}
}

void default_path()  //default path chosen by bot when obstacle is detected
{
	velocity(200,200);
    1966:	88 ec       	ldi	r24, 0xC8	; 200
    1968:	68 ec       	ldi	r22, 0xC8	; 200
    196a:	0e 94 0b 05 	call	0xa16	; 0xa16 <velocity>
	
	back_mm(40);
    196e:	88 e2       	ldi	r24, 0x28	; 40
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	0e 94 c5 05 	call	0xb8a	; 0xb8a <back_mm>
	stop_bot();
    1976:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    197a:	8f ef       	ldi	r24, 0xFF	; 255
    197c:	9f e7       	ldi	r25, 0x7F	; 127
    197e:	ad e0       	ldi	r26, 0x0D	; 13
    1980:	81 50       	subi	r24, 0x01	; 1
    1982:	90 40       	sbci	r25, 0x00	; 0
    1984:	a0 40       	sbci	r26, 0x00	; 0
    1986:	e1 f7       	brne	.-8      	; 0x1980 <default_path+0x1a>
    1988:	00 c0       	rjmp	.+0      	; 0x198a <default_path+0x24>
    198a:	00 00       	nop
	_delay_ms(300);
	
	right_turn();
    198c:	0e 94 20 08 	call	0x1040	; 0x1040 <right_turn>
	stop_bot();
    1990:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    1994:	8f ef       	ldi	r24, 0xFF	; 255
    1996:	9f e7       	ldi	r25, 0x7F	; 127
    1998:	ad e0       	ldi	r26, 0x0D	; 13
    199a:	81 50       	subi	r24, 0x01	; 1
    199c:	90 40       	sbci	r25, 0x00	; 0
    199e:	a0 40       	sbci	r26, 0x00	; 0
    19a0:	e1 f7       	brne	.-8      	; 0x199a <default_path+0x34>
    19a2:	00 c0       	rjmp	.+0      	; 0x19a4 <default_path+0x3e>
    19a4:	00 00       	nop
	_delay_ms(300);
	
	move_forward();
    19a6:	0e 94 50 08 	call	0x10a0	; 0x10a0 <move_forward>
	stop_bot();
    19aa:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    19ae:	8f ef       	ldi	r24, 0xFF	; 255
    19b0:	9f e7       	ldi	r25, 0x7F	; 127
    19b2:	ad e0       	ldi	r26, 0x0D	; 13
    19b4:	81 50       	subi	r24, 0x01	; 1
    19b6:	90 40       	sbci	r25, 0x00	; 0
    19b8:	a0 40       	sbci	r26, 0x00	; 0
    19ba:	e1 f7       	brne	.-8      	; 0x19b4 <default_path+0x4e>
    19bc:	00 c0       	rjmp	.+0      	; 0x19be <default_path+0x58>
    19be:	00 00       	nop
	_delay_ms(300);
	
	forward_mm(53);
    19c0:	85 e3       	ldi	r24, 0x35	; 53
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	0e 94 ba 05 	call	0xb74	; 0xb74 <forward_mm>
	stop_bot();
    19c8:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    19cc:	8f ef       	ldi	r24, 0xFF	; 255
    19ce:	9f e7       	ldi	r25, 0x7F	; 127
    19d0:	ad e0       	ldi	r26, 0x0D	; 13
    19d2:	81 50       	subi	r24, 0x01	; 1
    19d4:	90 40       	sbci	r25, 0x00	; 0
    19d6:	a0 40       	sbci	r26, 0x00	; 0
    19d8:	e1 f7       	brne	.-8      	; 0x19d2 <default_path+0x6c>
    19da:	00 c0       	rjmp	.+0      	; 0x19dc <default_path+0x76>
    19dc:	00 00       	nop
	_delay_ms(300);
	
	left_turn();
    19de:	0e 94 38 08 	call	0x1070	; 0x1070 <left_turn>
	stop_bot();
    19e2:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    19e6:	8f ef       	ldi	r24, 0xFF	; 255
    19e8:	9f e7       	ldi	r25, 0x7F	; 127
    19ea:	ad e0       	ldi	r26, 0x0D	; 13
    19ec:	81 50       	subi	r24, 0x01	; 1
    19ee:	90 40       	sbci	r25, 0x00	; 0
    19f0:	a0 40       	sbci	r26, 0x00	; 0
    19f2:	e1 f7       	brne	.-8      	; 0x19ec <default_path+0x86>
    19f4:	00 c0       	rjmp	.+0      	; 0x19f6 <default_path+0x90>
    19f6:	00 00       	nop
	_delay_ms(300);
	
	move_forward();
    19f8:	0e 94 50 08 	call	0x10a0	; 0x10a0 <move_forward>
	stop_bot();
    19fc:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    1a00:	8f ef       	ldi	r24, 0xFF	; 255
    1a02:	9f e7       	ldi	r25, 0x7F	; 127
    1a04:	ad e0       	ldi	r26, 0x0D	; 13
    1a06:	81 50       	subi	r24, 0x01	; 1
    1a08:	90 40       	sbci	r25, 0x00	; 0
    1a0a:	a0 40       	sbci	r26, 0x00	; 0
    1a0c:	e1 f7       	brne	.-8      	; 0x1a06 <default_path+0xa0>
    1a0e:	00 c0       	rjmp	.+0      	; 0x1a10 <default_path+0xaa>
    1a10:	00 00       	nop
	_delay_ms(300);
	
	forward_mm(20);
    1a12:	84 e1       	ldi	r24, 0x14	; 20
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	0e 94 ba 05 	call	0xb74	; 0xb74 <forward_mm>
	send_to_pc();
    1a1a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <send_to_pc>
	
	move_forward();
    1a1e:	0e 94 50 08 	call	0x10a0	; 0x10a0 <move_forward>
	stop_bot();
    1a22:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    1a26:	8f ef       	ldi	r24, 0xFF	; 255
    1a28:	9f e7       	ldi	r25, 0x7F	; 127
    1a2a:	ad e0       	ldi	r26, 0x0D	; 13
    1a2c:	81 50       	subi	r24, 0x01	; 1
    1a2e:	90 40       	sbci	r25, 0x00	; 0
    1a30:	a0 40       	sbci	r26, 0x00	; 0
    1a32:	e1 f7       	brne	.-8      	; 0x1a2c <default_path+0xc6>
    1a34:	00 c0       	rjmp	.+0      	; 0x1a36 <default_path+0xd0>
    1a36:	00 00       	nop
	_delay_ms(300);
	
	forward_mm(53);
    1a38:	85 e3       	ldi	r24, 0x35	; 53
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	0e 94 ba 05 	call	0xb74	; 0xb74 <forward_mm>
	stop_bot();
    1a40:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    1a44:	8f ef       	ldi	r24, 0xFF	; 255
    1a46:	9f e7       	ldi	r25, 0x7F	; 127
    1a48:	ad e0       	ldi	r26, 0x0D	; 13
    1a4a:	81 50       	subi	r24, 0x01	; 1
    1a4c:	90 40       	sbci	r25, 0x00	; 0
    1a4e:	a0 40       	sbci	r26, 0x00	; 0
    1a50:	e1 f7       	brne	.-8      	; 0x1a4a <default_path+0xe4>
    1a52:	00 c0       	rjmp	.+0      	; 0x1a54 <default_path+0xee>
    1a54:	00 00       	nop
	_delay_ms(300);
	
	left_turn();
    1a56:	0e 94 38 08 	call	0x1070	; 0x1070 <left_turn>
	stop_bot();
    1a5a:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    1a5e:	8f ef       	ldi	r24, 0xFF	; 255
    1a60:	9f e7       	ldi	r25, 0x7F	; 127
    1a62:	ad e0       	ldi	r26, 0x0D	; 13
    1a64:	81 50       	subi	r24, 0x01	; 1
    1a66:	90 40       	sbci	r25, 0x00	; 0
    1a68:	a0 40       	sbci	r26, 0x00	; 0
    1a6a:	e1 f7       	brne	.-8      	; 0x1a64 <default_path+0xfe>
    1a6c:	00 c0       	rjmp	.+0      	; 0x1a6e <default_path+0x108>
    1a6e:	00 00       	nop
	_delay_ms(300);
	
	move_forward();
    1a70:	0e 94 50 08 	call	0x10a0	; 0x10a0 <move_forward>
	stop_bot();
    1a74:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    1a78:	8f ef       	ldi	r24, 0xFF	; 255
    1a7a:	9f e7       	ldi	r25, 0x7F	; 127
    1a7c:	ad e0       	ldi	r26, 0x0D	; 13
    1a7e:	81 50       	subi	r24, 0x01	; 1
    1a80:	90 40       	sbci	r25, 0x00	; 0
    1a82:	a0 40       	sbci	r26, 0x00	; 0
    1a84:	e1 f7       	brne	.-8      	; 0x1a7e <default_path+0x118>
    1a86:	00 c0       	rjmp	.+0      	; 0x1a88 <default_path+0x122>
    1a88:	00 00       	nop
	_delay_ms(300);
	
	forward_mm(53);
    1a8a:	85 e3       	ldi	r24, 0x35	; 53
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	0e 94 ba 05 	call	0xb74	; 0xb74 <forward_mm>
	stop_bot();
    1a92:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    1a96:	8f ef       	ldi	r24, 0xFF	; 255
    1a98:	9f e7       	ldi	r25, 0x7F	; 127
    1a9a:	ad e0       	ldi	r26, 0x0D	; 13
    1a9c:	81 50       	subi	r24, 0x01	; 1
    1a9e:	90 40       	sbci	r25, 0x00	; 0
    1aa0:	a0 40       	sbci	r26, 0x00	; 0
    1aa2:	e1 f7       	brne	.-8      	; 0x1a9c <default_path+0x136>
    1aa4:	00 c0       	rjmp	.+0      	; 0x1aa6 <default_path+0x140>
    1aa6:	00 00       	nop
	_delay_ms(300);
	
	left_turn();
    1aa8:	0e 94 38 08 	call	0x1070	; 0x1070 <left_turn>
	stop_bot();
    1aac:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    1ab0:	8f ef       	ldi	r24, 0xFF	; 255
    1ab2:	9f e7       	ldi	r25, 0x7F	; 127
    1ab4:	ad e0       	ldi	r26, 0x0D	; 13
    1ab6:	81 50       	subi	r24, 0x01	; 1
    1ab8:	90 40       	sbci	r25, 0x00	; 0
    1aba:	a0 40       	sbci	r26, 0x00	; 0
    1abc:	e1 f7       	brne	.-8      	; 0x1ab6 <default_path+0x150>
    1abe:	00 c0       	rjmp	.+0      	; 0x1ac0 <default_path+0x15a>
    1ac0:	00 00       	nop
	_delay_ms(300);
	
	move_forward();
    1ac2:	0e 94 50 08 	call	0x10a0	; 0x10a0 <move_forward>
	stop_bot();
    1ac6:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    1aca:	8f ef       	ldi	r24, 0xFF	; 255
    1acc:	9f e7       	ldi	r25, 0x7F	; 127
    1ace:	ad e0       	ldi	r26, 0x0D	; 13
    1ad0:	81 50       	subi	r24, 0x01	; 1
    1ad2:	90 40       	sbci	r25, 0x00	; 0
    1ad4:	a0 40       	sbci	r26, 0x00	; 0
    1ad6:	e1 f7       	brne	.-8      	; 0x1ad0 <default_path+0x16a>
    1ad8:	00 c0       	rjmp	.+0      	; 0x1ada <default_path+0x174>
    1ada:	00 00       	nop
	_delay_ms(300);
	
	stop_bot();
    1adc:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    1ae0:	8f ef       	ldi	r24, 0xFF	; 255
    1ae2:	9f e7       	ldi	r25, 0x7F	; 127
    1ae4:	ad e0       	ldi	r26, 0x0D	; 13
    1ae6:	81 50       	subi	r24, 0x01	; 1
    1ae8:	90 40       	sbci	r25, 0x00	; 0
    1aea:	a0 40       	sbci	r26, 0x00	; 0
    1aec:	e1 f7       	brne	.-8      	; 0x1ae6 <default_path+0x180>
    1aee:	00 c0       	rjmp	.+0      	; 0x1af0 <default_path+0x18a>
    1af0:	00 00       	nop
	_delay_ms(300);
	
	left_degrees(180);
    1af2:	84 eb       	ldi	r24, 0xB4	; 180
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	0e 94 68 05 	call	0xad0	; 0xad0 <left_degrees>
	stop_bot();
    1afa:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    1afe:	8f ef       	ldi	r24, 0xFF	; 255
    1b00:	9f e7       	ldi	r25, 0x7F	; 127
    1b02:	ad e0       	ldi	r26, 0x0D	; 13
    1b04:	81 50       	subi	r24, 0x01	; 1
    1b06:	90 40       	sbci	r25, 0x00	; 0
    1b08:	a0 40       	sbci	r26, 0x00	; 0
    1b0a:	e1 f7       	brne	.-8      	; 0x1b04 <default_path+0x19e>
    1b0c:	00 c0       	rjmp	.+0      	; 0x1b0e <default_path+0x1a8>
    1b0e:	00 00       	nop
	_delay_ms(300);
	
	back_mm(50);
    1b10:	82 e3       	ldi	r24, 0x32	; 50
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	0e 94 c5 05 	call	0xb8a	; 0xb8a <back_mm>
	stop_bot();
    1b18:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    1b1c:	8f ef       	ldi	r24, 0xFF	; 255
    1b1e:	9f e7       	ldi	r25, 0x7F	; 127
    1b20:	ad e0       	ldi	r26, 0x0D	; 13
    1b22:	81 50       	subi	r24, 0x01	; 1
    1b24:	90 40       	sbci	r25, 0x00	; 0
    1b26:	a0 40       	sbci	r26, 0x00	; 0
    1b28:	e1 f7       	brne	.-8      	; 0x1b22 <default_path+0x1bc>
    1b2a:	00 c0       	rjmp	.+0      	; 0x1b2c <default_path+0x1c6>
    1b2c:	00 00       	nop
	_delay_ms(300);
	
	node_count++;
    1b2e:	80 91 5f 02 	lds	r24, 0x025F
    1b32:	90 91 60 02 	lds	r25, 0x0260
    1b36:	01 96       	adiw	r24, 0x01	; 1
    1b38:	90 93 60 02 	sts	0x0260, r25
    1b3c:	80 93 5f 02 	sts	0x025F, r24
}
    1b40:	08 95       	ret

00001b42 <obstacle_detector>:
}

//this function will be used, when obstacle is detected
void obstacle_detector()
{
	buzzer_beep();
    1b42:	0e 94 be 04 	call	0x97c	; 0x97c <buzzer_beep>
	obstacle_update();
    1b46:	0e 94 4c 09 	call	0x1298	; 0x1298 <obstacle_update>
	obstacle_found='1';
    1b4a:	81 e3       	ldi	r24, 0x31	; 49
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	90 93 1b 02 	sts	0x021B, r25
    1b52:	80 93 1a 02 	sts	0x021A, r24
	path_direction=direction_calculator();
    1b56:	0e 94 dd 08 	call	0x11ba	; 0x11ba <direction_calculator>
    1b5a:	80 93 21 02 	sts	0x0221, r24
	rmnder=node_count % 6;
    1b5e:	80 91 5f 02 	lds	r24, 0x025F
    1b62:	90 91 60 02 	lds	r25, 0x0260
    1b66:	66 e0       	ldi	r22, 0x06	; 6
    1b68:	70 e0       	ldi	r23, 0x00	; 0
    1b6a:	0e 94 19 12 	call	0x2432	; 0x2432 <__udivmodhi4>
    1b6e:	90 93 54 02 	sts	0x0254, r25
    1b72:	80 93 53 02 	sts	0x0253, r24
	priority=obstacle_check();
    1b76:	0e 94 9f 09 	call	0x133e	; 0x133e <obstacle_check>
    1b7a:	80 93 52 02 	sts	0x0252, r24
	if((line_no == 2) || (line_no == 4))    //when obstacle is in even line numbers
    1b7e:	20 91 22 02 	lds	r18, 0x0222
    1b82:	30 91 23 02 	lds	r19, 0x0223
    1b86:	22 30       	cpi	r18, 0x02	; 2
    1b88:	31 05       	cpc	r19, r1
    1b8a:	19 f0       	breq	.+6      	; 0x1b92 <obstacle_detector+0x50>
    1b8c:	24 30       	cpi	r18, 0x04	; 4
    1b8e:	31 05       	cpc	r19, r1
    1b90:	41 f4       	brne	.+16     	; 0x1ba2 <obstacle_detector+0x60>
	{
		if (priority == 1)
    1b92:	81 30       	cpi	r24, 0x01	; 1
    1b94:	19 f4       	brne	.+6      	; 0x1b9c <obstacle_detector+0x5a>
		{
			alternate_path();
    1b96:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <alternate_path>
    1b9a:	08 95       	ret
		}
		else
		{
			default_path();
    1b9c:	0e 94 b3 0c 	call	0x1966	; 0x1966 <default_path>
    1ba0:	08 95       	ret
		}
		
	}
	else if((line_no == 3) || (line_no == 5)) 
    1ba2:	23 30       	cpi	r18, 0x03	; 3
    1ba4:	31 05       	cpc	r19, r1
    1ba6:	19 f0       	breq	.+6      	; 0x1bae <obstacle_detector+0x6c>
    1ba8:	25 30       	cpi	r18, 0x05	; 5
    1baa:	31 05       	cpc	r19, r1
    1bac:	39 f4       	brne	.+14     	; 0x1bbc <obstacle_detector+0x7a>
	{
		if (priority == 1)
    1bae:	81 30       	cpi	r24, 0x01	; 1
    1bb0:	19 f4       	brne	.+6      	; 0x1bb8 <obstacle_detector+0x76>
		{
			default_path();
    1bb2:	0e 94 b3 0c 	call	0x1966	; 0x1966 <default_path>
    1bb6:	08 95       	ret
		}
		else
		{
			alternate_path();
    1bb8:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <alternate_path>
    1bbc:	08 95       	ret

00001bbe <main>:


/*************************************************************** Main Function ************************************************/
int main()
{
	init_devices();
    1bbe:	0e 94 32 04 	call	0x864	; 0x864 <init_devices>
	i2c_init();
    1bc2:	0e 94 95 00 	call	0x12a	; 0x12a <i2c_init>
	lcd_set_4bit();
    1bc6:	0e 94 15 02 	call	0x42a	; 0x42a <lcd_set_4bit>
	lcd_init();
    1bca:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_init>
	color_sensor_scaling();
    1bce:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <color_sensor_scaling>
	
	servo_1(70);
    1bd2:	86 e4       	ldi	r24, 0x46	; 70
    1bd4:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <servo_1>
    1bd8:	8f ef       	ldi	r24, 0xFF	; 255
    1bda:	9f ef       	ldi	r25, 0xFF	; 255
    1bdc:	a8 e0       	ldi	r26, 0x08	; 8
    1bde:	81 50       	subi	r24, 0x01	; 1
    1be0:	90 40       	sbci	r25, 0x00	; 0
    1be2:	a0 40       	sbci	r26, 0x00	; 0
    1be4:	e1 f7       	brne	.-8      	; 0x1bde <main+0x20>
    1be6:	00 c0       	rjmp	.+0      	; 0x1be8 <main+0x2a>
    1be8:	00 00       	nop
	_delay_ms(200);                        //repositioning the servo at default angle(80 degrees)
	servo_1_free();
    1bea:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <servo_1_free>
	
	//I2C device id check
	check_status(i2c_getbyte(DEV_ADD, WHO_AM_I,&devid));
    1bee:	80 ed       	ldi	r24, 0xD0	; 208
    1bf0:	65 e7       	ldi	r22, 0x75	; 117
    1bf2:	43 e9       	ldi	r20, 0x93	; 147
    1bf4:	52 e0       	ldi	r21, 0x02	; 2
    1bf6:	0e 94 07 01 	call	0x20e	; 0x20e <i2c_getbyte>
    1bfa:	0e 94 02 08 	call	0x1004	; 0x1004 <check_status>
	if(devid != DEV_ID_VAL)
    1bfe:	80 91 93 02 	lds	r24, 0x0293
    1c02:	88 36       	cpi	r24, 0x68	; 104
    1c04:	d9 f0       	breq	.+54     	; 0x1c3c <main+0x7e>
	{
		lcd_cursor(1,2);
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	62 e0       	ldi	r22, 0x02	; 2
    1c0a:	0e 94 cc 02 	call	0x598	; 0x598 <lcd_cursor>
    1c0e:	8f ef       	ldi	r24, 0xFF	; 255
    1c10:	9f e3       	ldi	r25, 0x3F	; 63
    1c12:	a2 e0       	ldi	r26, 0x02	; 2
    1c14:	81 50       	subi	r24, 0x01	; 1
    1c16:	90 40       	sbci	r25, 0x00	; 0
    1c18:	a0 40       	sbci	r26, 0x00	; 0
    1c1a:	e1 f7       	brne	.-8      	; 0x1c14 <main+0x56>
    1c1c:	00 c0       	rjmp	.+0      	; 0x1c1e <main+0x60>
    1c1e:	00 00       	nop
		_delay_ms(50);
		lcd_string("Wrng Dev ID");
    1c20:	8e e0       	ldi	r24, 0x0E	; 14
    1c22:	92 e0       	ldi	r25, 0x02	; 2
    1c24:	0e 94 bd 02 	call	0x57a	; 0x57a <lcd_string>
    1c28:	8f ef       	ldi	r24, 0xFF	; 255
    1c2a:	9f e3       	ldi	r25, 0x3F	; 63
    1c2c:	a2 e0       	ldi	r26, 0x02	; 2
    1c2e:	81 50       	subi	r24, 0x01	; 1
    1c30:	90 40       	sbci	r25, 0x00	; 0
    1c32:	a0 40       	sbci	r26, 0x00	; 0
    1c34:	e1 f7       	brne	.-8      	; 0x1c2e <main+0x70>
    1c36:	00 c0       	rjmp	.+0      	; 0x1c38 <main+0x7a>
    1c38:	00 00       	nop
    1c3a:	ff cf       	rjmp	.-2      	; 0x1c3a <main+0x7c>
		_delay_ms(50);
		while(1);			//Invalid Device id
	}
	check_status(i2c_sendbyte(DEV_ADD, INIT_REG, INIT_VAL)); //initializing the device when device id is correct.
    1c3c:	80 ed       	ldi	r24, 0xD0	; 208
    1c3e:	6b e6       	ldi	r22, 0x6B	; 107
    1c40:	40 e0       	ldi	r20, 0x00	; 0
    1c42:	0e 94 c4 00 	call	0x188	; 0x188 <i2c_sendbyte>
    1c46:	0e 94 02 08 	call	0x1004	; 0x1004 <check_status>
	check_status(i2c_sendbyte(DEV_ADD, INIT_REG_ACC, INIT_VAL)); //initializing the device when device id is correct.
    1c4a:	80 ed       	ldi	r24, 0xD0	; 208
    1c4c:	6c e1       	ldi	r22, 0x1C	; 28
    1c4e:	40 e0       	ldi	r20, 0x00	; 0
    1c50:	0e 94 c4 00 	call	0x188	; 0x188 <i2c_sendbyte>
    1c54:	0e 94 02 08 	call	0x1004	; 0x1004 <check_status>
	check_status(i2c_sendbyte(DEV_ADD, INIT_REG_GYRO, INIT_VAL)); //initializing the device when device id is correct.
    1c58:	80 ed       	ldi	r24, 0xD0	; 208
    1c5a:	6b e1       	ldi	r22, 0x1B	; 27
    1c5c:	40 e0       	ldi	r20, 0x00	; 0
    1c5e:	0e 94 c4 00 	call	0x188	; 0x188 <i2c_sendbyte>
    1c62:	0e 94 02 08 	call	0x1004	; 0x1004 <check_status>
	
	run=1;
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	80 93 5d 02 	sts	0x025D, r24
			if(flag_node==0)
			{
				stop_bot();
				_delay_ms(400);
				node_detector();
				flag_node=1;
    1c6c:	d1 e0       	ldi	r29, 0x01	; 1
			IR1=ADC_Conversion(4);
			if(IR1 < 150)
			{
				stop_bot();
				object_detector();
				flag_left_object=2;
    1c6e:	c2 e0       	ldi	r28, 0x02	; 2
		}
		if((flag_Shape == 0) && (IR1<100 && IR5<100) && (pathL > 2 && pathL < 60))    //tunnel detection   (flag_S4==0) && 
		{
			flag_S4=1;
			flag_Shape=1;
			shape_type='4';
    1c70:	14 e3       	ldi	r17, 0x34	; 52
		}
		
		if((flag_S1_count >= 10) && (flag_S1 == 1) && ( flag_Shape == 1 ))
		{
			buzzer_beep();
			shape_type='1';
    1c72:	01 e3       	ldi	r16, 0x31	; 49
	check_status(i2c_sendbyte(DEV_ADD, INIT_REG_GYRO, INIT_VAL)); //initializing the device when device id is correct.
	
	run=1;
	while(1)
	{
        sensor_refresh();        //refreshes the ADC values of the sensors.
    1c74:	0e 94 4b 06 	call	0xc96	; 0xc96 <sensor_refresh>
  
		if((L>0x17 && C>0x17 && R>0x17)||(L<0x17 && C>0x17 && R>0x17)||(L>0x17 && C>0x17 && R<0x17))    //node detector
    1c78:	80 91 4d 02 	lds	r24, 0x024D
    1c7c:	88 31       	cpi	r24, 0x18	; 24
    1c7e:	40 f0       	brcs	.+16     	; 0x1c90 <main+0xd2>
    1c80:	80 91 4c 02 	lds	r24, 0x024C
    1c84:	88 31       	cpi	r24, 0x18	; 24
    1c86:	20 f0       	brcs	.+8      	; 0x1c90 <main+0xd2>
    1c88:	80 91 4b 02 	lds	r24, 0x024B
    1c8c:	88 31       	cpi	r24, 0x18	; 24
    1c8e:	c0 f4       	brcc	.+48     	; 0x1cc0 <main+0x102>
    1c90:	80 91 4d 02 	lds	r24, 0x024D
    1c94:	87 31       	cpi	r24, 0x17	; 23
    1c96:	40 f4       	brcc	.+16     	; 0x1ca8 <main+0xea>
    1c98:	80 91 4c 02 	lds	r24, 0x024C
    1c9c:	88 31       	cpi	r24, 0x18	; 24
    1c9e:	20 f0       	brcs	.+8      	; 0x1ca8 <main+0xea>
    1ca0:	80 91 4b 02 	lds	r24, 0x024B
    1ca4:	88 31       	cpi	r24, 0x18	; 24
    1ca6:	60 f4       	brcc	.+24     	; 0x1cc0 <main+0x102>
    1ca8:	80 91 4d 02 	lds	r24, 0x024D
    1cac:	88 31       	cpi	r24, 0x18	; 24
    1cae:	d8 f0       	brcs	.+54     	; 0x1ce6 <main+0x128>
    1cb0:	80 91 4c 02 	lds	r24, 0x024C
    1cb4:	88 31       	cpi	r24, 0x18	; 24
    1cb6:	b8 f0       	brcs	.+46     	; 0x1ce6 <main+0x128>
    1cb8:	80 91 4b 02 	lds	r24, 0x024B
    1cbc:	87 31       	cpi	r24, 0x17	; 23
    1cbe:	98 f4       	brcc	.+38     	; 0x1ce6 <main+0x128>
		{
			if(flag_node==0)
    1cc0:	80 91 5e 02 	lds	r24, 0x025E
    1cc4:	88 23       	and	r24, r24
    1cc6:	79 f4       	brne	.+30     	; 0x1ce6 <main+0x128>
			{
				stop_bot();
    1cc8:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    1ccc:	8f ef       	ldi	r24, 0xFF	; 255
    1cce:	9f ef       	ldi	r25, 0xFF	; 255
    1cd0:	a1 e1       	ldi	r26, 0x11	; 17
    1cd2:	81 50       	subi	r24, 0x01	; 1
    1cd4:	90 40       	sbci	r25, 0x00	; 0
    1cd6:	a0 40       	sbci	r26, 0x00	; 0
    1cd8:	e1 f7       	brne	.-8      	; 0x1cd2 <main+0x114>
    1cda:	00 c0       	rjmp	.+0      	; 0x1cdc <main+0x11e>
    1cdc:	00 00       	nop
				_delay_ms(400);
				node_detector();
    1cde:	0e 94 48 0a 	call	0x1490	; 0x1490 <node_detector>
				flag_node=1;
    1ce2:	d0 93 5e 02 	sts	0x025E, r29
			}
		}
		
		if((IR3 < 0x70) && (pathL < 15))            //condition for obstacle detection
    1ce6:	80 91 48 02 	lds	r24, 0x0248
    1cea:	80 37       	cpi	r24, 0x70	; 112
    1cec:	88 f4       	brcc	.+34     	; 0x1d10 <main+0x152>
    1cee:	80 91 4f 02 	lds	r24, 0x024F
    1cf2:	8f 30       	cpi	r24, 0x0F	; 15
    1cf4:	68 f4       	brcc	.+26     	; 0x1d10 <main+0x152>
		{
			stop_bot();
    1cf6:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
    1cfa:	8f ef       	ldi	r24, 0xFF	; 255
    1cfc:	9f ef       	ldi	r25, 0xFF	; 255
    1cfe:	a1 e1       	ldi	r26, 0x11	; 17
    1d00:	81 50       	subi	r24, 0x01	; 1
    1d02:	90 40       	sbci	r25, 0x00	; 0
    1d04:	a0 40       	sbci	r26, 0x00	; 0
    1d06:	e1 f7       	brne	.-8      	; 0x1d00 <main+0x142>
    1d08:	00 c0       	rjmp	.+0      	; 0x1d0a <main+0x14c>
    1d0a:	00 00       	nop
			_delay_ms(400);
			obstacle_detector();     
    1d0c:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <obstacle_detector>
		}
		
		if((pathL > 20) || (pathR > 20))          //to avoid multiple node count
    1d10:	80 91 4f 02 	lds	r24, 0x024F
    1d14:	85 31       	cpi	r24, 0x15	; 21
    1d16:	20 f4       	brcc	.+8      	; 0x1d20 <main+0x162>
    1d18:	80 91 4e 02 	lds	r24, 0x024E
    1d1c:	85 31       	cpi	r24, 0x15	; 21
    1d1e:	10 f0       	brcs	.+4      	; 0x1d24 <main+0x166>
		{
			flag_node=0;
    1d20:	10 92 5e 02 	sts	0x025E, r1
		}
		
		if ((SHARP1 > 100 && SHARP1 < 160) && ( flag_left_object==0 ) && (pathL > 25 && pathL < 40))   //when left object is detected.
    1d24:	80 91 45 02 	lds	r24, 0x0245
    1d28:	85 36       	cpi	r24, 0x65	; 101
    1d2a:	38 f1       	brcs	.+78     	; 0x1d7a <main+0x1bc>
    1d2c:	80 91 45 02 	lds	r24, 0x0245
    1d30:	80 3a       	cpi	r24, 0xA0	; 160
    1d32:	18 f5       	brcc	.+70     	; 0x1d7a <main+0x1bc>
    1d34:	80 91 51 02 	lds	r24, 0x0251
    1d38:	88 23       	and	r24, r24
    1d3a:	f9 f4       	brne	.+62     	; 0x1d7a <main+0x1bc>
    1d3c:	80 91 4f 02 	lds	r24, 0x024F
    1d40:	8a 31       	cpi	r24, 0x1A	; 26
    1d42:	d8 f0       	brcs	.+54     	; 0x1d7a <main+0x1bc>
    1d44:	80 91 4f 02 	lds	r24, 0x024F
    1d48:	88 32       	cpi	r24, 0x28	; 40
    1d4a:	b8 f4       	brcc	.+46     	; 0x1d7a <main+0x1bc>
		{
			flag_left_object=1;
    1d4c:	d0 93 51 02 	sts	0x0251, r29
			IR1=ADC_Conversion(4);
    1d50:	84 e0       	ldi	r24, 0x04	; 4
    1d52:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <ADC_Conversion>
    1d56:	80 93 4a 02 	sts	0x024A, r24
			if(IR1 < 150)
    1d5a:	80 91 4a 02 	lds	r24, 0x024A
    1d5e:	86 39       	cpi	r24, 0x96	; 150
    1d60:	60 f4       	brcc	.+24     	; 0x1d7a <main+0x1bc>
			{
				stop_bot();
    1d62:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
				object_detector();
    1d66:	0e 94 b8 07 	call	0xf70	; 0xf70 <object_detector>
				flag_left_object=2;
    1d6a:	c0 93 51 02 	sts	0x0251, r28
				forward();
    1d6e:	0e 94 16 05 	call	0xa2c	; 0xa2c <forward>
				velocity(140,140);
    1d72:	8c e8       	ldi	r24, 0x8C	; 140
    1d74:	6c e8       	ldi	r22, 0x8C	; 140
    1d76:	0e 94 0b 05 	call	0xa16	; 0xa16 <velocity>
			}		
		}
		SHARP5=ADC_Conversion(13); 
    1d7a:	8d e0       	ldi	r24, 0x0D	; 13
    1d7c:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <ADC_Conversion>
    1d80:	80 93 44 02 	sts	0x0244, r24
		if ((SHARP5 > 48 && SHARP5 < 100) && (flag_right_object==0) && (pathR > 25 && pathR < 40))   //when right object is detected
    1d84:	80 91 44 02 	lds	r24, 0x0244
    1d88:	81 33       	cpi	r24, 0x31	; 49
    1d8a:	38 f1       	brcs	.+78     	; 0x1dda <main+0x21c>
    1d8c:	80 91 44 02 	lds	r24, 0x0244
    1d90:	84 36       	cpi	r24, 0x64	; 100
    1d92:	18 f5       	brcc	.+70     	; 0x1dda <main+0x21c>
    1d94:	80 91 50 02 	lds	r24, 0x0250
    1d98:	88 23       	and	r24, r24
    1d9a:	f9 f4       	brne	.+62     	; 0x1dda <main+0x21c>
    1d9c:	80 91 4e 02 	lds	r24, 0x024E
    1da0:	8a 31       	cpi	r24, 0x1A	; 26
    1da2:	d8 f0       	brcs	.+54     	; 0x1dda <main+0x21c>
    1da4:	80 91 4e 02 	lds	r24, 0x024E
    1da8:	88 32       	cpi	r24, 0x28	; 40
    1daa:	b8 f4       	brcc	.+46     	; 0x1dda <main+0x21c>
		{
			flag_right_object=1;
    1dac:	d0 93 50 02 	sts	0x0250, r29
			IR5=ADC_Conversion(8);
    1db0:	88 e0       	ldi	r24, 0x08	; 8
    1db2:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <ADC_Conversion>
    1db6:	80 93 46 02 	sts	0x0246, r24
			if (IR5 < 152)
    1dba:	80 91 46 02 	lds	r24, 0x0246
    1dbe:	88 39       	cpi	r24, 0x98	; 152
    1dc0:	60 f4       	brcc	.+24     	; 0x1dda <main+0x21c>
			{
				stop_bot();
    1dc2:	0e 94 26 05 	call	0xa4c	; 0xa4c <stop_bot>
				object_detector();
    1dc6:	0e 94 b8 07 	call	0xf70	; 0xf70 <object_detector>
				flag_right_object=2;
    1dca:	c0 93 50 02 	sts	0x0250, r28
				forward();
    1dce:	0e 94 16 05 	call	0xa2c	; 0xa2c <forward>
				velocity(140,140);
    1dd2:	8c e8       	ldi	r24, 0x8C	; 140
    1dd4:	6c e8       	ldi	r22, 0x8C	; 140
    1dd6:	0e 94 0b 05 	call	0xa16	; 0xa16 <velocity>
			}
			
		}
		if((flag_Shape == 0) && (IR1<100 && IR5<100) && (pathL > 2 && pathL < 60))    //tunnel detection   (flag_S4==0) && 
    1dda:	80 91 5c 02 	lds	r24, 0x025C
    1dde:	88 23       	and	r24, r24
    1de0:	41 f5       	brne	.+80     	; 0x1e32 <main+0x274>
    1de2:	80 91 4a 02 	lds	r24, 0x024A
    1de6:	84 36       	cpi	r24, 0x64	; 100
    1de8:	20 f5       	brcc	.+72     	; 0x1e32 <main+0x274>
    1dea:	80 91 46 02 	lds	r24, 0x0246
    1dee:	84 36       	cpi	r24, 0x64	; 100
    1df0:	00 f5       	brcc	.+64     	; 0x1e32 <main+0x274>
    1df2:	80 91 4f 02 	lds	r24, 0x024F
    1df6:	83 30       	cpi	r24, 0x03	; 3
    1df8:	e0 f0       	brcs	.+56     	; 0x1e32 <main+0x274>
    1dfa:	80 91 4f 02 	lds	r24, 0x024F
    1dfe:	8c 33       	cpi	r24, 0x3C	; 60
    1e00:	c0 f4       	brcc	.+48     	; 0x1e32 <main+0x274>
		{
			flag_S4=1;
    1e02:	d0 93 57 02 	sts	0x0257, r29
			flag_Shape=1;
    1e06:	d0 93 5c 02 	sts	0x025C, r29
			shape_type='4';
    1e0a:	10 93 20 02 	sts	0x0220, r17
			buzzer_beep();
    1e0e:	0e 94 be 04 	call	0x97c	; 0x97c <buzzer_beep>
			servo_1(95);
    1e12:	8f e5       	ldi	r24, 0x5F	; 95
    1e14:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <servo_1>
    1e18:	8f ef       	ldi	r24, 0xFF	; 255
    1e1a:	9f e7       	ldi	r25, 0x7F	; 127
    1e1c:	a4 e0       	ldi	r26, 0x04	; 4
    1e1e:	81 50       	subi	r24, 0x01	; 1
    1e20:	90 40       	sbci	r25, 0x00	; 0
    1e22:	a0 40       	sbci	r26, 0x00	; 0
    1e24:	e1 f7       	brne	.-8      	; 0x1e1e <main+0x260>
    1e26:	00 c0       	rjmp	.+0      	; 0x1e28 <main+0x26a>
    1e28:	00 00       	nop
			_delay_ms(100);
			servo_1_free();
    1e2a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <servo_1_free>
			tunnel_traveller();
    1e2e:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <tunnel_traveller>
		}
		
        // line follower
		sensor_refresh();
    1e32:	0e 94 4b 06 	call	0xc96	; 0xc96 <sensor_refresh>
	L1:	if((L<0x17 && C>0x17 && R<0x17))        // 010 
    1e36:	80 91 4d 02 	lds	r24, 0x024D
    1e3a:	87 31       	cpi	r24, 0x17	; 23
    1e3c:	88 f4       	brcc	.+34     	; 0x1e60 <main+0x2a2>
    1e3e:	80 91 4c 02 	lds	r24, 0x024C
    1e42:	88 31       	cpi	r24, 0x18	; 24
    1e44:	68 f0       	brcs	.+26     	; 0x1e60 <main+0x2a2>
    1e46:	80 91 4b 02 	lds	r24, 0x024B
    1e4a:	87 31       	cpi	r24, 0x17	; 23
    1e4c:	48 f4       	brcc	.+18     	; 0x1e60 <main+0x2a2>
		{
			forward_mm(5);
    1e4e:	85 e0       	ldi	r24, 0x05	; 5
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	0e 94 ba 05 	call	0xb74	; 0xb74 <forward_mm>
			velocity(170,172);	
    1e56:	8a ea       	ldi	r24, 0xAA	; 170
    1e58:	6c ea       	ldi	r22, 0xAC	; 172
    1e5a:	0e 94 0b 05 	call	0xa16	; 0xa16 <velocity>
    1e5e:	51 c0       	rjmp	.+162    	; 0x1f02 <main+0x344>
		}
		else if((L<0x17 && C<0x17 && R>0x17))   // 001 0r 011
    1e60:	80 91 4d 02 	lds	r24, 0x024D
    1e64:	87 31       	cpi	r24, 0x17	; 23
    1e66:	f8 f4       	brcc	.+62     	; 0x1ea6 <main+0x2e8>
    1e68:	80 91 4c 02 	lds	r24, 0x024C
    1e6c:	87 31       	cpi	r24, 0x17	; 23
    1e6e:	d8 f4       	brcc	.+54     	; 0x1ea6 <main+0x2e8>
    1e70:	80 91 4b 02 	lds	r24, 0x024B
    1e74:	88 31       	cpi	r24, 0x18	; 24
    1e76:	b8 f0       	brcs	.+46     	; 0x1ea6 <main+0x2e8>
		{
			right_degrees(6);  //soft right}
    1e78:	86 e0       	ldi	r24, 0x06	; 6
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	0e 94 73 05 	call	0xae6	; 0xae6 <right_degrees>
			velocity(150,150);
    1e80:	86 e9       	ldi	r24, 0x96	; 150
    1e82:	66 e9       	ldi	r22, 0x96	; 150
    1e84:	0e 94 0b 05 	call	0xa16	; 0xa16 <velocity>
			C=ADC_Conversion(2);
    1e88:	8c 2f       	mov	r24, r28
    1e8a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <ADC_Conversion>
    1e8e:	80 93 4c 02 	sts	0x024C, r24
			if(C>0x17)
    1e92:	80 91 4c 02 	lds	r24, 0x024C
    1e96:	88 31       	cpi	r24, 0x18	; 24
    1e98:	70 f6       	brcc	.-100    	; 0x1e36 <main+0x278>
				goto L1;
			flag_S1_count++;
    1e9a:	80 91 5a 02 	lds	r24, 0x025A
    1e9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ea0:	80 93 5a 02 	sts	0x025A, r24
    1ea4:	2e c0       	rjmp	.+92     	; 0x1f02 <main+0x344>
		}
		
		else if((L>0x17 && C<0x17 && R<0x17))   // 100
    1ea6:	80 91 4d 02 	lds	r24, 0x024D
    1eaa:	88 31       	cpi	r24, 0x18	; 24
    1eac:	00 f1       	brcs	.+64     	; 0x1eee <main+0x330>
    1eae:	80 91 4c 02 	lds	r24, 0x024C
    1eb2:	87 31       	cpi	r24, 0x17	; 23
    1eb4:	e0 f4       	brcc	.+56     	; 0x1eee <main+0x330>
    1eb6:	80 91 4b 02 	lds	r24, 0x024B
    1eba:	87 31       	cpi	r24, 0x17	; 23
    1ebc:	c0 f4       	brcc	.+48     	; 0x1eee <main+0x330>
		{
			 left_degrees(6);    //soft left
    1ebe:	86 e0       	ldi	r24, 0x06	; 6
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	0e 94 68 05 	call	0xad0	; 0xad0 <left_degrees>
			 velocity(150,150);
    1ec6:	86 e9       	ldi	r24, 0x96	; 150
    1ec8:	66 e9       	ldi	r22, 0x96	; 150
    1eca:	0e 94 0b 05 	call	0xa16	; 0xa16 <velocity>
			 C=ADC_Conversion(2);  
    1ece:	8c 2f       	mov	r24, r28
    1ed0:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <ADC_Conversion>
    1ed4:	80 93 4c 02 	sts	0x024C, r24
			 if(C>0x17)
    1ed8:	80 91 4c 02 	lds	r24, 0x024C
    1edc:	88 31       	cpi	r24, 0x18	; 24
    1ede:	08 f0       	brcs	.+2      	; 0x1ee2 <main+0x324>
    1ee0:	aa cf       	rjmp	.-172    	; 0x1e36 <main+0x278>
				goto L1;
			 flag_S1_count++;
    1ee2:	80 91 5a 02 	lds	r24, 0x025A
    1ee6:	8f 5f       	subi	r24, 0xFF	; 255
    1ee8:	80 93 5a 02 	sts	0x025A, r24
    1eec:	0a c0       	rjmp	.+20     	; 0x1f02 <main+0x344>
		}
		else
		{
			forward_mm(10);
    1eee:	8a e0       	ldi	r24, 0x0A	; 10
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	0e 94 ba 05 	call	0xb74	; 0xb74 <forward_mm>
			velocity(170,172);
    1ef6:	8a ea       	ldi	r24, 0xAA	; 170
    1ef8:	6c ea       	ldi	r22, 0xAC	; 172
    1efa:	0e 94 0b 05 	call	0xa16	; 0xa16 <velocity>
			sensor_refresh();
    1efe:	0e 94 4b 06 	call	0xc96	; 0xc96 <sensor_refresh>
		}
		
		if((flag_S1_count >= 10) && (flag_S1 == 1) && ( flag_Shape == 1 ))
    1f02:	80 91 5a 02 	lds	r24, 0x025A
    1f06:	8a 30       	cpi	r24, 0x0A	; 10
    1f08:	f8 f0       	brcs	.+62     	; 0x1f48 <main+0x38a>
    1f0a:	80 91 5b 02 	lds	r24, 0x025B
    1f0e:	81 30       	cpi	r24, 0x01	; 1
    1f10:	d9 f4       	brne	.+54     	; 0x1f48 <main+0x38a>
    1f12:	80 91 5c 02 	lds	r24, 0x025C
    1f16:	81 30       	cpi	r24, 0x01	; 1
    1f18:	b9 f4       	brne	.+46     	; 0x1f48 <main+0x38a>
		{
			buzzer_beep();
    1f1a:	0e 94 be 04 	call	0x97c	; 0x97c <buzzer_beep>
			shape_type='1';
    1f1e:	00 93 20 02 	sts	0x0220, r16
			lcd_print(1,1,1,3);
    1f22:	8d 2f       	mov	r24, r29
    1f24:	6d 2f       	mov	r22, r29
    1f26:	41 e0       	ldi	r20, 0x01	; 1
    1f28:	50 e0       	ldi	r21, 0x00	; 0
    1f2a:	23 e0       	ldi	r18, 0x03	; 3
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <lcd_print>
    1f32:	86 e6       	ldi	r24, 0x66	; 102
    1f34:	96 ee       	ldi	r25, 0xE6	; 230
    1f36:	a0 e0       	ldi	r26, 0x00	; 0
    1f38:	81 50       	subi	r24, 0x01	; 1
    1f3a:	90 40       	sbci	r25, 0x00	; 0
    1f3c:	a0 40       	sbci	r26, 0x00	; 0
    1f3e:	e1 f7       	brne	.-8      	; 0x1f38 <main+0x37a>
			_delay_ms(20);
			flag_S1=2;
    1f40:	c0 93 5b 02 	sts	0x025B, r28
			flag_S1_count=0;
    1f44:	10 92 5a 02 	sts	0x025A, r1
		}
		I2C_read();              //reads the I2C value
    1f48:	0e 94 74 06 	call	0xce8	; 0xce8 <I2C_read>
		
		if((flag_Shape == 0) && ( rotation_z > 5000 ) && ( rotation_y < 100 ) && (pathR > 20 && pathR < 30))          //prev val- >30  <50  //(flag_S1==0) &&  4500
    1f4c:	80 91 5c 02 	lds	r24, 0x025C
    1f50:	88 23       	and	r24, r24
    1f52:	09 f0       	breq	.+2      	; 0x1f56 <main+0x398>
    1f54:	8f ce       	rjmp	.-738    	; 0x1c74 <main+0xb6>
    1f56:	60 91 24 02 	lds	r22, 0x0224
    1f5a:	70 91 25 02 	lds	r23, 0x0225
    1f5e:	80 91 26 02 	lds	r24, 0x0226
    1f62:	90 91 27 02 	lds	r25, 0x0227
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e4       	ldi	r19, 0x40	; 64
    1f6a:	4c e9       	ldi	r20, 0x9C	; 156
    1f6c:	55 e4       	ldi	r21, 0x45	; 69
    1f6e:	0e 94 15 12 	call	0x242a	; 0x242a <__gesf2>
    1f72:	18 16       	cp	r1, r24
    1f74:	ec f4       	brge	.+58     	; 0x1fb0 <main+0x3f2>
    1f76:	60 91 28 02 	lds	r22, 0x0228
    1f7a:	70 91 29 02 	lds	r23, 0x0229
    1f7e:	80 91 2a 02 	lds	r24, 0x022A
    1f82:	90 91 2b 02 	lds	r25, 0x022B
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	48 ec       	ldi	r20, 0xC8	; 200
    1f8c:	52 e4       	ldi	r21, 0x42	; 66
    1f8e:	0e 94 cb 10 	call	0x2196	; 0x2196 <__cmpsf2>
    1f92:	88 23       	and	r24, r24
    1f94:	6c f4       	brge	.+26     	; 0x1fb0 <main+0x3f2>
    1f96:	80 91 4e 02 	lds	r24, 0x024E
    1f9a:	85 31       	cpi	r24, 0x15	; 21
    1f9c:	48 f0       	brcs	.+18     	; 0x1fb0 <main+0x3f2>
    1f9e:	80 91 4e 02 	lds	r24, 0x024E
    1fa2:	8e 31       	cpi	r24, 0x1E	; 30
    1fa4:	28 f4       	brcc	.+10     	; 0x1fb0 <main+0x3f2>
		{
			flag_S1=1;
    1fa6:	d0 93 5b 02 	sts	0x025B, r29
			flag_Shape=1;				
    1faa:	d0 93 5c 02 	sts	0x025C, r29
    1fae:	62 ce       	rjmp	.-828    	; 0x1c74 <main+0xb6>
		}
		else if((flag_Shape == 0) && ( force_x > 5500 ) && (pathR > 15 && pathR < 30))            //  (flag_S2==0) &&   //prev val-force_x > 3000 && force_x < 4000  //bigger hump detector
    1fb0:	c0 90 2c 02 	lds	r12, 0x022C
    1fb4:	d0 90 2d 02 	lds	r13, 0x022D
    1fb8:	e0 90 2e 02 	lds	r14, 0x022E
    1fbc:	f0 90 2f 02 	lds	r15, 0x022F
    1fc0:	c7 01       	movw	r24, r14
    1fc2:	b6 01       	movw	r22, r12
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 ee       	ldi	r19, 0xE0	; 224
    1fc8:	4b ea       	ldi	r20, 0xAB	; 171
    1fca:	55 e4       	ldi	r21, 0x45	; 69
    1fcc:	0e 94 15 12 	call	0x242a	; 0x242a <__gesf2>
    1fd0:	18 16       	cp	r1, r24
    1fd2:	94 f5       	brge	.+100    	; 0x2038 <main+0x47a>
    1fd4:	80 91 4e 02 	lds	r24, 0x024E
    1fd8:	80 31       	cpi	r24, 0x10	; 16
    1fda:	70 f1       	brcs	.+92     	; 0x2038 <main+0x47a>
    1fdc:	80 91 4e 02 	lds	r24, 0x024E
    1fe0:	8e 31       	cpi	r24, 0x1E	; 30
    1fe2:	50 f5       	brcc	.+84     	; 0x2038 <main+0x47a>
		{
			if (rotation_y > 700)
    1fe4:	60 91 28 02 	lds	r22, 0x0228
    1fe8:	70 91 29 02 	lds	r23, 0x0229
    1fec:	80 91 2a 02 	lds	r24, 0x022A
    1ff0:	90 91 2b 02 	lds	r25, 0x022B
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	4f e2       	ldi	r20, 0x2F	; 47
    1ffa:	54 e4       	ldi	r21, 0x44	; 68
    1ffc:	0e 94 15 12 	call	0x242a	; 0x242a <__gesf2>
    2000:	18 16       	cp	r1, r24
    2002:	0c f0       	brlt	.+2      	; 0x2006 <main+0x448>
    2004:	37 ce       	rjmp	.-914    	; 0x1c74 <main+0xb6>
			{
				flag_S2=1;
    2006:	d0 93 59 02 	sts	0x0259, r29
				flag_Shape=1;
    200a:	d0 93 5c 02 	sts	0x025C, r29
				buzzer_beep();
    200e:	0e 94 be 04 	call	0x97c	; 0x97c <buzzer_beep>
				shape_type='2';
    2012:	92 e3       	ldi	r25, 0x32	; 50
    2014:	90 93 20 02 	sts	0x0220, r25
				lcd_print(1,1,2,3);
    2018:	8d 2f       	mov	r24, r29
    201a:	6d 2f       	mov	r22, r29
    201c:	42 e0       	ldi	r20, 0x02	; 2
    201e:	50 e0       	ldi	r21, 0x00	; 0
    2020:	23 e0       	ldi	r18, 0x03	; 3
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <lcd_print>
    2028:	86 e6       	ldi	r24, 0x66	; 102
    202a:	96 ee       	ldi	r25, 0xE6	; 230
    202c:	a0 e0       	ldi	r26, 0x00	; 0
    202e:	81 50       	subi	r24, 0x01	; 1
    2030:	90 40       	sbci	r25, 0x00	; 0
    2032:	a0 40       	sbci	r26, 0x00	; 0
    2034:	e1 f7       	brne	.-8      	; 0x202e <main+0x470>
    2036:	1e ce       	rjmp	.-964    	; 0x1c74 <main+0xb6>
				_delay_ms(20);
			}
		}
		else if((flag_Shape == 0) && ( force_x > 3300 && force_x < 4300 ) && (pathR > 25 && pathR < 40 ))        //(flag_S3==0) &&    // force_x > 700 && force_x < 1500    //smaller hump detector
    2038:	c7 01       	movw	r24, r14
    203a:	b6 01       	movw	r22, r12
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e4       	ldi	r19, 0x40	; 64
    2040:	4e e4       	ldi	r20, 0x4E	; 78
    2042:	55 e4       	ldi	r21, 0x45	; 69
    2044:	0e 94 15 12 	call	0x242a	; 0x242a <__gesf2>
    2048:	18 16       	cp	r1, r24
    204a:	0c f0       	brlt	.+2      	; 0x204e <main+0x490>
    204c:	13 ce       	rjmp	.-986    	; 0x1c74 <main+0xb6>
    204e:	c7 01       	movw	r24, r14
    2050:	b6 01       	movw	r22, r12
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e6       	ldi	r19, 0x60	; 96
    2056:	46 e8       	ldi	r20, 0x86	; 134
    2058:	55 e4       	ldi	r21, 0x45	; 69
    205a:	0e 94 cb 10 	call	0x2196	; 0x2196 <__cmpsf2>
    205e:	88 23       	and	r24, r24
    2060:	0c f0       	brlt	.+2      	; 0x2064 <main+0x4a6>
    2062:	08 ce       	rjmp	.-1008   	; 0x1c74 <main+0xb6>
    2064:	80 91 4e 02 	lds	r24, 0x024E
    2068:	8a 31       	cpi	r24, 0x1A	; 26
    206a:	08 f4       	brcc	.+2      	; 0x206e <main+0x4b0>
    206c:	03 ce       	rjmp	.-1018   	; 0x1c74 <main+0xb6>
    206e:	80 91 4e 02 	lds	r24, 0x024E
    2072:	88 32       	cpi	r24, 0x28	; 40
    2074:	08 f0       	brcs	.+2      	; 0x2078 <main+0x4ba>
    2076:	fe cd       	rjmp	.-1028   	; 0x1c74 <main+0xb6>
		{
			if (rotation_y > 700)
    2078:	60 91 28 02 	lds	r22, 0x0228
    207c:	70 91 29 02 	lds	r23, 0x0229
    2080:	80 91 2a 02 	lds	r24, 0x022A
    2084:	90 91 2b 02 	lds	r25, 0x022B
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	4f e2       	ldi	r20, 0x2F	; 47
    208e:	54 e4       	ldi	r21, 0x44	; 68
    2090:	0e 94 15 12 	call	0x242a	; 0x242a <__gesf2>
    2094:	18 16       	cp	r1, r24
    2096:	0c f0       	brlt	.+2      	; 0x209a <main+0x4dc>
    2098:	ed cd       	rjmp	.-1062   	; 0x1c74 <main+0xb6>
			{
				flag_S3=1;
    209a:	d0 93 58 02 	sts	0x0258, r29
				flag_Shape=1;
    209e:	d0 93 5c 02 	sts	0x025C, r29
				buzzer_beep();
    20a2:	0e 94 be 04 	call	0x97c	; 0x97c <buzzer_beep>
				shape_type='3';
    20a6:	93 e3       	ldi	r25, 0x33	; 51
    20a8:	90 93 20 02 	sts	0x0220, r25
				lcd_print(1,1,3,3);
    20ac:	8d 2f       	mov	r24, r29
    20ae:	6d 2f       	mov	r22, r29
    20b0:	43 e0       	ldi	r20, 0x03	; 3
    20b2:	50 e0       	ldi	r21, 0x00	; 0
    20b4:	23 e0       	ldi	r18, 0x03	; 3
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <lcd_print>
    20bc:	86 e6       	ldi	r24, 0x66	; 102
    20be:	96 ee       	ldi	r25, 0xE6	; 230
    20c0:	a0 e0       	ldi	r26, 0x00	; 0
    20c2:	81 50       	subi	r24, 0x01	; 1
    20c4:	90 40       	sbci	r25, 0x00	; 0
    20c6:	a0 40       	sbci	r26, 0x00	; 0
    20c8:	e1 f7       	brne	.-8      	; 0x20c2 <main+0x504>
    20ca:	d4 cd       	rjmp	.-1112   	; 0x1c74 <main+0xb6>

000020cc <__subsf3>:
    20cc:	50 58       	subi	r21, 0x80	; 128

000020ce <__addsf3>:
    20ce:	bb 27       	eor	r27, r27
    20d0:	aa 27       	eor	r26, r26
    20d2:	0e d0       	rcall	.+28     	; 0x20f0 <__addsf3x>
    20d4:	70 c1       	rjmp	.+736    	; 0x23b6 <__fp_round>
    20d6:	61 d1       	rcall	.+706    	; 0x239a <__fp_pscA>
    20d8:	30 f0       	brcs	.+12     	; 0x20e6 <__addsf3+0x18>
    20da:	66 d1       	rcall	.+716    	; 0x23a8 <__fp_pscB>
    20dc:	20 f0       	brcs	.+8      	; 0x20e6 <__addsf3+0x18>
    20de:	31 f4       	brne	.+12     	; 0x20ec <__addsf3+0x1e>
    20e0:	9f 3f       	cpi	r25, 0xFF	; 255
    20e2:	11 f4       	brne	.+4      	; 0x20e8 <__addsf3+0x1a>
    20e4:	1e f4       	brtc	.+6      	; 0x20ec <__addsf3+0x1e>
    20e6:	56 c1       	rjmp	.+684    	; 0x2394 <__fp_nan>
    20e8:	0e f4       	brtc	.+2      	; 0x20ec <__addsf3+0x1e>
    20ea:	e0 95       	com	r30
    20ec:	e7 fb       	bst	r30, 7
    20ee:	4c c1       	rjmp	.+664    	; 0x2388 <__fp_inf>

000020f0 <__addsf3x>:
    20f0:	e9 2f       	mov	r30, r25
    20f2:	72 d1       	rcall	.+740    	; 0x23d8 <__fp_split3>
    20f4:	80 f3       	brcs	.-32     	; 0x20d6 <__addsf3+0x8>
    20f6:	ba 17       	cp	r27, r26
    20f8:	62 07       	cpc	r22, r18
    20fa:	73 07       	cpc	r23, r19
    20fc:	84 07       	cpc	r24, r20
    20fe:	95 07       	cpc	r25, r21
    2100:	18 f0       	brcs	.+6      	; 0x2108 <__addsf3x+0x18>
    2102:	71 f4       	brne	.+28     	; 0x2120 <__addsf3x+0x30>
    2104:	9e f5       	brtc	.+102    	; 0x216c <__addsf3x+0x7c>
    2106:	8a c1       	rjmp	.+788    	; 0x241c <__fp_zero>
    2108:	0e f4       	brtc	.+2      	; 0x210c <__addsf3x+0x1c>
    210a:	e0 95       	com	r30
    210c:	0b 2e       	mov	r0, r27
    210e:	ba 2f       	mov	r27, r26
    2110:	a0 2d       	mov	r26, r0
    2112:	0b 01       	movw	r0, r22
    2114:	b9 01       	movw	r22, r18
    2116:	90 01       	movw	r18, r0
    2118:	0c 01       	movw	r0, r24
    211a:	ca 01       	movw	r24, r20
    211c:	a0 01       	movw	r20, r0
    211e:	11 24       	eor	r1, r1
    2120:	ff 27       	eor	r31, r31
    2122:	59 1b       	sub	r21, r25
    2124:	99 f0       	breq	.+38     	; 0x214c <__addsf3x+0x5c>
    2126:	59 3f       	cpi	r21, 0xF9	; 249
    2128:	50 f4       	brcc	.+20     	; 0x213e <__addsf3x+0x4e>
    212a:	50 3e       	cpi	r21, 0xE0	; 224
    212c:	68 f1       	brcs	.+90     	; 0x2188 <__addsf3x+0x98>
    212e:	1a 16       	cp	r1, r26
    2130:	f0 40       	sbci	r31, 0x00	; 0
    2132:	a2 2f       	mov	r26, r18
    2134:	23 2f       	mov	r18, r19
    2136:	34 2f       	mov	r19, r20
    2138:	44 27       	eor	r20, r20
    213a:	58 5f       	subi	r21, 0xF8	; 248
    213c:	f3 cf       	rjmp	.-26     	; 0x2124 <__addsf3x+0x34>
    213e:	46 95       	lsr	r20
    2140:	37 95       	ror	r19
    2142:	27 95       	ror	r18
    2144:	a7 95       	ror	r26
    2146:	f0 40       	sbci	r31, 0x00	; 0
    2148:	53 95       	inc	r21
    214a:	c9 f7       	brne	.-14     	; 0x213e <__addsf3x+0x4e>
    214c:	7e f4       	brtc	.+30     	; 0x216c <__addsf3x+0x7c>
    214e:	1f 16       	cp	r1, r31
    2150:	ba 0b       	sbc	r27, r26
    2152:	62 0b       	sbc	r22, r18
    2154:	73 0b       	sbc	r23, r19
    2156:	84 0b       	sbc	r24, r20
    2158:	ba f0       	brmi	.+46     	; 0x2188 <__addsf3x+0x98>
    215a:	91 50       	subi	r25, 0x01	; 1
    215c:	a1 f0       	breq	.+40     	; 0x2186 <__addsf3x+0x96>
    215e:	ff 0f       	add	r31, r31
    2160:	bb 1f       	adc	r27, r27
    2162:	66 1f       	adc	r22, r22
    2164:	77 1f       	adc	r23, r23
    2166:	88 1f       	adc	r24, r24
    2168:	c2 f7       	brpl	.-16     	; 0x215a <__addsf3x+0x6a>
    216a:	0e c0       	rjmp	.+28     	; 0x2188 <__addsf3x+0x98>
    216c:	ba 0f       	add	r27, r26
    216e:	62 1f       	adc	r22, r18
    2170:	73 1f       	adc	r23, r19
    2172:	84 1f       	adc	r24, r20
    2174:	48 f4       	brcc	.+18     	; 0x2188 <__addsf3x+0x98>
    2176:	87 95       	ror	r24
    2178:	77 95       	ror	r23
    217a:	67 95       	ror	r22
    217c:	b7 95       	ror	r27
    217e:	f7 95       	ror	r31
    2180:	9e 3f       	cpi	r25, 0xFE	; 254
    2182:	08 f0       	brcs	.+2      	; 0x2186 <__addsf3x+0x96>
    2184:	b3 cf       	rjmp	.-154    	; 0x20ec <__addsf3+0x1e>
    2186:	93 95       	inc	r25
    2188:	88 0f       	add	r24, r24
    218a:	08 f0       	brcs	.+2      	; 0x218e <__addsf3x+0x9e>
    218c:	99 27       	eor	r25, r25
    218e:	ee 0f       	add	r30, r30
    2190:	97 95       	ror	r25
    2192:	87 95       	ror	r24
    2194:	08 95       	ret

00002196 <__cmpsf2>:
    2196:	d4 d0       	rcall	.+424    	; 0x2340 <__fp_cmp>
    2198:	08 f4       	brcc	.+2      	; 0x219c <__cmpsf2+0x6>
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	08 95       	ret

0000219e <__divsf3>:
    219e:	0c d0       	rcall	.+24     	; 0x21b8 <__divsf3x>
    21a0:	0a c1       	rjmp	.+532    	; 0x23b6 <__fp_round>
    21a2:	02 d1       	rcall	.+516    	; 0x23a8 <__fp_pscB>
    21a4:	40 f0       	brcs	.+16     	; 0x21b6 <__divsf3+0x18>
    21a6:	f9 d0       	rcall	.+498    	; 0x239a <__fp_pscA>
    21a8:	30 f0       	brcs	.+12     	; 0x21b6 <__divsf3+0x18>
    21aa:	21 f4       	brne	.+8      	; 0x21b4 <__divsf3+0x16>
    21ac:	5f 3f       	cpi	r21, 0xFF	; 255
    21ae:	19 f0       	breq	.+6      	; 0x21b6 <__divsf3+0x18>
    21b0:	eb c0       	rjmp	.+470    	; 0x2388 <__fp_inf>
    21b2:	51 11       	cpse	r21, r1
    21b4:	34 c1       	rjmp	.+616    	; 0x241e <__fp_szero>
    21b6:	ee c0       	rjmp	.+476    	; 0x2394 <__fp_nan>

000021b8 <__divsf3x>:
    21b8:	0f d1       	rcall	.+542    	; 0x23d8 <__fp_split3>
    21ba:	98 f3       	brcs	.-26     	; 0x21a2 <__divsf3+0x4>

000021bc <__divsf3_pse>:
    21bc:	99 23       	and	r25, r25
    21be:	c9 f3       	breq	.-14     	; 0x21b2 <__divsf3+0x14>
    21c0:	55 23       	and	r21, r21
    21c2:	b1 f3       	breq	.-20     	; 0x21b0 <__divsf3+0x12>
    21c4:	95 1b       	sub	r25, r21
    21c6:	55 0b       	sbc	r21, r21
    21c8:	bb 27       	eor	r27, r27
    21ca:	aa 27       	eor	r26, r26
    21cc:	62 17       	cp	r22, r18
    21ce:	73 07       	cpc	r23, r19
    21d0:	84 07       	cpc	r24, r20
    21d2:	38 f0       	brcs	.+14     	; 0x21e2 <__divsf3_pse+0x26>
    21d4:	9f 5f       	subi	r25, 0xFF	; 255
    21d6:	5f 4f       	sbci	r21, 0xFF	; 255
    21d8:	22 0f       	add	r18, r18
    21da:	33 1f       	adc	r19, r19
    21dc:	44 1f       	adc	r20, r20
    21de:	aa 1f       	adc	r26, r26
    21e0:	a9 f3       	breq	.-22     	; 0x21cc <__divsf3_pse+0x10>
    21e2:	33 d0       	rcall	.+102    	; 0x224a <__stack+0x4b>
    21e4:	0e 2e       	mov	r0, r30
    21e6:	3a f0       	brmi	.+14     	; 0x21f6 <__divsf3_pse+0x3a>
    21e8:	e0 e8       	ldi	r30, 0x80	; 128
    21ea:	30 d0       	rcall	.+96     	; 0x224c <__stack+0x4d>
    21ec:	91 50       	subi	r25, 0x01	; 1
    21ee:	50 40       	sbci	r21, 0x00	; 0
    21f0:	e6 95       	lsr	r30
    21f2:	00 1c       	adc	r0, r0
    21f4:	ca f7       	brpl	.-14     	; 0x21e8 <__divsf3_pse+0x2c>
    21f6:	29 d0       	rcall	.+82     	; 0x224a <__stack+0x4b>
    21f8:	fe 2f       	mov	r31, r30
    21fa:	27 d0       	rcall	.+78     	; 0x224a <__stack+0x4b>
    21fc:	66 0f       	add	r22, r22
    21fe:	77 1f       	adc	r23, r23
    2200:	88 1f       	adc	r24, r24
    2202:	bb 1f       	adc	r27, r27
    2204:	26 17       	cp	r18, r22
    2206:	37 07       	cpc	r19, r23
    2208:	48 07       	cpc	r20, r24
    220a:	ab 07       	cpc	r26, r27
    220c:	b0 e8       	ldi	r27, 0x80	; 128
    220e:	09 f0       	breq	.+2      	; 0x2212 <__stack+0x13>
    2210:	bb 0b       	sbc	r27, r27
    2212:	80 2d       	mov	r24, r0
    2214:	bf 01       	movw	r22, r30
    2216:	ff 27       	eor	r31, r31
    2218:	93 58       	subi	r25, 0x83	; 131
    221a:	5f 4f       	sbci	r21, 0xFF	; 255
    221c:	2a f0       	brmi	.+10     	; 0x2228 <__stack+0x29>
    221e:	9e 3f       	cpi	r25, 0xFE	; 254
    2220:	51 05       	cpc	r21, r1
    2222:	68 f0       	brcs	.+26     	; 0x223e <__stack+0x3f>
    2224:	b1 c0       	rjmp	.+354    	; 0x2388 <__fp_inf>
    2226:	fb c0       	rjmp	.+502    	; 0x241e <__fp_szero>
    2228:	5f 3f       	cpi	r21, 0xFF	; 255
    222a:	ec f3       	brlt	.-6      	; 0x2226 <__stack+0x27>
    222c:	98 3e       	cpi	r25, 0xE8	; 232
    222e:	dc f3       	brlt	.-10     	; 0x2226 <__stack+0x27>
    2230:	86 95       	lsr	r24
    2232:	77 95       	ror	r23
    2234:	67 95       	ror	r22
    2236:	b7 95       	ror	r27
    2238:	f7 95       	ror	r31
    223a:	9f 5f       	subi	r25, 0xFF	; 255
    223c:	c9 f7       	brne	.-14     	; 0x2230 <__stack+0x31>
    223e:	88 0f       	add	r24, r24
    2240:	91 1d       	adc	r25, r1
    2242:	96 95       	lsr	r25
    2244:	87 95       	ror	r24
    2246:	97 f9       	bld	r25, 7
    2248:	08 95       	ret
    224a:	e1 e0       	ldi	r30, 0x01	; 1
    224c:	66 0f       	add	r22, r22
    224e:	77 1f       	adc	r23, r23
    2250:	88 1f       	adc	r24, r24
    2252:	bb 1f       	adc	r27, r27
    2254:	62 17       	cp	r22, r18
    2256:	73 07       	cpc	r23, r19
    2258:	84 07       	cpc	r24, r20
    225a:	ba 07       	cpc	r27, r26
    225c:	20 f0       	brcs	.+8      	; 0x2266 <__stack+0x67>
    225e:	62 1b       	sub	r22, r18
    2260:	73 0b       	sbc	r23, r19
    2262:	84 0b       	sbc	r24, r20
    2264:	ba 0b       	sbc	r27, r26
    2266:	ee 1f       	adc	r30, r30
    2268:	88 f7       	brcc	.-30     	; 0x224c <__stack+0x4d>
    226a:	e0 95       	com	r30
    226c:	08 95       	ret

0000226e <__fixunssfsi>:
    226e:	bc d0       	rcall	.+376    	; 0x23e8 <__fp_splitA>
    2270:	88 f0       	brcs	.+34     	; 0x2294 <__fixunssfsi+0x26>
    2272:	9f 57       	subi	r25, 0x7F	; 127
    2274:	90 f0       	brcs	.+36     	; 0x229a <__fixunssfsi+0x2c>
    2276:	b9 2f       	mov	r27, r25
    2278:	99 27       	eor	r25, r25
    227a:	b7 51       	subi	r27, 0x17	; 23
    227c:	a0 f0       	brcs	.+40     	; 0x22a6 <__fixunssfsi+0x38>
    227e:	d1 f0       	breq	.+52     	; 0x22b4 <__fixunssfsi+0x46>
    2280:	66 0f       	add	r22, r22
    2282:	77 1f       	adc	r23, r23
    2284:	88 1f       	adc	r24, r24
    2286:	99 1f       	adc	r25, r25
    2288:	1a f0       	brmi	.+6      	; 0x2290 <__fixunssfsi+0x22>
    228a:	ba 95       	dec	r27
    228c:	c9 f7       	brne	.-14     	; 0x2280 <__fixunssfsi+0x12>
    228e:	12 c0       	rjmp	.+36     	; 0x22b4 <__fixunssfsi+0x46>
    2290:	b1 30       	cpi	r27, 0x01	; 1
    2292:	81 f0       	breq	.+32     	; 0x22b4 <__fixunssfsi+0x46>
    2294:	c3 d0       	rcall	.+390    	; 0x241c <__fp_zero>
    2296:	b1 e0       	ldi	r27, 0x01	; 1
    2298:	08 95       	ret
    229a:	c0 c0       	rjmp	.+384    	; 0x241c <__fp_zero>
    229c:	67 2f       	mov	r22, r23
    229e:	78 2f       	mov	r23, r24
    22a0:	88 27       	eor	r24, r24
    22a2:	b8 5f       	subi	r27, 0xF8	; 248
    22a4:	39 f0       	breq	.+14     	; 0x22b4 <__fixunssfsi+0x46>
    22a6:	b9 3f       	cpi	r27, 0xF9	; 249
    22a8:	cc f3       	brlt	.-14     	; 0x229c <__fixunssfsi+0x2e>
    22aa:	86 95       	lsr	r24
    22ac:	77 95       	ror	r23
    22ae:	67 95       	ror	r22
    22b0:	b3 95       	inc	r27
    22b2:	d9 f7       	brne	.-10     	; 0x22aa <__fixunssfsi+0x3c>
    22b4:	3e f4       	brtc	.+14     	; 0x22c4 <__fixunssfsi+0x56>
    22b6:	90 95       	com	r25
    22b8:	80 95       	com	r24
    22ba:	70 95       	com	r23
    22bc:	61 95       	neg	r22
    22be:	7f 4f       	sbci	r23, 0xFF	; 255
    22c0:	8f 4f       	sbci	r24, 0xFF	; 255
    22c2:	9f 4f       	sbci	r25, 0xFF	; 255
    22c4:	08 95       	ret

000022c6 <__floatunsisf>:
    22c6:	e8 94       	clt
    22c8:	09 c0       	rjmp	.+18     	; 0x22dc <__floatsisf+0x12>

000022ca <__floatsisf>:
    22ca:	97 fb       	bst	r25, 7
    22cc:	3e f4       	brtc	.+14     	; 0x22dc <__floatsisf+0x12>
    22ce:	90 95       	com	r25
    22d0:	80 95       	com	r24
    22d2:	70 95       	com	r23
    22d4:	61 95       	neg	r22
    22d6:	7f 4f       	sbci	r23, 0xFF	; 255
    22d8:	8f 4f       	sbci	r24, 0xFF	; 255
    22da:	9f 4f       	sbci	r25, 0xFF	; 255
    22dc:	99 23       	and	r25, r25
    22de:	a9 f0       	breq	.+42     	; 0x230a <__floatsisf+0x40>
    22e0:	f9 2f       	mov	r31, r25
    22e2:	96 e9       	ldi	r25, 0x96	; 150
    22e4:	bb 27       	eor	r27, r27
    22e6:	93 95       	inc	r25
    22e8:	f6 95       	lsr	r31
    22ea:	87 95       	ror	r24
    22ec:	77 95       	ror	r23
    22ee:	67 95       	ror	r22
    22f0:	b7 95       	ror	r27
    22f2:	f1 11       	cpse	r31, r1
    22f4:	f8 cf       	rjmp	.-16     	; 0x22e6 <__floatsisf+0x1c>
    22f6:	fa f4       	brpl	.+62     	; 0x2336 <__floatsisf+0x6c>
    22f8:	bb 0f       	add	r27, r27
    22fa:	11 f4       	brne	.+4      	; 0x2300 <__floatsisf+0x36>
    22fc:	60 ff       	sbrs	r22, 0
    22fe:	1b c0       	rjmp	.+54     	; 0x2336 <__floatsisf+0x6c>
    2300:	6f 5f       	subi	r22, 0xFF	; 255
    2302:	7f 4f       	sbci	r23, 0xFF	; 255
    2304:	8f 4f       	sbci	r24, 0xFF	; 255
    2306:	9f 4f       	sbci	r25, 0xFF	; 255
    2308:	16 c0       	rjmp	.+44     	; 0x2336 <__floatsisf+0x6c>
    230a:	88 23       	and	r24, r24
    230c:	11 f0       	breq	.+4      	; 0x2312 <__floatsisf+0x48>
    230e:	96 e9       	ldi	r25, 0x96	; 150
    2310:	11 c0       	rjmp	.+34     	; 0x2334 <__floatsisf+0x6a>
    2312:	77 23       	and	r23, r23
    2314:	21 f0       	breq	.+8      	; 0x231e <__floatsisf+0x54>
    2316:	9e e8       	ldi	r25, 0x8E	; 142
    2318:	87 2f       	mov	r24, r23
    231a:	76 2f       	mov	r23, r22
    231c:	05 c0       	rjmp	.+10     	; 0x2328 <__floatsisf+0x5e>
    231e:	66 23       	and	r22, r22
    2320:	71 f0       	breq	.+28     	; 0x233e <__floatsisf+0x74>
    2322:	96 e8       	ldi	r25, 0x86	; 134
    2324:	86 2f       	mov	r24, r22
    2326:	70 e0       	ldi	r23, 0x00	; 0
    2328:	60 e0       	ldi	r22, 0x00	; 0
    232a:	2a f0       	brmi	.+10     	; 0x2336 <__floatsisf+0x6c>
    232c:	9a 95       	dec	r25
    232e:	66 0f       	add	r22, r22
    2330:	77 1f       	adc	r23, r23
    2332:	88 1f       	adc	r24, r24
    2334:	da f7       	brpl	.-10     	; 0x232c <__floatsisf+0x62>
    2336:	88 0f       	add	r24, r24
    2338:	96 95       	lsr	r25
    233a:	87 95       	ror	r24
    233c:	97 f9       	bld	r25, 7
    233e:	08 95       	ret

00002340 <__fp_cmp>:
    2340:	99 0f       	add	r25, r25
    2342:	00 08       	sbc	r0, r0
    2344:	55 0f       	add	r21, r21
    2346:	aa 0b       	sbc	r26, r26
    2348:	e0 e8       	ldi	r30, 0x80	; 128
    234a:	fe ef       	ldi	r31, 0xFE	; 254
    234c:	16 16       	cp	r1, r22
    234e:	17 06       	cpc	r1, r23
    2350:	e8 07       	cpc	r30, r24
    2352:	f9 07       	cpc	r31, r25
    2354:	c0 f0       	brcs	.+48     	; 0x2386 <__fp_cmp+0x46>
    2356:	12 16       	cp	r1, r18
    2358:	13 06       	cpc	r1, r19
    235a:	e4 07       	cpc	r30, r20
    235c:	f5 07       	cpc	r31, r21
    235e:	98 f0       	brcs	.+38     	; 0x2386 <__fp_cmp+0x46>
    2360:	62 1b       	sub	r22, r18
    2362:	73 0b       	sbc	r23, r19
    2364:	84 0b       	sbc	r24, r20
    2366:	95 0b       	sbc	r25, r21
    2368:	39 f4       	brne	.+14     	; 0x2378 <__fp_cmp+0x38>
    236a:	0a 26       	eor	r0, r26
    236c:	61 f0       	breq	.+24     	; 0x2386 <__fp_cmp+0x46>
    236e:	23 2b       	or	r18, r19
    2370:	24 2b       	or	r18, r20
    2372:	25 2b       	or	r18, r21
    2374:	21 f4       	brne	.+8      	; 0x237e <__fp_cmp+0x3e>
    2376:	08 95       	ret
    2378:	0a 26       	eor	r0, r26
    237a:	09 f4       	brne	.+2      	; 0x237e <__fp_cmp+0x3e>
    237c:	a1 40       	sbci	r26, 0x01	; 1
    237e:	a6 95       	lsr	r26
    2380:	8f ef       	ldi	r24, 0xFF	; 255
    2382:	81 1d       	adc	r24, r1
    2384:	81 1d       	adc	r24, r1
    2386:	08 95       	ret

00002388 <__fp_inf>:
    2388:	97 f9       	bld	r25, 7
    238a:	9f 67       	ori	r25, 0x7F	; 127
    238c:	80 e8       	ldi	r24, 0x80	; 128
    238e:	70 e0       	ldi	r23, 0x00	; 0
    2390:	60 e0       	ldi	r22, 0x00	; 0
    2392:	08 95       	ret

00002394 <__fp_nan>:
    2394:	9f ef       	ldi	r25, 0xFF	; 255
    2396:	80 ec       	ldi	r24, 0xC0	; 192
    2398:	08 95       	ret

0000239a <__fp_pscA>:
    239a:	00 24       	eor	r0, r0
    239c:	0a 94       	dec	r0
    239e:	16 16       	cp	r1, r22
    23a0:	17 06       	cpc	r1, r23
    23a2:	18 06       	cpc	r1, r24
    23a4:	09 06       	cpc	r0, r25
    23a6:	08 95       	ret

000023a8 <__fp_pscB>:
    23a8:	00 24       	eor	r0, r0
    23aa:	0a 94       	dec	r0
    23ac:	12 16       	cp	r1, r18
    23ae:	13 06       	cpc	r1, r19
    23b0:	14 06       	cpc	r1, r20
    23b2:	05 06       	cpc	r0, r21
    23b4:	08 95       	ret

000023b6 <__fp_round>:
    23b6:	09 2e       	mov	r0, r25
    23b8:	03 94       	inc	r0
    23ba:	00 0c       	add	r0, r0
    23bc:	11 f4       	brne	.+4      	; 0x23c2 <__fp_round+0xc>
    23be:	88 23       	and	r24, r24
    23c0:	52 f0       	brmi	.+20     	; 0x23d6 <__fp_round+0x20>
    23c2:	bb 0f       	add	r27, r27
    23c4:	40 f4       	brcc	.+16     	; 0x23d6 <__fp_round+0x20>
    23c6:	bf 2b       	or	r27, r31
    23c8:	11 f4       	brne	.+4      	; 0x23ce <__fp_round+0x18>
    23ca:	60 ff       	sbrs	r22, 0
    23cc:	04 c0       	rjmp	.+8      	; 0x23d6 <__fp_round+0x20>
    23ce:	6f 5f       	subi	r22, 0xFF	; 255
    23d0:	7f 4f       	sbci	r23, 0xFF	; 255
    23d2:	8f 4f       	sbci	r24, 0xFF	; 255
    23d4:	9f 4f       	sbci	r25, 0xFF	; 255
    23d6:	08 95       	ret

000023d8 <__fp_split3>:
    23d8:	57 fd       	sbrc	r21, 7
    23da:	90 58       	subi	r25, 0x80	; 128
    23dc:	44 0f       	add	r20, r20
    23de:	55 1f       	adc	r21, r21
    23e0:	59 f0       	breq	.+22     	; 0x23f8 <__fp_splitA+0x10>
    23e2:	5f 3f       	cpi	r21, 0xFF	; 255
    23e4:	71 f0       	breq	.+28     	; 0x2402 <__fp_splitA+0x1a>
    23e6:	47 95       	ror	r20

000023e8 <__fp_splitA>:
    23e8:	88 0f       	add	r24, r24
    23ea:	97 fb       	bst	r25, 7
    23ec:	99 1f       	adc	r25, r25
    23ee:	61 f0       	breq	.+24     	; 0x2408 <__fp_splitA+0x20>
    23f0:	9f 3f       	cpi	r25, 0xFF	; 255
    23f2:	79 f0       	breq	.+30     	; 0x2412 <__fp_splitA+0x2a>
    23f4:	87 95       	ror	r24
    23f6:	08 95       	ret
    23f8:	12 16       	cp	r1, r18
    23fa:	13 06       	cpc	r1, r19
    23fc:	14 06       	cpc	r1, r20
    23fe:	55 1f       	adc	r21, r21
    2400:	f2 cf       	rjmp	.-28     	; 0x23e6 <__fp_split3+0xe>
    2402:	46 95       	lsr	r20
    2404:	f1 df       	rcall	.-30     	; 0x23e8 <__fp_splitA>
    2406:	08 c0       	rjmp	.+16     	; 0x2418 <__fp_splitA+0x30>
    2408:	16 16       	cp	r1, r22
    240a:	17 06       	cpc	r1, r23
    240c:	18 06       	cpc	r1, r24
    240e:	99 1f       	adc	r25, r25
    2410:	f1 cf       	rjmp	.-30     	; 0x23f4 <__fp_splitA+0xc>
    2412:	86 95       	lsr	r24
    2414:	71 05       	cpc	r23, r1
    2416:	61 05       	cpc	r22, r1
    2418:	08 94       	sec
    241a:	08 95       	ret

0000241c <__fp_zero>:
    241c:	e8 94       	clt

0000241e <__fp_szero>:
    241e:	bb 27       	eor	r27, r27
    2420:	66 27       	eor	r22, r22
    2422:	77 27       	eor	r23, r23
    2424:	cb 01       	movw	r24, r22
    2426:	97 f9       	bld	r25, 7
    2428:	08 95       	ret

0000242a <__gesf2>:
    242a:	8a df       	rcall	.-236    	; 0x2340 <__fp_cmp>
    242c:	08 f4       	brcc	.+2      	; 0x2430 <__gesf2+0x6>
    242e:	8f ef       	ldi	r24, 0xFF	; 255
    2430:	08 95       	ret

00002432 <__udivmodhi4>:
    2432:	aa 1b       	sub	r26, r26
    2434:	bb 1b       	sub	r27, r27
    2436:	51 e1       	ldi	r21, 0x11	; 17
    2438:	07 c0       	rjmp	.+14     	; 0x2448 <__udivmodhi4_ep>

0000243a <__udivmodhi4_loop>:
    243a:	aa 1f       	adc	r26, r26
    243c:	bb 1f       	adc	r27, r27
    243e:	a6 17       	cp	r26, r22
    2440:	b7 07       	cpc	r27, r23
    2442:	10 f0       	brcs	.+4      	; 0x2448 <__udivmodhi4_ep>
    2444:	a6 1b       	sub	r26, r22
    2446:	b7 0b       	sbc	r27, r23

00002448 <__udivmodhi4_ep>:
    2448:	88 1f       	adc	r24, r24
    244a:	99 1f       	adc	r25, r25
    244c:	5a 95       	dec	r21
    244e:	a9 f7       	brne	.-22     	; 0x243a <__udivmodhi4_loop>
    2450:	80 95       	com	r24
    2452:	90 95       	com	r25
    2454:	bc 01       	movw	r22, r24
    2456:	cd 01       	movw	r24, r26
    2458:	08 95       	ret

0000245a <_exit>:
    245a:	f8 94       	cli

0000245c <__stop_program>:
    245c:	ff cf       	rjmp	.-2      	; 0x245c <__stop_program>
